Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% (95216)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 219
% Passive clauses: 2445
% Generated clauses: 19893
% Final active clauses: 167
% Final passive clauses: 2045
% Input formulas: 23
% Initial clauses: 44
% 
% Duplicate literals: 761
% Trivial inequalities: 420
% Fw subsumption resolutions: 2137
% Fw demodulations: 3145
% Bw demodulations: 46
% 
% Simple tautologies: 428
% Equational tautologies: 23
% Forward subsumptions: 9766
% Bw demodulations to eq. taut.: 2
% 
% Binary resolution: 527
% Forward superposition: 7288
% Backward superposition: 5124
% Self superposition: 100
% Equality factoring: 47
% Equality resolution: 58
% 
% Split clauses: 496
% Split components: 1003
% SAT solver clauses: 949
% SAT solver unit clauses: 22
% SAT solver binary clauses: 139
% 
% Sat splits: 496
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 947
% TWLsolver calls for satisfiability: 174
% 
% Memory used [KB]: 10746
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvp_to_wordProps
% (95248)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 147
% Passive clauses: 1148
% Generated clauses: 10252
% Final active clauses: 128
% Final passive clauses: 965
% Input formulas: 23
% Initial clauses: 44
% 
% Duplicate literals: 135
% Trivial inequalities: 189
% Fw subsumption resolutions: 437
% Fw demodulations: 2674
% Bw demodulations: 51
% Condensations: 131
% 
% Simple tautologies: 99
% Equational tautologies: 22
% Forward subsumptions: 4050
% 
% Binary resolution: 191
% Forward superposition: 2958
% Backward superposition: 2174
% Self superposition: 47
% Equality factoring: 32
% Equality resolution: 24
% 
% Split clauses: 40
% Split components: 85
% SAT solver clauses: 1374
% SAT solver unit clauses: 44
% SAT solver binary clauses: 29
% 
% Sat splits: 40
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1374
% TWLsolver calls for satisfiability: 282
% 
% Memory used [KB]: 11769
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f34259,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1209,f1212,f1210,f1214,f1243,f1305,f1307,f2652,f2654,f2653,f2679,f2684,f2686,f2687,f2689,f2690,f2692,f2693,f2695,f2697,f2700,f2701,f2702,f2809,f2811,f2810,f2845,f2846,f2850,f2847,f2848,f2856,f2849,f2855,f2902,f2903,f4255,f4258,f4259,f4260,f5865,f5868,f6610,f6057,f6622,f6620,f6085,f6600,f6580,f6579,f6625,f6574,f6573,f6572,f6571,f6562,f6619,f6560,f6642,f6559,f6641,f6558,f6643,f6674,f6675,f6686,f6687,f6689,f6690,f6696,f6697,f6532,f6640,f6525,f6729,f6524,f6730,f6523,f6731,f6522,f6732,f6521,f6733,f6520,f6734,f6519,f6735,f6795,f6796,f6797,f6798,f2699,f6829,f6830,f6831,f6832,f4257,f6833,f2906,f2858,f2905,f2904,f7160,f7164,f7161,f8922,f9239,f9224,f9219,f9243,f9244,f9245,f8961,f9265,f8974,f9264,f8975,f9267,f9268,f9011,f9271,f9021,f9276,f9037,f9277,f9046,f9279,f9051,f9273,f9280,f9210,f9286,f9288,f9289,f9290,f9291,f9292,f9293,f9294,f9295,f9296,f9192,f9297,f9191,f9299,f9190,f9304,f9329,f9287,f9330,f9242,f9336,f9337,f9338,f9302,f9339,f9340,f9341,f9342,f6975,f2853,f9680,f9682,f9684,f9686,f9688,f9690,f9692,f9694,f9696,f9698,f9700,f9702,f9704,f9706,f9708,f9710,f9712,f9714,f9716,f9718,f9720,f9722,f9724,f9726,f9728,f9730,f9732,f9734,f9736,f9738,f9740,f9742,f9744,f9746,f9748,f9750,f9752,f9754,f9756,f9758,f9760,f9762,f9764,f9766,f9768,f9770,f9772,f9774,f9776,f9778,f9780,f9782,f9784,f9786,f9788,f9790,f9792,f9794,f9796,f9798,f9800,f9802,f9804,f9806,f9808,f9810,f9812,f9814,f9816,f9818,f9820,f9822,f9824,f9826,f9828,f9830,f9832,f9834,f9836,f9838,f9840,f9842,f9844,f9846,f9848,f9850,f9852,f9854,f9856,f9858,f9860,f9862,f9864,f9866,f9868,f9870,f9872,f9874,f9876,f9878,f9880,f9882,f9884,f9886,f9888,f9890,f9892,f9894,f9896,f9898,f9900,f9902,f9904,f9906,f9908,f9910,f9912,f9914,f9916,f9918,f9920,f9922,f9924,f9926,f9928,f9930,f9932,f9934,f9936,f9938,f9940,f9942,f9944,f9946,f9948,f9950,f9952,f9954,f9956,f9958,f9960,f9962,f9964,f9966,f9968,f9970,f9972,f9974,f9976,f9978,f9980,f9982,f9984,f9986,f9988,f9990,f9992,f9994,f9996,f9998,f10000,f10002,f10004,f10006,f10008,f10010,f10012,f10014,f10016,f10018,f10019,f10020,f10022,f10024,f10026,f10028,f10030,f10032,f9139,f10033,f6834,f13029,f13030,f6835,f2851,f13013,f13010,f2915,f2913,f18889,f18884,f18883,f18882,f18881,f18880,f18879,f18878,f18877,f18876,f19013,f18875,f18874,f19016,f18873,f19017,f18872,f19018,f19025,f19027,f19028,f19029,f19030,f19031,f19033,f19035,f19015,f19036,f18997,f19039,f19040,f19041,f19044,f19046,f19012,f19048,f19049,f18999,f19085,f19026,f19086,f19002,f19088,f19004,f19089,f19006,f19090,f19007,f19091,f19008,f19092,f19010,f19093,f19094,f18890,f18891,f18893,f18920,f19096,f18921,f19097,f18922,f19098,f19267,f19269,f19272,f19274,f19301,f19303,f19306,f19308,f19309,f19311,f19312,f19314,f19315,f19317,f19318,f19320,f19322,f19324,f19325,f19327,f19328,f19330,f19331,f19333,f19334,f19336,f19337,f19339,f19341,f19343,f19344,f19346,f19347,f19349,f19350,f19352,f19353,f19355,f19356,f19358,f19360,f19362,f19363,f2683,f19381,f19383,f2681,f22105,f22106,f22111,f22112,f22128,f22130,f22135,f22281,f22129,f22282,f22131,f22286,f22136,f22923,f22905,f22888,f22887,f22928,f22992,f22925,f22859,f22996,f22998,f22837,f22927,f22999,f23000,f23001,f23002,f23003,f23004,f23005,f23040,f22997,f23053,f23054,f23055,f23056,f23057,f23058,f23060,f22926,f24145,f24146,f24149,f24155,f24150,f24919,f24902,f24928,f25197,f25180,f25206,f25337,f25727,f25710,f25709,f25708,f25753,f25438,f25745,f25688,f25778,f25780,f25666,f25751,f25665,f25752,f25781,f25782,f25783,f25784,f25785,f25786,f25787,f25807,f25779,f23041,f25823,f25750,f26219,f26222,f6624,f26220,f26318,f26301,f26327,f26839,f26822,f26848,f29213,f29214,f29221,f29222,f29231,f29235,f29232,f29239,f29244,f29240,f29248,f29256,f29258,f29597,f29598,f29604,f29605,f30306,f30309,f30325,f30326,f30260,f30330,f30261,f30331,f30332,f30333,f30334,f30335,f30336,f30337,f30338,f30339,f30340,f30341,f30308,f31872,f31855,f31854,f31853,f31852,f31949,f31950,f31550,f9241,f31579,f25746,f32036,f31830,f31808,f31946,f31807,f31947,f31806,f31948,f32054,f32081,f1211,f31945,f32764,f32765,f32766,f32772,f32773,f32774,f32782,f32784,f32798,f32802,f32800,f32799,f32808,f6618,f32814,f32816,f32815,f5866,f33491,f33492,f33493,f33494,f33500,f33508,f33501,f32780,f32779,f33502,f29611,f29610,f33503,f29613,f29612,f34063])).
fof(f34063,plain,(
  $false | $spl244),
  inference(subsumption_resolution,[],[f33890,f1118])).
fof(f1118,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),
  inference(forward_demodulation,[],[f1098,f482])).
fof(f482,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) )),
  inference(subsumption_resolution,[],[f476,f78])).
fof(f78,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvp_to_wordProps.pow_eq_|48|',aHL_TRUTH)).
fof(f476,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) )),
  inference(superposition,[],[f85,f149])).
fof(f149,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) )),
  inference(unit_resulting_resolution,[],[f81,f88])).
fof(f88,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X14] : (s(bool,'T_0') = s(bool,X14) <=> p(s(bool,X14)))),
  file('thm.bvp_to_wordProps.pow_eq_|48|','thm.bool.EQ_CLAUSES|split|1')).
fof(f81,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0] : p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))))),
  file('thm.bvp_to_wordProps.pow_eq_|48|','thm.words.ZERO_LT_dimword')).
fof(f85,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) => s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)))) => s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9))))),
  file('thm.bvp_to_wordProps.pow_eq_|48|','thm.arithmetic.ZERO_MOD')).
fof(f1098,plain,(
  s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),
  inference(unit_resulting_resolution,[],[f77,f100])).
fof(f100,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X2)))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2] : ((s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))) != s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X2))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) & (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X2)))))),
  inference(nnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2] : (s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X2))) <=> s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ! [X0] : ! [X1,X2] : (s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X2))) <=> s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X8,X9] : (s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num',X8))) = s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num',X9))) <=> s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X8),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X9),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))))),
  file('thm.bvp_to_wordProps.pow_eq_|48|','thm.words.n2w_|49||49|')).
fof(f77,plain,(
  s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) != s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1)))))),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1)))) & s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) != s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f52])).
fof(f52,plain,(
  ? [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',X1)))) & s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) != s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))),
  inference(ennf_transformation,[],[f26])).
fof(f26,plain,(
  ~! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',X1)))) => s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ~! [X0] : ! [X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',X1)))) => s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.num.num',X7)))) => s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.num.num',X7)))) => s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X7))))))),
  file('thm.bvp_to_wordProps.pow_eq_|48|','thm.bvp_to_wordProps.pow_eq_|48|')).
fof(f33890,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK1))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) | $spl244),
  inference(superposition,[],[f4301,f22925])).
fof(f4301,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))))) )),
  inference(superposition,[],[f733,f906])).
fof(f906,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) )),
  inference(superposition,[],[f105,f83])).
fof(f83,plain,(
  ( ! [X0] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) )),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0] : s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6] : s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))))),
  file('thm.bvp_to_wordProps.pow_eq_|48|','thm.words.dimword_def')).
fof(f105,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X1)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X10,X11,X9] : s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',X10))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',X11)))))),
  file('thm.bvp_to_wordProps.pow_eq_|48|','thm.arithmetic.EXP_ADD')).
fof(f733,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X9),'const.bool.the_value_0')))))) )),
  inference(forward_demodulation,[],[f732,f83])).
fof(f732,plain,(
  ( ! [X10,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X9),'const.bool.the_value_0')))))))) )),
  inference(subsumption_resolution,[],[f731,f78])).
fof(f731,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X9),'const.bool.the_value_0')))))))) )),
  inference(forward_demodulation,[],[f722,f149])).
fof(f722,plain,(
  ( ! [X10,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X9),'const.bool.the_value_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X9),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f86,f83])).
fof(f86,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) | ! [X1] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) => ! [X1] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)))) => ! [X7] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X7),s('type.num.num',X9))),s('type.num.num',X9))))),
  file('thm.bvp_to_wordProps.pow_eq_|48|','thm.arithmetic.MOD_EQ_|48|')).
fof(f29612,plain,(
  ( ! [X15,X16] : (s(fun(fun(bool,bool),bool),X15) = s(fun(fun(bool,bool),bool),X16) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK3(X15,X16,bool,fun(bool,bool)))))) ) | $spl302),
  inference(cnf_transformation,[],[f29612_D])).
fof(f29612_D,plain,(
  ( ! [X15,X16] : (s(fun(fun(bool,bool),bool),X15) = s(fun(fun(bool,bool),bool),X16) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK3(X15,X16,bool,fun(bool,bool)))))) ) <=> ~$spl302),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl302])])).
fof(f29613,plain,(
  ( ! [X17] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X17)))) ) | $spl304),
  inference(cnf_transformation,[],[f29613_D])).
fof(f29613_D,plain,(
  ( ! [X17] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X17)))) ) <=> ~$spl304),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl304])])).
fof(f33503,plain,(
  ( ! [X24,X23,X25] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X25))) | s(fun(fun(bool,bool),bool),X23) = s(fun(fun(bool,bool),bool),X24) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK3(X23,X24,bool,fun(bool,bool)))))) ) | ($spl28 | $spl51 | $spl292)),
  inference(superposition,[],[f809,f32828])).
fof(f32828,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl28 | $spl51 | $spl292)),
  inference(subsumption_resolution,[],[f32827,f29222])).
fof(f32827,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,f(s(bool,sK3(X0,X1,bool,bool))))) ) | ($spl28 | $spl51)),
  inference(subsumption_resolution,[],[f26217,f5868])).
fof(f26217,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,f(s(bool,sK3(X0,X1,bool,bool))))) ) | $spl28),
  inference(condensation,[],[f26216])).
fof(f26216,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X13) = s(fun(bool,bool),X14) | s(bool,'T_0') = s(bool,f(s(bool,sK3(X13,X14,bool,bool)))) | s(bool,'T_0') = s(bool,X15)) ) | $spl28),
  inference(subsumption_resolution,[],[f26124,f17878])).
fof(f17878,plain,(
  ( ! [X24,X23,X25] : (s(bool,X25) != s(bool,sK3(X23,X24,bool,bool)) | s(bool,'T_0') = s(bool,X25) | s(fun(bool,bool),X23) = s(fun(bool,bool),X24)) ) | $spl28),
  inference(subsumption_resolution,[],[f17819,f78])).
fof(f17819,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | s(bool,X25) != s(bool,sK3(X23,X24,bool,bool)) | s(bool,'T_0') = s(bool,X25) | s(fun(bool,bool),X23) = s(fun(bool,bool),X24)) ) | $spl28),
  inference(superposition,[],[f157,f2851])).
fof(f157,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f91,f84])).
fof(f84,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.bvp_to_wordProps.pow_eq_|48|',aHL_BOOL_CASES)).
fof(f91,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X14] : (s(bool,'F_0') = s(bool,X14) <=> ~p(s(bool,X14)))),
  file('thm.bvp_to_wordProps.pow_eq_|48|','thm.bool.EQ_CLAUSES|split|2')).
fof(f26124,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X13) = s(fun(bool,bool),X14) | s(bool,'T_0') = s(bool,f(s(bool,sK3(X13,X14,bool,bool)))) | s(bool,X15) = s(bool,sK3(X13,X14,bool,bool)) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f2917,f154])).
fof(f154,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f84,f84])).
fof(f2917,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK3(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,f(s(X0,sK3(X1,X2,bool,X0))))) )),
  inference(condensation,[],[f2916])).
fof(f2916,plain,(
  ( ! [X10,X8,X11,X9] : (s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK3(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,f(s(X8,sK3(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f2909,f84])).
fof(f2909,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'F_0') != s(bool,X11) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK3(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,f(s(X8,sK3(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f809,f154])).
fof(f809,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,f(s(X16,sK3(X17,X18,bool,X16)))) | s(fun(X16,bool),X17) = s(fun(X16,bool),X18) | s(bool,'T_0') = s(bool,g(s(X16,sK3(X17,X18,bool,X16))))) )),
  inference(superposition,[],[f104,f84])).
fof(f104,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK3(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK3(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK3(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK3(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3])],[f55])).
fof(f55,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f47])).
fof(f47,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.bvp_to_wordProps.pow_eq_|48|',aHL_EXT)).
fof(f29610,plain,(
  ( ! [X12,X13] : (s(fun(fun(bool,bool),bool),X12) = s(fun(fun(bool,bool),bool),X13) | s(bool,'T_0') = s(bool,f(s(fun(bool,bool),sK3(X12,X13,bool,fun(bool,bool)))))) ) | $spl298),
  inference(cnf_transformation,[],[f29610_D])).
fof(f29610_D,plain,(
  ( ! [X12,X13] : (s(fun(fun(bool,bool),bool),X12) = s(fun(fun(bool,bool),bool),X13) | s(bool,'T_0') = s(bool,f(s(fun(bool,bool),sK3(X12,X13,bool,fun(bool,bool)))))) ) <=> ~$spl298),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl298])])).
fof(f29611,plain,(
  ( ! [X14] : (s(bool,'T_0') = s(bool,g(s(fun(bool,bool),X14)))) ) | $spl300),
  inference(cnf_transformation,[],[f29611_D])).
fof(f29611_D,plain,(
  ( ! [X14] : (s(bool,'T_0') = s(bool,g(s(fun(bool,bool),X14)))) ) <=> ~$spl300),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl300])])).
fof(f33502,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,g(s(fun(bool,bool),X22))) | s(fun(fun(bool,bool),bool),X20) = s(fun(fun(bool,bool),bool),X21) | s(bool,'T_0') = s(bool,f(s(fun(bool,bool),sK3(X20,X21,bool,fun(bool,bool)))))) ) | ($spl28 | $spl51 | $spl292)),
  inference(superposition,[],[f2917,f32828])).
fof(f32779,plain,(
  ( ! [X12,X15,X13] : (s(fun(fun(bool,bool),bool),X12) = s(fun(fun(bool,bool),bool),X13) | s(bool,'T_0') = s(bool,X15) | s(bool,X15) = s(bool,g(s(fun(bool,bool),sK3(X12,X13,bool,fun(bool,bool)))))) ) | $spl338),
  inference(cnf_transformation,[],[f32779_D])).
fof(f32779_D,plain,(
  ( ! [X12,X15,X13] : (s(fun(fun(bool,bool),bool),X12) = s(fun(fun(bool,bool),bool),X13) | s(bool,'T_0') = s(bool,X15) | s(bool,X15) = s(bool,g(s(fun(bool,bool),sK3(X12,X13,bool,fun(bool,bool)))))) ) <=> ~$spl338),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl338])])).
fof(f32780,plain,(
  ( ! [X14] : (s(bool,'T_0') != s(bool,f(s(fun(bool,bool),X14)))) ) | $spl340),
  inference(cnf_transformation,[],[f32780_D])).
fof(f32780_D,plain,(
  ( ! [X14] : (s(bool,'T_0') != s(bool,f(s(fun(bool,bool),X14)))) ) <=> ~$spl340),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl340])])).
fof(f33501,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,'T_0') != s(bool,f(s(fun(bool,bool),X18))) | s(fun(fun(bool,bool),bool),X16) = s(fun(fun(bool,bool),bool),X17) | s(bool,X19) = s(bool,g(s(fun(bool,bool),sK3(X16,X17,bool,fun(bool,bool))))) | s(bool,'T_0') = s(bool,X19)) ) | ($spl28 | $spl51 | $spl292)),
  inference(superposition,[],[f805,f32828])).
fof(f805,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,f(s(X0,sK3(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK3(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f104,f154])).
fof(f33508,plain,(
  ( ! [X14,X15] : (s(bool,X15) != s(bool,f(s(fun(bool,bool),X14))) | s(bool,'T_0') = s(bool,X15)) ) | $spl348),
  inference(cnf_transformation,[],[f33508_D])).
fof(f33508_D,plain,(
  ( ! [X14,X15] : (s(bool,X15) != s(bool,f(s(fun(bool,bool),X14))) | s(bool,'T_0') = s(bool,X15)) ) <=> ~$spl348),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl348])])).
fof(f33500,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,X15) != s(bool,f(s(fun(bool,bool),X14))) | s(fun(fun(bool,bool),bool),X12) = s(fun(fun(bool,bool),bool),X13) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK3(X12,X13,bool,fun(bool,bool))))) | s(bool,'T_0') = s(bool,X15)) ) | ($spl28 | $spl51 | $spl292)),
  inference(superposition,[],[f807,f32828])).
fof(f807,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X11) != s(bool,f(s(X8,sK3(X9,X10,bool,X8)))) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK3(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f104,f154])).
fof(f33494,plain,(
  ( ! [X24,X23,X25] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X25))) | s(fun(fun(bool,bool),bool),X23) = s(fun(fun(bool,bool),bool),X24) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK3(X23,X24,bool,fun(bool,bool)))))) ) | ($spl28 | $spl51 | $spl292)),
  inference(superposition,[],[f809,f32828])).
fof(f33493,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,g(s(fun(bool,bool),X22))) | s(fun(fun(bool,bool),bool),X20) = s(fun(fun(bool,bool),bool),X21) | s(bool,'T_0') = s(bool,f(s(fun(bool,bool),sK3(X20,X21,bool,fun(bool,bool)))))) ) | ($spl28 | $spl51 | $spl292)),
  inference(superposition,[],[f2917,f32828])).
fof(f33492,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,'T_0') != s(bool,f(s(fun(bool,bool),X18))) | s(fun(fun(bool,bool),bool),X16) = s(fun(fun(bool,bool),bool),X17) | s(bool,X19) = s(bool,g(s(fun(bool,bool),sK3(X16,X17,bool,fun(bool,bool))))) | s(bool,'T_0') = s(bool,X19)) ) | ($spl28 | $spl51 | $spl292)),
  inference(superposition,[],[f805,f32828])).
fof(f33491,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,X15) != s(bool,f(s(fun(bool,bool),X14))) | s(fun(fun(bool,bool),bool),X12) = s(fun(fun(bool,bool),bool),X13) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK3(X12,X13,bool,fun(bool,bool))))) | s(bool,'T_0') = s(bool,X15)) ) | ($spl28 | $spl51 | $spl292)),
  inference(superposition,[],[f807,f32828])).
fof(f5866,plain,(
  ( ! [X52,X51] : (s(fun(bool,bool),X51) = s(fun(bool,bool),X52)) ) | $spl48),
  inference(cnf_transformation,[],[f5866_D])).
fof(f5866_D,plain,(
  ( ! [X52,X51] : (s(fun(bool,bool),X51) = s(fun(bool,bool),X52)) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f32815,plain,(
  ( ! [X4,X0,X3] : (s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4) | s(bool,X3) = s(bool,X4) | s(bool,X0) = s(bool,X3)) ) | $spl346),
  inference(cnf_transformation,[],[f32815_D])).
fof(f32815_D,plain,(
  ( ! [X4,X0,X3] : (s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4) | s(bool,X3) = s(bool,X4) | s(bool,X0) = s(bool,X3)) ) <=> ~$spl346),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl346])])).
fof(f32816,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X1) = s(bool,X4) | s(bool,X0) = s(bool,X4)) ) | ($spl28 | $spl51)),
  inference(subsumption_resolution,[],[f29226,f5868])).
fof(f29226,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X1) = s(bool,X4) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl28),
  inference(condensation,[],[f29225])).
fof(f29225,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s(bool,X64) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X65) = s(fun(bool,bool),X66) | s(bool,'T_0') = s(bool,X67) | s(bool,X64) = s(bool,X68) | s(bool,X68) = s(bool,X69) | s(bool,'T_0') = s(bool,X69) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl28),
  inference(subsumption_resolution,[],[f27644,f17878])).
fof(f27644,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s(bool,X64) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X65) = s(fun(bool,bool),X66) | s(bool,X67) = s(bool,sK3(X65,X66,bool,bool)) | s(bool,'T_0') = s(bool,X67) | s(bool,X64) = s(bool,X68) | s(bool,X68) = s(bool,X69) | s(bool,'T_0') = s(bool,X69) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f800,f262])).
fof(f262,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f154,f154])).
fof(f800,plain,(
  ( ! [X2,X0,X3,X1] : (s(X2,f(s(bool,'T_0'))) != s(X2,g(s(bool,'T_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,X3) = s(bool,sK3(X0,X1,X2,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f104,f154])).
fof(f32814,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,X0) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | ($spl28 | $spl51)),
  inference(subsumption_resolution,[],[f29228,f5868])).
fof(f29228,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,X0) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl28),
  inference(condensation,[],[f29227])).
fof(f29227,plain,(
  ( ! [X57,X54,X52,X56,X55,X53] : (s(bool,X52) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X53) = s(fun(bool,bool),X54) | s(bool,'T_0') = s(bool,X55) | s(bool,X52) = s(bool,X56) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) ) | $spl28),
  inference(subsumption_resolution,[],[f27642,f17878])).
fof(f27642,plain,(
  ( ! [X57,X54,X52,X56,X55,X53] : (s(bool,X52) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X53) = s(fun(bool,bool),X54) | s(bool,X55) = s(bool,sK3(X53,X54,bool,bool)) | s(bool,'T_0') = s(bool,X55) | s(bool,X52) = s(bool,X56) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f800,f262])).
fof(f6618,plain,(
  ( ! [X30] : (s(bool,'T_0') = s(bool,X30)) ) | $spl52),
  inference(cnf_transformation,[],[f6618_D])).
fof(f6618_D,plain,(
  ( ! [X30] : (s(bool,'T_0') = s(bool,X30)) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f32808,plain,(
  ( ! [X50,X48,X49] : (s(bool,'T_0') = s(bool,X50) | s(fun(bool,bool),X48) = s(fun(bool,bool),X49)) ) | ($spl28 | $spl33 | $spl40 | $spl51 | $spl121)),
  inference(global_subsumption,[],[f32807,f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f1706,f1829,f1832,f2062,f2063,f2066,f2124,f2127,f2135,f2138,f2248,f2340,f2343,f2652,f2654,f2655,f2679,f2684,f2687,f2690,f2693,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2724,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f3053,f3054,f3826,f3827,f3840,f3846,f4093,f4094,f4097,f4111,f4255,f4259,f4261,f4262,f4301,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4982,f4983,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5192,f5198,f5668,f5669,f5717,f5718,f5719,f5722,f5862,f5863,f5899,f5911,f5869,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8922,f9224,f9219,f8961,f8974,f8975,f9011,f9021,f9037,f9046,f9051,f9210,f9286,f9288,f9289,f9290,f9291,f9292,f9293,f9294,f9329,f9330,f9181,f9139,f2388,f3254,f2399,f3265,f718,f474,f2449,f3315,f9278,f9269,f9202,f9138,f9044,f9043,f9039,f9038,f9036,f9035,f9034,f9019,f9018,f8992,f8991,f8976,f734,f483,f86,f85,f815,f2137,f1705,f1014,f5746,f2502,f1971,f1660,f5731,f2491,f1962,f1652,f933,f2350,f1838,f1138,f5459,f4970,f4035,f3540,f3539,f3538,f3537,f3536,f5453,f4941,f4031,f3151,f3150,f3149,f3148,f3147,f4396,f4979,f4254,f4978,f5482,f5067,f5066,f5065,f5064,f5063,f4977,f4253,f5399,f5342,f4984,f4263,f3995,f3961,f3043,f3041,f3039,f3037,f3035,f2218,f1761,f1054,f844,f619,f5462,f5160,f4037,f3822,f3821,f3820,f3819,f2678,f3535,f3146,f3824,f3825,f7425,f9017,f4400,f4207,f3823,f646,f3828,f8985,f8997,f9005,f2726,f2970,f8996,f9006,f2737,f2981,f5444,f5126,f4025,f3049,f3048,f3047,f3046,f2657,f3044,f8271,f2567,f2999,f3051,f3052,f7417,f8998,f9007,f4390,f4198,f3050,f519,f1167,f590,f3055,f3542,f3543,f7424,f9016,f3153,f3154,f7420,f8995,f9010,f5071,f5072,f7432,f9027,f602,f2292,f7402,f8983,f8999,f5651,f5650,f5649,f5648,f5647,f5644,f5642,f5516,f9030,f4395,f5169,f4399,f4393,f5070,f4375,f4203,f5168,f4206,f4201,f5069,f4183,f9028,f5531,f9029,f5546,f5662,f5661,f5660,f5659,f5658,f5655,f5167,f2696,f3541,f3152,f5666,f5667,f7436,f9031,f5665,f5664,f5068,f924,f5560,f5670,f607,f623,f651,f656,f5396,f5346,f5179,f3993,f3964,f3182,f3180,f3178,f3176,f3174,f2709,f2217,f1760,f1053,f843,f618,f645,f3545,f8984,f2578,f3111,f8994,f9008,f2589,f3122,f8993,f9009,f516,f1175,f593,f3183,f603,f2291,f7401,f8982,f9000,f5354,f5118,f5117,f5116,f5115,f5114,f5112,f5003,f9026,f4374,f4182,f9024,f5017,f9025,f5031,f923,f5044,f5119,f103,f525,f605,f102,f9140,f2917,f807,f805,f809,f804,f92,f91,f80,f13013,f13010,f2914,f2851,f13058,f13108,f13109,f13111,f13281,f17715,f17877,f17878,f17886,f18590,f19267,f19272,f19301,f19306,f19309,f19312,f19315,f19318,f19322,f19325,f19328,f19331,f19334,f19337,f19341,f19344,f19347,f19350,f19353,f19356,f19360,f19363,f19381,f19384,f19386,f9012,f9057,f9053,f9052,f9048,f9047,f9042,f9041,f9033,f9032,f9015,f9014,f19400,f19402,f9013,f9056,f21903,f21747,f21745,f21743,f21741,f21739,f21737,f21735,f21733,f21731,f21729,f21727,f21725,f21723,f21721,f21677,f19774,f22010,f19988,f19990,f22105,f22108,f22111,f22127,f22128,f22130,f22135,f20164,f20166,f21095,f21093,f21091,f21087,f21085,f21083,f21081,f21079,f21077,f22172,f22173,f22174,f20254,f20256,f20259,f20261,f21010,f22247,f22252,f22253,f22254,f22255,f22256,f22257,f22258,f22259,f22260,f22261,f20340,f20342,f22281,f22282,f22286,f22397,f20646,f22467,f22469,f22909,f22912,f22913,f22914,f22915,f22916,f22918,f22919,f22920,f22921,f22922,f22483,f22923,f22905,f22888,f22887,f22519,f22533,f22537,f22970,f22973,f22974,f22975,f22976,f22977,f22979,f22980,f22981,f22982,f22983,f22551,f22578,f22984,f22985,f22986,f22582,f22987,f22988,f22989,f22587,f22588,f22990,f22991,f22591,f22992,f22602,f22603,f22604,f22605,f22611,f22612,f22613,f22614,f22615,f22616,f22617,f22618,f22619,f22620,f22621,f22622,f22627,f22628,f22629,f22630,f22631,f22632,f22633,f22634,f22635,f22636,f22637,f22639,f22642,f22643,f22644,f22645,f22646,f22647,f22648,f22649,f22650,f22651,f22652,f22653,f22654,f22655,f22656,f22657,f22658,f22664,f22859,f22996,f22998,f22839,f22837,f22999,f23000,f23001,f23002,f23003,f23004,f22739,f22741,f23053,f23055,f23057,f23060,f23647,f23649,f23663,f23683,f23685,f23699,f23701,f23703,f23717,f23782,f23995,f24009,f24011,f24013,f24027,f24029,f24031,f24045,f24145,f24149,f24155,f24469,f24471,f24486,f24508,f24509,f24514,f24515,f24516,f24518,f24520,f24535,f24537,f24539,f24554,f24621,f24945,f24959,f24961,f24963,f24979,f24981,f24983,f24999,f25091,f25034,f25035,f25317,f25323,f25337,f25727,f25710,f25709,f25708,f25378,f25421,f25772,f25427,f25428,f25429,f25430,f25436,f25437,f25438,f25440,f25441,f25442,f25443,f25444,f25445,f25446,f25447,f25452,f25453,f25454,f25455,f25456,f25457,f25458,f25459,f25460,f25462,f25463,f25464,f25465,f25470,f25471,f25472,f25473,f25474,f25475,f25476,f25477,f25478,f25479,f25480,f25482,f25483,f25774,f25485,f25486,f25487,f25489,f25490,f25491,f25492,f25493,f25497,f25498,f25500,f25501,f25502,f25503,f25688,f25778,f25780,f25668,f25666,f25665,f25781,f25782,f25783,f25784,f25785,f25786,f25589,f25591,f25823,f26219,f26222,f26208,f26224,f26225,f26580,f26582,f26583,f26693,f26694,f26710,f26713,f26714,f26715,f26717,f26718,f26725,f26729,f27006,f27007,f27008,f27010,f27014,f27015,f27016,f27017,f27023,f27024,f27025,f27027,f27028,f27029,f27030,f27031,f27032,f27033,f27034,f27039,f27040,f27041,f27042,f27043,f27044,f27045,f27046,f27047,f27048,f27049,f27050,f27051,f27052,f27054,f27057,f27060,f27061,f27062,f27063,f27064,f27065,f27066,f27067,f27068,f27069,f27070,f27071,f27072,f27073,f27074,f27075,f27076,f27077,f27079,f27080,f27081,f27082,f27083,f27087,f27088,f27090,f27091,f27092,f27093,f27098,f27615,f28251,f28398,f28399,f28415,f28418,f28419,f28420,f28422,f28423,f28430,f28434,f29230,f29234,f20605,f29500,f29499,f29498,f29541,f29547,f29569,f29571,f29580,f5868,f30017,f30019,f30049,f30047,f30245,f30328,f30329,f30260,f30261,f30332,f30334,f30336,f30338,f30266,f30340,f30345,f30422,f30501,f30502,f30443,f30511,f30512,f30513,f31337,f31339,f31354,f31355,f31358,f31361,f31365,f31367,f31382,f31383,f31386,f31389,f31872,f31855,f31854,f31853,f31852,f31443,f31458,f31459,f31462,f31471,f31486,f31487,f31490,f31533,f32034,f31539,f31540,f31541,f31542,f31548,f31549,f31550,f31552,f31553,f31554,f31555,f31556,f31557,f31558,f31559,f31564,f31565,f31566,f31567,f31568,f31569,f31570,f31571,f31572,f31574,f31575,f31576,f31577,f31579,f31585,f31586,f31587,f31588,f31589,f31590,f31591,f31592,f31593,f31594,f31595,f31597,f31598,f32037,f31600,f31601,f31602,f31604,f31605,f31606,f31607,f31608,f32039,f31617,f31618,f31620,f31621,f31622,f31623,f31830,f31810,f31808,f31807,f31806,f31804,f31725,f32081,f32345,f32343,f32781,f32782,f32783,f32784,f17866,f32785,f32314,f32796,f32798,f32802])).
fof(f32796,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | $spl40),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f1706,f1829,f1832,f2062,f2063,f2066,f2124,f2127,f2135,f2138,f2248,f2340,f2343,f2652,f2654,f2655,f2679,f2684,f2687,f2690,f2693,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2724,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f3053,f3054,f3826,f3827,f3840,f3846,f4093,f4094,f4097,f4111,f4255,f4259,f4261,f4262,f4301,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4982,f4983,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5192,f5198,f5668,f5669,f5717,f5718,f5719,f5722,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8922,f9224,f9219,f8961,f8974,f8975,f9011,f9021,f9037,f9046,f9051,f9210,f9286,f9288,f9289,f9290,f9291,f9292,f9293,f9294,f9329,f9330,f9181,f9139,f2388,f3254,f2399,f3265,f718,f474,f2449,f3315,f9278,f9269,f9202,f9138,f9044,f9043,f9039,f9038,f9036,f9035,f9034,f9019,f9018,f8992,f8991,f8976,f734,f483,f86,f85,f815,f2137,f1705,f1014,f5746,f2502,f1971,f1660,f5731,f2491,f1962,f1652,f933,f2350,f1838,f1138,f5459,f4970,f4035,f3540,f3539,f3538,f3537,f3536,f5453,f4941,f4031,f3151,f3150,f3149,f3148,f3147,f4396,f4979,f4254,f4978,f5482,f5067,f5066,f5065,f5064,f5063,f4977,f4253,f5399,f5342,f4984,f4263,f3995,f3961,f3043,f3041,f3039,f3037,f3035,f2218,f1761,f1054,f844,f619,f5462,f5160,f4037,f3822,f3821,f3820,f3819,f2678,f3535,f3146,f3824,f3825,f7425,f9017,f4400,f4207,f3823,f646,f3828,f8985,f8997,f9005,f2726,f2970,f8996,f9006,f2737,f2981,f5444,f5126,f4025,f3049,f3048,f3047,f3046,f2657,f3044,f8271,f2567,f2999,f3051,f3052,f7417,f8998,f9007,f4390,f4198,f3050,f519,f1167,f590,f3055,f3542,f3543,f7424,f9016,f3153,f3154,f7420,f8995,f9010,f5071,f5072,f7432,f9027,f602,f2292,f7402,f8983,f8999,f5651,f5650,f5649,f5648,f5647,f5644,f5642,f5516,f9030,f4395,f5169,f4399,f4393,f5070,f4375,f4203,f5168,f4206,f4201,f5069,f4183,f9028,f5531,f9029,f5546,f5662,f5661,f5660,f5659,f5658,f5655,f5167,f2696,f3541,f3152,f5666,f5667,f7436,f9031,f5665,f5664,f5068,f924,f5560,f5670,f607,f623,f651,f656,f5396,f5346,f5179,f3993,f3964,f3182,f3180,f3178,f3176,f3174,f2709,f2217,f1760,f1053,f843,f618,f645,f3545,f8984,f2578,f3111,f8994,f9008,f2589,f3122,f8993,f9009,f516,f1175,f593,f3183,f603,f2291,f7401,f8982,f9000,f5354,f5118,f5117,f5116,f5115,f5114,f5112,f5003,f9026,f4374,f4182,f9024,f5017,f9025,f5031,f923,f5044,f5119,f103,f525,f605,f102,f9140,f2917,f807,f805,f809,f804,f92,f91,f80,f13013,f13010,f2914,f13058,f13108,f13109,f13111,f13281,f17715,f18590,f19267,f19272,f19301,f19306,f19309,f19312,f19315,f19318,f19322,f19325,f19328,f19331,f19334,f19337,f19341,f19344,f19347,f19350,f19353,f19356,f19360,f19363,f19381,f19384,f19386,f9012,f9057,f9053,f9052,f9048,f9047,f9042,f9041,f9033,f9032,f9015,f9014,f19400,f19402,f9013,f9056,f21903,f21747,f21745,f21743,f21741,f21739,f21737,f21735,f21733,f21731,f21729,f21727,f21725,f21721,f21677,f19774,f22010,f19988,f19990,f22105,f22108,f22111,f22127,f22128,f22130,f22135,f20164,f20166,f21095,f21093,f21091,f21087,f21085,f21083,f21081,f21079,f21077,f22172,f22173,f22174,f20254,f20256,f20259,f20261,f21010,f22247,f22252,f22253,f22254,f22255,f22256,f22257,f22258,f22259,f22260,f22261,f20340,f20342,f22281,f22282,f22286,f22397,f20646,f22467,f22469,f22909,f22912,f22913,f22914,f22915,f22916,f22918,f22919,f22920,f22921,f22922,f22483,f22923,f22905,f22888,f22887,f22519,f22533,f22537,f22970,f22973,f22974,f22975,f22976,f22977,f22979,f22980,f22981,f22982,f22983,f22551,f22578,f22984,f22985,f22986,f22582,f22987,f22988,f22989,f22587,f22588,f22990,f22991,f22591,f22992,f22602,f22603,f22604,f22605,f22611,f22612,f22613,f22614,f22615,f22616,f22617,f22618,f22619,f22620,f22621,f22622,f22627,f22628,f22629,f22630,f22631,f22632,f22633,f22634,f22635,f22636,f22637,f22639,f22642,f22643,f22644,f22645,f22646,f22647,f22648,f22649,f22650,f22651,f22652,f22653,f22654,f22655,f22656,f22657,f22658,f22664,f22859,f22996,f22998,f22839,f22837,f22999,f23000,f23001,f23002,f23003,f23004,f22739,f22741,f23053,f23055,f23057,f23060,f23647,f23649,f23663,f23683,f23685,f23699,f23701,f23703,f23717,f23782,f23995,f24009,f24011,f24013,f24027,f24029,f24031,f24045,f24145,f24149,f24155,f24469,f24471,f24486,f24508,f24509,f24514,f24515,f24516,f24518,f24520,f24535,f24537,f24539,f24554,f24621,f24945,f24959,f24961,f24963,f24979,f24981,f24983,f24999,f25091,f25034,f25035,f25317,f25323,f25337,f25727,f25710,f25709,f25708,f25378,f25421,f25772,f25427,f25428,f25429,f25430,f25436,f25437,f25438,f25440,f25441,f25442,f25443,f25444,f25445,f25446,f25447,f25452,f25453,f25454,f25455,f25456,f25457,f25458,f25459,f25460,f25462,f25463,f25464,f25465,f25470,f25471,f25472,f25473,f25474,f25475,f25476,f25477,f25478,f25479,f25480,f25482,f25483,f25774,f25485,f25486,f25487,f25489,f25490,f25491,f25492,f25493,f25497,f25498,f25500,f25501,f25502,f25503,f25688,f25778,f25780,f25668,f25666,f25665,f25781,f25782,f25783,f25784,f25785,f25786,f25589,f25591,f25823,f26208,f26224,f26225,f26580,f26582,f26583,f26693,f26694,f26710,f26713,f26714,f26715,f26717,f26718,f26725,f26729,f27006,f27007,f27008,f27010,f27014,f27015,f27016,f27017,f27023,f27024,f27025,f27027,f27028,f27029,f27030,f27031,f27032,f27033,f27034,f27039,f27040,f27041,f27042,f27043,f27044,f27045,f27046,f27047,f27048,f27049,f27050,f27051,f27052,f27054,f27057,f27060,f27061,f27062,f27063,f27064,f27065,f27066,f27067,f27068,f27069,f27070,f27071,f27072,f27073,f27074,f27075,f27076,f27077,f27079,f27080,f27081,f27082,f27083,f27087,f27088,f27090,f27091,f27092,f27093,f27098,f27615,f28251,f28398,f28399,f28415,f28418,f28419,f28420,f28422,f28423,f28430,f28434,f20605,f29500,f29499,f29498,f29541,f29547,f29569,f29571,f29580,f30245,f30328,f30329,f30260,f30261,f30332,f30334,f30336,f30338,f30266,f30340,f30345,f30422,f30501,f30502,f30443,f30511,f30512,f30513,f31337,f31339,f31354,f31355,f31358,f31361,f31365,f31367,f31382,f31383,f31386,f31389,f31872,f31855,f31854,f31853,f31852,f31443,f31458,f31459,f31462,f31471,f31486,f31487,f31490,f31533,f32034,f31539,f31540,f31541,f31542,f31548,f31549,f31550,f31552,f31553,f31554,f31555,f31556,f31557,f31558,f31559,f31564,f31565,f31566,f31567,f31568,f31569,f31570,f31571,f31572,f31574,f31575,f31576,f31577,f31579,f31585,f31586,f31587,f31588,f31589,f31590,f31591,f31592,f31593,f31594,f31595,f31597,f31598,f32037,f31600,f31601,f31602,f31604,f31605,f31606,f31607,f31608,f32039,f31617,f31618,f31620,f31621,f31622,f31623,f31830,f31810,f31808,f31807,f31806,f31804,f31725,f32081,f32345,f32343,f32314])).
fof(f32314,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X40) = s(fun(bool,bool),X41) | s(bool,X42) = s(bool,g(s(bool,sK3(X40,X41,bool,bool)))) | s(bool,'T_0') = s(bool,X42) | s(bool,X43) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,X43) = s(bool,sK3(X40,X41,bool,bool))) )),
  inference(superposition,[],[f805,f262])).
fof(f32785,plain,(
  ( ! [X127,X126] : (s(fun(bool,bool),X126) = s(fun(bool,bool),X127) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X126,X127,bool,bool))))) ) | ($spl28 | $spl40)),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f1706,f1829,f1832,f2062,f2063,f2066,f2124,f2127,f2135,f2138,f2248,f2340,f2343,f2652,f2654,f2655,f2679,f2684,f2687,f2690,f2693,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2724,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f3053,f3054,f3826,f3827,f3840,f3846,f4093,f4094,f4097,f4111,f4255,f4259,f4261,f4262,f4301,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4982,f4983,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5192,f5198,f5668,f5669,f5717,f5718,f5719,f5722,f5862,f5863,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8922,f9224,f9219,f8961,f8974,f8975,f9011,f9021,f9037,f9046,f9051,f9210,f9286,f9288,f9289,f9290,f9291,f9292,f9293,f9294,f9329,f9330,f9181,f9139,f2388,f3254,f2399,f3265,f718,f474,f2449,f3315,f9278,f9269,f9202,f9138,f9044,f9043,f9039,f9038,f9036,f9035,f9034,f9019,f9018,f8992,f8991,f8976,f734,f483,f86,f85,f815,f2137,f1705,f1014,f5746,f2502,f1971,f1660,f5731,f2491,f1962,f1652,f933,f2350,f1838,f1138,f5459,f4970,f4035,f3540,f3539,f3538,f3537,f3536,f5453,f4941,f4031,f3151,f3150,f3149,f3148,f3147,f4396,f4979,f4254,f4978,f5482,f5067,f5066,f5065,f5064,f5063,f4977,f4253,f5399,f5342,f4984,f4263,f3995,f3961,f3043,f3041,f3039,f3037,f3035,f2218,f1761,f1054,f844,f619,f5462,f5160,f4037,f3822,f3821,f3820,f3819,f2678,f3535,f3146,f3824,f3825,f7425,f9017,f4400,f4207,f3823,f646,f3828,f8985,f8997,f9005,f2726,f2970,f8996,f9006,f2737,f2981,f5444,f5126,f4025,f3049,f3048,f3047,f3046,f2657,f3044,f8271,f2567,f2999,f3051,f3052,f7417,f8998,f9007,f4390,f4198,f3050,f519,f1167,f590,f3055,f3542,f3543,f7424,f9016,f3153,f3154,f7420,f8995,f9010,f5071,f5072,f7432,f9027,f602,f2292,f7402,f8983,f8999,f5651,f5650,f5649,f5648,f5647,f5644,f5642,f5516,f9030,f4395,f5169,f4399,f4393,f5070,f4375,f4203,f5168,f4206,f4201,f5069,f4183,f9028,f5531,f9029,f5546,f5662,f5661,f5660,f5659,f5658,f5655,f5167,f2696,f3541,f3152,f5666,f5667,f7436,f9031,f5665,f5664,f5068,f924,f5560,f5670,f607,f623,f651,f656,f5396,f5346,f5179,f3993,f3964,f3182,f3180,f3178,f3176,f3174,f2709,f2217,f1760,f1053,f843,f618,f645,f3545,f8984,f2578,f3111,f8994,f9008,f2589,f3122,f8993,f9009,f516,f1175,f593,f3183,f603,f2291,f7401,f8982,f9000,f5354,f5118,f5117,f5116,f5115,f5114,f5112,f5003,f9026,f4374,f4182,f9024,f5017,f9025,f5031,f923,f5044,f5119,f103,f525,f605,f102,f9140,f2917,f807,f805,f809,f804,f92,f91,f80,f13013,f13010,f2914,f2851,f13058,f13108,f13109,f13111,f13281,f17715,f17877,f17878,f17886,f18590,f19267,f19272,f19301,f19306,f19309,f19312,f19315,f19318,f19322,f19325,f19328,f19331,f19334,f19337,f19341,f19344,f19347,f19350,f19353,f19356,f19360,f19363,f19381,f19384,f19386,f9012,f9057,f9053,f9052,f9048,f9047,f9042,f9041,f9033,f9032,f9015,f9014,f19400,f19402,f9013,f9056,f21903,f21747,f21745,f21743,f21741,f21739,f21737,f21735,f21733,f21731,f21729,f21727,f21725,f21723,f21721,f21677,f19774,f22010,f19988,f19990,f22105,f22108,f22111,f22127,f22128,f22130,f22135,f20164,f20166,f21095,f21093,f21091,f21087,f21085,f21083,f21081,f21079,f21077,f22172,f22173,f22174,f20254,f20256,f20259,f20261,f21010,f22247,f22252,f22253,f22254,f22255,f22256,f22257,f22258,f22259,f22260,f22261,f20340,f20342,f22281,f22282,f22286,f22397,f20646,f22467,f22469,f22909,f22912,f22913,f22914,f22915,f22916,f22918,f22919,f22920,f22921,f22922,f22483,f22923,f22905,f22888,f22887,f22519,f22533,f22537,f22970,f22973,f22974,f22975,f22976,f22977,f22979,f22980,f22981,f22982,f22983,f22551,f22578,f22984,f22985,f22986,f22582,f22987,f22988,f22989,f22587,f22588,f22990,f22991,f22591,f22992,f22602,f22603,f22604,f22605,f22611,f22612,f22613,f22614,f22615,f22616,f22617,f22618,f22619,f22620,f22621,f22622,f22627,f22628,f22629,f22630,f22631,f22632,f22633,f22634,f22635,f22636,f22637,f22639,f22642,f22643,f22644,f22645,f22646,f22647,f22648,f22649,f22650,f22651,f22652,f22653,f22654,f22655,f22656,f22657,f22658,f22664,f22859,f22996,f22998,f22839,f22837,f22999,f23000,f23001,f23002,f23003,f23004,f22739,f22741,f23053,f23055,f23057,f23060,f23647,f23649,f23663,f23683,f23685,f23699,f23701,f23703,f23717,f23782,f23995,f24009,f24011,f24013,f24027,f24029,f24031,f24045,f24145,f24149,f24155,f24469,f24471,f24486,f24508,f24509,f24514,f24515,f24516,f24518,f24520,f24535,f24537,f24539,f24554,f24621,f24945,f24959,f24961,f24963,f24979,f24981,f24983,f24999,f25091,f25034,f25035,f25317,f25323,f25337,f25727,f25710,f25709,f25708,f25378,f25421,f25772,f25427,f25428,f25429,f25430,f25436,f25437,f25438,f25440,f25441,f25442,f25443,f25444,f25445,f25446,f25447,f25452,f25453,f25454,f25455,f25456,f25457,f25458,f25459,f25460,f25462,f25463,f25464,f25465,f25470,f25471,f25472,f25473,f25474,f25475,f25476,f25477,f25478,f25479,f25480,f25482,f25483,f25774,f25485,f25486,f25487,f25489,f25490,f25491,f25492,f25493,f25497,f25498,f25500,f25501,f25502,f25503,f25688,f25778,f25780,f25668,f25666,f25665,f25781,f25782,f25783,f25784,f25785,f25786,f25589,f25591,f25823,f26219,f26222,f26208,f26224,f26225,f26580,f26582,f26583,f26693,f26694,f26710,f26713,f26714,f26715,f26717,f26718,f26725,f26729,f27006,f27007,f27008,f27010,f27014,f27015,f27016,f27017,f27023,f27024,f27025,f27027,f27028,f27029,f27030,f27031,f27032,f27033,f27034,f27039,f27040,f27041,f27042,f27043,f27044,f27045,f27046,f27047,f27048,f27049,f27050,f27051,f27052,f27054,f27057,f27060,f27061,f27062,f27063,f27064,f27065,f27066,f27067,f27068,f27069,f27070,f27071,f27072,f27073,f27074,f27075,f27076,f27077,f27079,f27080,f27081,f27082,f27083,f27087,f27088,f27090,f27091,f27092,f27093,f27098,f27615,f28251,f28398,f28399,f28415,f28418,f28419,f28420,f28422,f28423,f28430,f28434,f29230,f29234,f20605,f29500,f29499,f29498,f29541,f29547,f29569,f29571,f29580,f30245,f30328,f30329,f30260,f30261,f30332,f30334,f30336,f30338,f30266,f30340,f30345,f30422,f30501,f30502,f30443,f30511,f30512,f30513,f31337,f31339,f31354,f31355,f31358,f31361,f31365,f31367,f31382,f31383,f31386,f31389,f31872,f31855,f31854,f31853,f31852,f31443,f31458,f31459,f31462,f31471,f31486,f31487,f31490,f31533,f32034,f31539,f31540,f31541,f31542,f31548,f31549,f31550,f31552,f31553,f31554,f31555,f31556,f31557,f31558,f31559,f31564,f31565,f31566,f31567,f31568,f31569,f31570,f31571,f31572,f31574,f31575,f31576,f31577,f31579,f31585,f31586,f31587,f31588,f31589,f31590,f31591,f31592,f31593,f31594,f31595,f31597,f31598,f32037,f31600,f31601,f31602,f31604,f31605,f31606,f31607,f31608,f32039,f31617,f31618,f31620,f31621,f31622,f31623,f31830,f31810,f31808,f31807,f31806,f31804,f31725,f32081,f32345,f32343,f17866])).
fof(f17866,plain,(
  ( ! [X127,X126] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X126) = s(fun(bool,bool),X127) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X126,X127,bool,bool))))) ) | $spl28),
  inference(duplicate_literal_removal,[],[f17863])).
fof(f17863,plain,(
  ( ! [X127,X126] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X126) = s(fun(bool,bool),X127) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X126,X127,bool,bool)))) | s(fun(bool,bool),X126) = s(fun(bool,bool),X127)) ) | $spl28),
  inference(superposition,[],[f809,f2851])).
fof(f32783,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl28 | $spl51)),
  inference(subsumption_resolution,[],[f29252,f5868])).
fof(f29252,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl28),
  inference(condensation,[],[f29251])).
fof(f29251,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,X10) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl28),
  inference(subsumption_resolution,[],[f27634,f17878])).
fof(f27634,plain,(
  ( ! [X12,X10,X13,X11] : (s(bool,X10) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,X13) = s(bool,sK3(X11,X12,bool,bool)) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f800,f154])).
fof(f32781,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,X0)) ) | ($spl28 | $spl51)),
  inference(subsumption_resolution,[],[f29250,f5868])).
fof(f29250,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X0) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,X0)) ) | $spl28),
  inference(condensation,[],[f29249])).
fof(f29249,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,X14) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X15) = s(fun(bool,bool),X16) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X14)) ) | $spl28),
  inference(subsumption_resolution,[],[f27635,f17878])).
fof(f27635,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,X14) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X15) = s(fun(bool,bool),X16) | s(bool,X17) = s(bool,sK3(X15,X16,bool,bool)) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f800,f154])).
fof(f32343,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (s(fun(X38,bool),X39) = s(fun(X38,bool),X40) | s(bool,X41) = s(bool,g(s(X38,sK3(X39,X40,bool,X38)))) | s(bool,'T_0') = s(bool,X41) | s(bool,X42) = s(bool,X43) | s(bool,X43) = s(bool,f(s(X38,sK3(X39,X40,bool,X38)))) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(trivial_inequality_removal,[],[f32331])).
fof(f32331,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X38,bool),X39) = s(fun(X38,bool),X40) | s(bool,X41) = s(bool,g(s(X38,sK3(X39,X40,bool,X38)))) | s(bool,'T_0') = s(bool,X41) | s(bool,X42) = s(bool,X43) | s(bool,X43) = s(bool,f(s(X38,sK3(X39,X40,bool,X38)))) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f805,f262])).
fof(f32345,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,X7) = s(bool,g(s(X4,sK3(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,X7) | s(bool,X8) = s(bool,f(s(X4,sK3(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(trivial_inequality_removal,[],[f32325])).
fof(f32325,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,'T_0') != s(bool,'T_0') | s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,X7) = s(bool,g(s(X4,sK3(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,X7) | s(bool,X8) = s(bool,f(s(X4,sK3(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f805,f154])).
fof(f31725,plain,(
  ( ! [X449,X451,X452,X448,X450] : (s(bool,f(s(X448,sK3(X449,X450,bool,X448)))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X451),s('type.num.num',X452))))) | s(fun(X448,bool),X449) = s(fun(X448,bool),X450) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X452),s('type.num.num',X451))))) | s(bool,'T_0') = s(bool,g(s(X448,sK3(X449,X450,bool,X448))))) )),
  inference(superposition,[],[f104,f2449])).
fof(f31804,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,sK3(X0,X1,X2,bool)) | s(X2,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))))) != s(X2,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3)))))) )),
  inference(condensation,[],[f31803])).
fof(f31803,plain,(
  ( ! [X134,X132,X130,X135,X133,X131] : (s(X133,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X131),s('type.num.num',X132))))))) != s(X133,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X131),s('type.num.num',X132))))))) | s(fun(bool,X133),X134) = s(fun(bool,X133),X135) | s(bool,'T_0') = s(bool,sK3(X134,X135,X133,bool)) | s(bool,'T_0') = s(bool,X130) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X132),s('type.num.num',X131)))))) )),
  inference(duplicate_literal_removal,[],[f31671])).
fof(f31671,plain,(
  ( ! [X134,X132,X130,X135,X133,X131] : (s(X133,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X131),s('type.num.num',X132))))))) != s(X133,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X131),s('type.num.num',X132))))))) | s(fun(bool,X133),X134) = s(fun(bool,X133),X135) | s(bool,'T_0') = s(bool,sK3(X134,X135,X133,bool)) | s(bool,'T_0') = s(bool,X130) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X132),s('type.num.num',X131))))) | s(bool,'T_0') = s(bool,X130)) )),
  inference(superposition,[],[f802,f2449])).
fof(f31810,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))) | s(bool,X0) = s(bool,X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))) )),
  inference(condensation,[],[f31809])).
fof(f31809,plain,(
  ( ! [X103,X107,X105,X106,X104] : (s(bool,X106) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X104),s('type.num.num',X105))))) | s(bool,'T_0') = s(bool,X103) | s(bool,X106) = s(bool,X107) | s(bool,'T_0') = s(bool,X107) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X105),s('type.num.num',X104)))))) )),
  inference(duplicate_literal_removal,[],[f31665])).
fof(f31665,plain,(
  ( ! [X103,X107,X105,X106,X104] : (s(bool,X106) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X104),s('type.num.num',X105))))) | s(bool,'T_0') = s(bool,X103) | s(bool,X106) = s(bool,X107) | s(bool,'T_0') = s(bool,X107) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X105),s('type.num.num',X104))))) | s(bool,'T_0') = s(bool,X103)) )),
  inference(superposition,[],[f471,f2449])).
fof(f31623,plain,(
  ( ! [X466,X463,X465,X467,X462,X464] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X464),s('type.num.num',X465))),s('type.num.num',X466))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X465),s('type.num.num',X464))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X462),s('type.num.num',X463))))))) | s(bool,X467) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X463),s('type.num.num',X462))))) | s(bool,'T_0') = s(bool,X467)) )),
  inference(superposition,[],[f2812,f2449])).
fof(f31622,plain,(
  ( ! [X461,X457,X459,X460,X456,X458] : (s('type.num.num',X458) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X459))),s('type.num.num',X460))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X459),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X456),s('type.num.num',X457))))))),s('type.num.num',X458))) | s(bool,X461) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X457),s('type.num.num',X456))))) | s(bool,'T_0') = s(bool,X461)) )),
  inference(superposition,[],[f2812,f2449])).
fof(f31621,plain,(
  ( ! [X453,X455,X451,X452,X454,X450] : (s('type.num.num',X452) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X453),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X454))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X450),s('type.num.num',X451))))),s('type.num.num',X453))),s('type.num.num',X452))) | s(bool,X455) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X451),s('type.num.num',X450))))) | s(bool,'T_0') = s(bool,X455)) )),
  inference(superposition,[],[f2812,f2449])).
fof(f31620,plain,(
  ( ! [X445,X447,X449,X444,X446,X448] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X448),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X446),s('type.num.num',X447))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X446),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X444),s('type.num.num',X445))))),s('type.num.num',X448))))) | s(bool,X449) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X445),s('type.num.num',X444))))) | s(bool,'T_0') = s(bool,X449)) )),
  inference(superposition,[],[f2655,f2449])).
fof(f31618,plain,(
  ( ! [X436,X432,X434,X437,X433,X435] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X436))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X434),s('type.num.num',X435))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X434),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X436),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X432),s('type.num.num',X433))))))))) | s(bool,X437) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X433),s('type.num.num',X432))))) | s(bool,'T_0') = s(bool,X437)) )),
  inference(superposition,[],[f2655,f2449])).
fof(f31617,plain,(
  ( ! [X428,X430,X426,X429,X431,X427] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X428))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X429),s('type.num.num',X430))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X426),s('type.num.num',X427))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X430),s('type.num.num',X429))))) | s(bool,X431) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X427),s('type.num.num',X426))))) | s(bool,'T_0') = s(bool,X431)) )),
  inference(superposition,[],[f2655,f2449])).
fof(f32039,plain,(
  ( ! [X412,X413,X415,X411] : (s('type.fcp.cart'(bool,X413),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X413),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X411),s('type.num.num',X412))))))) | s(bool,X415) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X412),s('type.num.num',X411))))) | s(bool,'T_0') = s(bool,X415)) )),
  inference(forward_demodulation,[],[f32038,f29498])).
fof(f32038,plain,(
  ( ! [X412,X414,X413,X415,X411] : (s('type.fcp.cart'(bool,X413),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X414),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X413),'const.bool.the_value_0'))))))) = s('type.fcp.cart'(bool,X413),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X411),s('type.num.num',X412))))))) | s(bool,X415) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X412),s('type.num.num',X411))))) | s(bool,'T_0') = s(bool,X415)) )),
  inference(subsumption_resolution,[],[f31614,f482])).
fof(f31614,plain,(
  ( ! [X412,X414,X413,X415,X411] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X413),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X413),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X414),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X413),'const.bool.the_value_0'))))))) = s('type.fcp.cart'(bool,X413),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X411),s('type.num.num',X412))))))) | s(bool,X415) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X412),s('type.num.num',X411))))) | s(bool,'T_0') = s(bool,X415)) )),
  inference(superposition,[],[f2248,f2449])).
fof(f31608,plain,(
  ( ! [X389,X387,X388,X390,X386] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X388),s('type.num.num',X389))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X389),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X386),s('type.num.num',X387))))))) | s(bool,X390) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X387),s('type.num.num',X386))))) | s(bool,'T_0') = s(bool,X390)) )),
  inference(superposition,[],[f1213,f2449])).
fof(f31607,plain,(
  ( ! [X383,X385,X382,X384,X381] : (s('type.num.num',X383) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X384),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X381),s('type.num.num',X382))))),s('type.num.num',X383))) | s(bool,X385) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X382),s('type.num.num',X381))))) | s(bool,'T_0') = s(bool,X385)) )),
  inference(superposition,[],[f1213,f2449])).
fof(f31606,plain,(
  ( ! [X377,X379,X380,X376,X378,X375] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X377),s('type.num.num',X378)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X378),s('type.num.num',X377))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X379),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X375),s('type.num.num',X376))))))) | s(bool,X380) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X376),s('type.num.num',X375))))) | s(bool,'T_0') = s(bool,X380)) )),
  inference(superposition,[],[f1175,f2449])).
fof(f31605,plain,(
  ( ! [X372,X374,X370,X373,X369,X371] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X371),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X372)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X373),s('type.num.num',X371))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X372),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X369),s('type.num.num',X370))))))) | s(bool,X374) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X370),s('type.num.num',X369))))) | s(bool,'T_0') = s(bool,X374)) )),
  inference(superposition,[],[f1175,f2449])).
fof(f31604,plain,(
  ( ! [X364,X366,X368,X365,X367,X363] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X365),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X366),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X367),s('type.num.num',X365))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X363),s('type.num.num',X364))))),s('type.num.num',X366))) | s(bool,X368) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X364),s('type.num.num',X363))))) | s(bool,'T_0') = s(bool,X368)) )),
  inference(superposition,[],[f1175,f2449])).
fof(f31602,plain,(
  ( ! [X356,X352,X354,X351,X353,X355] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X353),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X354),s('type.num.num',X355))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X355),s('type.num.num',X354))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X351),s('type.num.num',X352)))))))) | s(bool,X356) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X352),s('type.num.num',X351))))) | s(bool,'T_0') = s(bool,X356)) )),
  inference(superposition,[],[f1167,f2449])).
fof(f31601,plain,(
  ( ! [X350,X346,X349,X345,X347,X348] : (s('type.num.num',X347) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X348),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X349),s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X345),s('type.num.num',X346))))),s('type.num.num',X349))),s('type.num.num',X347)))) | s(bool,X350) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X346),s('type.num.num',X345))))) | s(bool,'T_0') = s(bool,X350)) )),
  inference(superposition,[],[f1167,f2449])).
fof(f31600,plain,(
  ( ! [X344,X341,X343,X339,X340,X342] : (s('type.num.num',X341) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X342),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X343))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X343),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X339),s('type.num.num',X340))))))),s('type.num.num',X341)))) | s(bool,X344) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X340),s('type.num.num',X339))))) | s(bool,'T_0') = s(bool,X344)) )),
  inference(superposition,[],[f1167,f2449])).
fof(f32037,plain,(
  ( ! [X333,X335,X337,X334,X336,X338] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num',X337))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X335),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X335),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num',X336))))) = s('type.fcp.cart'(bool,X335),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X333),s('type.num.num',X334))))))) | s(bool,X338) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X334),s('type.num.num',X333))))) | s(bool,'T_0') = s(bool,X338)) )),
  inference(forward_demodulation,[],[f31599,f482])).
fof(f31599,plain,(
  ( ! [X333,X335,X337,X334,X336,X338] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X335),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num',X337))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X335),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X335),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num',X336))))) = s('type.fcp.cart'(bool,X335),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X333),s('type.num.num',X334))))))) | s(bool,X338) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X334),s('type.num.num',X333))))) | s(bool,'T_0') = s(bool,X338)) )),
  inference(superposition,[],[f1100,f2449])).
fof(f31598,plain,(
  ( ! [X327,X329,X331,X332,X328,X330] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X329),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X330),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X331))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X330),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X330),'const.words.n2w_1'(s('type.num.num',X329))) = s('type.fcp.cart'(bool,X330),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X331),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X327),s('type.num.num',X328))))))))) | s(bool,X332) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X328),s('type.num.num',X327))))) | s(bool,'T_0') = s(bool,X332)) )),
  inference(superposition,[],[f1100,f2449])).
fof(f31597,plain,(
  ( ! [X325,X321,X323,X324,X326,X322] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X323),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X324),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X325),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X324),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X324),'const.words.n2w_1'(s('type.num.num',X323))) = s('type.fcp.cart'(bool,X324),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X321),s('type.num.num',X322))))),s('type.num.num',X325))))) | s(bool,X326) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X322),s('type.num.num',X321))))) | s(bool,'T_0') = s(bool,X326)) )),
  inference(superposition,[],[f1100,f2449])).
fof(f31595,plain,(
  ( ! [X313,X315,X316,X312,X314,X317] : (s('type.fcp.cart'(bool,X314),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) != s('type.fcp.cart'(bool,X314),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X315),s('type.num.num',X316))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X316),s('type.num.num',X315))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X314),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X312),s('type.num.num',X313))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X314),'const.bool.the_value_0'))))) | s(bool,X317) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X313),s('type.num.num',X312))))) | s(bool,'T_0') = s(bool,X317)) )),
  inference(superposition,[],[f984,f2449])).
fof(f31594,plain,(
  ( ! [X308,X310,X306,X309,X311,X307] : (s('type.fcp.cart'(bool,X308),'const.words.n2w_1'(s('type.num.num',X309))) != s('type.fcp.cart'(bool,X308),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X310))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X309),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X308),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X310),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X306),s('type.num.num',X307))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X308),'const.bool.the_value_0'))))) | s(bool,X311) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X307),s('type.num.num',X306))))) | s(bool,'T_0') = s(bool,X311)) )),
  inference(superposition,[],[f984,f2449])).
fof(f31593,plain,(
  ( ! [X300,X302,X304,X301,X303,X305] : (s('type.fcp.cart'(bool,X302),'const.words.n2w_1'(s('type.num.num',X303))) != s('type.fcp.cart'(bool,X302),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X304),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X303),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X302),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X300),s('type.num.num',X301))))),s('type.num.num',X304))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X302),'const.bool.the_value_0'))))) | s(bool,X305) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X301),s('type.num.num',X300))))) | s(bool,'T_0') = s(bool,X305)) )),
  inference(superposition,[],[f984,f2449])).
fof(f31592,plain,(
  ( ! [X294,X296,X298,X295,X297,X299] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X296),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X297),s('type.num.num',X298))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X294),s('type.num.num',X295))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X296),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X297),s('type.num.num',X298))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X294),s('type.num.num',X295)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X296),s('type.num.num',X297))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X296),s('type.num.num',X298)))))))) | s(bool,X299) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X295),s('type.num.num',X294))))) | s(bool,'T_0') = s(bool,X299)) )),
  inference(superposition,[],[f924,f2449])).
fof(f31591,plain,(
  ( ! [X292,X288,X290,X293,X289,X291] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X290),s('type.num.num',X291))))),s('type.num.num',X292)))) | s('type.num.num',X292) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X288),s('type.num.num',X289))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X290),s('type.num.num',X291))))),s('type.num.num',sK2(X292,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X288),s('type.num.num',X289))))),s('type.num.num',X290))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X288),s('type.num.num',X289))))),s('type.num.num',X291)))))))) | s(bool,X293) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X289),s('type.num.num',X288))))) | s(bool,'T_0') = s(bool,X293)) )),
  inference(superposition,[],[f924,f2449])).
fof(f31590,plain,(
  ( ! [X282,X285,X287,X283,X284,X286] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X284),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X285),s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X286)))) | s('type.num.num',X286) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X284),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X285),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X282),s('type.num.num',X283))))))))),s('type.num.num',sK2(X286,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X284),s('type.num.num',X285))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X284),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X282),s('type.num.num',X283)))))))))))) | s(bool,X287) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X283),s('type.num.num',X282))))) | s(bool,'T_0') = s(bool,X287)) )),
  inference(superposition,[],[f924,f2449])).
fof(f31589,plain,(
  ( ! [X280,X277,X279,X281,X276,X278] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X278),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X279))))),s('type.num.num',X280)))) | s('type.num.num',X280) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X278),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X276),s('type.num.num',X277))))),s('type.num.num',X279))))),s('type.num.num',sK2(X280,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X278),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X276),s('type.num.num',X277))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X278),s('type.num.num',X279)))))))) | s(bool,X281) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X277),s('type.num.num',X276))))) | s(bool,'T_0') = s(bool,X281)) )),
  inference(superposition,[],[f924,f2449])).
fof(f31588,plain,(
  ( ! [X271,X273,X275,X270,X272,X274] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X272),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X273),s('type.num.num',X274)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X272),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X273),s('type.num.num',X274))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X270),s('type.num.num',X271))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X272),s('type.num.num',X273))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X272),s('type.num.num',X274)))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X270),s('type.num.num',X271)))))))) | s(bool,X275) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X271),s('type.num.num',X270))))) | s(bool,'T_0') = s(bool,X275)) )),
  inference(superposition,[],[f923,f2449])).
fof(f31587,plain,(
  ( ! [X269,X265,X267,X268,X264,X266] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X266),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X267),s('type.num.num',X268)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X264),s('type.num.num',X265))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X267),s('type.num.num',X268))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X266),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X264),s('type.num.num',X265))))),s('type.num.num',X267))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X264),s('type.num.num',X265))))),s('type.num.num',X268)))),X266)))) | s(bool,X269) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X265),s('type.num.num',X264))))) | s(bool,'T_0') = s(bool,X269)) )),
  inference(superposition,[],[f923,f2449])).
fof(f31586,plain,(
  ( ! [X261,X263,X259,X260,X262,X258] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X260),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X261),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num','const.num.|48|_0')))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X261),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num',X259))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X260),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X261),s('type.num.num',X262))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X261),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num',X259)))))))),X260)))) | s(bool,X263) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X259),s('type.num.num',X258))))) | s(bool,'T_0') = s(bool,X263)) )),
  inference(superposition,[],[f923,f2449])).
fof(f31585,plain,(
  ( ! [X255,X253,X257,X254,X256,X252] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X254),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X255),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X256)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X255),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X252),s('type.num.num',X253))))),s('type.num.num',X256))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X254),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X255),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X252),s('type.num.num',X253))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X255),s('type.num.num',X256)))),X254)))) | s(bool,X257) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X253),s('type.num.num',X252))))) | s(bool,'T_0') = s(bool,X257)) )),
  inference(superposition,[],[f923,f2449])).
fof(f31577,plain,(
  ( ! [X218,X220,X219,X217,X221] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X219),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X220),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X217),s('type.num.num',X218))))),s('type.num.num',X219))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X217),s('type.num.num',X218))))),s('type.num.num',X219))))) | s(bool,X221) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X218),s('type.num.num',X217))))) | s(bool,'T_0') = s(bool,X221)) )),
  inference(superposition,[],[f718,f2449])).
fof(f31576,plain,(
  ( ! [X212,X216,X215,X213,X214] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X214)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X215),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X212),s('type.num.num',X213))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X212),s('type.num.num',X213))))))))) | s(bool,X216) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X213),s('type.num.num',X212))))) | s(bool,'T_0') = s(bool,X216)) )),
  inference(superposition,[],[f718,f2449])).
fof(f31575,plain,(
  ( ! [X210,X208,X211,X209] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X210),'const.bool.the_value_0'))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X208),s('type.num.num',X209))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X210),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X208),s('type.num.num',X209)))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X210),'const.bool.the_value_0')))))))) | s(bool,X211) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X209),s('type.num.num',X208))))) | s(bool,'T_0') = s(bool,X211)) )),
  inference(superposition,[],[f646,f2449])).
fof(f31574,plain,(
  ( ! [X206,X204,X207,X205] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X206),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X206),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X204),s('type.num.num',X205))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X206),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X204),s('type.num.num',X205)))))))) | s(bool,X207) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X205),s('type.num.num',X204))))) | s(bool,'T_0') = s(bool,X207)) )),
  inference(superposition,[],[f645,f2449])).
fof(f31572,plain,(
  ( ! [X198,X196,X200,X199,X197] : (s(bool,X198) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X199))) | s('type.num.num',X199) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X196),s('type.num.num',X197))))),s('type.num.num',sK2(X199,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X196),s('type.num.num',X197)))))))) | s(bool,'T_0') = s(bool,X198) | s(bool,X200) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X197),s('type.num.num',X196))))) | s(bool,'T_0') = s(bool,X200)) )),
  inference(superposition,[],[f605,f2449])).
fof(f31571,plain,(
  ( ! [X191,X194,X192,X195,X193] : (s(bool,X193) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X194),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X191),s('type.num.num',X192))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X194),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X191),s('type.num.num',X192)))),X194)))) | s(bool,'T_0') = s(bool,X193) | s(bool,X195) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X192),s('type.num.num',X191))))) | s(bool,'T_0') = s(bool,X195)) )),
  inference(superposition,[],[f605,f2449])).
fof(f31570,plain,(
  ( ! [X189,X187,X190,X188,X186] : (s('type.num.num',X188) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X188,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X186),s('type.num.num',X187)))))))) | s(bool,X189) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X186),s('type.num.num',X187))))),s('type.num.num',X188))) | s(bool,'T_0') = s(bool,X189) | s(bool,X190) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X187),s('type.num.num',X186))))) | s(bool,'T_0') = s(bool,X190)) )),
  inference(superposition,[],[f605,f2449])).
fof(f31569,plain,(
  ( ! [X185,X182,X184,X183,X181] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num',X184)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X184),s('type.num.num',X183))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X181),s('type.num.num',X182))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X184),s('type.num.num',X183)),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X181),s('type.num.num',X182)))))))) | s(bool,X185) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X182),s('type.num.num',X181))))) | s(bool,'T_0') = s(bool,X185)) )),
  inference(superposition,[],[f593,f2449])).
fof(f31568,plain,(
  ( ! [X177,X180,X178,X176,X179] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X178),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X179),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X176),s('type.num.num',X177))))),s('type.num.num',X179))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X178),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X176),s('type.num.num',X177))))),s('type.num.num',X179)),X178)))) | s(bool,X180) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X177),s('type.num.num',X176))))) | s(bool,'T_0') = s(bool,X180)) )),
  inference(superposition,[],[f593,f2449])).
fof(f31567,plain,(
  ( ! [X175,X173,X171,X174,X172] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X173),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X174)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X174),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num',X172))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X173),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X174),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num',X172)))))),X173)))) | s(bool,X175) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X172),s('type.num.num',X171))))) | s(bool,'T_0') = s(bool,X175)) )),
  inference(superposition,[],[f593,f2449])).
fof(f31566,plain,(
  ( ! [X167,X169,X166,X170,X168] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X168),s('type.num.num',X169))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num',X167))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num',X168))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num',X167)))),'const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num',X168)))))) | s(bool,X170) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X167),s('type.num.num',X166))))) | s(bool,'T_0') = s(bool,X170)) )),
  inference(superposition,[],[f590,f2449])).
fof(f31565,plain,(
  ( ! [X165,X163,X161,X164,X162] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X164)))) | s('type.num.num',X164) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X161),s('type.num.num',X162))))),s('type.num.num',X163))),s('type.num.num',sK2(X164,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X161),s('type.num.num',X162))))),s('type.num.num',X163)))))) | s(bool,X165) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X162),s('type.num.num',X161))))) | s(bool,'T_0') = s(bool,X165)) )),
  inference(superposition,[],[f590,f2449])).
fof(f31564,plain,(
  ( ! [X158,X156,X159,X157,X160] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X158))),s('type.num.num',X159)))) | s('type.num.num',X159) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X158),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X156),s('type.num.num',X157))))))),s('type.num.num',sK2(X159,'const.arithmetic.+_2'(s('type.num.num',X158),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X156),s('type.num.num',X157)))))))))) | s(bool,X160) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num',X156))))) | s(bool,'T_0') = s(bool,X160)) )),
  inference(superposition,[],[f590,f2449])).
fof(f31559,plain,(
  ( ! [X138,X136,X135,X139,X137] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X137),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X138),s('type.num.num',X137))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X135),s('type.num.num',X136))))) | s(bool,X139) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X136),s('type.num.num',X135))))) | s(bool,'T_0') = s(bool,X139)) )),
  inference(superposition,[],[f525,f2449])).
fof(f31558,plain,(
  ( ! [X134,X132,X130,X133,X131] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X132)))) | s('type.num.num',X132) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X133),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X130),s('type.num.num',X131))))))) | s(bool,X134) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X131),s('type.num.num',X130))))) | s(bool,'T_0') = s(bool,X134)) )),
  inference(superposition,[],[f525,f2449])).
fof(f31557,plain,(
  ( ! [X127,X125,X128,X126,X124,X129] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X127))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X124),s('type.num.num',X125))))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X127),s('type.num.num',X126))),s('type.num.num',X128))) | s(bool,X129) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num',X124))))) | s(bool,'T_0') = s(bool,X129)) )),
  inference(superposition,[],[f519,f2449])).
fof(f31556,plain,(
  ( ! [X123,X121,X118,X122,X120,X119] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X120))),s('type.num.num',X121)))) | s('type.num.num',X121) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X120),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X118),s('type.num.num',X119))))))),s('type.num.num',X122))) | s(bool,X123) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X119),s('type.num.num',X118))))) | s(bool,'T_0') = s(bool,X123)) )),
  inference(superposition,[],[f519,f2449])).
fof(f31555,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X115)))) | s('type.num.num',X115) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X112),s('type.num.num',X113))))),s('type.num.num',X114))),s('type.num.num',X116))) | s(bool,X117) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X113),s('type.num.num',X112))))) | s(bool,'T_0') = s(bool,X117)) )),
  inference(superposition,[],[f519,f2449])).
fof(f31554,plain,(
  ( ! [X111,X109,X107,X110,X108,X106] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X108),s('type.num.num',X109)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X109),s('type.num.num',X108))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X106),s('type.num.num',X107))))),s('type.num.num',X110))) | s(bool,X111) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X107),s('type.num.num',X106))))) | s(bool,'T_0') = s(bool,X111)) )),
  inference(superposition,[],[f516,f2449])).
fof(f31553,plain,(
  ( ! [X103,X101,X105,X102,X100,X104] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X102),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X103)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X102),s('type.num.num',X104))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X103),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X100),s('type.num.num',X101))))))) | s(bool,X105) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num',X100))))) | s(bool,'T_0') = s(bool,X105)) )),
  inference(superposition,[],[f516,f2449])).
fof(f31552,plain,(
  ( ! [X94,X99,X97,X95,X98,X96] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X96),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X96),s('type.num.num',X98))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X94),s('type.num.num',X95))))),s('type.num.num',X97))) | s(bool,X99) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X95),s('type.num.num',X94))))) | s(bool,'T_0') = s(bool,X99)) )),
  inference(superposition,[],[f516,f2449])).
fof(f31549,plain,(
  ( ! [X85,X83,X84,X82] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X82),s('type.num.num',X83))))),s('type.num.num',X84))))) | s(bool,X85) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num',X82))))) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f474,f2449])).
fof(f31548,plain,(
  ( ! [X80,X78,X81,X79] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X80)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X80),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X79))))))))) | s(bool,X81) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',X78))))) | s(bool,'T_0') = s(bool,X81)) )),
  inference(superposition,[],[f474,f2449])).
fof(f31542,plain,(
  ( ! [X54,X52,X50,X53,X51] : (s('type.num.num',X52) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',X51))))),s('type.num.num',X52)))) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',X50))))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f103,f2449])).
fof(f31541,plain,(
  ( ! [X47,X45,X48,X46,X49] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num',X48))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X47),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',X46)))))))) | s(bool,X49) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',X45))))) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f103,f2449])).
fof(f31540,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X43)))) | s('type.num.num',X43) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X42))))),s('type.num.num',sK2(X43,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X42)))))))) | s(bool,X44) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X41))))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f102,f2449])).
fof(f31539,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X39),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X38))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num',X38)))),X39)))) | s(bool,X40) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X37))))) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f102,f2449])).
fof(f32034,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X22),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X21),'const.words.n2w_1'(s('type.num.num',X22))) = s('type.fcp.cart'(bool,X21),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X20))))))) | s(bool,X23) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))))) | s(bool,'T_0') = s(bool,X23)) )),
  inference(forward_demodulation,[],[f31535,f482])).
fof(f31535,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X22),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X21),'const.words.n2w_1'(s('type.num.num',X22))) = s('type.fcp.cart'(bool,X21),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X20))))))) | s(bool,X23) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))))) | s(bool,'T_0') = s(bool,X23)) )),
  inference(superposition,[],[f100,f2449])).
fof(f31533,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s('type.fcp.cart'(bool,X11),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) != s('type.fcp.cart'(bool,X11),'const.words.n2w_1'(s('type.num.num',X12))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X12),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X10))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))) | s(bool,X13) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X9))))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f99,f2449])).
fof(f31490,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s(bool,X69) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X68))))),s('type.num.num',X70))))) | s(bool,'T_0') = s(bool,X69) | s(bool,X71) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X68),s('type.num.num',X67))))) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f2449,f2449])).
fof(f31487,plain,(
  ( ! [X59,X57,X58,X56,X55] : (s(bool,X57) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X56))),s('type.num.num',X58))))) | s(bool,'T_0') = s(bool,X57) | s(bool,X59) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f2449,f734])).
fof(f31486,plain,(
  ( ! [X54,X52,X53,X51] : (s(bool,X52) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))),s('type.num.num',X53))))) | s(bool,'T_0') = s(bool,X52) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f2449,f483])).
fof(f31471,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s(bool,X13) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X12))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11)))),s('type.num.num',X14))))) | s(bool,'T_0') = s(bool,X13) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f2449,f605])).
fof(f31462,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s(bool,X69) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X68))))))))) | s(bool,'T_0') = s(bool,X69) | s(bool,X71) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X68),s('type.num.num',X67))))) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f2449,f2449])).
fof(f31459,plain,(
  ( ! [X59,X57,X58,X56,X55] : (s(bool,X57) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X58))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X56))))))) | s(bool,'T_0') = s(bool,X57) | s(bool,X59) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f2449,f734])).
fof(f31458,plain,(
  ( ! [X54,X52,X53,X51] : (s(bool,X52) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))))))) | s(bool,'T_0') = s(bool,X52) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f2449,f483])).
fof(f31443,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s(bool,X13) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X14))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11)))))))) | s(bool,'T_0') = s(bool,X13) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f2449,f605])).
fof(f31389,plain,(
  ( ! [X80,X83,X81,X79,X82] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X82),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X80),s('type.num.num',X79))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X81),'const.bool.the_value_0'))))))))) | s(bool,X83) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',X80))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X81),'const.bool.the_value_0'))))),s('type.num.num',X82))))) | s(bool,'T_0') = s(bool,X83)) )),
  inference(superposition,[],[f2449,f4499])).
fof(f31386,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num','const.num.|48|_0'))))) | s(bool,X70) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X68))))),s('type.num.num',X69))))) | s(bool,'T_0') = s(bool,X70) | s(bool,X71) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X68),s('type.num.num',X67))))) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f2449,f2449])).
fof(f31383,plain,(
  ( ! [X59,X57,X58,X56,X55] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num','const.num.|48|_0'))))) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X56))),s('type.num.num',X57))))) | s(bool,'T_0') = s(bool,X58) | s(bool,X59) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f2449,f734])).
fof(f31382,plain,(
  ( ! [X54,X52,X53,X51] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num','const.num.|48|_0'))))) | s(bool,X53) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))),s('type.num.num',X52))))) | s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f2449,f483])).
fof(f31367,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X12))))) | s(bool,X14) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11)))),s('type.num.num',X13))))) | s(bool,'T_0') = s(bool,X14) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f2449,f605])).
fof(f31365,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))))))) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2449,f101])).
fof(f31361,plain,(
  ( ! [X80,X83,X81,X79,X82] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X80),s('type.num.num',X79))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X81),'const.bool.the_value_0'))))),s('type.num.num',X82))))) | s(bool,X83) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X82),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',X80))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X81),'const.bool.the_value_0'))))))))) | s(bool,'T_0') = s(bool,X83)) )),
  inference(superposition,[],[f2449,f4499])).
fof(f31358,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X69))))) | s(bool,X70) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X68))))))))) | s(bool,'T_0') = s(bool,X70) | s(bool,X71) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X68),s('type.num.num',X67))))) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f2449,f2449])).
fof(f31355,plain,(
  ( ! [X59,X57,X58,X56,X55] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X57))))) | s(bool,X58) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X56))))))) | s(bool,'T_0') = s(bool,X58) | s(bool,X59) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f2449,f734])).
fof(f31354,plain,(
  ( ! [X54,X52,X53,X51] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X52))))) | s(bool,X53) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))))))) | s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f2449,f483])).
fof(f31339,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X13))))) | s(bool,X14) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11)))))))) | s(bool,'T_0') = s(bool,X14) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f2449,f605])).
fof(f31337,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))),s('type.num.num',X5))))) | s(bool,X6) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2449,f101])).
fof(f30513,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s('type.num.num',X43) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X43,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X45),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X45),'const.bool.the_value_0')))))))) | s(bool,X46) = s(bool,X47) | s(bool,X47) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X43))) | s(bool,X46) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f30457,f78])).
fof(f30457,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (~p(s(bool,'T_0')) | s('type.num.num',X43) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X43,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X44),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X45),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X45),'const.bool.the_value_0')))))))) | s(bool,X46) = s(bool,X47) | s(bool,X47) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X43))) | s(bool,X46) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f2292,f262])).
fof(f30512,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))))))))) )),
  inference(subsumption_resolution,[],[f30448,f78])).
fof(f30448,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X5)),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f2292,f562])).
fof(f30511,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X4),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X4),'const.bool.the_value_0'))))))))) )),
  inference(subsumption_resolution,[],[f30447,f78])).
fof(f30447,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.num.|48|_0')),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X4),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X4),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f2292,f533])).
fof(f30443,plain,(
  ( ! [X78,X76,X74,X77,X75] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X74))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0')))))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',X75))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',X75))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X77),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X78),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X78),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f2292,f4499])).
fof(f30502,plain,(
  ( ! [X47,X50,X48,X49] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X48),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X47))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X48),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X49),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X50),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X50),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X48),'const.bool.the_value_0'))))))))))) )),
  inference(forward_demodulation,[],[f30436,f906])).
fof(f30436,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X48),'const.bool.the_value_0')))))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X47))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X48),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X47))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X48),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X49),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X50),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X50),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f2292,f906])).
fof(f30501,plain,(
  ( ! [X45,X43,X46,X44] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X43),'const.bool.the_value_0'))),s('type.num.num',X44))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X43),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X44)))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X45),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X46),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X46),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X43),'const.bool.the_value_0'))),s('type.num.num',X44))))))))) )),
  inference(forward_demodulation,[],[f30435,f891])).
fof(f30435,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X43),'const.bool.the_value_0'))),s('type.num.num',X44)))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X43),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X44))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X43),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X44)))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X45),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X46),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X46),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f2292,f891])).
fof(f30422,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0')))))))) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f2292,f605])).
fof(f30345,plain,(
  ( ! [X45,X43,X41,X46,X44,X42] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X43),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X43),'const.bool.the_value_0')))),X41)))) | s(bool,X44) = s(bool,X45) | s(bool,X45) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X41),s('type.num.num','const.num.|48|_0'))) | s(bool,X44) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f30280,f78])).
fof(f30280,plain,(
  ( ! [X45,X43,X41,X46,X44,X42] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X42),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X43),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X43),'const.bool.the_value_0')))),X41)))) | s(bool,X44) = s(bool,X45) | s(bool,X45) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X41),s('type.num.num','const.num.|48|_0'))) | s(bool,X44) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f2291,f262])).
fof(f30266,plain,(
  ( ! [X78,X76,X74,X77,X75] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X74))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',X75))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X77),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X78),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X78),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',X75))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f2291,f4499])).
fof(f30329,plain,(
  ( ! [X47,X50,X48,X49] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X48),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X49),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X50),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X50),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X47))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X48),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X48),'const.bool.the_value_0'))))))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f30259,f906])).
fof(f30259,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X47),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X48),'const.bool.the_value_0'))))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X47))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X48),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X49),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X50),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X50),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X47))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X48),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f2291,f906])).
fof(f30328,plain,(
  ( ! [X45,X43,X46,X44] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X43),'const.bool.the_value_0'))),s('type.num.num',X44))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X45),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X46),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X46),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X43),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X44)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X43),'const.bool.the_value_0'))),s('type.num.num',X44))))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f30258,f891])).
fof(f30258,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X43),'const.bool.the_value_0'))),s('type.num.num',X44))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X43),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X44))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X45),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X46),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X46),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X43),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X44))))))))) )),
  inference(superposition,[],[f2291,f891])).
fof(f30245,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11)))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11))))))) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f2291,f605])).
fof(f30047,plain,(
  ( ! [X12,X10,X11] : (s(bool,X10) = s(bool,X11) | s(bool,X11) = s(bool,g(s(bool,'T_0'))) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl51),
  inference(trivial_inequality_removal,[],[f30040])).
fof(f30040,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X10) = s(bool,X11) | s(bool,X11) = s(bool,g(s(bool,'T_0'))) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl51),
  inference(superposition,[],[f5868,f262])).
fof(f30049,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl51),
  inference(trivial_inequality_removal,[],[f30034])).
fof(f30034,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl51),
  inference(superposition,[],[f5868,f154])).
fof(f30019,plain,(
  ( ! [X8,X9] : (s(bool,X8) != s(bool,g(s(bool,X8))) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl51),
  inference(superposition,[],[f5868,f154])).
fof(f30017,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,g(s(bool,X0))) | s(bool,X1) = s(bool,X2) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X0) = s(bool,X1)) ) | $spl51),
  inference(superposition,[],[f5868,f262])).
fof(f29580,plain,(
  ( ! [X76,X74,X77,X75] : (s('type.fcp.cart'(bool,X77),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X77),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',X75))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X74))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X77),'const.bool.the_value_0')))))) )),
  inference(forward_demodulation,[],[f29525,f29498])).
fof(f29525,plain,(
  ( ! [X78,X76,X74,X77,X75] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X74))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X77),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X77),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X78),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X77),'const.bool.the_value_0'))))))) = s('type.fcp.cart'(bool,X77),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',X75))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f2248,f4499])).
fof(f29571,plain,(
  ( ! [X59,X57,X56,X55] : (s('type.fcp.cart'(bool,X57),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X57),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X56))))) | s(bool,X59) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(forward_demodulation,[],[f29570,f29498])).
fof(f29570,plain,(
  ( ! [X59,X57,X58,X56,X55] : (s('type.fcp.cart'(bool,X57),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X58),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X57),'const.bool.the_value_0'))))))) = s('type.fcp.cart'(bool,X57),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X56))))) | s(bool,X59) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(subsumption_resolution,[],[f29520,f482])).
fof(f29520,plain,(
  ( ! [X59,X57,X58,X56,X55] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X57),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X57),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X58),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X57),'const.bool.the_value_0'))))))) = s('type.fcp.cart'(bool,X57),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X56))))) | s(bool,X59) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f2248,f734])).
fof(f29569,plain,(
  ( ! [X54,X52,X51] : (s('type.fcp.cart'(bool,X52),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X52),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))))) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(forward_demodulation,[],[f29568,f29498])).
fof(f29568,plain,(
  ( ! [X54,X52,X53,X51] : (s('type.fcp.cart'(bool,X52),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))))) = s('type.fcp.cart'(bool,X52),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X53),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X52),'const.bool.the_value_0'))))))) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f29519,f482])).
fof(f29519,plain,(
  ( ! [X54,X52,X53,X51] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X52),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X52),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))))) = s('type.fcp.cart'(bool,X52),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X53),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X52),'const.bool.the_value_0'))))))) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f2248,f483])).
fof(f29547,plain,(
  ( ! [X12,X15,X13,X11] : (s('type.fcp.cart'(bool,X13),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X13),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11)))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X12),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X13),'const.bool.the_value_0'))))) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(forward_demodulation,[],[f29504,f29498])).
fof(f29504,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X12),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X13),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X13),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11)))))) = s('type.fcp.cart'(bool,X13),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X13),'const.bool.the_value_0'))))))) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f2248,f605])).
fof(f29541,plain,(
  ( ! [X2,X0] : (s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))))))) )),
  inference(backward_demodulation,[],[f29498,f29500])).
fof(f29498,plain,(
  ( ! [X0,X1] : (s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))))) )),
  inference(unit_resulting_resolution,[],[f482,f2248])).
fof(f29499,plain,(
  ( ! [X2,X0,X1] : (s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))))) )),
  inference(unit_resulting_resolution,[],[f733,f2248])).
fof(f29500,plain,(
  ( ! [X2,X0,X1] : (s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))))))) )),
  inference(unit_resulting_resolution,[],[f4301,f2248])).
fof(f20605,plain,(
  ( ! [X327,X329,X331,X328,X330] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X327) = s(fun(bool,bool),X328) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X327,X328,bool,bool)))) | s(bool,X329) = s(bool,X330) | s(bool,X330) = s(bool,X331) | s(bool,'T_0') = s(bool,X331) | s(bool,X329) = s(bool,sK3(X327,X328,bool,bool))) )),
  inference(superposition,[],[f809,f262])).
fof(f29234,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,X3) = s(bool,X4) | s(bool,X4) = s(bool,g(s(bool,'T_0'))) | s(bool,X0) = s(bool,X3)) ) | $spl28),
  inference(condensation,[],[f29233])).
fof(f29233,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X34) = s(fun(bool,bool),X35) | s(bool,'T_0') = s(bool,X36) | s(bool,X37) = s(bool,X38) | s(bool,X38) = s(bool,g(s(bool,'T_0'))) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) ) | $spl28),
  inference(subsumption_resolution,[],[f27639,f17878])).
fof(f27639,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X34) = s(fun(bool,bool),X35) | s(bool,X36) = s(bool,sK3(X34,X35,bool,bool)) | s(bool,'T_0') = s(bool,X36) | s(bool,X37) = s(bool,X38) | s(bool,X38) = s(bool,g(s(bool,'T_0'))) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f800,f262])).
fof(f29230,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,X3) = s(bool,X4) | s(bool,X0) = s(bool,X4) | s(bool,X3) = s(bool,g(s(bool,'T_0')))) ) | $spl28),
  inference(condensation,[],[f29229])).
fof(f29229,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X40) = s(fun(bool,bool),X41) | s(bool,'T_0') = s(bool,X42) | s(bool,X43) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,X43) = s(bool,g(s(bool,'T_0')))) ) | $spl28),
  inference(subsumption_resolution,[],[f27640,f17878])).
fof(f27640,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X40) = s(fun(bool,bool),X41) | s(bool,X42) = s(bool,sK3(X40,X41,bool,bool)) | s(bool,'T_0') = s(bool,X42) | s(bool,X43) = s(bool,X44) | s(bool,X44) = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,X43) = s(bool,g(s(bool,'T_0')))) )),
  inference(superposition,[],[f800,f262])).
fof(f28434,plain,(
  ( ! [X237,X235,X233,X236,X234] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X235),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X236),s('type.num.num',X237))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X233),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X234))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X234)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X235),s('type.num.num',X236))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X235),s('type.num.num',X237)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X235),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X236),s('type.num.num',X237))))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f28342,f2062])).
fof(f28342,plain,(
  ( ! [X237,X235,X233,X236,X234] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X235),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X236),s('type.num.num',X237))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X233),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X234))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X234))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X235),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X236),s('type.num.num',X237))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X233),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X234))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X234)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X235),s('type.num.num',X236))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X235),s('type.num.num',X237))))))))) )),
  inference(superposition,[],[f924,f2062])).
fof(f28430,plain,(
  ( ! [X216,X215,X213,X217,X214] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X215),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X216),s('type.num.num',X217))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X215),s('type.num.num',X216))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X215),s('type.num.num',X217)))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X213),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X214))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X214)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X215),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X216),s('type.num.num',X217))))))))) )),
  inference(forward_demodulation,[],[f28338,f2062])).
fof(f28338,plain,(
  ( ! [X216,X215,X213,X217,X214] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X215),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X216),s('type.num.num',X217)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X215),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X216),s('type.num.num',X217))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X213),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X214))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X214))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X215),s('type.num.num',X216))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X215),s('type.num.num',X217)))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X213),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X214))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X214))))))))) )),
  inference(superposition,[],[f923,f2062])).
fof(f28423,plain,(
  ( ! [X165,X166,X164] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X166),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X164),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X165))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X165)))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X166),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X166),'const.bool.the_value_0'))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f28325,f2062])).
fof(f28325,plain,(
  ( ! [X165,X166,X164] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X166),'const.bool.the_value_0'))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X164),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X165))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X165))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X166),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X164),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X165))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X165)))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X166),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f2062])).
fof(f28422,plain,(
  ( ! [X163,X161,X162] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X163),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X163),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X161),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X162))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X162)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X163),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f28324,f2062])).
fof(f28324,plain,(
  ( ! [X163,X161,X162] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X163),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X163),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X161),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X162))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X162))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X163),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X161),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X162))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X162))))))))) )),
  inference(superposition,[],[f645,f2062])).
fof(f28420,plain,(
  ( ! [X154,X152,X151,X153] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X154),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X152))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X152)))),X154)))) | s(bool,X153) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X154),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X153)) )),
  inference(forward_demodulation,[],[f28321,f2062])).
fof(f28321,plain,(
  ( ! [X154,X152,X151,X153] : (s(bool,X153) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X154),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X152))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X152))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X154),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X151),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X152))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X152)))),X154)))) | s(bool,'T_0') = s(bool,X153)) )),
  inference(superposition,[],[f605,f2062])).
fof(f28419,plain,(
  ( ! [X149,X147,X150,X148] : (s(bool,X150) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X149))) | s('type.num.num',X149) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X149,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X147),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X148))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X148)))))))) | s(bool,'T_0') = s(bool,X150)) )),
  inference(forward_demodulation,[],[f28320,f2062])).
fof(f28320,plain,(
  ( ! [X149,X147,X150,X148] : (s('type.num.num',X149) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X149,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X147),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X148))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X148)))))))) | s(bool,X150) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X147),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X148))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X148))))),s('type.num.num',X149))) | s(bool,'T_0') = s(bool,X150)) )),
  inference(superposition,[],[f605,f2062])).
fof(f28418,plain,(
  ( ! [X146,X144,X145,X143] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X146),s('type.num.num',X145))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X146),s('type.num.num',X145)),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X143),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X144))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X144)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num',X146))))))) )),
  inference(forward_demodulation,[],[f28319,f2062])).
fof(f28319,plain,(
  ( ! [X146,X144,X145,X143] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num',X146)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X146),s('type.num.num',X145))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X143),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X144))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X144))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X146),s('type.num.num',X145)),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X143),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X144))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X144))))))))) )),
  inference(superposition,[],[f593,f2062])).
fof(f28415,plain,(
  ( ! [X134,X132,X133,X131] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X134),s('type.num.num',X133))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X131),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X132))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X132)))),'const.arithmetic.+_2'(s('type.num.num',X134),s('type.num.num',X133)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X133),s('type.num.num',X134))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f28316,f2062])).
fof(f28316,plain,(
  ( ! [X134,X132,X133,X131] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X133),s('type.num.num',X134))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X131),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X132))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X132))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X134),s('type.num.num',X133))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X131),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X132))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X132)))),'const.arithmetic.+_2'(s('type.num.num',X134),s('type.num.num',X133))))))) )),
  inference(superposition,[],[f590,f2062])).
fof(f28399,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X34,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X33))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X33)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X34))))) )),
  inference(forward_demodulation,[],[f28290,f2062])).
fof(f28290,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X34)))) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X33))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X33))))),s('type.num.num',sK2(X34,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X33))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X33))))))))) )),
  inference(superposition,[],[f102,f2062])).
fof(f28398,plain,(
  ( ! [X30,X31,X29] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X30))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X30)))),X31)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f28289,f2062])).
fof(f28289,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X30))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X30))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X30))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X30)))),X31))))) )),
  inference(superposition,[],[f102,f2062])).
fof(f28251,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) )),
  inference(superposition,[],[f2062,f105])).
fof(f27615,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,f(s(bool,X0))) != s(X1,g(s(bool,X0))) | s(fun(bool,X1),X2) = s(fun(bool,X1),X3) | s(bool,X4) = s(bool,sK3(X2,X3,X1,bool)) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f800,f262])).
fof(f27098,plain,(
  ( ! [X480,X482,X481] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X481),s('type.num.num',X480))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X482),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X480),s('type.num.num',X481))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X482),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f7650,f4499])).
fof(f27093,plain,(
  ( ! [X455,X457,X459,X454,X456,X458] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X457),s('type.num.num',X458))),s('type.num.num',X459))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X455),s('type.num.num',X454))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X456),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X458),s('type.num.num',X457))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X454),s('type.num.num',X455))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X456),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f2812,f4499])).
fof(f27092,plain,(
  ( ! [X453,X449,X451,X452,X448,X450] : (s('type.num.num',X451) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X449),s('type.num.num',X448))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X450),'const.bool.the_value_0'))))),s('type.num.num',X452))),s('type.num.num',X453))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X452),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X448),s('type.num.num',X449))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X450),'const.bool.the_value_0'))))))),s('type.num.num',X451)))) )),
  inference(superposition,[],[f2812,f4499])).
fof(f27091,plain,(
  ( ! [X445,X447,X443,X444,X446,X442] : (s('type.num.num',X445) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X446),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X443),s('type.num.num',X442))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X444),'const.bool.the_value_0'))))))),s('type.num.num',X447))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X442),s('type.num.num',X443))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X444),'const.bool.the_value_0'))))),s('type.num.num',X446))),s('type.num.num',X445)))) )),
  inference(superposition,[],[f2812,f4499])).
fof(f27090,plain,(
  ( ! [X441,X436,X438,X440,X437,X439] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X439),s('type.num.num',X440))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X441),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X437),s('type.num.num',X436))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X438),'const.bool.the_value_0'))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X439),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X436),s('type.num.num',X437))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X438),'const.bool.the_value_0'))))),s('type.num.num',X441)))))) )),
  inference(superposition,[],[f2655,f4499])).
fof(f27088,plain,(
  ( ! [X428,X424,X426,X429,X425,X427] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X427),s('type.num.num',X428))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X425),s('type.num.num',X424))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X426),'const.bool.the_value_0'))))),s('type.num.num',X429))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X427),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X429),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X424),s('type.num.num',X425))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X426),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f2655,f4499])).
fof(f27087,plain,(
  ( ! [X420,X422,X418,X421,X423,X419] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X422),s('type.num.num',X423))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X419),s('type.num.num',X418))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X420),'const.bool.the_value_0'))))),s('type.num.num',X421))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X418),s('type.num.num',X419))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X420),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X423),s('type.num.num',X422)))))) )),
  inference(superposition,[],[f2655,f4499])).
fof(f27083,plain,(
  ( ! [X405,X401,X403,X404,X402] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X404),s('type.num.num',X405))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X402),s('type.num.num',X401))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X403),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X405),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X401),s('type.num.num',X402))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X403),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f1213,f4499])).
fof(f27082,plain,(
  ( ! [X397,X399,X396,X398,X400] : (s('type.num.num',X399) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X400),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X397),s('type.num.num',X396))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X398),'const.bool.the_value_0'))))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X396),s('type.num.num',X397))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X398),'const.bool.the_value_0'))))),s('type.num.num',X399)))) )),
  inference(superposition,[],[f1213,f4499])).
fof(f27081,plain,(
  ( ! [X391,X393,X395,X390,X392,X394] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X391),s('type.num.num',X390))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X392),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X393),s('type.num.num',X394)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X394),s('type.num.num',X393))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X395),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X390),s('type.num.num',X391))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X392),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f1175,f4499])).
fof(f27080,plain,(
  ( ! [X389,X385,X387,X388,X384,X386] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X387),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X385),s('type.num.num',X384))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X386),'const.bool.the_value_0'))))),s('type.num.num',X388)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X389),s('type.num.num',X387))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X388),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X384),s('type.num.num',X385))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X386),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f1175,f4499])).
fof(f27079,plain,(
  ( ! [X383,X379,X380,X382,X378,X381] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X381),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X382),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X379),s('type.num.num',X378))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X380),'const.bool.the_value_0')))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X383),s('type.num.num',X381))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X378),s('type.num.num',X379))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X380),'const.bool.the_value_0'))))),s('type.num.num',X382)))) )),
  inference(superposition,[],[f1175,f4499])).
fof(f27077,plain,(
  ( ! [X366,X368,X370,X367,X369,X371] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X369),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X370),s('type.num.num',X371))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X367),s('type.num.num',X366))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X368),'const.bool.the_value_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X371),s('type.num.num',X370))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X366),s('type.num.num',X367))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X368),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f1167,f4499])).
fof(f27076,plain,(
  ( ! [X364,X360,X362,X365,X361,X363] : (s('type.num.num',X363) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X364),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X365),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X361),s('type.num.num',X360))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X362),'const.bool.the_value_0'))))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X360),s('type.num.num',X361))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X362),'const.bool.the_value_0'))))),s('type.num.num',X365))),s('type.num.num',X363))))) )),
  inference(superposition,[],[f1167,f4499])).
fof(f27075,plain,(
  ( ! [X356,X358,X354,X357,X359,X355] : (s('type.num.num',X357) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X358),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X355),s('type.num.num',X354))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X356),'const.bool.the_value_0'))))),s('type.num.num',X359))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X359),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X354),s('type.num.num',X355))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X356),'const.bool.the_value_0'))))))),s('type.num.num',X357))))) )),
  inference(superposition,[],[f1167,f4499])).
fof(f27074,plain,(
  ( ! [X350,X352,X349,X351,X353,X348] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X352),s('type.num.num',X353))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X351),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X349),s('type.num.num',X348))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X350),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X351),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X351),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X353),s('type.num.num',X352))))) = s('type.fcp.cart'(bool,X351),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X348),s('type.num.num',X349))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X350),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f1100,f4499])).
fof(f27073,plain,(
  ( ! [X344,X346,X343,X345,X347,X342] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X345),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X346),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X343),s('type.num.num',X342))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X344),'const.bool.the_value_0'))))),s('type.num.num',X347))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X346),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X346),'const.words.n2w_1'(s('type.num.num',X345))) = s('type.fcp.cart'(bool,X346),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X347),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X342),s('type.num.num',X343))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X344),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f1100,f4499])).
fof(f27072,plain,(
  ( ! [X341,X337,X339,X340,X336,X338] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X339),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X340),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X341),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X337),s('type.num.num',X336))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X338),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X340),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X340),'const.words.n2w_1'(s('type.num.num',X339))) = s('type.fcp.cart'(bool,X340),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num',X337))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X338),'const.bool.the_value_0'))))),s('type.num.num',X341)))))) )),
  inference(superposition,[],[f1100,f4499])).
fof(f27071,plain,(
  ( ! [X333,X335,X334] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X334),s('type.num.num',X333))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X335),'const.bool.the_value_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X333),s('type.num.num',X334))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X335),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f1014,f4499])).
fof(f27070,plain,(
  ( ! [X327,X329,X331,X332,X328,X330] : (s('type.fcp.cart'(bool,X330),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X331),s('type.num.num',X332))))) != s('type.fcp.cart'(bool,X330),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X328),s('type.num.num',X327))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X329),'const.bool.the_value_0'))))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X332),s('type.num.num',X331))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X330),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X327),s('type.num.num',X328))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X329),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X330),'const.bool.the_value_0')))))) )),
  inference(superposition,[],[f984,f4499])).
fof(f27069,plain,(
  ( ! [X325,X321,X323,X324,X326,X322] : (s('type.fcp.cart'(bool,X324),'const.words.n2w_1'(s('type.num.num',X325))) != s('type.fcp.cart'(bool,X324),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X322),s('type.num.num',X321))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X323),'const.bool.the_value_0'))))),s('type.num.num',X326))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X325),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X324),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X326),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X321),s('type.num.num',X322))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X323),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X324),'const.bool.the_value_0')))))) )),
  inference(superposition,[],[f984,f4499])).
fof(f27068,plain,(
  ( ! [X315,X316,X318,X320,X317,X319] : (s('type.fcp.cart'(bool,X318),'const.words.n2w_1'(s('type.num.num',X319))) != s('type.fcp.cart'(bool,X318),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X320),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X316),s('type.num.num',X315))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X317),'const.bool.the_value_0'))))))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X319),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X318),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X315),s('type.num.num',X316))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X317),'const.bool.the_value_0'))))),s('type.num.num',X320))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X318),'const.bool.the_value_0')))))) )),
  inference(superposition,[],[f984,f4499])).
fof(f27067,plain,(
  ( ! [X313,X310,X312,X314,X309,X311] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X312),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X313),s('type.num.num',X314))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X310),s('type.num.num',X309))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X311),'const.bool.the_value_0')))))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X309),s('type.num.num',X310))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X311),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X312),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X313),s('type.num.num',X314))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X309),s('type.num.num',X310))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X311),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X312),s('type.num.num',X313))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X312),s('type.num.num',X314))))))))) )),
  inference(superposition,[],[f924,f4499])).
fof(f27066,plain,(
  ( ! [X308,X304,X306,X303,X305,X307] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X304),s('type.num.num',X303))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X305),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X306),s('type.num.num',X307))))),s('type.num.num',X308)))) | s('type.num.num',X308) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X303),s('type.num.num',X304))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X305),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X306),s('type.num.num',X307))))),s('type.num.num',sK2(X308,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X303),s('type.num.num',X304))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X305),'const.bool.the_value_0'))))),s('type.num.num',X306))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X303),s('type.num.num',X304))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X305),'const.bool.the_value_0'))))),s('type.num.num',X307))))))))) )),
  inference(superposition,[],[f924,f4499])).
fof(f27065,plain,(
  ( ! [X300,X302,X298,X301,X297,X299] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X300),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X301),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X298),s('type.num.num',X297))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X299),'const.bool.the_value_0'))))))))),s('type.num.num',X302)))) | s('type.num.num',X302) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X300),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X301),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X297),s('type.num.num',X298))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X299),'const.bool.the_value_0'))))))))),s('type.num.num',sK2(X302,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X300),s('type.num.num',X301))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X300),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X297),s('type.num.num',X298))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X299),'const.bool.the_value_0'))))))))))))) )),
  inference(superposition,[],[f924,f4499])).
fof(f27064,plain,(
  ( ! [X292,X294,X296,X293,X295,X291] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X294),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X292),s('type.num.num',X291))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X293),'const.bool.the_value_0'))))),s('type.num.num',X295))))),s('type.num.num',X296)))) | s('type.num.num',X296) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X294),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X291),s('type.num.num',X292))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X293),'const.bool.the_value_0'))))),s('type.num.num',X295))))),s('type.num.num',sK2(X296,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X294),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X291),s('type.num.num',X292))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X293),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X294),s('type.num.num',X295))))))))) )),
  inference(superposition,[],[f924,f4499])).
fof(f27063,plain,(
  ( ! [X288,X290,X285,X287,X289,X286] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X286),s('type.num.num',X285))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X287),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X288),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X289),s('type.num.num',X290)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X288),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X289),s('type.num.num',X290))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X285),s('type.num.num',X286))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X287),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X288),s('type.num.num',X289))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X288),s('type.num.num',X290)))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X285),s('type.num.num',X286))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X287),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f923,f4499])).
fof(f27062,plain,(
  ( ! [X280,X282,X279,X281,X283,X284] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X282),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X280),s('type.num.num',X279))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X281),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X283),s('type.num.num',X284)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X279),s('type.num.num',X280))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X281),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X283),s('type.num.num',X284))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X282),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X279),s('type.num.num',X280))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X281),'const.bool.the_value_0'))))),s('type.num.num',X283))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X279),s('type.num.num',X280))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X281),'const.bool.the_value_0'))))),s('type.num.num',X284)))),X282))))) )),
  inference(superposition,[],[f923,f4499])).
fof(f27061,plain,(
  ( ! [X277,X273,X275,X276,X278,X274] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X276),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X277),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X278),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X274),s('type.num.num',X273))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X275),'const.bool.the_value_0')))))))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X277),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X278),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X273),s('type.num.num',X274))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X275),'const.bool.the_value_0'))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X276),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X277),s('type.num.num',X278))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X277),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X273),s('type.num.num',X274))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X275),'const.bool.the_value_0')))))))),X276))))) )),
  inference(superposition,[],[f923,f4499])).
fof(f27060,plain,(
  ( ! [X269,X271,X267,X268,X270,X272] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X270),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X271),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X268),s('type.num.num',X267))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X269),'const.bool.the_value_0'))))),s('type.num.num',X272)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X271),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X267),s('type.num.num',X268))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X269),'const.bool.the_value_0'))))),s('type.num.num',X272))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X270),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X271),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X267),s('type.num.num',X268))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X269),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X271),s('type.num.num',X272)))),X270))))) )),
  inference(superposition,[],[f923,f4499])).
fof(f27057,plain,(
  ( ! [X257,X256,X258] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X257),s('type.num.num',X256))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X258),'const.bool.the_value_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X256),s('type.num.num',X257))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X258),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f815,f4499])).
fof(f27054,plain,(
  ( ! [X243,X241,X244,X242,X245] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X244),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X242),s('type.num.num',X241))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X243),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X242),s('type.num.num',X241))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X243),'const.bool.the_value_0'))))))) | s(bool,X245) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num',X242))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X243),'const.bool.the_value_0'))))))) | s(bool,'T_0') = s(bool,X245)) )),
  inference(superposition,[],[f734,f4499])).
fof(f27052,plain,(
  ( ! [X235,X233,X236,X234,X232] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X235),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X233),s('type.num.num',X232))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X234),'const.bool.the_value_0')))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X236),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X232),s('type.num.num',X233))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X234),'const.bool.the_value_0'))))),s('type.num.num',X235))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X232),s('type.num.num',X233))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X234),'const.bool.the_value_0'))))),s('type.num.num',X235)))))) )),
  inference(superposition,[],[f718,f4499])).
fof(f27051,plain,(
  ( ! [X231,X229,X227,X230,X228] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X228),s('type.num.num',X227))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X229),'const.bool.the_value_0'))))),s('type.num.num',X230)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X231),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X230),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X227),s('type.num.num',X228))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X229),'const.bool.the_value_0'))))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X230),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X227),s('type.num.num',X228))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X229),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f718,f4499])).
fof(f27050,plain,(
  ( ! [X225,X223,X226,X224] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X226),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X224),s('type.num.num',X223))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X225),'const.bool.the_value_0')))))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X223),s('type.num.num',X224))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X225),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X226),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X223),s('type.num.num',X224))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X225),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X226),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f4499])).
fof(f27049,plain,(
  ( ! [X222,X220,X219,X221] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X220),s('type.num.num',X219))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X221),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X222),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X222),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X219),s('type.num.num',X220))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X221),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X222),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X219),s('type.num.num',X220))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X221),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f645,f4499])).
fof(f27048,plain,(
  ( ! [X218,X216,X217] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X217),s('type.num.num',X216))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X218),'const.bool.the_value_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X216),s('type.num.num',X217))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X218),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f607,f4499])).
fof(f27047,plain,(
  ( ! [X212,X215,X213,X211,X214] : (s(bool,X214) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X212),s('type.num.num',X211))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X213),'const.bool.the_value_0'))))),s('type.num.num',X215))) | s('type.num.num',X215) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X211),s('type.num.num',X212))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X213),'const.bool.the_value_0'))))),s('type.num.num',sK2(X215,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X211),s('type.num.num',X212))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X213),'const.bool.the_value_0')))))))) | s(bool,'T_0') = s(bool,X214)) )),
  inference(superposition,[],[f605,f4499])).
fof(f27046,plain,(
  ( ! [X210,X208,X206,X209,X207] : (s(bool,X209) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X210),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num',X206))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X208),'const.bool.the_value_0'))))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num',X207))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X208),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X210),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X206),s('type.num.num',X207))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X208),'const.bool.the_value_0')))),X210)))) | s(bool,'T_0') = s(bool,X209)) )),
  inference(superposition,[],[f605,f4499])).
fof(f27045,plain,(
  ( ! [X204,X202,X205,X203,X201] : (s('type.num.num',X204) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X202),s('type.num.num',X201))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X203),'const.bool.the_value_0'))))),s('type.num.num',sK2(X204,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X201),s('type.num.num',X202))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X203),'const.bool.the_value_0')))))))) | s(bool,X205) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X201),s('type.num.num',X202))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X203),'const.bool.the_value_0'))))),s('type.num.num',X204))) | s(bool,'T_0') = s(bool,X205)) )),
  inference(superposition,[],[f605,f4499])).
fof(f27044,plain,(
  ( ! [X198,X196,X200,X199,X197] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X197),s('type.num.num',X196))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X198),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num',X200)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num',X199))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X196),s('type.num.num',X197))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X198),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X200),s('type.num.num',X199)),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X196),s('type.num.num',X197))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X198),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f593,f4499])).
fof(f27043,plain,(
  ( ! [X191,X194,X192,X195,X193] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X194),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X195),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X192),s('type.num.num',X191))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X193),'const.bool.the_value_0')))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X191),s('type.num.num',X192))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X193),'const.bool.the_value_0'))))),s('type.num.num',X195))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X194),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X191),s('type.num.num',X192))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X193),'const.bool.the_value_0'))))),s('type.num.num',X195)),X194))))) )),
  inference(superposition,[],[f593,f4499])).
fof(f27042,plain,(
  ( ! [X189,X187,X190,X188,X186] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X189),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X187),s('type.num.num',X186))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X188),'const.bool.the_value_0'))))),s('type.num.num',X190)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X190),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X186),s('type.num.num',X187))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X188),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X189),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X190),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X186),s('type.num.num',X187))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X188),'const.bool.the_value_0')))))),X189))))) )),
  inference(superposition,[],[f593,f4499])).
fof(f27041,plain,(
  ( ! [X185,X182,X184,X183,X181] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X184),s('type.num.num',X185))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X182),s('type.num.num',X181))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X183),'const.bool.the_value_0')))))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X181),s('type.num.num',X182))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X183),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X185),s('type.num.num',X184))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X181),s('type.num.num',X182))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X183),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X185),s('type.num.num',X184))))))) )),
  inference(superposition,[],[f590,f4499])).
fof(f27040,plain,(
  ( ! [X177,X180,X178,X176,X179] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X179),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X177),s('type.num.num',X176))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X178),'const.bool.the_value_0'))))))),s('type.num.num',X180)))) | s('type.num.num',X180) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X176),s('type.num.num',X177))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X178),'const.bool.the_value_0'))))),s('type.num.num',X179))),s('type.num.num',sK2(X180,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X176),s('type.num.num',X177))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X178),'const.bool.the_value_0'))))),s('type.num.num',X179))))))) )),
  inference(superposition,[],[f590,f4499])).
fof(f27039,plain,(
  ( ! [X175,X173,X171,X174,X172] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X172),s('type.num.num',X171))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X173),'const.bool.the_value_0'))))),s('type.num.num',X174))),s('type.num.num',X175)))) | s('type.num.num',X175) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X174),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num',X172))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X173),'const.bool.the_value_0'))))))),s('type.num.num',sK2(X175,'const.arithmetic.+_2'(s('type.num.num',X174),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num',X172))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X173),'const.bool.the_value_0'))))))))))) )),
  inference(superposition,[],[f590,f4499])).
fof(f27034,plain,(
  ( ! [X154,X152,X151,X153,X150] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X153),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num',X150))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X152),'const.bool.the_value_0')))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X154),s('type.num.num',X153))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X150),s('type.num.num',X151))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X152),'const.bool.the_value_0')))))) )),
  inference(superposition,[],[f525,f4499])).
fof(f27033,plain,(
  ( ! [X146,X149,X147,X145,X148] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X146),s('type.num.num',X145))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X147),'const.bool.the_value_0'))))),s('type.num.num',X148)))) | s('type.num.num',X148) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num',X146))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X147),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f525,f4499])).
fof(f27032,plain,(
  ( ! [X144,X142,X140,X143,X141,X139] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X142),s('type.num.num',X143))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X139))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X141),'const.bool.the_value_0')))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num',X142))),s('type.num.num',X144))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X139),s('type.num.num',X140))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X141),'const.bool.the_value_0')))))) )),
  inference(superposition,[],[f519,f4499])).
fof(f27031,plain,(
  ( ! [X134,X138,X136,X135,X133,X137] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X134),s('type.num.num',X133))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X135),'const.bool.the_value_0'))))),s('type.num.num',X136))),s('type.num.num',X137)))) | s('type.num.num',X137) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X136),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X133),s('type.num.num',X134))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X135),'const.bool.the_value_0'))))))),s('type.num.num',X138)))) )),
  inference(superposition,[],[f519,f4499])).
fof(f27030,plain,(
  ( ! [X127,X132,X130,X128,X131,X129] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X130),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X128),s('type.num.num',X127))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X129),'const.bool.the_value_0'))))))),s('type.num.num',X131)))) | s('type.num.num',X131) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X127),s('type.num.num',X128))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X129),'const.bool.the_value_0'))))),s('type.num.num',X130))),s('type.num.num',X132)))) )),
  inference(superposition,[],[f519,f4499])).
fof(f27029,plain,(
  ( ! [X125,X123,X121,X126,X124,X122] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X122),s('type.num.num',X121))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X123),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X124),s('type.num.num',X125)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num',X124))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X121),s('type.num.num',X122))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X123),'const.bool.the_value_0'))))),s('type.num.num',X126)))) )),
  inference(superposition,[],[f516,f4499])).
fof(f27028,plain,(
  ( ! [X118,X116,X120,X119,X117,X115] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X118),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X116),s('type.num.num',X115))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X117),'const.bool.the_value_0'))))),s('type.num.num',X119)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X118),s('type.num.num',X120))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X119),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X115),s('type.num.num',X116))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X117),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f516,f4499])).
fof(f27027,plain,(
  ( ! [X111,X109,X114,X112,X110,X113] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X112),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X113),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X110),s('type.num.num',X109))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X111),'const.bool.the_value_0')))))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X112),s('type.num.num',X114))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X109),s('type.num.num',X110))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X111),'const.bool.the_value_0'))))),s('type.num.num',X113)))) )),
  inference(superposition,[],[f516,f4499])).
fof(f27025,plain,(
  ( ! [X103,X101,X102,X104] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X102),s('type.num.num',X101))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X103),'const.bool.the_value_0'))))))) | s(bool,X104) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num',X102))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X103),'const.bool.the_value_0'))))))) | s(bool,'T_0') = s(bool,X104)) )),
  inference(superposition,[],[f483,f4499])).
fof(f27024,plain,(
  ( ! [X99,X97,X100,X98] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X100),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X98),s('type.num.num',X97))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X99),'const.bool.the_value_0')))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num',X98))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X99),'const.bool.the_value_0'))))),s('type.num.num',X100)))))) )),
  inference(superposition,[],[f474,f4499])).
fof(f27023,plain,(
  ( ! [X94,X95,X93,X96] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X94),s('type.num.num',X93))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X95),'const.bool.the_value_0'))))),s('type.num.num',X96)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X96),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num',X94))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X95),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f474,f4499])).
fof(f27017,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s('type.num.num',X68) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num',X65))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X67),'const.bool.the_value_0'))))),s('type.num.num',X69))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num',X66))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X67),'const.bool.the_value_0'))))),s('type.num.num',X68))))) )),
  inference(superposition,[],[f103,f4499])).
fof(f27016,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X63),s('type.num.num',X64))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X61),s('type.num.num',X60))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X62),'const.bool.the_value_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num',X61))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X62),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f103,f4499])).
fof(f27015,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X57),s('type.num.num',X56))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X58),'const.bool.the_value_0'))))),s('type.num.num',X59)))) | s('type.num.num',X59) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X56),s('type.num.num',X57))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X58),'const.bool.the_value_0'))))),s('type.num.num',sK2(X59,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X56),s('type.num.num',X57))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X58),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f102,f4499])).
fof(f27014,plain,(
  ( ! [X54,X52,X55,X53] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X55),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X52))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X54),'const.bool.the_value_0')))))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num',X53))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X54),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num',X53))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X54),'const.bool.the_value_0')))),X55))))) )),
  inference(superposition,[],[f102,f4499])).
fof(f27010,plain,(
  ( ! [X37,X35,X38,X36,X34] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X38),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',X34))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X36),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X37),'const.words.n2w_1'(s('type.num.num',X38))) = s('type.fcp.cart'(bool,X37),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X35))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X36),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f100,f4499])).
fof(f27008,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s('type.fcp.cart'(bool,X27),'const.words.n2w_1'(s('type.num.num',X28))) != s('type.fcp.cart'(bool,X27),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X26),'const.bool.the_value_0'))))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X28),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X27),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X26),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X27),'const.bool.the_value_0')))))) )),
  inference(superposition,[],[f99,f4499])).
fof(f27007,plain,(
  ( ! [X23,X21,X22,X20] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X22),'const.bool.the_value_0')))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X22),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X22),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f86,f4499])).
fof(f27006,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X19),'const.bool.the_value_0')))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X19),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f85,f4499])).
fof(f26729,plain,(
  ( ! [X243,X241,X244,X242,X245] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X243),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X244),s('type.num.num',X245))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X242),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X242),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X243),s('type.num.num',X244))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X243),s('type.num.num',X245)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X243),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X244),s('type.num.num',X245))))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f26646,f4301])).
fof(f26646,plain,(
  ( ! [X243,X241,X244,X242,X245] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X243),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X244),s('type.num.num',X245))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X242),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X242),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X243),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X244),s('type.num.num',X245))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X242),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X242),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X243),s('type.num.num',X244))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X243),s('type.num.num',X245))))))))) )),
  inference(superposition,[],[f924,f4301])).
fof(f26725,plain,(
  ( ! [X222,X225,X223,X221,X224] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X223),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X224),s('type.num.num',X225))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X223),s('type.num.num',X224))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X223),s('type.num.num',X225)))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X221),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X222),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X222),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X223),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X224),s('type.num.num',X225))))))))) )),
  inference(forward_demodulation,[],[f26642,f4301])).
fof(f26642,plain,(
  ( ! [X222,X225,X223,X221,X224] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X223),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X224),s('type.num.num',X225)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X223),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X224),s('type.num.num',X225))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X221),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X222),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X222),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X223),s('type.num.num',X224))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X223),s('type.num.num',X225)))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X221),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X222),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X222),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f923,f4301])).
fof(f26718,plain,(
  ( ! [X173,X174,X172] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X174),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X172),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X173),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X173),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X174),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X174),'const.bool.the_value_0'))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f26629,f4301])).
fof(f26629,plain,(
  ( ! [X173,X174,X172] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X174),'const.bool.the_value_0'))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X172),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X173),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X173),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X174),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X172),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X173),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X173),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X174),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f4301])).
fof(f26717,plain,(
  ( ! [X171,X169,X170] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X171),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X171),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X170),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X170),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X171),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f26628,f4301])).
fof(f26628,plain,(
  ( ! [X171,X169,X170] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X171),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X171),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X170),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X170),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X171),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X170),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X170),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f645,f4301])).
fof(f26715,plain,(
  ( ! [X161,X159,X162,X160] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X162),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X159),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X160),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X160),'const.bool.the_value_0')))),X162)))) | s(bool,X161) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X162),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X161)) )),
  inference(forward_demodulation,[],[f26625,f4301])).
fof(f26625,plain,(
  ( ! [X161,X159,X162,X160] : (s(bool,X161) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X162),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X159),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X160),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X160),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X162),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X159),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X160),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X160),'const.bool.the_value_0')))),X162)))) | s(bool,'T_0') = s(bool,X161)) )),
  inference(superposition,[],[f605,f4301])).
fof(f26714,plain,(
  ( ! [X158,X156,X157,X155] : (s(bool,X158) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X157))) | s('type.num.num',X157) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X157,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X156),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X156),'const.bool.the_value_0')))))))) | s(bool,'T_0') = s(bool,X158)) )),
  inference(forward_demodulation,[],[f26624,f4301])).
fof(f26624,plain,(
  ( ! [X158,X156,X157,X155] : (s('type.num.num',X157) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X157,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X156),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X156),'const.bool.the_value_0')))))))) | s(bool,X158) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X156),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X156),'const.bool.the_value_0'))))),s('type.num.num',X157))) | s(bool,'T_0') = s(bool,X158)) )),
  inference(superposition,[],[f605,f4301])).
fof(f26713,plain,(
  ( ! [X154,X152,X151,X153] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X154),s('type.num.num',X153))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X154),s('type.num.num',X153)),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X152),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X152),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X153),s('type.num.num',X154))))))) )),
  inference(forward_demodulation,[],[f26623,f4301])).
fof(f26623,plain,(
  ( ! [X154,X152,X151,X153] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X153),s('type.num.num',X154)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X154),s('type.num.num',X153))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X152),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X152),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X154),s('type.num.num',X153)),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X152),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X152),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f593,f4301])).
fof(f26710,plain,(
  ( ! [X142,X140,X141,X139] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X142),s('type.num.num',X141))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X139),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X140),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X140),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X142),s('type.num.num',X141)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X141),s('type.num.num',X142))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f26620,f4301])).
fof(f26620,plain,(
  ( ! [X142,X140,X141,X139] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X141),s('type.num.num',X142))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X139),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X140),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X140),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X142),s('type.num.num',X141))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X139),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X140),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X140),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X142),s('type.num.num',X141))))))) )),
  inference(superposition,[],[f590,f4301])).
fof(f26694,plain,(
  ( ! [X41,X42,X40] : (s('type.num.num',X42) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X42,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X41),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X41),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X42))))) )),
  inference(forward_demodulation,[],[f26594,f4301])).
fof(f26594,plain,(
  ( ! [X41,X42,X40] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X42)))) | s('type.num.num',X42) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X41),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X41),'const.bool.the_value_0'))))),s('type.num.num',sK2(X42,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X41),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X41),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f102,f4301])).
fof(f26693,plain,(
  ( ! [X39,X37,X38] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X38),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X38),'const.bool.the_value_0')))),X39)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X39),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f26593,f4301])).
fof(f26593,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X39),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X38),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X38),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X37),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X38),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X38),'const.bool.the_value_0')))),X39))))) )),
  inference(superposition,[],[f102,f4301])).
fof(f26583,plain,(
  ( ! [X6,X4,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X5),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X5),'const.words.n2w_1'(s('type.num.num',X6))) = s('type.fcp.cart'(bool,X5),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X5),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f100,f4301])).
fof(f26582,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))))) = s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f1100,f4301])).
fof(f26580,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))),s('type.num.num',X0))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))))) )),
  inference(superposition,[],[f4301,f101])).
fof(f26225,plain,(
  ( ! [X35,X33,X36,X34] : (s(bool,X36) != s(bool,g(s(X33,sK3(X34,X35,bool,X33)))) | s(bool,'T_0') = s(bool,X36) | s(fun(X33,bool),X34) = s(fun(X33,bool),X35) | s(bool,'T_0') = s(bool,f(s(X33,sK3(X34,X35,bool,X33))))) )),
  inference(subsumption_resolution,[],[f26156,f78])).
fof(f26156,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,'T_0')) | s(bool,X36) != s(bool,g(s(X33,sK3(X34,X35,bool,X33)))) | s(bool,'T_0') = s(bool,X36) | s(fun(X33,bool),X34) = s(fun(X33,bool),X35) | s(bool,'T_0') = s(bool,f(s(X33,sK3(X34,X35,bool,X33))))) )),
  inference(superposition,[],[f157,f2917])).
fof(f26224,plain,(
  ( ! [X17,X15,X18,X16] : (s(bool,X18) != s(bool,g(s(X15,sK3(X16,X17,bool,X15)))) | p(s(bool,X18)) | s(fun(X15,bool),X16) = s(fun(X15,bool),X17) | s(bool,'T_0') = s(bool,f(s(X15,sK3(X16,X17,bool,X15))))) )),
  inference(subsumption_resolution,[],[f26153,f78])).
fof(f26153,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'T_0')) | s(bool,X18) != s(bool,g(s(X15,sK3(X16,X17,bool,X15)))) | p(s(bool,X18)) | s(fun(X15,bool),X16) = s(fun(X15,bool),X17) | s(bool,'T_0') = s(bool,f(s(X15,sK3(X16,X17,bool,X15))))) )),
  inference(superposition,[],[f131,f2917])).
fof(f26208,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,f(s(X0,sK3(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK3(X1,X2,bool,X0)))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f26207])).
fof(f26207,plain,(
  ( ! [X39,X43,X41,X38,X42,X40] : (s(bool,'T_0') = s(bool,X41) | s(fun(X38,bool),X39) = s(fun(X38,bool),X40) | s(bool,'T_0') = s(bool,f(s(X38,sK3(X39,X40,bool,X38)))) | s(bool,X42) = s(bool,g(s(X38,sK3(X39,X40,bool,X38)))) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X43)) )),
  inference(duplicate_literal_removal,[],[f26141])).
fof(f26141,plain,(
  ( ! [X39,X43,X41,X38,X42,X40] : (s(bool,'T_0') = s(bool,X41) | s(fun(X38,bool),X39) = s(fun(X38,bool),X40) | s(bool,'T_0') = s(bool,f(s(X38,sK3(X39,X40,bool,X38)))) | s(bool,X42) = s(bool,g(s(X38,sK3(X39,X40,bool,X38)))) | s(bool,'T_0') = s(bool,X41) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f2917,f262])).
fof(f25591,plain,(
  ( ! [X350,X346,X349,X347,X348] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X349))) != s(bool,f(s(X346,sK3(X347,X348,bool,X346)))) | s(fun(X346,bool),X347) = s(fun(X346,bool),X348) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X350),s('type.num.num',X349))),s('type.num.num',X349))) | s(bool,'T_0') = s(bool,g(s(X346,sK3(X347,X348,bool,X346))))) )),
  inference(superposition,[],[f104,f734])).
fof(f25589,plain,(
  ( ! [X341,X337,X339,X340,X338] : (s(X339,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X340))))) != s(X339,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X340))))) | s(fun(bool,X339),X337) = s(fun(bool,X339),X338) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X341),s('type.num.num',X340))),s('type.num.num',X340))) | s(bool,'T_0') = s(bool,sK3(X337,X338,X339,bool))) )),
  inference(superposition,[],[f104,f734])).
fof(f25668,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))) | s(bool,X0) = s(bool,X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X2)))) )),
  inference(condensation,[],[f25667])).
fof(f25667,plain,(
  ( ! [X103,X107,X105,X106,X104] : (s(bool,X105) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X104))) | s(bool,'T_0') = s(bool,X103) | s(bool,X105) = s(bool,X106) | s(bool,'T_0') = s(bool,X106) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X107),s('type.num.num',X104))),s('type.num.num',X104)))) )),
  inference(duplicate_literal_removal,[],[f25535])).
fof(f25535,plain,(
  ( ! [X103,X107,X105,X106,X104] : (s(bool,X105) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X104))) | s(bool,'T_0') = s(bool,X103) | s(bool,X105) = s(bool,X106) | s(bool,'T_0') = s(bool,X106) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X107),s('type.num.num',X104))),s('type.num.num',X104))) | s(bool,'T_0') = s(bool,X103)) )),
  inference(superposition,[],[f471,f734])).
fof(f25503,plain,(
  ( ! [X441,X438,X440,X442,X437,X439] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X439),s('type.num.num',X440))),s('type.num.num',X441))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X440),s('type.num.num',X439))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X437),s('type.num.num',X438))),s('type.num.num',X438))))) | s(bool,X442) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X438))) | s(bool,'T_0') = s(bool,X442)) )),
  inference(superposition,[],[f2812,f734])).
fof(f25502,plain,(
  ( ! [X436,X432,X434,X431,X433,X435] : (s('type.num.num',X433) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X434))),s('type.num.num',X435))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X434),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X431),s('type.num.num',X432))),s('type.num.num',X432))))),s('type.num.num',X433))) | s(bool,X436) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X432))) | s(bool,'T_0') = s(bool,X436)) )),
  inference(superposition,[],[f2812,f734])).
fof(f25501,plain,(
  ( ! [X428,X430,X426,X429,X425,X427] : (s('type.num.num',X427) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X428),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X429))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X425),s('type.num.num',X426))),s('type.num.num',X426))),s('type.num.num',X428))),s('type.num.num',X427))) | s(bool,X430) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X426))) | s(bool,'T_0') = s(bool,X430)) )),
  inference(superposition,[],[f2812,f734])).
fof(f25500,plain,(
  ( ! [X420,X422,X424,X421,X423,X419] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X423),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X421),s('type.num.num',X422))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X421),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X419),s('type.num.num',X420))),s('type.num.num',X420))),s('type.num.num',X423))))) | s(bool,X424) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X420))) | s(bool,'T_0') = s(bool,X424)) )),
  inference(superposition,[],[f2655,f734])).
fof(f25498,plain,(
  ( ! [X412,X408,X410,X407,X409,X411] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X411))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X409),s('type.num.num',X410))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X409),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X411),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X407),s('type.num.num',X408))),s('type.num.num',X408))))))) | s(bool,X412) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X408))) | s(bool,'T_0') = s(bool,X412)) )),
  inference(superposition,[],[f2655,f734])).
fof(f25497,plain,(
  ( ! [X405,X401,X403,X404,X406,X402] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X403))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X404),s('type.num.num',X405))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X401),s('type.num.num',X402))),s('type.num.num',X402))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X405),s('type.num.num',X404))))) | s(bool,X406) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X402))) | s(bool,'T_0') = s(bool,X406)) )),
  inference(superposition,[],[f2655,f734])).
fof(f25493,plain,(
  ( ! [X385,X387,X388,X384,X386] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X386),s('type.num.num',X387))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X387),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X384),s('type.num.num',X385))),s('type.num.num',X385))))) | s(bool,X388) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X385))) | s(bool,'T_0') = s(bool,X388)) )),
  inference(superposition,[],[f1213,f734])).
fof(f25492,plain,(
  ( ! [X383,X379,X380,X382,X381] : (s('type.num.num',X381) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X382),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X379),s('type.num.num',X380))),s('type.num.num',X380))),s('type.num.num',X381))) | s(bool,X383) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X380))) | s(bool,'T_0') = s(bool,X383)) )),
  inference(superposition,[],[f1213,f734])).
fof(f25491,plain,(
  ( ! [X377,X374,X376,X378,X373,X375] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X375),s('type.num.num',X376)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X376),s('type.num.num',X375))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X377),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X373),s('type.num.num',X374))),s('type.num.num',X374))))) | s(bool,X378) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X374))) | s(bool,'T_0') = s(bool,X378)) )),
  inference(superposition,[],[f1175,f734])).
fof(f25490,plain,(
  ( ! [X372,X368,X370,X367,X369,X371] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X369),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X370)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X371),s('type.num.num',X369))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X370),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X367),s('type.num.num',X368))),s('type.num.num',X368))))) | s(bool,X372) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X368))) | s(bool,'T_0') = s(bool,X372)) )),
  inference(superposition,[],[f1175,f734])).
fof(f25489,plain,(
  ( ! [X364,X366,X362,X365,X361,X363] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X363),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X364),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X365),s('type.num.num',X363))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X361),s('type.num.num',X362))),s('type.num.num',X362))),s('type.num.num',X364))) | s(bool,X366) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X362))) | s(bool,'T_0') = s(bool,X366)) )),
  inference(superposition,[],[f1175,f734])).
fof(f25487,plain,(
  ( ! [X350,X352,X354,X349,X351,X353] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X351),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X352),s('type.num.num',X353))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X353),s('type.num.num',X352))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X349),s('type.num.num',X350))),s('type.num.num',X350)))))) | s(bool,X354) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X350))) | s(bool,'T_0') = s(bool,X354)) )),
  inference(superposition,[],[f1167,f734])).
fof(f25486,plain,(
  ( ! [X344,X346,X343,X345,X347,X348] : (s('type.num.num',X345) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X346),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X347),s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X343),s('type.num.num',X344))),s('type.num.num',X344))),s('type.num.num',X347))),s('type.num.num',X345)))) | s(bool,X348) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X344))) | s(bool,'T_0') = s(bool,X348)) )),
  inference(superposition,[],[f1167,f734])).
fof(f25485,plain,(
  ( ! [X341,X337,X339,X340,X342,X338] : (s('type.num.num',X339) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X340),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X341))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X341),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X337),s('type.num.num',X338))),s('type.num.num',X338))))),s('type.num.num',X339)))) | s(bool,X342) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X338))) | s(bool,'T_0') = s(bool,X342)) )),
  inference(superposition,[],[f1167,f734])).
fof(f25774,plain,(
  ( ! [X333,X335,X331,X332,X334,X336] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X334),s('type.num.num',X335))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X333),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X333),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X335),s('type.num.num',X334))))) = s('type.fcp.cart'(bool,X333),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X331),s('type.num.num',X332))),s('type.num.num',X332))))) | s(bool,X336) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X332))) | s(bool,'T_0') = s(bool,X336)) )),
  inference(forward_demodulation,[],[f25484,f482])).
fof(f25484,plain,(
  ( ! [X333,X335,X331,X332,X334,X336] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X333),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X334),s('type.num.num',X335))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X333),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X333),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X335),s('type.num.num',X334))))) = s('type.fcp.cart'(bool,X333),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X331),s('type.num.num',X332))),s('type.num.num',X332))))) | s(bool,X336) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X332))) | s(bool,'T_0') = s(bool,X336)) )),
  inference(superposition,[],[f1100,f734])).
fof(f25483,plain,(
  ( ! [X325,X327,X329,X326,X328,X330] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X327),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X328),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X329))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X328),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X328),'const.words.n2w_1'(s('type.num.num',X327))) = s('type.fcp.cart'(bool,X328),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X329),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X325),s('type.num.num',X326))),s('type.num.num',X326))))))) | s(bool,X330) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X326))) | s(bool,'T_0') = s(bool,X330)) )),
  inference(superposition,[],[f1100,f734])).
fof(f25482,plain,(
  ( ! [X321,X323,X324,X320,X322,X319] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X321),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X322),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X323),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X322),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X322),'const.words.n2w_1'(s('type.num.num',X321))) = s('type.fcp.cart'(bool,X322),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X319),s('type.num.num',X320))),s('type.num.num',X320))),s('type.num.num',X323))))) | s(bool,X324) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X320))) | s(bool,'T_0') = s(bool,X324)) )),
  inference(superposition,[],[f1100,f734])).
fof(f25480,plain,(
  ( ! [X313,X315,X310,X312,X314,X311] : (s('type.fcp.cart'(bool,X312),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) != s('type.fcp.cart'(bool,X312),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X313),s('type.num.num',X314))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X314),s('type.num.num',X313))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X312),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X310),s('type.num.num',X311))),s('type.num.num',X311))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X312),'const.bool.the_value_0'))))) | s(bool,X315) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X311))) | s(bool,'T_0') = s(bool,X315)) )),
  inference(superposition,[],[f984,f734])).
fof(f25479,plain,(
  ( ! [X308,X304,X306,X309,X305,X307] : (s('type.fcp.cart'(bool,X306),'const.words.n2w_1'(s('type.num.num',X307))) != s('type.fcp.cart'(bool,X306),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X308))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X307),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X306),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X308),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X304),s('type.num.num',X305))),s('type.num.num',X305))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X306),'const.bool.the_value_0'))))) | s(bool,X309) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X305))) | s(bool,'T_0') = s(bool,X309)) )),
  inference(superposition,[],[f984,f734])).
fof(f25478,plain,(
  ( ! [X300,X302,X298,X301,X303,X299] : (s('type.fcp.cart'(bool,X300),'const.words.n2w_1'(s('type.num.num',X301))) != s('type.fcp.cart'(bool,X300),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X302),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X301),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X300),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X298),s('type.num.num',X299))),s('type.num.num',X299))),s('type.num.num',X302))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X300),'const.bool.the_value_0'))))) | s(bool,X303) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X299))) | s(bool,'T_0') = s(bool,X303)) )),
  inference(superposition,[],[f984,f734])).
fof(f25477,plain,(
  ( ! [X292,X294,X296,X293,X295,X297] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X294),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X295),s('type.num.num',X296))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X292),s('type.num.num',X293))),s('type.num.num',X293))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X294),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X295),s('type.num.num',X296))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X292),s('type.num.num',X293))),s('type.num.num',X293)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X294),s('type.num.num',X295))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X294),s('type.num.num',X296)))))))) | s(bool,X297) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X293))) | s(bool,'T_0') = s(bool,X297)) )),
  inference(superposition,[],[f924,f734])).
fof(f25476,plain,(
  ( ! [X288,X290,X287,X289,X291,X286] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X288),s('type.num.num',X289))))),s('type.num.num',X290)))) | s('type.num.num',X290) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X286),s('type.num.num',X287))),s('type.num.num',X287))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X288),s('type.num.num',X289))))),s('type.num.num',sK2(X290,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X286),s('type.num.num',X287))),s('type.num.num',X287))),s('type.num.num',X288))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X286),s('type.num.num',X287))),s('type.num.num',X287))),s('type.num.num',X289)))))))) | s(bool,X291) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X287))) | s(bool,'T_0') = s(bool,X291)) )),
  inference(superposition,[],[f924,f734])).
fof(f25475,plain,(
  ( ! [X280,X282,X285,X281,X283,X284] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X282),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X283),s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X284)))) | s('type.num.num',X284) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X282),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X283),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X280),s('type.num.num',X281))),s('type.num.num',X281))))))),s('type.num.num',sK2(X284,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X282),s('type.num.num',X283))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X282),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X280),s('type.num.num',X281))),s('type.num.num',X281)))))))))) | s(bool,X285) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X281))) | s(bool,'T_0') = s(bool,X285)) )),
  inference(superposition,[],[f924,f734])).
fof(f25474,plain,(
  ( ! [X277,X279,X275,X276,X278,X274] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X276),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X277))))),s('type.num.num',X278)))) | s('type.num.num',X278) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X276),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X274),s('type.num.num',X275))),s('type.num.num',X275))),s('type.num.num',X277))))),s('type.num.num',sK2(X278,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X276),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X274),s('type.num.num',X275))),s('type.num.num',X275))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X276),s('type.num.num',X277)))))))) | s(bool,X279) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X275))) | s(bool,'T_0') = s(bool,X279)) )),
  inference(superposition,[],[f924,f734])).
fof(f25473,plain,(
  ( ! [X269,X271,X273,X268,X270,X272] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X270),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X271),s('type.num.num',X272)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X270),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X271),s('type.num.num',X272))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X268),s('type.num.num',X269))),s('type.num.num',X269))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X270),s('type.num.num',X271))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X270),s('type.num.num',X272)))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X268),s('type.num.num',X269))),s('type.num.num',X269)))))) | s(bool,X273) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X269))) | s(bool,'T_0') = s(bool,X273)) )),
  inference(superposition,[],[f923,f734])).
fof(f25472,plain,(
  ( ! [X263,X265,X267,X262,X264,X266] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X264),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X265),s('type.num.num',X266)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X262),s('type.num.num',X263))),s('type.num.num',X263))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X265),s('type.num.num',X266))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X264),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X262),s('type.num.num',X263))),s('type.num.num',X263))),s('type.num.num',X265))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X262),s('type.num.num',X263))),s('type.num.num',X263))),s('type.num.num',X266)))),X264)))) | s(bool,X267) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X263))) | s(bool,'T_0') = s(bool,X267)) )),
  inference(superposition,[],[f923,f734])).
fof(f25471,plain,(
  ( ! [X261,X257,X259,X260,X256,X258] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X258),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X259),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X260),s('type.num.num','const.num.|48|_0')))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X259),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X260),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X256),s('type.num.num',X257))),s('type.num.num',X257))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X259),s('type.num.num',X260))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X259),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X256),s('type.num.num',X257))),s('type.num.num',X257)))))),X258)))) | s(bool,X261) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X257))) | s(bool,'T_0') = s(bool,X261)) )),
  inference(superposition,[],[f923,f734])).
fof(f25470,plain,(
  ( ! [X255,X253,X251,X254,X252,X250] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X252),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X253),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X254)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X253),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X250),s('type.num.num',X251))),s('type.num.num',X251))),s('type.num.num',X254))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X252),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X253),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X250),s('type.num.num',X251))),s('type.num.num',X251))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X253),s('type.num.num',X254)))),X252)))) | s(bool,X255) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X251))) | s(bool,'T_0') = s(bool,X255)) )),
  inference(superposition,[],[f923,f734])).
fof(f25465,plain,(
  ( ! [X231,X233,X230,X234,X232] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X232),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X233),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X230),s('type.num.num',X231))),s('type.num.num',X231))),s('type.num.num',X232))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X230),s('type.num.num',X231))),s('type.num.num',X231))),s('type.num.num',X232))))) | s(bool,X234) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X231))) | s(bool,'T_0') = s(bool,X234)) )),
  inference(superposition,[],[f718,f734])).
fof(f25464,plain,(
  ( ! [X229,X227,X225,X228,X226] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X227)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X228),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X227),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X225),s('type.num.num',X226))),s('type.num.num',X226))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X227),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X225),s('type.num.num',X226))),s('type.num.num',X226))))))) | s(bool,X229) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X226))) | s(bool,'T_0') = s(bool,X229)) )),
  inference(superposition,[],[f718,f734])).
fof(f25463,plain,(
  ( ! [X222,X223,X221,X224] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X223),'const.bool.the_value_0'))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X221),s('type.num.num',X222))),s('type.num.num',X222))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X223),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X221),s('type.num.num',X222))),s('type.num.num',X222)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X223),'const.bool.the_value_0')))))))) | s(bool,X224) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X222))) | s(bool,'T_0') = s(bool,X224)) )),
  inference(superposition,[],[f646,f734])).
fof(f25462,plain,(
  ( ! [X218,X220,X219,X217] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X219),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X219),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X217),s('type.num.num',X218))),s('type.num.num',X218))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X219),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X217),s('type.num.num',X218))),s('type.num.num',X218)))))) | s(bool,X220) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X218))) | s(bool,'T_0') = s(bool,X220)) )),
  inference(superposition,[],[f645,f734])).
fof(f25460,plain,(
  ( ! [X212,X210,X213,X211,X209] : (s(bool,X211) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X212))) | s('type.num.num',X212) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X209),s('type.num.num',X210))),s('type.num.num',X210))),s('type.num.num',sK2(X212,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X209),s('type.num.num',X210))),s('type.num.num',X210)))))) | s(bool,'T_0') = s(bool,X211) | s(bool,X213) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X210))) | s(bool,'T_0') = s(bool,X213)) )),
  inference(superposition,[],[f605,f734])).
fof(f25459,plain,(
  ( ! [X208,X206,X204,X207,X205] : (s(bool,X206) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X207),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X204),s('type.num.num',X205))),s('type.num.num',X205))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X204),s('type.num.num',X205))),s('type.num.num',X205)),X207)))) | s(bool,'T_0') = s(bool,X206) | s(bool,X208) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X205))) | s(bool,'T_0') = s(bool,X208)) )),
  inference(superposition,[],[f605,f734])).
fof(f25458,plain,(
  ( ! [X202,X200,X199,X203,X201] : (s('type.num.num',X201) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X201,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X199),s('type.num.num',X200))),s('type.num.num',X200)))))) | s(bool,X202) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X199),s('type.num.num',X200))),s('type.num.num',X200))),s('type.num.num',X201))) | s(bool,'T_0') = s(bool,X202) | s(bool,X203) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X200))) | s(bool,'T_0') = s(bool,X203)) )),
  inference(superposition,[],[f605,f734])).
fof(f25457,plain,(
  ( ! [X198,X196,X194,X197,X195] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X196),s('type.num.num',X197)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X197),s('type.num.num',X196))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X194),s('type.num.num',X195))),s('type.num.num',X195))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X197),s('type.num.num',X196)),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X194),s('type.num.num',X195))),s('type.num.num',X195)))))) | s(bool,X198) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X195))) | s(bool,'T_0') = s(bool,X198)) )),
  inference(superposition,[],[f593,f734])).
fof(f25456,plain,(
  ( ! [X191,X189,X192,X190,X193] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X191),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X192),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X189),s('type.num.num',X190))),s('type.num.num',X190))),s('type.num.num',X192))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X191),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X189),s('type.num.num',X190))),s('type.num.num',X190))),s('type.num.num',X192)),X191)))) | s(bool,X193) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X190))) | s(bool,'T_0') = s(bool,X193)) )),
  inference(superposition,[],[f593,f734])).
fof(f25455,plain,(
  ( ! [X187,X185,X188,X186,X184] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X186),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X187)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X187),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X184),s('type.num.num',X185))),s('type.num.num',X185))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X186),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X187),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X184),s('type.num.num',X185))),s('type.num.num',X185)))),X186)))) | s(bool,X188) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X185))) | s(bool,'T_0') = s(bool,X188)) )),
  inference(superposition,[],[f593,f734])).
fof(f25454,plain,(
  ( ! [X182,X180,X183,X181,X179] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X181),s('type.num.num',X182))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X179),s('type.num.num',X180))),s('type.num.num',X180))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X182),s('type.num.num',X181))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X179),s('type.num.num',X180))),s('type.num.num',X180)),'const.arithmetic.+_2'(s('type.num.num',X182),s('type.num.num',X181)))))) | s(bool,X183) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X180))) | s(bool,'T_0') = s(bool,X183)) )),
  inference(superposition,[],[f590,f734])).
fof(f25453,plain,(
  ( ! [X177,X175,X178,X176,X174] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X176),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X177)))) | s('type.num.num',X177) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X174),s('type.num.num',X175))),s('type.num.num',X175))),s('type.num.num',X176))),s('type.num.num',sK2(X177,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X174),s('type.num.num',X175))),s('type.num.num',X175))),s('type.num.num',X176)))))) | s(bool,X178) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X175))) | s(bool,'T_0') = s(bool,X178)) )),
  inference(superposition,[],[f590,f734])).
fof(f25452,plain,(
  ( ! [X173,X171,X169,X172,X170] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X171))),s('type.num.num',X172)))) | s('type.num.num',X172) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X169),s('type.num.num',X170))),s('type.num.num',X170))))),s('type.num.num',sK2(X172,'const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X169),s('type.num.num',X170))),s('type.num.num',X170)))))))) | s(bool,X173) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X170))) | s(bool,'T_0') = s(bool,X173)) )),
  inference(superposition,[],[f590,f734])).
fof(f25447,plain,(
  ( ! [X152,X151,X149,X150,X148] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X150),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num',X150))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X148),s('type.num.num',X149))),s('type.num.num',X149))) | s(bool,X152) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X149))) | s(bool,'T_0') = s(bool,X152)) )),
  inference(superposition,[],[f525,f734])).
fof(f25446,plain,(
  ( ! [X146,X144,X147,X145,X143] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X145)))) | s('type.num.num',X145) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X146),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X143),s('type.num.num',X144))),s('type.num.num',X144))))) | s(bool,X147) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X144))) | s(bool,'T_0') = s(bool,X147)) )),
  inference(superposition,[],[f525,f734])).
fof(f25445,plain,(
  ( ! [X142,X140,X138,X141,X139,X137] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X139),s('type.num.num',X140))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X139))),s('type.num.num',X141))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X137),s('type.num.num',X138))),s('type.num.num',X138))) | s(bool,X142) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X138))) | s(bool,'T_0') = s(bool,X142)) )),
  inference(superposition,[],[f519,f734])).
fof(f25444,plain,(
  ( ! [X134,X132,X136,X135,X133,X131] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X133))),s('type.num.num',X134)))) | s('type.num.num',X134) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X133),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X131),s('type.num.num',X132))),s('type.num.num',X132))))),s('type.num.num',X135))) | s(bool,X136) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X132))) | s(bool,'T_0') = s(bool,X136)) )),
  inference(superposition,[],[f519,f734])).
fof(f25443,plain,(
  ( ! [X127,X125,X130,X128,X126,X129] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X127),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X128)))) | s('type.num.num',X128) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X125),s('type.num.num',X126))),s('type.num.num',X126))),s('type.num.num',X127))),s('type.num.num',X129))) | s(bool,X130) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X126))) | s(bool,'T_0') = s(bool,X130)) )),
  inference(superposition,[],[f519,f734])).
fof(f25442,plain,(
  ( ! [X123,X121,X124,X122,X120,X119] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X121),s('type.num.num',X122)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X122),s('type.num.num',X121))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X119),s('type.num.num',X120))),s('type.num.num',X120))),s('type.num.num',X123))) | s(bool,X124) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X120))) | s(bool,'T_0') = s(bool,X124)) )),
  inference(superposition,[],[f516,f734])).
fof(f25441,plain,(
  ( ! [X118,X116,X114,X117,X115,X113] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X115),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X115),s('type.num.num',X117))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X116),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X113),s('type.num.num',X114))),s('type.num.num',X114))))) | s(bool,X118) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X114))) | s(bool,'T_0') = s(bool,X118)) )),
  inference(superposition,[],[f516,f734])).
fof(f25440,plain,(
  ( ! [X111,X109,X107,X112,X110,X108] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X109),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X110),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X109),s('type.num.num',X111))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X107),s('type.num.num',X108))),s('type.num.num',X108))),s('type.num.num',X110))) | s(bool,X112) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X108))) | s(bool,'T_0') = s(bool,X112)) )),
  inference(superposition,[],[f516,f734])).
fof(f25437,plain,(
  ( ! [X97,X95,X98,X96] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X95),s('type.num.num',X96))),s('type.num.num',X96))),s('type.num.num',X97))))) | s(bool,X98) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X96))) | s(bool,'T_0') = s(bool,X98)) )),
  inference(superposition,[],[f474,f734])).
fof(f25436,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X93)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X93),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X91),s('type.num.num',X92))),s('type.num.num',X92))))))) | s(bool,X94) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X92))) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f474,f734])).
fof(f25430,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s('type.num.num',X65) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X63),s('type.num.num',X64))),s('type.num.num',X64))),s('type.num.num',X65)))) | s(bool,X67) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f103,f734])).
fof(f25429,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X60),s('type.num.num',X61))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X60),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X58),s('type.num.num',X59))),s('type.num.num',X59)))))) | s(bool,X62) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X59))) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f103,f734])).
fof(f25428,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56)))) | s('type.num.num',X56) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X54),s('type.num.num',X55))),s('type.num.num',X55))),s('type.num.num',sK2(X56,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X54),s('type.num.num',X55))),s('type.num.num',X55)))))) | s(bool,X57) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X55))) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f102,f734])).
fof(f25427,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',X51))),s('type.num.num',X51))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X50),s('type.num.num',X51))),s('type.num.num',X51)),X52)))) | s(bool,X53) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f102,f734])).
fof(f25772,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X35),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X34),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X34),'const.words.n2w_1'(s('type.num.num',X35))) = s('type.fcp.cart'(bool,X34),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num',X33))))) | s(bool,X36) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X33))) | s(bool,'T_0') = s(bool,X36)) )),
  inference(forward_demodulation,[],[f25423,f482])).
fof(f25423,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X34),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X35),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X34),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X34),'const.words.n2w_1'(s('type.num.num',X35))) = s('type.fcp.cart'(bool,X34),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num',X33))))) | s(bool,X36) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X33))) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f100,f734])).
fof(f25421,plain,(
  ( ! [X26,X24,X23,X25,X22] : (s('type.fcp.cart'(bool,X24),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) != s('type.fcp.cart'(bool,X24),'const.words.n2w_1'(s('type.num.num',X25))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X25),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X24),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X22),s('type.num.num',X23))),s('type.num.num',X23))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X24),'const.bool.the_value_0'))))) | s(bool,X26) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X23))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f99,f734])).
fof(f25378,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s(bool,X13) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X12))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11)))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11)))))) | s(bool,'T_0') = s(bool,X13) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f734,f605])).
fof(f25323,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num',X12))),s('type.num.num',X12))) | s(bool,X14) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11)))))) | s(bool,'T_0') = s(bool,X14) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f734,f605])).
fof(f25317,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X2))))) | s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X2))))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f734,f105])).
fof(f25035,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2)))))) )),
  inference(equality_resolution,[],[f2812])).
fof(f25034,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s('type.num.num',X10) != s('type.num.num',X11) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X8))),s('type.num.num',X11))) | s(bool,X12) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))),s('type.num.num',X10))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f2812,f605])).
fof(f25091,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2(X9,X8)))),s('type.num.num',X10))) | s('type.num.num',X10) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X11))) | s(bool,X12) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(forward_demodulation,[],[f25002,f101])).
fof(f25002,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s('type.num.num',X10) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X11))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(X9,X8)),s('type.num.num',X8))),s('type.num.num',X10))) | s(bool,X12) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f2812,f605])).
fof(f24999,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s('type.num.num',X77) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X79))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))),s('type.num.num',X78))),s('type.num.num',X77))) | s(bool,X80) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f2812,f483])).
fof(f24983,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.num.num',X16) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X15))),s('type.num.num',X18))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2(X15,X14)))),s('type.num.num',X17))),s('type.num.num',X16))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f2812,f605])).
fof(f24981,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))))),s('type.num.num',X8))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X7))),s('type.num.num',X6)))) )),
  inference(superposition,[],[f2812,f101])).
fof(f24979,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s('type.num.num',X77) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X78))),s('type.num.num',X79))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))))),s('type.num.num',X77))) | s(bool,X80) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f2812,f483])).
fof(f24963,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.num.num',X16) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X17))),s('type.num.num',X18))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2(X15,X14)))))),s('type.num.num',X16))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f2812,f605])).
fof(f24961,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num',X7))),s('type.num.num',X8))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))),s('type.num.num',X6)))) )),
  inference(superposition,[],[f2812,f101])).
fof(f24959,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))),s('type.num.num',X79))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X77))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))))) | s(bool,X80) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f2812,f483])).
fof(f24945,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.num.num',X15) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))),s('type.num.num',X18))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X16))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2(X15,X14)))))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f2812,f605])).
fof(f24621,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2(X9,X8)))))) | s('type.num.num',X9) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) | s(bool,X12) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(forward_demodulation,[],[f24557,f101])).
fof(f24557,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s('type.num.num',X9) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(X9,X8)),s('type.num.num',X8))))) | s(bool,X12) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f2655,f605])).
fof(f24554,plain,(
  ( ! [X76,X74,X77,X75,X73] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X76),s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',X75))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X73))),s('type.num.num',X76))))) | s(bool,X77) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X73))) | s(bool,'T_0') = s(bool,X77)) )),
  inference(superposition,[],[f2655,f483])).
fof(f24539,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2(X15,X14)))),s('type.num.num',X18))))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f2655,f605])).
fof(f24537,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X8)))))) )),
  inference(superposition,[],[f2655,f101])).
fof(f24535,plain,(
  ( ! [X76,X74,X77,X75,X73] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',X75))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X74),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X76),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X73))))))) | s(bool,X77) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X73))) | s(bool,'T_0') = s(bool,X77)) )),
  inference(superposition,[],[f2655,f483])).
fof(f24520,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X18))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2(X15,X14)))))))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f2655,f605])).
fof(f24518,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num',X8))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))))) )),
  inference(superposition,[],[f2655,f101])).
fof(f24516,plain,(
  ( ! [X28,X27] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27)))))) )),
  inference(superposition,[],[f2655,f1829])).
fof(f24515,plain,(
  ( ! [X26,X25] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X26))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X26),s('type.num.num',X25)))))) )),
  inference(superposition,[],[f2655,f1093])).
fof(f24514,plain,(
  ( ! [X24,X23] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X23)))))) )),
  inference(superposition,[],[f2655,f880])).
fof(f24509,plain,(
  ( ! [X14,X13] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13)))))) )),
  inference(superposition,[],[f2655,f604])).
fof(f24508,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s('type.num.num',X9) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X10))))) | s(bool,X12) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f2655,f605])).
fof(f24486,plain,(
  ( ! [X76,X74,X77,X75,X73] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X74))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X76))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X73))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X76),s('type.num.num',X75))))) | s(bool,X77) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X73))) | s(bool,'T_0') = s(bool,X77)) )),
  inference(superposition,[],[f2655,f483])).
fof(f24471,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2(X15,X14)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f2655,f605])).
fof(f24469,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num',X6))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7)))))) )),
  inference(superposition,[],[f2655,f101])).
fof(f24045,plain,(
  ( ! [X70,X74,X72,X71,X73] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X73),s('type.num.num',X71))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))),s('type.num.num',X72))) | s(bool,X74) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f1175,f483])).
fof(f24031,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X15)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X16))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2(X15,X14)))),s('type.num.num',X17))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f1175,f605])).
fof(f24029,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X7)))) )),
  inference(superposition,[],[f1175,f101])).
fof(f24027,plain,(
  ( ! [X70,X74,X72,X71,X73] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X73),s('type.num.num',X71))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))))) | s(bool,X74) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f1175,f483])).
fof(f24013,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X17)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X16))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2(X15,X14)))))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f1175,f605])).
fof(f24011,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num',X7)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))) )),
  inference(superposition,[],[f1175,f101])).
fof(f24009,plain,(
  ( ! [X70,X74,X72,X71,X73] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X72)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X73),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))))) | s(bool,X74) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f1175,f483])).
fof(f23995,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X16))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2(X15,X14)))))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f1175,f605])).
fof(f23782,plain,(
  ( ! [X12,X10,X8,X11,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2(X9,X8)))),s('type.num.num',X10)))) | s('type.num.num',X10) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X9))) | s(bool,X12) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(forward_demodulation,[],[f23720,f101])).
fof(f23720,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s('type.num.num',X10) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X9))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(X9,X8)),s('type.num.num',X8))),s('type.num.num',X10)))) | s(bool,X12) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f1167,f605])).
fof(f23717,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s('type.num.num',X71) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X73),s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))),s('type.num.num',X73))),s('type.num.num',X71)))) | s(bool,X74) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f1167,f483])).
fof(f23703,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.num.num',X16) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X15))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2(X15,X14)))),s('type.num.num',X18))),s('type.num.num',X16)))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f1167,f605])).
fof(f23701,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X8))),s('type.num.num',X6))))) )),
  inference(superposition,[],[f1167,f101])).
fof(f23699,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s('type.num.num',X71) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X73))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X73),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))))),s('type.num.num',X71)))) | s(bool,X74) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f1167,f483])).
fof(f23685,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.num.num',X16) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X18))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2(X15,X14)))))),s('type.num.num',X16)))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f1167,f605])).
fof(f23683,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num',X6) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num',X8))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))),s('type.num.num',X6))))) )),
  inference(superposition,[],[f1167,f101])).
fof(f23663,plain,(
  ( ! [X70,X74,X72,X71,X73] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X73))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X73),s('type.num.num',X72))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70)))))) | s(bool,X74) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f1167,f483])).
fof(f23649,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.num.num',X15) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2(X15,X14))))))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f1167,f605])).
fof(f23647,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))) )),
  inference(superposition,[],[f1167,f101])).
fof(f22741,plain,(
  ( ! [X350,X352,X354,X351,X353] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X353),s('type.num.num',X354))) != s(bool,f(s(X350,sK3(X351,X352,bool,X350)))) | s(fun(X350,bool),X351) = s(fun(X350,bool),X352) | s('type.num.num',X354) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X353),s('type.num.num',sK2(X354,X353)))) | s(bool,'T_0') = s(bool,g(s(X350,sK3(X351,X352,bool,X350))))) )),
  inference(superposition,[],[f104,f605])).
fof(f22739,plain,(
  ( ! [X344,X341,X343,X345,X342] : (s(X343,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X344),s('type.num.num',X345))))) != s(X343,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X344),s('type.num.num',X345))))) | s(fun(bool,X343),X341) = s(fun(bool,X343),X342) | s('type.num.num',X345) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X344),s('type.num.num',sK2(X345,X344)))) | s(bool,'T_0') = s(bool,sK3(X341,X342,X343,bool))) )),
  inference(superposition,[],[f104,f605])).
fof(f22839,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num',X3))) | s(bool,X0) = s(bool,X1) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK2(X3,X2))))) )),
  inference(condensation,[],[f22838])).
fof(f22838,plain,(
  ( ! [X103,X107,X105,X106,X104] : (s(bool,X106) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X104),s('type.num.num',X105))) | s(bool,'T_0') = s(bool,X103) | s(bool,X106) = s(bool,X107) | s(bool,'T_0') = s(bool,X107) | s('type.num.num',X105) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X104),s('type.num.num',sK2(X105,X104))))) )),
  inference(duplicate_literal_removal,[],[f22690])).
fof(f22690,plain,(
  ( ! [X103,X107,X105,X106,X104] : (s(bool,X106) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X104),s('type.num.num',X105))) | s(bool,'T_0') = s(bool,X103) | s(bool,X106) = s(bool,X107) | s(bool,'T_0') = s(bool,X107) | s('type.num.num',X105) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X104),s('type.num.num',sK2(X105,X104)))) | s(bool,'T_0') = s(bool,X103)) )),
  inference(superposition,[],[f471,f605])).
fof(f22664,plain,(
  ( ! [X412,X410,X411] : (s('type.num.num',sK1) != s('type.num.num',X411) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X410),s('type.num.num',sK2(X411,X410)))))) | s(bool,X412) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X410),s('type.num.num',X411))) | s(bool,'T_0') = s(bool,X412)) )),
  inference(superposition,[],[f7650,f605])).
fof(f22658,plain,(
  ( ! [X383,X385,X387,X384,X386] : (s('type.num.num',X384) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X385),s('type.num.num',X386))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X386),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X383),s('type.num.num',sK2(X384,X383)))))) | s(bool,X387) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X383),s('type.num.num',X384))) | s(bool,'T_0') = s(bool,X387)) )),
  inference(superposition,[],[f1213,f605])).
fof(f22657,plain,(
  ( ! [X379,X380,X382,X378,X381] : (s('type.num.num',X380) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X381),s('type.num.num',X379))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X378),s('type.num.num',sK2(X379,X378)))),s('type.num.num',X380))) | s(bool,X382) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X378),s('type.num.num',X379))) | s(bool,'T_0') = s(bool,X382)) )),
  inference(superposition,[],[f1213,f605])).
fof(f22656,plain,(
  ( ! [X377,X372,X374,X376,X373,X375] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X373),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X374),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X375),s('type.num.num',X376))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X374),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X374),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X376),s('type.num.num',X375))))) = s('type.fcp.cart'(bool,X374),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X372),s('type.num.num',sK2(X373,X372)))))) | s(bool,X377) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X372),s('type.num.num',X373))) | s(bool,'T_0') = s(bool,X377)) )),
  inference(superposition,[],[f1100,f605])).
fof(f22655,plain,(
  ( ! [X366,X368,X370,X367,X369,X371] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X368),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X369),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X367),s('type.num.num',X370))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X369),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X369),'const.words.n2w_1'(s('type.num.num',X368))) = s('type.fcp.cart'(bool,X369),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X370),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X366),s('type.num.num',sK2(X367,X366)))))))) | s(bool,X371) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X366),s('type.num.num',X367))) | s(bool,'T_0') = s(bool,X371)) )),
  inference(superposition,[],[f1100,f605])).
fof(f22654,plain,(
  ( ! [X364,X360,X362,X365,X361,X363] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X362),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X363),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X364),s('type.num.num',X361))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X363),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X363),'const.words.n2w_1'(s('type.num.num',X362))) = s('type.fcp.cart'(bool,X363),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X360),s('type.num.num',sK2(X361,X360)))),s('type.num.num',X364))))) | s(bool,X365) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X360),s('type.num.num',X361))) | s(bool,'T_0') = s(bool,X365)) )),
  inference(superposition,[],[f1100,f605])).
fof(f22653,plain,(
  ( ! [X358,X357,X359] : (s('type.num.num',sK1) != s('type.num.num',X358) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X357),s('type.num.num',sK2(X358,X357))))))) | s(bool,X359) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X357),s('type.num.num',X358))) | s(bool,'T_0') = s(bool,X359)) )),
  inference(superposition,[],[f1014,f605])).
fof(f22652,plain,(
  ( ! [X356,X352,X354,X351,X353,X355] : (s('type.fcp.cart'(bool,X353),'const.words.n2w_1'(s('type.num.num',X352))) != s('type.fcp.cart'(bool,X353),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X354),s('type.num.num',X355))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X355),s('type.num.num',X354))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X353),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X351),s('type.num.num',sK2(X352,X351)))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X353),'const.bool.the_value_0'))))) | s(bool,X356) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X351),s('type.num.num',X352))) | s(bool,'T_0') = s(bool,X356)) )),
  inference(superposition,[],[f984,f605])).
fof(f22651,plain,(
  ( ! [X350,X346,X349,X345,X347,X348] : (s('type.fcp.cart'(bool,X347),'const.words.n2w_1'(s('type.num.num',X348))) != s('type.fcp.cart'(bool,X347),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X346),s('type.num.num',X349))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X348),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X347),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X349),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X345),s('type.num.num',sK2(X346,X345)))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X347),'const.bool.the_value_0'))))) | s(bool,X350) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X345),s('type.num.num',X346))) | s(bool,'T_0') = s(bool,X350)) )),
  inference(superposition,[],[f984,f605])).
fof(f22650,plain,(
  ( ! [X344,X341,X343,X339,X340,X342] : (s('type.fcp.cart'(bool,X341),'const.words.n2w_1'(s('type.num.num',X342))) != s('type.fcp.cart'(bool,X341),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X343),s('type.num.num',X340))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X342),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X341),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X339),s('type.num.num',sK2(X340,X339)))),s('type.num.num',X343))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X341),'const.bool.the_value_0'))))) | s(bool,X344) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X339),s('type.num.num',X340))) | s(bool,'T_0') = s(bool,X344)) )),
  inference(superposition,[],[f984,f605])).
fof(f22649,plain,(
  ( ! [X333,X335,X337,X334,X336,X338] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X335),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num',X337))))),s('type.num.num',X334)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X333),s('type.num.num',sK2(X334,X333)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X335),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X336),s('type.num.num',X337))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X333),s('type.num.num',sK2(X334,X333))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X335),s('type.num.num',X336))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X335),s('type.num.num',X337)))))))) | s(bool,X338) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X333),s('type.num.num',X334))) | s(bool,'T_0') = s(bool,X338)) )),
  inference(superposition,[],[f924,f605])).
fof(f22648,plain,(
  ( ! [X327,X329,X331,X332,X328,X330] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X328),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X329),s('type.num.num',X330))))),s('type.num.num',X331)))) | s('type.num.num',X331) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X327),s('type.num.num',sK2(X328,X327)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X329),s('type.num.num',X330))))),s('type.num.num',sK2(X331,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X327),s('type.num.num',sK2(X328,X327)))),s('type.num.num',X329))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X327),s('type.num.num',sK2(X328,X327)))),s('type.num.num',X330)))))))) | s(bool,X332) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X327),s('type.num.num',X328))) | s(bool,'T_0') = s(bool,X332)) )),
  inference(superposition,[],[f924,f605])).
fof(f22647,plain,(
  ( ! [X325,X321,X323,X324,X326,X322] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X323),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X324),s('type.num.num',X322))))),s('type.num.num',X325)))) | s('type.num.num',X325) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X323),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X324),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X321),s('type.num.num',sK2(X322,X321)))))))),s('type.num.num',sK2(X325,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X323),s('type.num.num',X324))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X323),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X321),s('type.num.num',sK2(X322,X321))))))))))) | s(bool,X326) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X321),s('type.num.num',X322))) | s(bool,'T_0') = s(bool,X326)) )),
  inference(superposition,[],[f924,f605])).
fof(f22646,plain,(
  ( ! [X315,X316,X318,X320,X317,X319] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X317),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X316),s('type.num.num',X318))))),s('type.num.num',X319)))) | s('type.num.num',X319) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X317),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X315),s('type.num.num',sK2(X316,X315)))),s('type.num.num',X318))))),s('type.num.num',sK2(X319,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X317),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X315),s('type.num.num',sK2(X316,X315)))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X317),s('type.num.num',X318)))))))) | s(bool,X320) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X315),s('type.num.num',X316))) | s(bool,'T_0') = s(bool,X320)) )),
  inference(superposition,[],[f924,f605])).
fof(f22645,plain,(
  ( ! [X313,X310,X312,X314,X309,X311] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X310),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X311),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X312),s('type.num.num',X313)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X311),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X312),s('type.num.num',X313))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X309),s('type.num.num',sK2(X310,X309)))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X311),s('type.num.num',X312))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X311),s('type.num.num',X313)))),'const.arithmetic.+_2'(s('type.num.num',X309),s('type.num.num',sK2(X310,X309))))))) | s(bool,X314) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X309),s('type.num.num',X310))) | s(bool,'T_0') = s(bool,X314)) )),
  inference(superposition,[],[f923,f605])).
fof(f22644,plain,(
  ( ! [X308,X304,X306,X303,X305,X307] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X305),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X304),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X306),s('type.num.num',X307)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X303),s('type.num.num',sK2(X304,X303)))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X306),s('type.num.num',X307))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X305),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X303),s('type.num.num',sK2(X304,X303)))),s('type.num.num',X306))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X303),s('type.num.num',sK2(X304,X303)))),s('type.num.num',X307)))),X305)))) | s(bool,X308) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X303),s('type.num.num',X304))) | s(bool,'T_0') = s(bool,X308)) )),
  inference(superposition,[],[f923,f605])).
fof(f22643,plain,(
  ( ! [X300,X302,X298,X301,X297,X299] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X299),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X300),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X301),s('type.num.num',X298)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X300),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X301),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X297),s('type.num.num',sK2(X298,X297)))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X299),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X300),s('type.num.num',X301))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X300),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X297),s('type.num.num',sK2(X298,X297))))))),X299)))) | s(bool,X302) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X297),s('type.num.num',X298))) | s(bool,'T_0') = s(bool,X302)) )),
  inference(superposition,[],[f923,f605])).
fof(f22642,plain,(
  ( ! [X292,X294,X296,X293,X295,X291] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X293),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X294),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X292),s('type.num.num',X295)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X294),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X291),s('type.num.num',sK2(X292,X291)))),s('type.num.num',X295))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X293),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X294),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X291),s('type.num.num',sK2(X292,X291)))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X294),s('type.num.num',X295)))),X293)))) | s(bool,X296) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X291),s('type.num.num',X292))) | s(bool,'T_0') = s(bool,X296)) )),
  inference(superposition,[],[f923,f605])).
fof(f22639,plain,(
  ( ! [X280,X282,X281] : (s('type.num.num',sK1) != s('type.num.num',X281) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X280),s('type.num.num',sK2(X281,X280))))))) | s(bool,X282) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X280),s('type.num.num',X281))) | s(bool,'T_0') = s(bool,X282)) )),
  inference(superposition,[],[f815,f605])).
fof(f22637,plain,(
  ( ! [X271,X273,X275,X272,X274] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X273),s('type.num.num',X272)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X274),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X271),s('type.num.num',sK2(X272,X271)))),s('type.num.num',X273))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X271),s('type.num.num',sK2(X272,X271)))),s('type.num.num',X273))))) | s(bool,X275) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X271),s('type.num.num',X272))) | s(bool,'T_0') = s(bool,X275)) )),
  inference(superposition,[],[f718,f605])).
fof(f22636,plain,(
  ( ! [X269,X267,X268,X270,X266] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X267),s('type.num.num',X268)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X269),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X268),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X266),s('type.num.num',sK2(X267,X266)))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X268),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X266),s('type.num.num',sK2(X267,X266)))))))) | s(bool,X270) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X266),s('type.num.num',X267))) | s(bool,'T_0') = s(bool,X270)) )),
  inference(superposition,[],[f718,f605])).
fof(f22635,plain,(
  ( ! [X263,X265,X262,X264] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X264),'const.bool.the_value_0'))),s('type.num.num',X263)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num',sK2(X263,X262)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X264),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num',sK2(X263,X262))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X264),'const.bool.the_value_0')))))))) | s(bool,X265) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X262),s('type.num.num',X263))) | s(bool,'T_0') = s(bool,X265)) )),
  inference(superposition,[],[f646,f605])).
fof(f22634,plain,(
  ( ! [X261,X259,X260,X258] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X259),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X260),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X260),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num',sK2(X259,X258)))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X260),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num',sK2(X259,X258))))))) | s(bool,X261) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X258),s('type.num.num',X259))) | s(bool,'T_0') = s(bool,X261)) )),
  inference(superposition,[],[f645,f605])).
fof(f22633,plain,(
  ( ! [X255,X257,X256] : (s('type.num.num',sK1) != s('type.num.num',X256) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X255),s('type.num.num',sK2(X256,X255))))))) | s(bool,X257) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X255),s('type.num.num',X256))) | s(bool,'T_0') = s(bool,X257)) )),
  inference(superposition,[],[f607,f605])).
fof(f22632,plain,(
  ( ! [X253,X251,X254,X252,X250] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X251),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X252),s('type.num.num',X253)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X253),s('type.num.num',X252))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X250),s('type.num.num',sK2(X251,X250)))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X253),s('type.num.num',X252)),'const.arithmetic.+_2'(s('type.num.num',X250),s('type.num.num',sK2(X251,X250))))))) | s(bool,X254) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X250),s('type.num.num',X251))) | s(bool,'T_0') = s(bool,X254)) )),
  inference(superposition,[],[f593,f605])).
fof(f22631,plain,(
  ( ! [X249,X246,X248,X247,X245] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X247),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X248),s('type.num.num',X246)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X245),s('type.num.num',sK2(X246,X245)))),s('type.num.num',X248))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X247),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X245),s('type.num.num',sK2(X246,X245)))),s('type.num.num',X248)),X247)))) | s(bool,X249) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X245),s('type.num.num',X246))) | s(bool,'T_0') = s(bool,X249)) )),
  inference(superposition,[],[f593,f605])).
fof(f22630,plain,(
  ( ! [X243,X241,X244,X242,X240] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X242),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num',X243)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X243),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X240),s('type.num.num',sK2(X241,X240)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X242),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X243),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X240),s('type.num.num',sK2(X241,X240))))),X242)))) | s(bool,X244) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X240),s('type.num.num',X241))) | s(bool,'T_0') = s(bool,X244)) )),
  inference(superposition,[],[f593,f605])).
fof(f22629,plain,(
  ( ! [X239,X237,X235,X238,X236] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X237),s('type.num.num',X238))),s('type.num.num',X236)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X235),s('type.num.num',sK2(X236,X235)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X238),s('type.num.num',X237))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X235),s('type.num.num',sK2(X236,X235))),'const.arithmetic.+_2'(s('type.num.num',X238),s('type.num.num',X237)))))) | s(bool,X239) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X235),s('type.num.num',X236))) | s(bool,'T_0') = s(bool,X239)) )),
  inference(superposition,[],[f590,f605])).
fof(f22628,plain,(
  ( ! [X231,X233,X230,X234,X232] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X232),s('type.num.num',X231))),s('type.num.num',X233)))) | s('type.num.num',X233) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X230),s('type.num.num',sK2(X231,X230)))),s('type.num.num',X232))),s('type.num.num',sK2(X233,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X230),s('type.num.num',sK2(X231,X230)))),s('type.num.num',X232)))))) | s(bool,X234) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X230),s('type.num.num',X231))) | s(bool,'T_0') = s(bool,X234)) )),
  inference(superposition,[],[f590,f605])).
fof(f22627,plain,(
  ( ! [X229,X227,X225,X228,X226] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X226),s('type.num.num',X227))),s('type.num.num',X228)))) | s('type.num.num',X228) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X227),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X225),s('type.num.num',sK2(X226,X225)))))),s('type.num.num',sK2(X228,'const.arithmetic.+_2'(s('type.num.num',X227),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X225),s('type.num.num',sK2(X226,X225))))))))) | s(bool,X229) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X225),s('type.num.num',X226))) | s(bool,'T_0') = s(bool,X229)) )),
  inference(superposition,[],[f590,f605])).
fof(f22622,plain,(
  ( ! [X208,X206,X204,X207,X205] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X206),s('type.num.num',X205)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X207),s('type.num.num',X206))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X204),s('type.num.num',sK2(X205,X204)))) | s(bool,X208) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X204),s('type.num.num',X205))) | s(bool,'T_0') = s(bool,X208)) )),
  inference(superposition,[],[f525,f605])).
fof(f22621,plain,(
  ( ! [X202,X200,X199,X203,X201] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X200),s('type.num.num',X201)))) | s('type.num.num',X201) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X202),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num',sK2(X200,X199)))))) | s(bool,X203) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X199),s('type.num.num',X200))) | s(bool,'T_0') = s(bool,X203)) )),
  inference(superposition,[],[f525,f605])).
fof(f22620,plain,(
  ( ! [X198,X196,X194,X197,X195,X193] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X195),s('type.num.num',X196))),s('type.num.num',X194)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X193),s('type.num.num',sK2(X194,X193)))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X196),s('type.num.num',X195))),s('type.num.num',X197))) | s(bool,X198) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X193),s('type.num.num',X194))) | s(bool,'T_0') = s(bool,X198)) )),
  inference(superposition,[],[f519,f605])).
fof(f22619,plain,(
  ( ! [X191,X189,X187,X192,X190,X188] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X188),s('type.num.num',X189))),s('type.num.num',X190)))) | s('type.num.num',X190) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X189),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X187),s('type.num.num',sK2(X188,X187)))))),s('type.num.num',X191))) | s(bool,X192) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X187),s('type.num.num',X188))) | s(bool,'T_0') = s(bool,X192)) )),
  inference(superposition,[],[f519,f605])).
fof(f22618,plain,(
  ( ! [X185,X182,X186,X184,X183,X181] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X183),s('type.num.num',X182))),s('type.num.num',X184)))) | s('type.num.num',X184) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X181),s('type.num.num',sK2(X182,X181)))),s('type.num.num',X183))),s('type.num.num',X185))) | s(bool,X186) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X181),s('type.num.num',X182))) | s(bool,'T_0') = s(bool,X186)) )),
  inference(superposition,[],[f519,f605])).
fof(f22617,plain,(
  ( ! [X177,X175,X180,X178,X176,X179] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X176),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X177),s('type.num.num',X178)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X178),s('type.num.num',X177))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X175),s('type.num.num',sK2(X176,X175)))),s('type.num.num',X179))) | s(bool,X180) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X175),s('type.num.num',X176))) | s(bool,'T_0') = s(bool,X180)) )),
  inference(superposition,[],[f516,f605])).
fof(f22616,plain,(
  ( ! [X173,X171,X169,X174,X172,X170] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X171),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X170),s('type.num.num',X172)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X171),s('type.num.num',X173))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X172),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num',sK2(X170,X169)))))) | s(bool,X174) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X169),s('type.num.num',X170))) | s(bool,'T_0') = s(bool,X174)) )),
  inference(superposition,[],[f516,f605])).
fof(f22615,plain,(
  ( ! [X167,X165,X163,X166,X164,X168] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X165),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X166),s('type.num.num',X164)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X165),s('type.num.num',X167))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X163),s('type.num.num',sK2(X164,X163)))),s('type.num.num',X166))) | s(bool,X168) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X163),s('type.num.num',X164))) | s(bool,'T_0') = s(bool,X168)) )),
  inference(superposition,[],[f516,f605])).
fof(f22614,plain,(
  ( ! [X161,X159,X162,X160] : (s(bool,X161) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X160))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X159),s('type.num.num',sK2(X160,X159)))))) | s(bool,'T_0') = s(bool,X161) | s(bool,X162) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X159),s('type.num.num',X160))) | s(bool,'T_0') = s(bool,X162)) )),
  inference(superposition,[],[f483,f605])).
fof(f22613,plain,(
  ( ! [X158,X156,X157,X155] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X156))) | s(bool,X157) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X155),s('type.num.num',sK2(X156,X155)))))) | s(bool,'T_0') = s(bool,X157) | s(bool,X158) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X155),s('type.num.num',X156))) | s(bool,'T_0') = s(bool,X158)) )),
  inference(superposition,[],[f483,f605])).
fof(f22612,plain,(
  ( ! [X154,X152,X151,X153] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X153),s('type.num.num',X152)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X151),s('type.num.num',sK2(X152,X151)))),s('type.num.num',X153))))) | s(bool,X154) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X151),s('type.num.num',X152))) | s(bool,'T_0') = s(bool,X154)) )),
  inference(superposition,[],[f474,f605])).
fof(f22611,plain,(
  ( ! [X149,X147,X150,X148] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X148),s('type.num.num',X149)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X149),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X147),s('type.num.num',sK2(X148,X147)))))))) | s(bool,X150) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X147),s('type.num.num',X148))) | s(bool,'T_0') = s(bool,X150)) )),
  inference(superposition,[],[f474,f605])).
fof(f22605,plain,(
  ( ! [X123,X121,X122,X120,X119] : (s('type.num.num',X121) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X120),s('type.num.num',X122))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X119),s('type.num.num',sK2(X120,X119)))),s('type.num.num',X121)))) | s(bool,X123) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X119),s('type.num.num',X120))) | s(bool,'T_0') = s(bool,X123)) )),
  inference(superposition,[],[f103,f605])).
fof(f22604,plain,(
  ( ! [X118,X116,X114,X117,X115] : (s('type.num.num',X115) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X116),s('type.num.num',X117))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X116),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',sK2(X115,X114))))))) | s(bool,X118) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X114),s('type.num.num',X115))) | s(bool,'T_0') = s(bool,X118)) )),
  inference(superposition,[],[f103,f605])).
fof(f22603,plain,(
  ( ! [X111,X112,X110,X113] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X111),s('type.num.num',X112)))) | s('type.num.num',X112) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X110),s('type.num.num',sK2(X111,X110)))),s('type.num.num',sK2(X112,'const.arithmetic.+_2'(s('type.num.num',X110),s('type.num.num',sK2(X111,X110))))))) | s(bool,X113) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X110),s('type.num.num',X111))) | s(bool,'T_0') = s(bool,X113)) )),
  inference(superposition,[],[f102,f605])).
fof(f22602,plain,(
  ( ! [X109,X107,X108,X106] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X108),s('type.num.num',X107)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X106),s('type.num.num',sK2(X107,X106)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X108),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X106),s('type.num.num',sK2(X107,X106))),X108)))) | s(bool,X109) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X106),s('type.num.num',X107))) | s(bool,'T_0') = s(bool,X109)) )),
  inference(superposition,[],[f102,f605])).
fof(f22591,plain,(
  ( ! [X61,X59,X62,X60] : (s('type.num.num',X60) != s('type.num.num',X61) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(X60,X59)),s('type.num.num',X61))) | s(bool,X62) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X59),s('type.num.num',X60))) | s(bool,'T_0') = s(bool,X62)) )),
  inference(superposition,[],[f1213,f605])).
fof(f22991,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s('type.fcp.cart'(bool,X57),'const.words.n2w_1'(s('type.num.num',X56))) = s('type.fcp.cart'(bool,X57),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X54),s('type.num.num',sK2(X55,X54)))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X55),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X57),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X56),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X57),'const.bool.the_value_0'))))) | s(bool,X58) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X54),s('type.num.num',X55))) | s(bool,'T_0') = s(bool,X58)) )),
  inference(forward_demodulation,[],[f22590,f101])).
fof(f22590,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X55),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X57),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X56),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X57),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X57),'const.words.n2w_1'(s('type.num.num',X56))) = s('type.fcp.cart'(bool,X57),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(X55,X54)),s('type.num.num',X54))))) | s(bool,X58) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X54),s('type.num.num',X55))) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f1100,f605])).
fof(f22990,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X52),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X51),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X49),s('type.num.num',sK2(X50,X49)))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X51),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X51),'const.words.n2w_1'(s('type.num.num',X50))) != s('type.fcp.cart'(bool,X51),'const.words.n2w_1'(s('type.num.num',X52))) | s(bool,X53) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X49),s('type.num.num',X50))) | s(bool,'T_0') = s(bool,X53)) )),
  inference(forward_demodulation,[],[f22589,f101])).
fof(f22589,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s('type.fcp.cart'(bool,X51),'const.words.n2w_1'(s('type.num.num',X50))) != s('type.fcp.cart'(bool,X51),'const.words.n2w_1'(s('type.num.num',X52))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X52),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X51),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(X50,X49)),s('type.num.num',X49))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X51),'const.bool.the_value_0'))))) | s(bool,X53) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X49),s('type.num.num',X50))) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f984,f605])).
fof(f22588,plain,(
  ( ! [X47,X45,X48,X46,X44] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X46),s('type.num.num',X45))),s('type.num.num',X47)))) | s('type.num.num',X47) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X46),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',sK2(X45,X44)))))),s('type.num.num',sK2(X47,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X46),s('type.num.num',X44))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X46),s('type.num.num',sK2(X45,X44))))))))) | s(bool,X48) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X44),s('type.num.num',X45))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f924,f605])).
fof(f22587,plain,(
  ( ! [X39,X43,X41,X42,X40] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X41),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X42),s('type.num.num',X40)))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X42),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',sK2(X40,X39)))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X42),s('type.num.num',X39))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X42),s('type.num.num',sK2(X40,X39))))),X41)))) | s(bool,X43) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X39),s('type.num.num',X40))) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f923,f605])).
fof(f22989,plain,(
  ( ! [X37,X35,X38,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK2(X36,X35)))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK2(X36,X35)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36)))) | s(bool,X38) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X35),s('type.num.num',X36))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(forward_demodulation,[],[f22586,f101])).
fof(f22586,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X36)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X37),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(X36,X35)),s('type.num.num',X35))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(X36,X35)),s('type.num.num',X35))))) | s(bool,X38) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X35),s('type.num.num',X36))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f718,f605])).
fof(f22988,plain,(
  ( ! [X33,X31,X34,X32] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',sK2(X32,X31)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(X32,X31)),s('type.num.num',X31)),X33)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X33),s('type.num.num',X32)))) | s(bool,X34) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num',X32))) | s(bool,'T_0') = s(bool,X34)) )),
  inference(forward_demodulation,[],[f22585,f101])).
fof(f22585,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X33),s('type.num.num',X32)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(X32,X31)),s('type.num.num',X31))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(X32,X31)),s('type.num.num',X31)),X33)))) | s(bool,X34) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num',X32))) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f593,f605])).
fof(f22987,plain,(
  ( ! [X30,X28,X29,X27] : (s('type.num.num',X29) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',sK2(X28,X27)))),s('type.num.num',sK2(X29,'const.arithmetic.+_2'(s('type.num.num',sK2(X28,X27)),s('type.num.num',X27)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num',X29)))) | s(bool,X30) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num',X28))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(forward_demodulation,[],[f22584,f101])).
fof(f22584,plain,(
  ( ! [X30,X28,X29,X27] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X28),s('type.num.num',X29)))) | s('type.num.num',X29) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(X28,X27)),s('type.num.num',X27))),s('type.num.num',sK2(X29,'const.arithmetic.+_2'(s('type.num.num',sK2(X28,X27)),s('type.num.num',X27)))))) | s(bool,X30) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num',X28))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f590,f605])).
fof(f22582,plain,(
  ( ! [X23,X21,X22] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(X22,X21)),s('type.num.num',X22))) | s(bool,X23) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',X22))) | s(bool,'T_0') = s(bool,X23)) )),
  inference(superposition,[],[f533,f605])).
fof(f22986,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s('type.num.num',X18) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',sK2(X17,X16)))),s('type.num.num',X19))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',X18)))) | s(bool,X20) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num',X17))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(forward_demodulation,[],[f22581,f101])).
fof(f22581,plain,(
  ( ! [X19,X17,X20,X18,X16] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X17),s('type.num.num',X18)))) | s('type.num.num',X18) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(X17,X16)),s('type.num.num',X16))),s('type.num.num',X19))) | s(bool,X20) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num',X17))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f519,f605])).
fof(f22985,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',X12)))) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(forward_demodulation,[],[f22580,f101])).
fof(f22580,plain,(
  ( ! [X14,X12,X15,X13,X11] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X13),s('type.num.num',X12)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(X12,X11)),s('type.num.num',X11))) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f516,f605])).
fof(f22984,plain,(
  ( ! [X10,X8,X9] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2(X9,X8)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)))) | s(bool,X10) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(forward_demodulation,[],[f22579,f101])).
fof(f22579,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X9)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(X9,X8)),s('type.num.num',X8))))) | s(bool,X10) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f474,f605])).
fof(f22578,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.num.num',X5) != s('type.num.num',X6) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X6)))) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',X5))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f103,f605])).
fof(f22551,plain,(
  ( ! [X54,X56,X55,X53] : (s(bool,X54) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X55),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53)),X55)))) | s(bool,'T_0') = s(bool,X54) | s(bool,X56) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53))) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f605,f483])).
fof(f22983,plain,(
  ( ! [X52,X50,X51] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X50)))),X52)))) | s(bool,X51) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X51)) )),
  inference(forward_demodulation,[],[f22550,f2063])).
fof(f22550,plain,(
  ( ! [X52,X50,X51] : (s(bool,X51) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X52),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X50))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X52),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X50)))),X52)))) | s(bool,'T_0') = s(bool,X51)) )),
  inference(superposition,[],[f605,f2063])).
fof(f22982,plain,(
  ( ! [X47,X48,X46,X49] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X49),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0')))),X49)))) | s(bool,X48) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X49),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(forward_demodulation,[],[f22549,f733])).
fof(f22549,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,X48) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X49),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X49),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0')))),X49)))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f605,f733])).
fof(f22981,plain,(
  ( ! [X45,X43,X44] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X43),'const.bool.the_value_0')))),X45)))) | s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(forward_demodulation,[],[f22548,f482])).
fof(f22548,plain,(
  ( ! [X45,X43,X44] : (s(bool,X44) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X43),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X43),'const.bool.the_value_0')))),X45)))) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f605,f482])).
fof(f22980,plain,(
  ( ! [X39,X41,X42,X40] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X40),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X39))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X40),'const.bool.the_value_0')))),X42)))) | s(bool,X41) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X40),'const.bool.the_value_0'))))))))) | s(bool,'T_0') = s(bool,X41)) )),
  inference(forward_demodulation,[],[f22547,f906])).
fof(f22547,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,X41) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X42),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X40),'const.bool.the_value_0'))))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X39))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X40),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X39))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X40),'const.bool.the_value_0')))),X42)))) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f605,f906])).
fof(f22979,plain,(
  ( ! [X37,X35,X38,X36] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X35),'const.bool.the_value_0'))),s('type.num.num',X36))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X35),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X36)))),X38)))) | s(bool,X37) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X35),'const.bool.the_value_0'))),s('type.num.num',X36))))))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(forward_demodulation,[],[f22546,f891])).
fof(f22546,plain,(
  ( ! [X37,X35,X38,X36] : (s(bool,X37) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X38),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X35),'const.bool.the_value_0'))),s('type.num.num',X36))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X35),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X36))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X35),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X36)))),X38)))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f605,f891])).
fof(f22977,plain,(
  ( ! [X28,X29] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),X29)))) | s(bool,X28) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X29),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X28)) )),
  inference(forward_demodulation,[],[f22544,f1829])).
fof(f22544,plain,(
  ( ! [X28,X29] : (s(bool,X28) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X29),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),X29)))) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f605,f1829])).
fof(f22976,plain,(
  ( ! [X26,X27] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),X27)))) | s(bool,X26) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(forward_demodulation,[],[f22543,f1093])).
fof(f22543,plain,(
  ( ! [X26,X27] : (s(bool,X26) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X27),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),X27)))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f605,f1093])).
fof(f22975,plain,(
  ( ! [X24,X25] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X25)))) | s(bool,X24) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(forward_demodulation,[],[f22542,f880])).
fof(f22542,plain,(
  ( ! [X24,X25] : (s(bool,X24) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X25)))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f605,f880])).
fof(f22974,plain,(
  ( ! [X23,X22] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),X23)))) | s(bool,X22) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(forward_demodulation,[],[f22541,f763])).
fof(f22541,plain,(
  ( ! [X23,X22] : (s(bool,X22) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),X23)))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f605,f763])).
fof(f22973,plain,(
  ( ! [X21,X20] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X21)))) | s(bool,X20) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(forward_demodulation,[],[f22972,f604])).
fof(f22972,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X21)))) | s(bool,X20) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(forward_demodulation,[],[f22971,f101])).
fof(f22971,plain,(
  ( ! [X21,X20] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X21)))) | s(bool,X20) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(forward_demodulation,[],[f22540,f714])).
fof(f22540,plain,(
  ( ! [X21,X20] : (s(bool,X20) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X21)))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f605,f5172])).
fof(f22970,plain,(
  ( ! [X19,X18] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X19)))) | s(bool,X18) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(forward_demodulation,[],[f22969,f604])).
fof(f22969,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X19)))) | s(bool,X18) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(forward_demodulation,[],[f22539,f2124])).
fof(f22539,plain,(
  ( ! [X19,X18] : (s(bool,X18) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',sK1))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X19)))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f605,f2703])).
fof(f22537,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s(bool,X13) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X12))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11)))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11))),X14)))) | s(bool,'T_0') = s(bool,X13) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f605,f605])).
fof(f22533,plain,(
  ( ! [X54,X56,X55,X53] : (s(bool,X54) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X55))) | s('type.num.num',X55) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53))),s('type.num.num',sK2(X55,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53)))))) | s(bool,'T_0') = s(bool,X54) | s(bool,X56) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53))) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f605,f483])).
fof(f22519,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s(bool,X13) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num',X14))) | s('type.num.num',X14) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11)))),s('type.num.num',sK2(X14,'const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11))))))) | s(bool,'T_0') = s(bool,X13) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f605,f605])).
fof(f22483,plain,(
  ( ! [X54,X56,X55,X53] : (s('type.num.num',X54) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X54,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53)))))) | s(bool,X55) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53))),s('type.num.num',X54))) | s(bool,'T_0') = s(bool,X55) | s(bool,X56) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53))) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f605,f483])).
fof(f22922,plain,(
  ( ! [X52,X50,X51] : (s(bool,X52) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) | s('type.num.num',X51) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X51,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X50)))))))) | s(bool,'T_0') = s(bool,X52)) )),
  inference(forward_demodulation,[],[f22482,f2063])).
fof(f22482,plain,(
  ( ! [X52,X50,X51] : (s('type.num.num',X51) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X51,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X50)))))))) | s(bool,X52) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X50))))),s('type.num.num',X51))) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f605,f2063])).
fof(f22921,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,X49) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X48))) | s('type.num.num',X48) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X48,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0')))))))) | s(bool,'T_0') = s(bool,X49)) )),
  inference(forward_demodulation,[],[f22481,f733])).
fof(f22481,plain,(
  ( ! [X47,X48,X46,X49] : (s('type.num.num',X48) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X48,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0')))))))) | s(bool,X49) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X46),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0'))))),s('type.num.num',X48))) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f605,f733])).
fof(f22920,plain,(
  ( ! [X45,X43,X44] : (s(bool,X45) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X44))) | s('type.num.num',X44) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X44,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X43),'const.bool.the_value_0')))))))) | s(bool,'T_0') = s(bool,X45)) )),
  inference(forward_demodulation,[],[f22480,f482])).
fof(f22480,plain,(
  ( ! [X45,X43,X44] : (s('type.num.num',X44) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X44,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X43),'const.bool.the_value_0')))))))) | s(bool,X45) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X43),'const.bool.the_value_0'))))),s('type.num.num',X44))) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f605,f482])).
fof(f22919,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,X42) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X40),'const.bool.the_value_0'))))))),s('type.num.num',X41))) | s('type.num.num',X41) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X40),'const.bool.the_value_0'))))))),s('type.num.num',sK2(X41,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X39))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X40),'const.bool.the_value_0')))))))) | s(bool,'T_0') = s(bool,X42)) )),
  inference(forward_demodulation,[],[f22479,f906])).
fof(f22479,plain,(
  ( ! [X39,X41,X42,X40] : (s('type.num.num',X41) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X40),'const.bool.the_value_0'))))))),s('type.num.num',sK2(X41,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X39))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X40),'const.bool.the_value_0')))))))) | s(bool,X42) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X39))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X40),'const.bool.the_value_0'))))),s('type.num.num',X41))) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f605,f906])).
fof(f22918,plain,(
  ( ! [X37,X35,X38,X36] : (s(bool,X38) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X35),'const.bool.the_value_0'))),s('type.num.num',X36))))),s('type.num.num',X37))) | s('type.num.num',X37) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X35),'const.bool.the_value_0'))),s('type.num.num',X36))))),s('type.num.num',sK2(X37,'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X35),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X36)))))))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(forward_demodulation,[],[f22478,f891])).
fof(f22478,plain,(
  ( ! [X37,X35,X38,X36] : (s('type.num.num',X37) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X35),'const.bool.the_value_0'))),s('type.num.num',X36))))),s('type.num.num',sK2(X37,'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X35),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X36)))))))) | s(bool,X38) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X35),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X36))))),s('type.num.num',X37))) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f605,f891])).
fof(f22916,plain,(
  ( ! [X28,X29] : (s(bool,X29) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X28))) | s('type.num.num',X28) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X28,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) | s(bool,'T_0') = s(bool,X29)) )),
  inference(forward_demodulation,[],[f22476,f1829])).
fof(f22476,plain,(
  ( ! [X28,X29] : (s('type.num.num',X28) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X28,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) | s(bool,X29) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),s('type.num.num',X28))) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f605,f1829])).
fof(f22915,plain,(
  ( ! [X26,X27] : (s(bool,X27) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X26))) | s('type.num.num',X26) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X26,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(forward_demodulation,[],[f22475,f1093])).
fof(f22475,plain,(
  ( ! [X26,X27] : (s('type.num.num',X26) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X26,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) | s(bool,X27) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num',X26))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f605,f1093])).
fof(f22914,plain,(
  ( ! [X24,X25] : (s(bool,X25) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X24))) | s('type.num.num',X24) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X24,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | s(bool,'T_0') = s(bool,X25)) )),
  inference(forward_demodulation,[],[f22474,f880])).
fof(f22474,plain,(
  ( ! [X24,X25] : (s('type.num.num',X24) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X24,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | s(bool,X25) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',X24))) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f605,f880])).
fof(f22913,plain,(
  ( ! [X23,X22] : (s(bool,X23) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X22))) | s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X22,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) | s(bool,'T_0') = s(bool,X23)) )),
  inference(forward_demodulation,[],[f22473,f763])).
fof(f22473,plain,(
  ( ! [X23,X22] : (s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X22,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) | s(bool,X23) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',X22))) | s(bool,'T_0') = s(bool,X23)) )),
  inference(superposition,[],[f605,f763])).
fof(f22912,plain,(
  ( ! [X21,X20] : (s(bool,X21) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X20))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X20,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | s(bool,'T_0') = s(bool,X21)) )),
  inference(forward_demodulation,[],[f22911,f604])).
fof(f22911,plain,(
  ( ! [X21,X20] : (s(bool,X21) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',X20))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X20,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | s(bool,'T_0') = s(bool,X21)) )),
  inference(forward_demodulation,[],[f22910,f101])).
fof(f22910,plain,(
  ( ! [X21,X20] : (s(bool,X21) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',X20))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X20,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | s(bool,'T_0') = s(bool,X21)) )),
  inference(forward_demodulation,[],[f22472,f714])).
fof(f22472,plain,(
  ( ! [X21,X20] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X20,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | s(bool,X21) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',X20))) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f605,f5172])).
fof(f22909,plain,(
  ( ! [X19,X18] : (s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X18))) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X18,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(forward_demodulation,[],[f22908,f604])).
fof(f22908,plain,(
  ( ! [X19,X18] : (s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',X18))) | s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X18,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(forward_demodulation,[],[f22471,f2124])).
fof(f22471,plain,(
  ( ! [X19,X18] : (s('type.num.num',X18) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X18,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',X18))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f605,f2703])).
fof(f22469,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',sK2(X13,'const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11))))))) | s(bool,X14) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2(X12,X11)))),s('type.num.num',X13))) | s(bool,'T_0') = s(bool,X14) | s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f605,f605])).
fof(f22467,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)))))) | s(bool,X6) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f605,f101])).
fof(f20646,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2)) )),
  inference(equality_factoring,[],[f262])).
fof(f22397,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f20639,f154])).
fof(f20639,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X2)) )),
  inference(equality_factoring,[],[f262])).
fof(f20342,plain,(
  ( ! [X333,X335,X337,X332,X334,X336] : (s(bool,'T_0') != s(bool,f(s(X332,sK3(X333,X334,bool,X332)))) | s(fun(X332,bool),X333) = s(fun(X332,bool),X334) | s(bool,X335) = s(bool,X336) | s(bool,X336) = s(bool,g(s(X332,sK3(X333,X334,bool,X332)))) | s(bool,X335) = s(bool,X337) | s(bool,'T_0') = s(bool,X337)) )),
  inference(superposition,[],[f104,f262])).
fof(f20340,plain,(
  ( ! [X325,X321,X323,X324,X326,X322] : (s(X323,f(s(bool,'T_0'))) != s(X323,g(s(bool,'T_0'))) | s(fun(bool,X323),X321) = s(fun(bool,X323),X322) | s(bool,X324) = s(bool,X325) | s(bool,X325) = s(bool,sK3(X321,X322,X323,bool)) | s(bool,X324) = s(bool,X326) | s(bool,'T_0') = s(bool,X326)) )),
  inference(superposition,[],[f104,f262])).
fof(f22261,plain,(
  ( ! [X308,X306,X309,X305,X307] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X306),s('type.num.num',X305))))) | s(bool,X307) = s(bool,X308) | s(bool,X308) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X305),s('type.num.num',X306))))) | s(bool,X307) = s(bool,X309) | s(bool,'T_0') = s(bool,X309)) )),
  inference(subsumption_resolution,[],[f20338,f78])).
fof(f20338,plain,(
  ( ! [X308,X306,X309,X305,X307] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X306),s('type.num.num',X305))))) | s(bool,X307) = s(bool,X308) | s(bool,X308) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X305),s('type.num.num',X306))))) | s(bool,X307) = s(bool,X309) | s(bool,'T_0') = s(bool,X309)) )),
  inference(superposition,[],[f474,f262])).
fof(f22260,plain,(
  ( ! [X300,X302,X304,X301,X303,X299] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X301),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X300),s('type.num.num',X299))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X300),s('type.num.num',X299))))) | s(bool,X302) = s(bool,X303) | s(bool,X303) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X299),s('type.num.num',X300))))) | s(bool,X302) = s(bool,X304) | s(bool,'T_0') = s(bool,X304)) )),
  inference(subsumption_resolution,[],[f20337,f78])).
fof(f20337,plain,(
  ( ! [X300,X302,X304,X301,X303,X299] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X301),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X300),s('type.num.num',X299))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X300),s('type.num.num',X299))))) | s(bool,X302) = s(bool,X303) | s(bool,X303) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X299),s('type.num.num',X300))))) | s(bool,X302) = s(bool,X304) | s(bool,'T_0') = s(bool,X304)) )),
  inference(superposition,[],[f718,f262])).
fof(f22259,plain,(
  ( ! [X282,X285,X281,X283,X284] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X282),s('type.num.num',X281))),s('type.num.num',X281))) | s(bool,X283) = s(bool,X284) | s(bool,X284) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X281))) | s(bool,X283) = s(bool,X285) | s(bool,'T_0') = s(bool,X285)) )),
  inference(subsumption_resolution,[],[f20333,f78])).
fof(f20333,plain,(
  ( ! [X282,X285,X281,X283,X284] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X282),s('type.num.num',X281))),s('type.num.num',X281))) | s(bool,X283) = s(bool,X284) | s(bool,X284) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X281))) | s(bool,X283) = s(bool,X285) | s(bool,'T_0') = s(bool,X285)) )),
  inference(superposition,[],[f86,f262])).
fof(f22258,plain,(
  ( ! [X251,X249,X250,X248,X247] : (s('type.num.num',X248) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X247),'const.bool.the_value_0'))),s('type.num.num',sK2(X248,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X247),'const.bool.the_value_0')))))))) | s(bool,X249) = s(bool,X250) | s(bool,X250) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X247),'const.bool.the_value_0'))),s('type.num.num',X248))) | s(bool,X249) = s(bool,X251) | s(bool,'T_0') = s(bool,X251)) )),
  inference(subsumption_resolution,[],[f20325,f78])).
fof(f20325,plain,(
  ( ! [X251,X249,X250,X248,X247] : (~p(s(bool,'T_0')) | s('type.num.num',X248) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X247),'const.bool.the_value_0'))),s('type.num.num',sK2(X248,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X247),'const.bool.the_value_0')))))))) | s(bool,X249) = s(bool,X250) | s(bool,X250) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X247),'const.bool.the_value_0'))),s('type.num.num',X248))) | s(bool,X249) = s(bool,X251) | s(bool,'T_0') = s(bool,X251)) )),
  inference(superposition,[],[f646,f262])).
fof(f22257,plain,(
  ( ! [X239,X237,X235,X238,X236,X234] : (s('type.num.num',X236) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X235),s('type.num.num',X234))),s('type.num.num',sK2(X236,'const.arithmetic.+_2'(s('type.num.num',X235),s('type.num.num',X234)))))) | s(bool,X237) = s(bool,X238) | s(bool,X238) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X234),s('type.num.num',X235))),s('type.num.num',X236))) | s(bool,X237) = s(bool,X239) | s(bool,'T_0') = s(bool,X239)) )),
  inference(subsumption_resolution,[],[f20323,f78])).
fof(f20323,plain,(
  ( ! [X239,X237,X235,X238,X236,X234] : (~p(s(bool,'T_0')) | s('type.num.num',X236) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X235),s('type.num.num',X234))),s('type.num.num',sK2(X236,'const.arithmetic.+_2'(s('type.num.num',X235),s('type.num.num',X234)))))) | s(bool,X237) = s(bool,X238) | s(bool,X238) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X234),s('type.num.num',X235))),s('type.num.num',X236))) | s(bool,X237) = s(bool,X239) | s(bool,'T_0') = s(bool,X239)) )),
  inference(superposition,[],[f590,f262])).
fof(f22256,plain,(
  ( ! [X231,X229,X227,X233,X230,X228,X232] : (s('type.num.num',X230) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X227),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X228),s('type.num.num',X229))))),s('type.num.num',sK2(X230,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X227),s('type.num.num',X228))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X227),s('type.num.num',X229)))))))) | s(bool,X231) = s(bool,X232) | s(bool,X232) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X227),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X228),s('type.num.num',X229))))),s('type.num.num',X230))) | s(bool,X231) = s(bool,X233) | s(bool,'T_0') = s(bool,X233)) )),
  inference(subsumption_resolution,[],[f20322,f78])).
fof(f20322,plain,(
  ( ! [X231,X229,X227,X233,X230,X228,X232] : (~p(s(bool,'T_0')) | s('type.num.num',X230) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X227),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X228),s('type.num.num',X229))))),s('type.num.num',sK2(X230,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X227),s('type.num.num',X228))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X227),s('type.num.num',X229)))))))) | s(bool,X231) = s(bool,X232) | s(bool,X232) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X227),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X228),s('type.num.num',X229))))),s('type.num.num',X230))) | s(bool,X231) = s(bool,X233) | s(bool,'T_0') = s(bool,X233)) )),
  inference(superposition,[],[f924,f262])).
fof(f22255,plain,(
  ( ! [X218,X222,X220,X219,X221] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X219),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X218),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X219),'const.bool.the_value_0')))),X218)))) | s(bool,X220) = s(bool,X221) | s(bool,X221) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X218),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X219),'const.bool.the_value_0'))))) | s(bool,X220) = s(bool,X222) | s(bool,'T_0') = s(bool,X222)) )),
  inference(subsumption_resolution,[],[f20320,f78])).
fof(f20320,plain,(
  ( ! [X218,X222,X220,X219,X221] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X219),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X218),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X219),'const.bool.the_value_0')))),X218)))) | s(bool,X220) = s(bool,X221) | s(bool,X221) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X218),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X219),'const.bool.the_value_0'))))) | s(bool,X220) = s(bool,X222) | s(bool,'T_0') = s(bool,X222)) )),
  inference(superposition,[],[f645,f262])).
fof(f22254,plain,(
  ( ! [X208,X206,X204,X207,X205,X203] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X205),s('type.num.num',X204))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X203),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X205),s('type.num.num',X204)),X203)))) | s(bool,X206) = s(bool,X207) | s(bool,X207) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X203),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X204),s('type.num.num',X205))))) | s(bool,X206) = s(bool,X208) | s(bool,'T_0') = s(bool,X208)) )),
  inference(subsumption_resolution,[],[f20318,f78])).
fof(f20318,plain,(
  ( ! [X208,X206,X204,X207,X205,X203] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X205),s('type.num.num',X204))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X203),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X205),s('type.num.num',X204)),X203)))) | s(bool,X206) = s(bool,X207) | s(bool,X207) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X203),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X204),s('type.num.num',X205))))) | s(bool,X206) = s(bool,X208) | s(bool,'T_0') = s(bool,X208)) )),
  inference(superposition,[],[f593,f262])).
fof(f22253,plain,(
  ( ! [X198,X196,X194,X200,X199,X197,X195] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X195),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X196),s('type.num.num',X197))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X194),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X195),s('type.num.num',X196))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X195),s('type.num.num',X197)))),X194)))) | s(bool,X198) = s(bool,X199) | s(bool,X199) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X194),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X195),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X196),s('type.num.num',X197))))))) | s(bool,X198) = s(bool,X200) | s(bool,'T_0') = s(bool,X200)) )),
  inference(subsumption_resolution,[],[f20317,f78])).
fof(f20317,plain,(
  ( ! [X198,X196,X194,X200,X199,X197,X195] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X195),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X196),s('type.num.num',X197))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X194),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X195),s('type.num.num',X196))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X195),s('type.num.num',X197)))),X194)))) | s(bool,X198) = s(bool,X199) | s(bool,X199) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X194),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X195),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X196),s('type.num.num',X197))))))) | s(bool,X198) = s(bool,X200) | s(bool,'T_0') = s(bool,X200)) )),
  inference(superposition,[],[f923,f262])).
fof(f22252,plain,(
  ( ! [X191,X189,X192,X190,X193] : (s('type.num.num',X190) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X189),s('type.num.num',sK2(X190,X189)))) | s(bool,X191) = s(bool,X192) | s(bool,X192) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X189),s('type.num.num',X190))) | s(bool,X191) = s(bool,X193) | s(bool,'T_0') = s(bool,X193)) )),
  inference(subsumption_resolution,[],[f20316,f78])).
fof(f20316,plain,(
  ( ! [X191,X189,X192,X190,X193] : (~p(s(bool,'T_0')) | s('type.num.num',X190) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X189),s('type.num.num',sK2(X190,X189)))) | s(bool,X191) = s(bool,X192) | s(bool,X192) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X189),s('type.num.num',X190))) | s(bool,X191) = s(bool,X193) | s(bool,'T_0') = s(bool,X193)) )),
  inference(superposition,[],[f102,f262])).
fof(f22247,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s(bool,X20) != s(bool,X21) | p(s(bool,X21)) | s(bool,X22) = s(bool,X23) | s(bool,X20) = s(bool,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f20278,f78])).
fof(f20278,plain,(
  ( ! [X24,X23,X21,X22,X20] : (~p(s(bool,'T_0')) | s(bool,X20) != s(bool,X21) | p(s(bool,X21)) | s(bool,X22) = s(bool,X23) | s(bool,X20) = s(bool,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f131,f262])).
fof(f21010,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X1) = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f21009])).
fof(f21009,plain,(
  ( ! [X80,X78,X76,X81,X79,X77] : (s(bool,X76) != s(bool,X77) | s(bool,'T_0') = s(bool,X77) | s(bool,'T_0') = s(bool,X78) | s(bool,X79) = s(bool,X80) | s(bool,X76) = s(bool,X80) | s(bool,X79) = s(bool,X81) | s(bool,'T_0') = s(bool,X81)) )),
  inference(duplicate_literal_removal,[],[f20272])).
fof(f20272,plain,(
  ( ! [X80,X78,X76,X81,X79,X77] : (s(bool,X76) != s(bool,X77) | s(bool,'T_0') = s(bool,X77) | s(bool,'T_0') = s(bool,X78) | s(bool,'T_0') = s(bool,X78) | s(bool,X79) = s(bool,X80) | s(bool,X76) = s(bool,X80) | s(bool,X79) = s(bool,X81) | s(bool,'T_0') = s(bool,X81)) )),
  inference(superposition,[],[f471,f262])).
fof(f20261,plain,(
  ( ! [X30,X31,X29,X32] : (s(bool,X29) != s(bool,f(s(bool,X29))) | s(bool,X30) = s(bool,X31) | s(bool,X29) = s(bool,X31) | s(bool,X30) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) ) | $spl40),
  inference(superposition,[],[f13109,f262])).
fof(f20259,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,'F_0') = s(bool,f(s(bool,X18))) | s(bool,X19) = s(bool,X20) | s(bool,X18) = s(bool,X20) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) ) | $spl40),
  inference(superposition,[],[f2914,f262])).
fof(f20256,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X0)) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f78,f262])).
fof(f20254,plain,(
  ( ! [X389,X391,X387,X388,X390,X386] : (s(bool,X389) != s(bool,f(s(X386,sK3(X387,X388,bool,X386)))) | s(fun(X386,bool),X387) = s(fun(X386,bool),X388) | s(bool,X389) = s(bool,X390) | s(bool,'T_0') = s(bool,g(s(X386,sK3(X387,X388,bool,X386)))) | s(bool,X390) = s(bool,X391) | s(bool,'T_0') = s(bool,X391)) )),
  inference(superposition,[],[f104,f262])).
fof(f22174,plain,(
  ( ! [X156,X154,X152,X151,X155,X153] : (s(X152,f(s(bool,X151))) != s(X152,g(s(bool,X151))) | s(fun(bool,X152),X153) = s(fun(bool,X152),X154) | s(bool,'T_0') = s(bool,sK3(X153,X154,X152,bool)) | s(bool,X151) = s(bool,X155) | s(bool,X155) = s(bool,X156) | s(bool,'T_0') = s(bool,X156)) )),
  inference(subsumption_resolution,[],[f20203,f133])).
fof(f20203,plain,(
  ( ! [X156,X154,X152,X151,X155,X153] : (s(X152,f(s(bool,X151))) != s(X152,g(s(bool,X151))) | s(fun(bool,X152),X153) = s(fun(bool,X152),X154) | s(bool,'T_0') = s(bool,sK3(X153,X154,X152,bool)) | s(bool,X151) = s(bool,X155) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X155) = s(bool,X156) | s(bool,'T_0') = s(bool,X156)) )),
  inference(superposition,[],[f804,f262])).
fof(f22173,plain,(
  ( ! [X149,X150,X148] : (s(bool,'T_0') != s(bool,X148) | s(bool,X148) = s(bool,X149) | s(bool,X149) = s(bool,X150) | s(bool,'T_0') = s(bool,X150)) )),
  inference(subsumption_resolution,[],[f20202,f133])).
fof(f20202,plain,(
  ( ! [X149,X150,X148] : (s(bool,'T_0') != s(bool,X148) | s(bool,X148) = s(bool,X149) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X149) = s(bool,X150) | s(bool,'T_0') = s(bool,X150)) )),
  inference(superposition,[],[f133,f262])).
fof(f22172,plain,(
  ( ! [X146,X144,X147,X145] : (s(bool,X144) != s(bool,X145) | ~p(s(bool,X145)) | s(bool,X144) = s(bool,X146) | s(bool,X146) = s(bool,X147) | s(bool,'T_0') = s(bool,X147)) )),
  inference(subsumption_resolution,[],[f20201,f133])).
fof(f20201,plain,(
  ( ! [X146,X144,X147,X145] : (s(bool,X144) != s(bool,X145) | ~p(s(bool,X145)) | s(bool,X144) = s(bool,X146) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X146) = s(bool,X147) | s(bool,'T_0') = s(bool,X147)) )),
  inference(superposition,[],[f91,f262])).
fof(f21077,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f21076])).
fof(f21076,plain,(
  ( ! [X111,X109,X110,X108] : (s(bool,X109) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X108) | s(bool,X109) = s(bool,X110) | s(bool,X110) = s(bool,X111) | s(bool,'T_0') = s(bool,X111)) )),
  inference(duplicate_literal_removal,[],[f20191])).
fof(f20191,plain,(
  ( ! [X111,X109,X110,X108] : (s(bool,X109) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X108) | s(bool,X109) = s(bool,X110) | s(bool,'T_0') = s(bool,X108) | s(bool,X110) = s(bool,X111) | s(bool,'T_0') = s(bool,X111)) )),
  inference(superposition,[],[f2343,f262])).
fof(f21079,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))))) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f21078])).
fof(f21078,plain,(
  ( ! [X103,X107,X105,X106,X104] : (s(bool,X104) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X105))))) | s(bool,'T_0') = s(bool,X103) | s(bool,X104) = s(bool,X106) | s(bool,X106) = s(bool,X107) | s(bool,'T_0') = s(bool,X107)) )),
  inference(duplicate_literal_removal,[],[f20190])).
fof(f20190,plain,(
  ( ! [X103,X107,X105,X106,X104] : (s(bool,X104) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X105))))) | s(bool,'T_0') = s(bool,X103) | s(bool,X104) = s(bool,X106) | s(bool,'T_0') = s(bool,X103) | s(bool,X106) = s(bool,X107) | s(bool,'T_0') = s(bool,X107)) )),
  inference(superposition,[],[f2066,f262])).
fof(f21081,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f21080])).
fof(f21080,plain,(
  ( ! [X101,X99,X102,X100] : (s(bool,X100) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X99) | s(bool,X100) = s(bool,X101) | s(bool,X101) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) )),
  inference(duplicate_literal_removal,[],[f20189])).
fof(f20189,plain,(
  ( ! [X101,X99,X102,X100] : (s(bool,X100) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X99) | s(bool,X100) = s(bool,X101) | s(bool,'T_0') = s(bool,X99) | s(bool,X101) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) )),
  inference(superposition,[],[f1832,f262])).
fof(f21083,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f21082])).
fof(f21082,plain,(
  ( ! [X97,X95,X98,X96] : (s(bool,X96) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X95) | s(bool,X96) = s(bool,X97) | s(bool,X97) = s(bool,X98) | s(bool,'T_0') = s(bool,X98)) )),
  inference(duplicate_literal_removal,[],[f20188])).
fof(f20188,plain,(
  ( ! [X97,X95,X98,X96] : (s(bool,X96) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X95) | s(bool,X96) = s(bool,X97) | s(bool,'T_0') = s(bool,X95) | s(bool,X97) = s(bool,X98) | s(bool,'T_0') = s(bool,X98)) )),
  inference(superposition,[],[f1096,f262])).
fof(f21085,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f21084])).
fof(f21084,plain,(
  ( ! [X94,X92,X93,X91] : (s(bool,X92) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X91) | s(bool,X92) = s(bool,X93) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(duplicate_literal_removal,[],[f20187])).
fof(f20187,plain,(
  ( ! [X94,X92,X93,X91] : (s(bool,X92) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X91) | s(bool,X92) = s(bool,X93) | s(bool,'T_0') = s(bool,X91) | s(bool,X93) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f883,f262])).
fof(f21087,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f21086])).
fof(f21086,plain,(
  ( ! [X90,X88,X87,X89] : (s(bool,X88) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X87) | s(bool,X88) = s(bool,X89) | s(bool,X89) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(duplicate_literal_removal,[],[f20186])).
fof(f20186,plain,(
  ( ! [X90,X88,X87,X89] : (s(bool,X88) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X87) | s(bool,X88) = s(bool,X89) | s(bool,'T_0') = s(bool,X87) | s(bool,X89) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f766,f262])).
fof(f21091,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X1) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f21090])).
fof(f21090,plain,(
  ( ! [X70,X74,X72,X71,X75,X73] : (s(bool,X71) != s(bool,X72) | s(bool,'T_0') = s(bool,X70) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73) | s(bool,X71) = s(bool,X74) | s(bool,X74) = s(bool,X75) | s(bool,'T_0') = s(bool,X75)) )),
  inference(duplicate_literal_removal,[],[f20183])).
fof(f20183,plain,(
  ( ! [X70,X74,X72,X71,X75,X73] : (s(bool,X71) != s(bool,X72) | s(bool,'T_0') = s(bool,X70) | s(bool,X72) = s(bool,X73) | s(bool,'T_0') = s(bool,X73) | s(bool,X71) = s(bool,X74) | s(bool,'T_0') = s(bool,X70) | s(bool,X74) = s(bool,X75) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f471,f262])).
fof(f21093,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X2),'const.bool.the_value_0'))))) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f21092])).
fof(f21092,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s(bool,X55) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X56),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X54) | s(bool,X55) = s(bool,X57) | s(bool,X57) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(duplicate_literal_removal,[],[f20180])).
fof(f20180,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s(bool,X55) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X56),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X54) | s(bool,X55) = s(bool,X57) | s(bool,'T_0') = s(bool,X54) | s(bool,X57) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f211,f262])).
fof(f21095,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f21094])).
fof(f21094,plain,(
  ( ! [X52,X50,X53,X51] : (s(bool,X51) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X50) | s(bool,X51) = s(bool,X52) | s(bool,X52) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) )),
  inference(duplicate_literal_removal,[],[f20179])).
fof(f20179,plain,(
  ( ! [X52,X50,X53,X51] : (s(bool,X51) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X50) | s(bool,X51) = s(bool,X52) | s(bool,'T_0') = s(bool,X50) | s(bool,X52) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f210,f262])).
fof(f20166,plain,(
  ( ! [X397,X393,X395,X396,X392,X394] : (s(bool,X395) != s(bool,f(s(X392,sK3(X393,X394,bool,X392)))) | s(fun(X392,bool),X393) = s(fun(X392,bool),X394) | s(bool,X396) = s(bool,g(s(X392,sK3(X393,X394,bool,X392)))) | s(bool,'T_0') = s(bool,X395) | s(bool,X396) = s(bool,X397) | s(bool,'T_0') = s(bool,X397)) )),
  inference(superposition,[],[f104,f262])).
fof(f20164,plain,(
  ( ! [X383,X385,X382,X384,X386,X381] : (s(X383,f(s(bool,X384))) != s(X383,g(s(bool,X384))) | s(fun(bool,X383),X381) = s(fun(bool,X383),X382) | s(bool,X385) = s(bool,sK3(X381,X382,X383,bool)) | s(bool,'T_0') = s(bool,X384) | s(bool,X385) = s(bool,X386) | s(bool,'T_0') = s(bool,X386)) )),
  inference(superposition,[],[f104,f262])).
fof(f22127,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK3(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,f(s(X0,sK3(X1,X2,bool,X0)))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(condensation,[],[f22126])).
fof(f22126,plain,(
  ( ! [X191,X194,X192,X190,X195,X193] : (s(fun(X190,bool),X191) = s(fun(X190,bool),X192) | s(bool,'T_0') = s(bool,g(s(X190,sK3(X191,X192,bool,X190)))) | s(bool,X194) = s(bool,f(s(X190,sK3(X191,X192,bool,X190)))) | s(bool,'T_0') = s(bool,X193) | s(bool,X194) = s(bool,X195) | s(bool,'T_0') = s(bool,X195)) )),
  inference(subsumption_resolution,[],[f20123,f84])).
fof(f20123,plain,(
  ( ! [X191,X194,X192,X190,X195,X193] : (s(bool,'F_0') != s(bool,X193) | s(fun(X190,bool),X191) = s(fun(X190,bool),X192) | s(bool,'T_0') = s(bool,g(s(X190,sK3(X191,X192,bool,X190)))) | s(bool,X194) = s(bool,f(s(X190,sK3(X191,X192,bool,X190)))) | s(bool,'T_0') = s(bool,X193) | s(bool,X194) = s(bool,X195) | s(bool,'T_0') = s(bool,X195)) )),
  inference(superposition,[],[f809,f262])).
fof(f22108,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f22107])).
fof(f22107,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,X12)) | s(bool,X12) = s(bool,X14) | s(bool,'T_0') = s(bool,X13) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f20083,f84])).
fof(f20083,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'F_0') != s(bool,X13) | ~p(s(bool,X12)) | s(bool,X12) = s(bool,X14) | s(bool,'T_0') = s(bool,X13) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f91,f262])).
fof(f19990,plain,(
  ( ! [X397,X393,X395,X396,X392,X394] : (s(bool,X395) != s(bool,f(s(X392,sK3(X393,X394,bool,X392)))) | s(fun(X392,bool),X393) = s(fun(X392,bool),X394) | s(bool,X395) = s(bool,X396) | s(bool,'T_0') = s(bool,X396) | s(bool,X397) = s(bool,g(s(X392,sK3(X393,X394,bool,X392)))) | s(bool,'T_0') = s(bool,X397)) )),
  inference(superposition,[],[f104,f262])).
fof(f19988,plain,(
  ( ! [X383,X385,X382,X384,X386,X381] : (s(X383,f(s(bool,X384))) != s(X383,g(s(bool,X384))) | s(fun(bool,X383),X381) = s(fun(bool,X383),X382) | s(bool,X384) = s(bool,X385) | s(bool,'T_0') = s(bool,X385) | s(bool,X386) = s(bool,sK3(X381,X382,X383,bool)) | s(bool,'T_0') = s(bool,X386)) )),
  inference(superposition,[],[f104,f262])).
fof(f22010,plain,(
  ( ! [X74,X75,X73] : (s(bool,X73) = s(bool,X74) | s(bool,X74) = s(bool,f(s(bool,'T_0'))) | s(bool,X73) = s(bool,X75) | s(bool,'T_0') = s(bool,X75)) ) | $spl40),
  inference(subsumption_resolution,[],[f19801,f133])).
fof(f19801,plain,(
  ( ! [X74,X75,X73] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X73) = s(bool,X74) | s(bool,X74) = s(bool,f(s(bool,'T_0'))) | s(bool,X73) = s(bool,X75) | s(bool,'T_0') = s(bool,X75)) ) | $spl40),
  inference(superposition,[],[f262,f2914])).
fof(f19774,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,X3) | s(bool,X1) = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,X0) = s(bool,X5)) )),
  inference(superposition,[],[f262,f262])).
fof(f21677,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))) | s(bool,X1) = s(bool,X3) | s(bool,X0) = s(bool,X3) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) )),
  inference(condensation,[],[f21676])).
fof(f21676,plain,(
  ( ! [X80,X83,X81,X84,X82] : (s(bool,X82) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X81))) | s(bool,X82) = s(bool,X83) | s(bool,'T_0') = s(bool,X80) | s(bool,X83) = s(bool,X84) | s(bool,'T_0') = s(bool,X84) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X81)))) )),
  inference(duplicate_literal_removal,[],[f19751])).
fof(f19751,plain,(
  ( ! [X80,X83,X81,X84,X82] : (s(bool,X82) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X81))) | s(bool,X82) = s(bool,X83) | s(bool,'T_0') = s(bool,X80) | s(bool,X83) = s(bool,X84) | s(bool,'T_0') = s(bool,X84) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X81))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f262,f483])).
fof(f21721,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2)) )),
  inference(condensation,[],[f21720])).
fof(f21720,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(duplicate_literal_removal,[],[f19738])).
fof(f19738,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f262,f84])).
fof(f21723,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,sK3(X2,X3,bool,bool)) | s(bool,X0) = s(bool,X1) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3)) ) | $spl28),
  inference(condensation,[],[f21722])).
fof(f21722,plain,(
  ( ! [X173,X171,X169,X172,X170] : (s(bool,'T_0') = s(bool,X171) | s(bool,X172) = s(bool,sK3(X169,X170,bool,bool)) | s(bool,X172) = s(bool,X173) | s(bool,'T_0') = s(bool,X173) | s(fun(bool,bool),X169) = s(fun(bool,bool),X170)) ) | $spl28),
  inference(duplicate_literal_removal,[],[f19737])).
fof(f19737,plain,(
  ( ! [X173,X171,X169,X172,X170] : (s(bool,'T_0') = s(bool,X171) | s(bool,X172) = s(bool,sK3(X169,X170,bool,bool)) | s(bool,'T_0') = s(bool,X171) | s(bool,X172) = s(bool,X173) | s(bool,'T_0') = s(bool,X173) | s(fun(bool,bool),X169) = s(fun(bool,bool),X170)) ) | $spl28),
  inference(superposition,[],[f262,f2851])).
fof(f21725,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X2),'const.bool.the_value_0'))))) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f21724])).
fof(f21724,plain,(
  ( ! [X167,X165,X166,X168] : (s(bool,'T_0') = s(bool,X166) | s(bool,X167) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X165),'const.bool.the_value_0'))))) | s(bool,X167) = s(bool,X168) | s(bool,'T_0') = s(bool,X168)) )),
  inference(duplicate_literal_removal,[],[f19736])).
fof(f19736,plain,(
  ( ! [X167,X165,X166,X168] : (s(bool,'T_0') = s(bool,X166) | s(bool,X167) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X165),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X166) | s(bool,X167) = s(bool,X168) | s(bool,'T_0') = s(bool,X168)) )),
  inference(superposition,[],[f262,f149])).
fof(f21727,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))))) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f21726])).
fof(f21726,plain,(
  ( ! [X163,X161,X164,X162] : (s(bool,'T_0') = s(bool,X162) | s(bool,X163) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X161))))) | s(bool,X163) = s(bool,X164) | s(bool,'T_0') = s(bool,X164)) )),
  inference(duplicate_literal_removal,[],[f19735])).
fof(f19735,plain,(
  ( ! [X163,X161,X164,X162] : (s(bool,'T_0') = s(bool,X162) | s(bool,X163) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X161))))) | s(bool,'T_0') = s(bool,X162) | s(bool,X163) = s(bool,X164) | s(bool,'T_0') = s(bool,X164)) )),
  inference(superposition,[],[f262,f215])).
fof(f21729,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f21728])).
fof(f21728,plain,(
  ( ! [X154,X155,X153] : (s(bool,'T_0') = s(bool,X153) | s(bool,X154) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,X154) = s(bool,X155) | s(bool,'T_0') = s(bool,X155)) )),
  inference(duplicate_literal_removal,[],[f19733])).
fof(f19733,plain,(
  ( ! [X154,X155,X153] : (s(bool,'T_0') = s(bool,X153) | s(bool,X154) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X153) | s(bool,X154) = s(bool,X155) | s(bool,'T_0') = s(bool,X155)) )),
  inference(superposition,[],[f262,f5198])).
fof(f21731,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f21730])).
fof(f21730,plain,(
  ( ! [X152,X151,X150] : (s(bool,'T_0') = s(bool,X150) | s(bool,X151) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,X151) = s(bool,X152) | s(bool,'T_0') = s(bool,X152)) )),
  inference(duplicate_literal_removal,[],[f19732])).
fof(f19732,plain,(
  ( ! [X152,X151,X150] : (s(bool,'T_0') = s(bool,X150) | s(bool,X151) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X150) | s(bool,X151) = s(bool,X152) | s(bool,'T_0') = s(bool,X152)) )),
  inference(superposition,[],[f262,f3846])).
fof(f21733,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f21732])).
fof(f21732,plain,(
  ( ! [X149,X147,X148] : (s(bool,'T_0') = s(bool,X147) | s(bool,X148) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,X148) = s(bool,X149) | s(bool,'T_0') = s(bool,X149)) )),
  inference(duplicate_literal_removal,[],[f19731])).
fof(f19731,plain,(
  ( ! [X149,X147,X148] : (s(bool,'T_0') = s(bool,X147) | s(bool,X148) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X147) | s(bool,X148) = s(bool,X149) | s(bool,'T_0') = s(bool,X149)) )),
  inference(superposition,[],[f262,f2138])).
fof(f21735,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f21734])).
fof(f21734,plain,(
  ( ! [X146,X144,X145] : (s(bool,'T_0') = s(bool,X144) | s(bool,X145) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,X145) = s(bool,X146) | s(bool,'T_0') = s(bool,X146)) )),
  inference(duplicate_literal_removal,[],[f19730])).
fof(f19730,plain,(
  ( ! [X146,X144,X145] : (s(bool,'T_0') = s(bool,X144) | s(bool,X145) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X144) | s(bool,X145) = s(bool,X146) | s(bool,'T_0') = s(bool,X146)) )),
  inference(superposition,[],[f262,f1706])).
fof(f21737,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f21736])).
fof(f21736,plain,(
  ( ! [X142,X143,X141] : (s(bool,'T_0') = s(bool,X141) | s(bool,X142) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,X142) = s(bool,X143) | s(bool,'T_0') = s(bool,X143)) )),
  inference(duplicate_literal_removal,[],[f19729])).
fof(f19729,plain,(
  ( ! [X142,X143,X141] : (s(bool,'T_0') = s(bool,X141) | s(bool,X142) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X141) | s(bool,X142) = s(bool,X143) | s(bool,'T_0') = s(bool,X143)) )),
  inference(superposition,[],[f262,f1012])).
fof(f21739,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f21738])).
fof(f21738,plain,(
  ( ! [X140,X138,X139] : (s(bool,'T_0') = s(bool,X138) | s(bool,X139) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,X139) = s(bool,X140) | s(bool,'T_0') = s(bool,X140)) )),
  inference(duplicate_literal_removal,[],[f19728])).
fof(f19728,plain,(
  ( ! [X140,X138,X139] : (s(bool,'T_0') = s(bool,X138) | s(bool,X139) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X138) | s(bool,X139) = s(bool,X140) | s(bool,'T_0') = s(bool,X140)) )),
  inference(superposition,[],[f262,f813])).
fof(f21741,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f21740])).
fof(f21740,plain,(
  ( ! [X136,X135,X137] : (s(bool,'T_0') = s(bool,X135) | s(bool,X136) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,X136) = s(bool,X137) | s(bool,'T_0') = s(bool,X137)) )),
  inference(duplicate_literal_removal,[],[f19727])).
fof(f19727,plain,(
  ( ! [X136,X135,X137] : (s(bool,'T_0') = s(bool,X135) | s(bool,X136) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X135) | s(bool,X136) = s(bool,X137) | s(bool,'T_0') = s(bool,X137)) )),
  inference(superposition,[],[f262,f688])).
fof(f21743,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f21742])).
fof(f21742,plain,(
  ( ! [X134,X132,X133] : (s(bool,'T_0') = s(bool,X132) | s(bool,X133) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,X133) = s(bool,X134) | s(bool,'T_0') = s(bool,X134)) )),
  inference(duplicate_literal_removal,[],[f19726])).
fof(f19726,plain,(
  ( ! [X134,X132,X133] : (s(bool,'T_0') = s(bool,X132) | s(bool,X133) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X132) | s(bool,X133) = s(bool,X134) | s(bool,'T_0') = s(bool,X134)) )),
  inference(superposition,[],[f262,f135])).
fof(f21745,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f21744])).
fof(f21744,plain,(
  ( ! [X127,X130,X128,X131,X129] : (s(bool,'T_0') = s(bool,X129) | s(bool,X130) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X127),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X127),s('type.num.num',X128))))) | s(bool,X130) = s(bool,X131) | s(bool,'T_0') = s(bool,X131)) )),
  inference(duplicate_literal_removal,[],[f19725])).
fof(f19725,plain,(
  ( ! [X127,X130,X128,X131,X129] : (s(bool,'T_0') = s(bool,X129) | s(bool,X130) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X127),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X127),s('type.num.num',X128))))) | s(bool,'T_0') = s(bool,X129) | s(bool,X130) = s(bool,X131) | s(bool,'T_0') = s(bool,X131)) )),
  inference(superposition,[],[f262,f562])).
fof(f21747,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))))) | s(bool,X0) = s(bool,X1)) )),
  inference(condensation,[],[f21746])).
fof(f21746,plain,(
  ( ! [X125,X123,X126,X124,X122] : (s(bool,'T_0') = s(bool,X124) | s(bool,X125) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X122),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X123),s('type.num.num',X122))))) | s(bool,X125) = s(bool,X126) | s(bool,'T_0') = s(bool,X126)) )),
  inference(duplicate_literal_removal,[],[f19724])).
fof(f19724,plain,(
  ( ! [X125,X123,X126,X124,X122] : (s(bool,'T_0') = s(bool,X124) | s(bool,X125) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X122),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X123),s('type.num.num',X122))))) | s(bool,'T_0') = s(bool,X124) | s(bool,X125) = s(bool,X126) | s(bool,'T_0') = s(bool,X126)) )),
  inference(superposition,[],[f262,f533])).
fof(f21903,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X3) = s(bool,X4) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X1) = s(bool,X3)) )),
  inference(condensation,[],[f21902])).
fof(f21902,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (s(bool,X85) = s(bool,X86) | s(bool,X86) = s(bool,X87) | s(bool,'T_0') = s(bool,X87) | s(bool,'T_0') = s(bool,X88) | s(bool,X89) = s(bool,X90) | s(bool,X90) = s(bool,X91) | s(bool,'T_0') = s(bool,X91) | s(bool,X85) = s(bool,X89)) )),
  inference(duplicate_literal_removal,[],[f19644])).
fof(f19644,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86] : (s(bool,X85) = s(bool,X86) | s(bool,X86) = s(bool,X87) | s(bool,'T_0') = s(bool,X87) | s(bool,'T_0') = s(bool,X88) | s(bool,'T_0') = s(bool,X88) | s(bool,X89) = s(bool,X90) | s(bool,X90) = s(bool,X91) | s(bool,'T_0') = s(bool,X91) | s(bool,X85) = s(bool,X89)) )),
  inference(superposition,[],[f262,f262])).
fof(f9056,plain,(
  ( ! [X308,X309] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X308))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X308)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | s(bool,X309) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X308))) | s(bool,'T_0') = s(bool,X309)) )),
  inference(superposition,[],[f3035,f483])).
fof(f9013,plain,(
  ( ! [X154,X155] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X154))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X154)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | s(bool,X155) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X154))) | s(bool,'T_0') = s(bool,X155)) )),
  inference(superposition,[],[f619,f483])).
fof(f19402,plain,(
  ( ! [X104] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X104)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f7350,f2063])).
fof(f7350,plain,(
  ( ! [X104] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X104))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X104)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f619,f2063])).
fof(f19400,plain,(
  ( ! [X203] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X203)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f7388,f2063])).
fof(f7388,plain,(
  ( ! [X203] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X203))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X203)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f3035,f2063])).
fof(f9014,plain,(
  ( ! [X158,X156,X157] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X157))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X156)))))))) | s(bool,X158) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X156))) | s(bool,'T_0') = s(bool,X158)) )),
  inference(superposition,[],[f623,f483])).
fof(f9015,plain,(
  ( ! [X161,X159,X160] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X160),s('type.num.num','const.num.|48|_0'))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X159))),s('type.num.num',X160)))))) | s(bool,X161) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X159))) | s(bool,'T_0') = s(bool,X161)) )),
  inference(superposition,[],[f623,f483])).
fof(f9032,plain,(
  ( ! [X229,X227,X228] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X228),s('type.num.num','const.num.|48|_0'))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X227))),s('type.num.num',X228)))))) | s(bool,X229) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X227))) | s(bool,'T_0') = s(bool,X229)) )),
  inference(superposition,[],[f933,f483])).
fof(f9033,plain,(
  ( ! [X231,X230,X232] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X231))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X231),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X230)))))))) | s(bool,X232) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X230))) | s(bool,'T_0') = s(bool,X232)) )),
  inference(superposition,[],[f933,f483])).
fof(f9041,plain,(
  ( ! [X265,X267,X266] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X266),s('type.num.num','const.num.|48|_0'))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X265))),s('type.num.num',X266)))))) | s(bool,X267) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X265))) | s(bool,'T_0') = s(bool,X267)) )),
  inference(superposition,[],[f1138,f483])).
fof(f9042,plain,(
  ( ! [X269,X268,X270] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X269))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X269),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X268)))))))) | s(bool,X270) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X268))) | s(bool,'T_0') = s(bool,X270)) )),
  inference(superposition,[],[f1138,f483])).
fof(f9047,plain,(
  ( ! [X285,X287,X286] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X286),s('type.num.num','const.num.|48|_0'))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X285))),s('type.num.num',X286)))))) | s(bool,X287) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X285))) | s(bool,'T_0') = s(bool,X287)) )),
  inference(superposition,[],[f1838,f483])).
fof(f9048,plain,(
  ( ! [X288,X290,X289] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X289))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X289),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X288)))))))) | s(bool,X290) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X288))) | s(bool,'T_0') = s(bool,X290)) )),
  inference(superposition,[],[f1838,f483])).
fof(f9052,plain,(
  ( ! [X300,X298,X299] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X299),s('type.num.num','const.num.|48|_0'))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X298))),s('type.num.num',X299)))))) | s(bool,X300) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X298))) | s(bool,'T_0') = s(bool,X300)) )),
  inference(superposition,[],[f2350,f483])).
fof(f9053,plain,(
  ( ! [X302,X301,X303] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X302))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X302),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X301)))))))) | s(bool,X303) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X301))) | s(bool,'T_0') = s(bool,X303)) )),
  inference(superposition,[],[f2350,f483])).
fof(f9057,plain,(
  ( ! [X310,X311] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X310))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X310)))))) | s(bool,X311) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X310))) | s(bool,'T_0') = s(bool,X311)) )),
  inference(superposition,[],[f3174,f483])).
fof(f9012,plain,(
  ( ! [X152,X153] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X152))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X152)))))) | s(bool,X153) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X152))) | s(bool,'T_0') = s(bool,X153)) )),
  inference(superposition,[],[f618,f483])).
fof(f19386,plain,(
  ( ! [X204] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X204)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f7389,f2063])).
fof(f7389,plain,(
  ( ! [X204] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X204))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X204))))))))) )),
  inference(superposition,[],[f3174,f2063])).
fof(f19384,plain,(
  ( ! [X103] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X103)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f7349,f2063])).
fof(f7349,plain,(
  ( ! [X103] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X103))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X103))))))))) )),
  inference(superposition,[],[f618,f2063])).
fof(f18590,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13))))) | s(bool,X15) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f86,f483])).
fof(f17886,plain,(
  ( ! [X127,X126] : (s(fun(bool,bool),X126) = s(fun(bool,bool),X127) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X126,X127,bool,bool))))) ) | ($spl28 | $spl40)),
  inference(subsumption_resolution,[],[f17866,f2914])).
fof(f17877,plain,(
  ( ! [X12,X10,X11] : (s(bool,X12) != s(bool,sK3(X10,X11,bool,bool)) | p(s(bool,X12)) | s(fun(bool,bool),X10) = s(fun(bool,bool),X11)) ) | $spl28),
  inference(subsumption_resolution,[],[f17816,f78])).
fof(f17816,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,'T_0')) | s(bool,X12) != s(bool,sK3(X10,X11,bool,bool)) | p(s(bool,X12)) | s(fun(bool,bool),X10) = s(fun(bool,bool),X11)) ) | $spl28),
  inference(superposition,[],[f131,f2851])).
fof(f17715,plain,(
  ( ! [X2,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) )),
  inference(superposition,[],[f7650,f101])).
fof(f13281,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl40),
  inference(superposition,[],[f13109,f154])).
fof(f13111,plain,(
  ( ! [X8,X9] : (s(bool,X8) != s(bool,f(s(bool,'T_0'))) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl40),
  inference(subsumption_resolution,[],[f13079,f80])).
fof(f13079,plain,(
  ( ! [X8,X9] : (p(s(bool,'F_0')) | s(bool,X8) != s(bool,f(s(bool,'T_0'))) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl40),
  inference(superposition,[],[f470,f2914])).
fof(f13109,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | $spl40),
  inference(subsumption_resolution,[],[f13068,f80])).
fof(f13068,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | $spl40),
  inference(superposition,[],[f87,f2914])).
fof(f13108,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl40),
  inference(subsumption_resolution,[],[f13064,f133])).
fof(f13064,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl40),
  inference(superposition,[],[f2914,f154])).
fof(f13058,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl40),
  inference(superposition,[],[f2914,f154])).
fof(f2914,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | $spl40),
  inference(cnf_transformation,[],[f2914_D])).
fof(f2914_D,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f80,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bvp_to_wordProps.pow_eq_|48|',aHL_FALSITY)).
fof(f92,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f63])).
fof(f804,plain,(
  ( ! [X17,X18,X16] : (s(X18,f(s(bool,'F_0'))) != s(X18,g(s(bool,'F_0'))) | s(fun(bool,X18),X16) = s(fun(bool,X18),X17) | s(bool,'T_0') = s(bool,sK3(X16,X17,X18,bool))) )),
  inference(superposition,[],[f104,f84])).
fof(f9140,plain,(
  ( ! [X231,X233,X234,X232] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X234))) != s(bool,f(s(X231,sK3(X232,X233,bool,X231)))) | s(fun(X231,bool),X232) = s(fun(X231,bool),X233) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X234))) | s(bool,'T_0') = s(bool,g(s(X231,sK3(X232,X233,bool,X231))))) )),
  inference(superposition,[],[f104,f483])).
fof(f102,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2(X1,X0))))) )),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2(X1,X0))))) & (! [X2] : s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2])],[f69])).
fof(f69,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ? [X3] : s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X3)))) & (! [X2] : s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(rectify,[],[f68])).
fof(f68,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) | ? [X2] : s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2)))) & (! [X2] : s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> ? [X2] : s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X8,X9] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',X9)))) <=> ? [X10] : s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X10))))),
  file('thm.bvp_to_wordProps.pow_eq_|48|','thm.arithmetic.LESS_EQ_EXISTS')).
fof(f605,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2(X1,X0)))) | s(bool,X2) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f597,f78])).
fof(f597,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2(X1,X0)))) | s(bool,X2) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f102,f154])).
fof(f525,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2)))) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(superposition,[],[f103,f101])).
fof(f103,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X1))))) )),
  inference(cnf_transformation,[],[f70])).
fof(f5119,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7)))),X4)))) | s(bool,X8) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f5053,f78])).
fof(f5053,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7)))),X4)))) | s(bool,X8) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f923,f154])).
fof(f5044,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X3),s('type.num.num',X0))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X3),s('type.num.num',X1)))),X2))))) )),
  inference(superposition,[],[f923,f101])).
fof(f923,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',X16))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',X17)))),X18))))) )),
  inference(forward_demodulation,[],[f911,f105])).
fof(f911,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17)))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',X16))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',X17))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',X16))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',X17)))),X18))))) )),
  inference(superposition,[],[f102,f105])).
fof(f5031,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4)))))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))),X6))))) )),
  inference(superposition,[],[f923,f101])).
fof(f9025,plain,(
  ( ! [X196,X194,X192,X195,X193] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X193),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X194),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X195),s('type.num.num','const.num.|48|_0')))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X194),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X195),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X192))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X193),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X194),s('type.num.num',X195))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X194),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X192)))))),X193)))) | s(bool,X196) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X192))) | s(bool,'T_0') = s(bool,X196)) )),
  inference(superposition,[],[f923,f483])).
fof(f5017,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num',X8)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num',X8)))),X6))))) )),
  inference(superposition,[],[f923,f101])).
fof(f9024,plain,(
  ( ! [X191,X189,X187,X190,X188] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X188),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X189),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X190)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X189),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X187))),s('type.num.num',X190))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X188),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X189),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X187))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X189),s('type.num.num',X190)))),X188)))) | s(bool,X191) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X187))) | s(bool,'T_0') = s(bool,X191)) )),
  inference(superposition,[],[f923,f483])).
fof(f4182,plain,(
  ( ! [X28,X29,X27] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X27),'const.bool.the_value_0'))),s('type.num.num',X28))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X27),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X28)))),X29)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X27),'const.bool.the_value_0'))),s('type.num.num',X28))))))))) )),
  inference(forward_demodulation,[],[f4120,f891])).
fof(f4120,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X27),'const.bool.the_value_0'))),s('type.num.num',X28)))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X27),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X28))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X27),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X28)))),X29))))) )),
  inference(superposition,[],[f102,f891])).
fof(f4374,plain,(
  ( ! [X30,X31,X29] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X29))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0')))),X31)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))))))))) )),
  inference(forward_demodulation,[],[f4310,f906])).
fof(f4310,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X31),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X30),'const.bool.the_value_0')))))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X29))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X29))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0')))),X31))))) )),
  inference(superposition,[],[f102,f906])).
fof(f9026,plain,(
  ( ! [X198,X200,X199,X197,X201] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X198),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num',X200)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X197))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X199),s('type.num.num',X200))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X198),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X197))),s('type.num.num',X199))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X197))),s('type.num.num',X200)))),X198)))) | s(bool,X201) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X197))) | s(bool,'T_0') = s(bool,X201)) )),
  inference(superposition,[],[f923,f483])).
fof(f5003,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X7))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X8)))),X6))))) )),
  inference(superposition,[],[f923,f101])).
fof(f5112,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X8)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK1))))))) )),
  inference(forward_demodulation,[],[f5046,f604])).
fof(f5046,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X8))))) )),
  inference(superposition,[],[f923,f604])).
fof(f5114,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X10)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num',sK1))))))) )),
  inference(forward_demodulation,[],[f5113,f604])).
fof(f5113,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X10)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num',sK1))))))) )),
  inference(forward_demodulation,[],[f5047,f2124])).
fof(f5047,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X10))))) )),
  inference(superposition,[],[f923,f2703])).
fof(f5115,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),X12)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',sK1))))))) )),
  inference(forward_demodulation,[],[f5048,f763])).
fof(f5048,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),X12))))) )),
  inference(superposition,[],[f923,f763])).
fof(f5116,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),X14)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',sK1))))))) )),
  inference(forward_demodulation,[],[f5049,f880])).
fof(f5049,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),X14))))) )),
  inference(superposition,[],[f923,f880])).
fof(f5117,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),X16)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',sK1))))))) )),
  inference(forward_demodulation,[],[f5050,f1093])).
fof(f5050,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),X16))))) )),
  inference(superposition,[],[f923,f1093])).
fof(f5118,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))),X18)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',sK1))))))) )),
  inference(forward_demodulation,[],[f5051,f1829])).
fof(f5051,plain,(
  ( ! [X19,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))),X18))))) )),
  inference(superposition,[],[f923,f1829])).
fof(f5354,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X8)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK1))))))) )),
  inference(forward_demodulation,[],[f5353,f604])).
fof(f5353,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X8)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK1))))))) )),
  inference(forward_demodulation,[],[f5352,f101])).
fof(f5352,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X8)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK1))))))) )),
  inference(forward_demodulation,[],[f5204,f714])).
fof(f5204,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK1)))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X8))))) )),
  inference(superposition,[],[f923,f5172])).
fof(f9000,plain,(
  ( ! [X111,X112,X110,X113] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X111),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X110))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X112),s('type.num.num',X111))) | s(bool,X113) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X110))) | s(bool,'T_0') = s(bool,X113)) )),
  inference(superposition,[],[f525,f483])).
fof(f8982,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X39),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38)),X39)))) | s(bool,X40) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38))) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f102,f483])).
fof(f7401,plain,(
  ( ! [X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X19)))),X20)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f7319,f2063])).
fof(f7319,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X20),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X19))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X19)))),X20))))) )),
  inference(superposition,[],[f102,f2063])).
fof(f2291,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X35),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X34),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X34),'const.bool.the_value_0')))),X35))))) )),
  inference(forward_demodulation,[],[f2258,f733])).
fof(f2258,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X35),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X34),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X34),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X34),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X34),'const.bool.the_value_0')))),X35))))) )),
  inference(superposition,[],[f102,f733])).
fof(f603,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))),X7)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f595,f482])).
fof(f595,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))),X7))))) )),
  inference(superposition,[],[f102,f482])).
fof(f3183,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5)),X4)))) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f3141,f78])).
fof(f3141,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5)),X4)))) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f593,f154])).
fof(f593,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)),X2))))) )),
  inference(superposition,[],[f102,f101])).
fof(f1175,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5)))) )),
  inference(superposition,[],[f525,f101])).
fof(f516,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))) )),
  inference(superposition,[],[f103,f101])).
fof(f9009,plain,(
  ( ! [X144,X142,X145,X143] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X143),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X144),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X142))),s('type.num.num',X144))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X142))),s('type.num.num',X144)),X143)))) | s(bool,X145) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X142))) | s(bool,'T_0') = s(bool,X145)) )),
  inference(superposition,[],[f593,f483])).
fof(f8993,plain,(
  ( ! [X80,X78,X76,X79,X77] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X77),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X79))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))),s('type.num.num',X78))) | s(bool,X80) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f516,f483])).
fof(f3122,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X6)),X5))))) )),
  inference(superposition,[],[f593,f101])).
fof(f2589,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4)))))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X8))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X7)))) )),
  inference(superposition,[],[f516,f101])).
fof(f9008,plain,(
  ( ! [X140,X138,X141,X139] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X139),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X140)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X138))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X139),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X138)))),X139)))) | s(bool,X141) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X138))) | s(bool,'T_0') = s(bool,X141)) )),
  inference(superposition,[],[f593,f483])).
fof(f8994,plain,(
  ( ! [X85,X83,X81,X84,X82] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X82),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X83)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X82),s('type.num.num',X84))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X81))))) | s(bool,X85) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X81))) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f516,f483])).
fof(f3111,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))),s('type.num.num',X6)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)))),X5))))) )),
  inference(superposition,[],[f593,f101])).
fof(f2578,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num',X7)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X8))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))) )),
  inference(superposition,[],[f516,f101])).
fof(f8984,plain,(
  ( ! [X47,X45,X46,X44] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X45),s('type.num.num',X46))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X44)))))) | s(bool,X47) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X44))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(superposition,[],[f103,f483])).
fof(f3545,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X3),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X3),'const.bool.the_value_0')))),X2)))) | s(bool,X4) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X3),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f3530,f78])).
fof(f3530,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X3),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X3),'const.bool.the_value_0')))),X2)))) | s(bool,X4) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X2),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X3),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f645,f154])).
fof(f645,plain,(
  ( ! [X6,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X5),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X5),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X5),'const.bool.the_value_0')))),X6))))) )),
  inference(forward_demodulation,[],[f636,f83])).
fof(f636,plain,(
  ( ! [X6,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X5),'const.bool.the_value_0')))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X5),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X5),'const.bool.the_value_0')))),X6))))) )),
  inference(superposition,[],[f102,f83])).
fof(f618,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X3))))) )),
  inference(forward_demodulation,[],[f611,f604])).
fof(f611,plain,(
  ( ! [X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X3))))) )),
  inference(superposition,[],[f102,f604])).
fof(f843,plain,(
  ( ! [X4] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),X4)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f820,f763])).
fof(f820,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),X4))))) )),
  inference(superposition,[],[f102,f763])).
fof(f1053,plain,(
  ( ! [X8] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X8)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f1021,f880])).
fof(f1021,plain,(
  ( ! [X8] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X8))))) )),
  inference(superposition,[],[f102,f880])).
fof(f1760,plain,(
  ( ! [X11] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),X11)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f1714,f1093])).
fof(f1714,plain,(
  ( ! [X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X11),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),X11))))) )),
  inference(superposition,[],[f102,f1093])).
fof(f2217,plain,(
  ( ! [X12] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),X12)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f2151,f1829])).
fof(f2151,plain,(
  ( ! [X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X12),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),X12))))) )),
  inference(superposition,[],[f102,f1829])).
fof(f2709,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X0)))) | s(bool,X1) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(subsumption_resolution,[],[f2673,f78])).
fof(f2673,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X0)))) | s(bool,X1) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f618,f154])).
fof(f3174,plain,(
  ( ! [X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6))))) )),
  inference(forward_demodulation,[],[f3173,f604])).
fof(f3173,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3134,f101])).
fof(f3134,plain,(
  ( ! [X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6))))) )),
  inference(superposition,[],[f593,f604])).
fof(f3176,plain,(
  ( ! [X7] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X7)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3175,f763])).
fof(f3175,plain,(
  ( ! [X7] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X7)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3135,f101])).
fof(f3135,plain,(
  ( ! [X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X7),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X7))))) )),
  inference(superposition,[],[f593,f763])).
fof(f3178,plain,(
  ( ! [X8] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),X8)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3177,f880])).
fof(f3177,plain,(
  ( ! [X8] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),X8)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3136,f101])).
fof(f3136,plain,(
  ( ! [X8] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X8),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),X8))))) )),
  inference(superposition,[],[f593,f880])).
fof(f3180,plain,(
  ( ! [X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X9)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3179,f1093])).
fof(f3179,plain,(
  ( ! [X9] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X9)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3137,f101])).
fof(f3137,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X9))))) )),
  inference(superposition,[],[f593,f1093])).
fof(f3182,plain,(
  ( ! [X10] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),X10)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3181,f1829])).
fof(f3181,plain,(
  ( ! [X10] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),X10)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3138,f101])).
fof(f3138,plain,(
  ( ! [X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),X10))))) )),
  inference(superposition,[],[f593,f1829])).
fof(f3964,plain,(
  ( ! [X6] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3963,f604])).
fof(f3963,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3962,f2124])).
fof(f3962,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3849,f101])).
fof(f3849,plain,(
  ( ! [X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6))))) )),
  inference(superposition,[],[f593,f2703])).
fof(f3993,plain,(
  ( ! [X19] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X19)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3992,f604])).
fof(f3992,plain,(
  ( ! [X19] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X19)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3863,f2124])).
fof(f3863,plain,(
  ( ! [X19] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X19))))) )),
  inference(superposition,[],[f102,f2703])).
fof(f5179,plain,(
  ( ! [X4,X3] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X3)))) | s(bool,X4) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f5151,f78])).
fof(f5151,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X3)))) | s(bool,X4) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f3174,f154])).
fof(f5346,plain,(
  ( ! [X6] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5345,f604])).
fof(f5345,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5344,f101])).
fof(f5344,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5343,f714])).
fof(f5343,plain,(
  ( ! [X6] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5201,f101])).
fof(f5201,plain,(
  ( ! [X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6))))) )),
  inference(superposition,[],[f593,f5172])).
fof(f5396,plain,(
  ( ! [X25] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X25)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5395,f604])).
fof(f5395,plain,(
  ( ! [X25] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X25)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5394,f101])).
fof(f5394,plain,(
  ( ! [X25] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X25)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5218,f714])).
fof(f5218,plain,(
  ( ! [X25] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X25))))) )),
  inference(superposition,[],[f102,f5172])).
fof(f656,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2))))))) )),
  inference(superposition,[],[f623,f101])).
fof(f651,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))))) )),
  inference(superposition,[],[f623,f101])).
fof(f623,plain,(
  ( ! [X0,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) )),
  inference(superposition,[],[f607,f101])).
fof(f607,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',X0))))) )),
  inference(superposition,[],[f103,f604])).
fof(f5670,plain,(
  ( ! [X14,X12,X15,X13,X16] : (s('type.num.num',X15) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))))),s('type.num.num',sK2(X15,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',X14)))))))) | s(bool,X16) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))))),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f5587,f78])).
fof(f5587,plain,(
  ( ! [X14,X12,X15,X13,X16] : (~p(s(bool,'T_0')) | s('type.num.num',X15) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))))),s('type.num.num',sK2(X15,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',X13))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',X14)))))))) | s(bool,X16) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))))),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f924,f154])).
fof(f5560,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num',X3)))) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num',sK2(X3,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X1))))))))) )),
  inference(superposition,[],[f924,f101])).
fof(f924,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))))),s('type.num.num',X22)))) | s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))))),s('type.num.num',sK2(X22,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',X21))))))))) )),
  inference(forward_demodulation,[],[f912,f105])).
fof(f912,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))))),s('type.num.num',X22)))) | s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',X21))))),s('type.num.num',sK2(X22,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',X21))))))))) )),
  inference(superposition,[],[f102,f105])).
fof(f5068,plain,(
  ( ! [X37,X35,X33,X36,X34,X32] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X37))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X34))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X35),s('type.num.num',X36))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X35),s('type.num.num',X37)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X34)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X34))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X37))))))))) )),
  inference(forward_demodulation,[],[f4997,f105])).
fof(f4997,plain,(
  ( ! [X37,X35,X33,X36,X34,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X34))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X37)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X37))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X34))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X35),s('type.num.num',X36))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X35),s('type.num.num',X37)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X34))))))))) )),
  inference(superposition,[],[f923,f105])).
fof(f5664,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X41),'const.bool.the_value_0'))),s('type.num.num',X42))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X45))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X41),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X42)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X43),s('type.num.num',X44))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X43),s('type.num.num',X45)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X45))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X41),'const.bool.the_value_0'))),s('type.num.num',X42))))))))) )),
  inference(forward_demodulation,[],[f5580,f891])).
fof(f5580,plain,(
  ( ! [X45,X43,X41,X44,X42] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X45))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X41),'const.bool.the_value_0'))),s('type.num.num',X42)))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X41),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X42))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X45))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X41),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X42)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X43),s('type.num.num',X44))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X43),s('type.num.num',X45))))))))) )),
  inference(superposition,[],[f924,f891])).
fof(f5665,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X47),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X48),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X49),s('type.num.num',X50))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X46))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X48),s('type.num.num',X49))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X48),s('type.num.num',X50)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X48),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X49),s('type.num.num',X50))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X47),'const.bool.the_value_0'))))))))))) )),
  inference(forward_demodulation,[],[f5581,f906])).
fof(f5581,plain,(
  ( ! [X47,X50,X48,X46,X49] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X48),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X49),s('type.num.num',X50))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X47),'const.bool.the_value_0')))))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X46))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X48),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X49),s('type.num.num',X50))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X46))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X48),s('type.num.num',X49))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X48),s('type.num.num',X50))))))))) )),
  inference(superposition,[],[f924,f906])).
fof(f9031,plain,(
  ( ! [X222,X225,X223,X226,X224] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X223),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X224),s('type.num.num',X225))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X222))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X223),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X224),s('type.num.num',X225))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X222)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X223),s('type.num.num',X224))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X223),s('type.num.num',X225)))))))) | s(bool,X226) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X222))) | s(bool,'T_0') = s(bool,X226)) )),
  inference(superposition,[],[f924,f483])).
fof(f7436,plain,(
  ( ! [X156,X154,X157,X155] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X156),s('type.num.num',X157))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X154)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X155),s('type.num.num',X156))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X155),s('type.num.num',X157)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X156),s('type.num.num',X157))))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f7368,f2063])).
fof(f7368,plain,(
  ( ! [X156,X154,X157,X155] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X156),s('type.num.num',X157))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X154))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X156),s('type.num.num',X157))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X154)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X155),s('type.num.num',X156))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X155),s('type.num.num',X157))))))))) )),
  inference(superposition,[],[f924,f2063])).
fof(f5667,plain,(
  ( ! [X59,X57,X58,X56,X55] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',X59))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X56),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X56),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X57),s('type.num.num',X59)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',X59))))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5583,f733])).
fof(f5583,plain,(
  ( ! [X59,X57,X58,X56,X55] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',X59))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X56),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X56),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',X59))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X56),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X56),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X57),s('type.num.num',X59))))))))) )),
  inference(superposition,[],[f924,f733])).
fof(f5666,plain,(
  ( ! [X54,X52,X53,X51] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X51),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X52),s('type.num.num',X53))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X52),s('type.num.num',X54)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54))))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f5582,f482])).
fof(f5582,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54))))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X51),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X51),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X52),s('type.num.num',X53))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X52),s('type.num.num',X54))))))))) )),
  inference(superposition,[],[f924,f482])).
fof(f3152,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X22))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X23)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))))))) )),
  inference(forward_demodulation,[],[f3107,f105])).
fof(f3107,plain,(
  ( ! [X24,X23,X21,X25,X22] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X22))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X23))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X22))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X23))))))))) )),
  inference(superposition,[],[f593,f105])).
fof(f3541,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X16),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X15))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X16),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X15)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X15))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X16),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f3526,f105])).
fof(f3526,plain,(
  ( ! [X14,X15,X13,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X15))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X16),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X16),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X15))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X16),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X15))))))))) )),
  inference(superposition,[],[f645,f105])).
fof(f2696,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f2664,f105])).
fof(f2664,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7))))))))) )),
  inference(superposition,[],[f618,f105])).
fof(f5167,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5134,f105])).
fof(f5134,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7))))))))) )),
  inference(superposition,[],[f3174,f105])).
fof(f5655,plain,(
  ( ! [X19,X17,X18] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X18))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X19)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5654,f604])).
fof(f5654,plain,(
  ( ! [X19,X17,X18] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X18))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X19)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5573,f2124])).
fof(f5573,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X18))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X19))))))))) )),
  inference(superposition,[],[f924,f2703])).
fof(f5658,plain,(
  ( ! [X21,X22,X20] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X21))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X22)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5657,f604])).
fof(f5657,plain,(
  ( ! [X21,X22,X20] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X21))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X22)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5656,f101])).
fof(f5656,plain,(
  ( ! [X21,X22,X20] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X21))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X22)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5574,f714])).
fof(f5574,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X21))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X22))))))))) )),
  inference(superposition,[],[f924,f5172])).
fof(f5659,plain,(
  ( ! [X24,X23,X25] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num',X24))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num',X25)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5575,f763])).
fof(f5575,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num',X24))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num',X25))))))))) )),
  inference(superposition,[],[f924,f763])).
fof(f5660,plain,(
  ( ! [X28,X26,X27] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num',X27))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num',X28)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5576,f880])).
fof(f5576,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num',X27))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num',X28))))))))) )),
  inference(superposition,[],[f924,f880])).
fof(f5661,plain,(
  ( ! [X30,X31,X29] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X31))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num',X30))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num',X31)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X31))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5577,f1093])).
fof(f5577,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X31))))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X31))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num',X30))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num',X31))))))))) )),
  inference(superposition,[],[f924,f1093])).
fof(f5662,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X34))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X34)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X34))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5578,f1829])).
fof(f5578,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X34))))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X34))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X34))))))))) )),
  inference(superposition,[],[f924,f1829])).
fof(f5546,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))))))),s('type.num.num',X8)))) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',sK2(X8,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))))))) )),
  inference(superposition,[],[f924,f101])).
fof(f9029,plain,(
  ( ! [X212,X216,X215,X213,X214] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X213),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.num.|48|_0'))))),s('type.num.num',X215)))) | s('type.num.num',X215) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X213),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X214),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X212))))))),s('type.num.num',sK2(X215,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X213),s('type.num.num',X214))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X213),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X212)))))))))) | s(bool,X216) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X212))) | s(bool,'T_0') = s(bool,X216)) )),
  inference(superposition,[],[f924,f483])).
fof(f5531,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num',X7))))),s('type.num.num',X8)))) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X7))))),s('type.num.num',sK2(X8,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num',X7))))))))) )),
  inference(superposition,[],[f924,f101])).
fof(f9028,plain,(
  ( ! [X210,X208,X211,X209,X207] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X208),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X209))))),s('type.num.num',X210)))) | s('type.num.num',X210) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X208),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X207))),s('type.num.num',X209))))),s('type.num.num',sK2(X210,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X208),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X207))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X208),s('type.num.num',X209)))))))) | s(bool,X211) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X207))) | s(bool,'T_0') = s(bool,X211)) )),
  inference(superposition,[],[f924,f483])).
fof(f4183,plain,(
  ( ! [X30,X31,X32] : (s('type.num.num',X32) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))),s('type.num.num',X31))))),s('type.num.num',sK2(X32,'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X31)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))),s('type.num.num',X31))))),s('type.num.num',X32))))) )),
  inference(forward_demodulation,[],[f4121,f891])).
fof(f4121,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))),s('type.num.num',X31))))),s('type.num.num',X32)))) | s('type.num.num',X32) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X31))))),s('type.num.num',sK2(X32,'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X31))))))))) )),
  inference(superposition,[],[f102,f891])).
fof(f5069,plain,(
  ( ! [X39,X41,X38,X42,X40] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X42))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X38),'const.bool.the_value_0'))),s('type.num.num',X39))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X40),s('type.num.num',X41))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X40),s('type.num.num',X42)))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X38),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X39)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X38),'const.bool.the_value_0'))),s('type.num.num',X39))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X42))))))))) )),
  inference(forward_demodulation,[],[f4998,f891])).
fof(f4998,plain,(
  ( ! [X39,X41,X38,X42,X40] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X38),'const.bool.the_value_0'))),s('type.num.num',X39))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X42)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X42))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X38),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X39))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X40),s('type.num.num',X41))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X40),s('type.num.num',X42)))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X38),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X39))))))))) )),
  inference(superposition,[],[f923,f891])).
fof(f4201,plain,(
  ( ! [X138,X136,X135,X137] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X138),s('type.num.num',X137))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X135),'const.bool.the_value_0'))),s('type.num.num',X136))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X138),s('type.num.num',X137)),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X135),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X136)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X135),'const.bool.the_value_0'))),s('type.num.num',X136))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X137),s('type.num.num',X138))))))) )),
  inference(forward_demodulation,[],[f4148,f891])).
fof(f4148,plain,(
  ( ! [X138,X136,X135,X137] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X135),'const.bool.the_value_0'))),s('type.num.num',X136))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X137),s('type.num.num',X138)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X138),s('type.num.num',X137))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X135),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X136))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X138),s('type.num.num',X137)),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X135),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X136))))))))) )),
  inference(superposition,[],[f593,f891])).
fof(f4206,plain,(
  ( ! [X151,X149,X150] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X151),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X149),'const.bool.the_value_0'))),s('type.num.num',X150))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X151),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X149),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X150)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X149),'const.bool.the_value_0'))),s('type.num.num',X150))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X151),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f4153,f891])).
fof(f4153,plain,(
  ( ! [X151,X149,X150] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X149),'const.bool.the_value_0'))),s('type.num.num',X150))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X151),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X151),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X149),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X150))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X151),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X149),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X150))))))))) )),
  inference(superposition,[],[f645,f891])).
fof(f5168,plain,(
  ( ! [X8,X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num',X9))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num',X9))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5135,f891])).
fof(f5135,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num',X9))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9))))))))) )),
  inference(superposition,[],[f3174,f891])).
fof(f4203,plain,(
  ( ! [X142,X141] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X141),'const.bool.the_value_0'))),s('type.num.num',X142))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X141),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X142)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X141),'const.bool.the_value_0'))),s('type.num.num',X142))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f4150,f891])).
fof(f4150,plain,(
  ( ! [X142,X141] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X141),'const.bool.the_value_0'))),s('type.num.num',X142))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X141),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X142))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X141),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X142))))))))) )),
  inference(superposition,[],[f618,f891])).
fof(f4375,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X33),'const.bool.the_value_0'))))))),s('type.num.num',sK2(X34,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X32))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X33),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X33),'const.bool.the_value_0'))))))),s('type.num.num',X34))))) )),
  inference(forward_demodulation,[],[f4311,f906])).
fof(f4311,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X33),'const.bool.the_value_0'))))))),s('type.num.num',X34)))) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X32))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X33),'const.bool.the_value_0'))))),s('type.num.num',sK2(X34,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X32))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X33),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f102,f906])).
fof(f5070,plain,(
  ( ! [X47,X45,X43,X46,X44] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',X47))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X44),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X45),s('type.num.num',X46))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X45),s('type.num.num',X47)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X43))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X44),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X44),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',X47))))))))) )),
  inference(forward_demodulation,[],[f4999,f906])).
fof(f4999,plain,(
  ( ! [X47,X45,X43,X46,X44] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X44),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',X47)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',X47))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X43))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X44),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X45),s('type.num.num',X46))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X45),s('type.num.num',X47)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X43))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X44),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f923,f906])).
fof(f4393,plain,(
  ( ! [X140,X138,X139,X137] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X139))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X137),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X138),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X139)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X137))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X138),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X137),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X138),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X139),s('type.num.num',X140))))))) )),
  inference(forward_demodulation,[],[f4338,f906])).
fof(f4338,plain,(
  ( ! [X140,X138,X139,X137] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X137),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X138),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X139),s('type.num.num',X140)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X139))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X137))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X138),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X139)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X137))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X138),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f593,f906])).
fof(f4399,plain,(
  ( ! [X154,X155,X153] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X155),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X153),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X155),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X153))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X154),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X153),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X155),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f4344,f906])).
fof(f4344,plain,(
  ( ! [X154,X155,X153] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X153),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X155),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X155),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X153))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X155),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X153))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f645,f906])).
fof(f5169,plain,(
  ( ! [X10,X11] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X10))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5136,f906])).
fof(f5136,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X10))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X10))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f3174,f906])).
fof(f4395,plain,(
  ( ! [X144,X143] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X144),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X143))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X144),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X144),'const.bool.the_value_0'))))))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f4340,f906])).
fof(f4340,plain,(
  ( ! [X144,X143] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X144),'const.bool.the_value_0'))))))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X143))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X144),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X143))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X144),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f618,f906])).
fof(f9030,plain,(
  ( ! [X218,X220,X219,X217,X221] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X218),s('type.num.num',X219))))),s('type.num.num',X220)))) | s('type.num.num',X220) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X217))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X218),s('type.num.num',X219))))),s('type.num.num',sK2(X220,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X217))),s('type.num.num',X218))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X217))),s('type.num.num',X219)))))))) | s(bool,X221) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X217))) | s(bool,'T_0') = s(bool,X221)) )),
  inference(superposition,[],[f924,f483])).
fof(f5516,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num',X8)))) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num',sK2(X8,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X7))))))))) )),
  inference(superposition,[],[f924,f101])).
fof(f5642,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num',sK1))),s('type.num.num',sK2(X9,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num',sK1))),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f5562,f604])).
fof(f5562,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num',sK1))),s('type.num.num',X9)))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(X9,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) )),
  inference(superposition,[],[f924,f604])).
fof(f5644,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num',sK1))),s('type.num.num',sK2(X11,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num',sK1))),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f5643,f604])).
fof(f5643,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(X11,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num',sK1))),s('type.num.num',X11))))) )),
  inference(forward_demodulation,[],[f5563,f2124])).
fof(f5563,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num',sK1))),s('type.num.num',X11)))) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(X11,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) )),
  inference(superposition,[],[f924,f2703])).
fof(f5647,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',sK1))),s('type.num.num',sK2(X13,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',sK1))),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f5646,f604])).
fof(f5646,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(X13,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',sK1))),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f5645,f101])).
fof(f5645,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(X13,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',sK1))),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f5564,f714])).
fof(f5564,plain,(
  ( ! [X12,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',sK1))),s('type.num.num',X13)))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(X13,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) )),
  inference(superposition,[],[f924,f5172])).
fof(f5648,plain,(
  ( ! [X14,X15] : (s('type.num.num',X15) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X14),s('type.num.num',sK1))),s('type.num.num',sK2(X15,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X14),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X14),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X14),s('type.num.num',sK1))),s('type.num.num',X15))))) )),
  inference(forward_demodulation,[],[f5565,f763])).
fof(f5565,plain,(
  ( ! [X14,X15] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X14),s('type.num.num',sK1))),s('type.num.num',X15)))) | s('type.num.num',X15) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num',sK2(X15,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X14),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X14),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) )),
  inference(superposition,[],[f924,f763])).
fof(f5649,plain,(
  ( ! [X17,X16] : (s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num',sK1))),s('type.num.num',sK2(X17,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num',sK1))),s('type.num.num',X17))))) )),
  inference(forward_demodulation,[],[f5566,f880])).
fof(f5566,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num',sK1))),s('type.num.num',X17)))) | s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),s('type.num.num',sK2(X17,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))) )),
  inference(superposition,[],[f924,f880])).
fof(f5650,plain,(
  ( ! [X19,X18] : (s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X18),s('type.num.num',sK1))),s('type.num.num',sK2(X19,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X18),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X18),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X18),s('type.num.num',sK1))),s('type.num.num',X19))))) )),
  inference(forward_demodulation,[],[f5567,f1093])).
fof(f5567,plain,(
  ( ! [X19,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X18),s('type.num.num',sK1))),s('type.num.num',X19)))) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X18),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))),s('type.num.num',sK2(X19,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X18),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X18),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))))) )),
  inference(superposition,[],[f924,f1093])).
fof(f5651,plain,(
  ( ! [X21,X20] : (s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',sK1))),s('type.num.num',sK2(X21,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',sK1))),s('type.num.num',X21))))) )),
  inference(forward_demodulation,[],[f5568,f1829])).
fof(f5568,plain,(
  ( ! [X21,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',sK1))),s('type.num.num',X21)))) | s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))),s('type.num.num',sK2(X21,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))))) )),
  inference(superposition,[],[f924,f1829])).
fof(f8999,plain,(
  ( ! [X109,X107,X108,X106] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X107)))) | s('type.num.num',X107) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X108),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X106))))) | s(bool,X109) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X106))) | s(bool,'T_0') = s(bool,X109)) )),
  inference(superposition,[],[f525,f483])).
fof(f8983,plain,(
  ( ! [X43,X41,X42] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X42)))) | s('type.num.num',X42) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X41))),s('type.num.num',sK2(X42,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X41)))))) | s(bool,X43) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X41))) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f102,f483])).
fof(f7402,plain,(
  ( ! [X21,X22] : (s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X22,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X21)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X22))))) )),
  inference(forward_demodulation,[],[f7320,f2063])).
fof(f7320,plain,(
  ( ! [X21,X22] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X22)))) | s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X21))))),s('type.num.num',sK2(X22,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X21))))))))) )),
  inference(superposition,[],[f102,f2063])).
fof(f2292,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38)))) | s('type.num.num',X38) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X38,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0'))))))))) )),
  inference(forward_demodulation,[],[f2259,f733])).
fof(f2259,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X38)))) | s('type.num.num',X38) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0'))))),s('type.num.num',sK2(X38,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f102,f733])).
fof(f602,plain,(
  ( ! [X6,X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X7,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7))))) )),
  inference(forward_demodulation,[],[f592,f482])).
fof(f592,plain,(
  ( ! [X6,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X7)))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))),s('type.num.num',sK2(X7,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f102,f482])).
fof(f9027,plain,(
  ( ! [X206,X204,X202,X205,X203] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X203),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X204),s('type.num.num',X205)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X203),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X204),s('type.num.num',X205))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X202))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X203),s('type.num.num',X204))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X203),s('type.num.num',X205)))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X202)))))) | s(bool,X206) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X202))) | s(bool,'T_0') = s(bool,X206)) )),
  inference(superposition,[],[f923,f483])).
fof(f7432,plain,(
  ( ! [X140,X138,X141,X139] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X139),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X141))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X139),s('type.num.num',X140))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X139),s('type.num.num',X141)))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X138)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X139),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X141))))))))) )),
  inference(forward_demodulation,[],[f7364,f2063])).
fof(f7364,plain,(
  ( ! [X140,X138,X141,X139] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X139),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X141)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X139),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X141))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X138))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X139),s('type.num.num',X140))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X139),s('type.num.num',X141)))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X138))))))))) )),
  inference(superposition,[],[f923,f2063])).
fof(f5072,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X54),s('type.num.num',X55))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X54),s('type.num.num',X56)))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X52),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X53),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X53),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))))))))) )),
  inference(forward_demodulation,[],[f5001,f733])).
fof(f5001,plain,(
  ( ! [X54,X52,X56,X55,X53] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X52),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X53),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X53),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X54),s('type.num.num',X55))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X54),s('type.num.num',X56)))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X52),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X53),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X53),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f923,f733])).
fof(f5071,plain,(
  ( ! [X50,X48,X51,X49] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X49),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',X51))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X49),s('type.num.num',X50))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X49),s('type.num.num',X51)))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X48),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X49),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',X51))))))))) )),
  inference(forward_demodulation,[],[f5000,f482])).
fof(f5000,plain,(
  ( ! [X50,X48,X51,X49] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X49),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',X51)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X49),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',X51))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X48),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X49),s('type.num.num',X50))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X49),s('type.num.num',X51)))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X48),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f923,f482])).
fof(f9010,plain,(
  ( ! [X146,X149,X147,X148] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X147),s('type.num.num',X148)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X148),s('type.num.num',X147))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X148),s('type.num.num',X147)),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146)))))) | s(bool,X149) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X146))) | s(bool,'T_0') = s(bool,X149)) )),
  inference(superposition,[],[f593,f483])).
fof(f8995,plain,(
  ( ! [X90,X88,X87,X89,X86] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num',X88)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num',X87))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X86))),s('type.num.num',X89))) | s(bool,X90) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X86))) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f516,f483])).
fof(f7420,plain,(
  ( ! [X101,X99,X100] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num',X100))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num',X100)),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X99)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X100),s('type.num.num',X101))))))) )),
  inference(forward_demodulation,[],[f7347,f2063])).
fof(f7347,plain,(
  ( ! [X101,X99,X100] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X100),s('type.num.num',X101)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num',X100))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X99))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num',X100)),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X99))))))))) )),
  inference(superposition,[],[f593,f2063])).
fof(f3154,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31)),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',X32))))))) )),
  inference(forward_demodulation,[],[f3109,f733])).
fof(f3109,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',X32)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31)),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f593,f733])).
fof(f3153,plain,(
  ( ! [X28,X26,X27] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27)),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X26),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))))))) )),
  inference(forward_demodulation,[],[f3108,f482])).
fof(f3108,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X26),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27)),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X26),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f593,f482])).
fof(f9016,plain,(
  ( ! [X163,X164,X162] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X163),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X163),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X162))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X163),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X162)))))) | s(bool,X164) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X162))) | s(bool,'T_0') = s(bool,X164)) )),
  inference(superposition,[],[f645,f483])).
fof(f7424,plain,(
  ( ! [X109,X110] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X110),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X110),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X109)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X110),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f7353,f2063])).
fof(f7353,plain,(
  ( ! [X109,X110] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X110),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X110),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X109))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X110),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X109))))))))) )),
  inference(superposition,[],[f645,f2063])).
fof(f3543,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X21),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f3528,f733])).
fof(f3528,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X21),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X21),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f645,f733])).
fof(f3542,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X18),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X18),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X17),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X18),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f3527,f482])).
fof(f3527,plain,(
  ( ! [X17,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X18),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X18),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X17),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X18),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X17),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f645,f482])).
fof(f3055,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num',sK2(X8,'const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6)))))) | s(bool,X9) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num',X8))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f3011,f78])).
fof(f3011,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,'T_0')) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))),s('type.num.num',sK2(X8,'const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6)))))) | s(bool,X9) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num',X8))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f590,f154])).
fof(f590,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X2)))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',sK2(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) )),
  inference(superposition,[],[f102,f101])).
fof(f1167,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num',X5) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))),s('type.num.num',X5))))) )),
  inference(superposition,[],[f525,f101])).
fof(f519,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',X2)))) | s('type.num.num',X2) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X3)))) )),
  inference(superposition,[],[f103,f101])).
fof(f3050,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X22))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X23)))),'const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))))))))) )),
  inference(forward_demodulation,[],[f3006,f105])).
fof(f3006,plain,(
  ( ! [X24,X23,X21,X25,X22] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23)))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X22))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X23))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X22))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X23)))),'const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24))))))) )),
  inference(superposition,[],[f590,f105])).
fof(f4198,plain,(
  ( ! [X125,X123,X126,X124] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X123),'const.bool.the_value_0'))),s('type.num.num',X124))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X125))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X123),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X124)))),'const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X125)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num',X126))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X123),'const.bool.the_value_0'))),s('type.num.num',X124))))))))) )),
  inference(forward_demodulation,[],[f4145,f891])).
fof(f4145,plain,(
  ( ! [X125,X123,X126,X124] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num',X126))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X123),'const.bool.the_value_0'))),s('type.num.num',X124)))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X123),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X124))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X125))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X123),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X124)))),'const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X125))))))) )),
  inference(superposition,[],[f590,f891])).
fof(f4390,plain,(
  ( ! [X127,X125,X128,X126] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X126),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X128),s('type.num.num',X127))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X125))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X126),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X128),s('type.num.num',X127)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X127),s('type.num.num',X128))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X126),'const.bool.the_value_0'))))))))))) )),
  inference(forward_demodulation,[],[f4335,f906])).
fof(f4335,plain,(
  ( ! [X127,X125,X128,X126] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X127),s('type.num.num',X128))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X126),'const.bool.the_value_0')))))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X125))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X126),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X128),s('type.num.num',X127))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X125))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X126),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X128),s('type.num.num',X127))))))) )),
  inference(superposition,[],[f590,f906])).
fof(f9007,plain,(
  ( ! [X134,X136,X135,X137] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X135),s('type.num.num',X136))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X134))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X136),s('type.num.num',X135))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X134)),'const.arithmetic.+_2'(s('type.num.num',X136),s('type.num.num',X135)))))) | s(bool,X137) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X134))) | s(bool,'T_0') = s(bool,X137)) )),
  inference(superposition,[],[f590,f483])).
fof(f8998,plain,(
  ( ! [X103,X101,X105,X102,X104] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X102),s('type.num.num',X103))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X101))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X103),s('type.num.num',X102))),s('type.num.num',X104))) | s(bool,X105) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X101))) | s(bool,'T_0') = s(bool,X105)) )),
  inference(superposition,[],[f519,f483])).
fof(f7417,plain,(
  ( ! [X92,X90,X91] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X92),s('type.num.num',X91))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X90)))),'const.arithmetic.+_2'(s('type.num.num',X92),s('type.num.num',X91)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X91),s('type.num.num',X92))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f7344,f2063])).
fof(f7344,plain,(
  ( ! [X92,X90,X91] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X91),s('type.num.num',X92))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X90))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X92),s('type.num.num',X91))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X90)))),'const.arithmetic.+_2'(s('type.num.num',X92),s('type.num.num',X91))))))) )),
  inference(superposition,[],[f590,f2063])).
fof(f3052,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',X32))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f3008,f733])).
fof(f3008,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',X32))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31))))))) )),
  inference(superposition,[],[f590,f733])).
fof(f3051,plain,(
  ( ! [X28,X26,X27] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X26),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f3007,f482])).
fof(f3007,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X26),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X26),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27))))))) )),
  inference(superposition,[],[f590,f482])).
fof(f2999,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)),'const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5))))))) )),
  inference(superposition,[],[f590,f101])).
fof(f2567,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X6))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X8)))) )),
  inference(superposition,[],[f516,f101])).
fof(f8271,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num',X0))))))) )),
  inference(superposition,[],[f2724,f101])).
fof(f3044,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f2998,f83])).
fof(f2998,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))))))) )),
  inference(superposition,[],[f590,f83])).
fof(f2657,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))))) )),
  inference(superposition,[],[f618,f101])).
fof(f3046,plain,(
  ( ! [X14,X13] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3002,f763])).
fof(f3002,plain,(
  ( ! [X14,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13))))))) )),
  inference(superposition,[],[f590,f763])).
fof(f3047,plain,(
  ( ! [X15,X16] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3003,f880])).
fof(f3003,plain,(
  ( ! [X15,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15))))))) )),
  inference(superposition,[],[f590,f880])).
fof(f3048,plain,(
  ( ! [X17,X18] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3004,f1093])).
fof(f3004,plain,(
  ( ! [X17,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))))))) )),
  inference(superposition,[],[f590,f1093])).
fof(f3049,plain,(
  ( ! [X19,X20] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3005,f1829])).
fof(f3005,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))))))) )),
  inference(superposition,[],[f590,f1829])).
fof(f4025,plain,(
  ( ! [X66,X65] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num',X65))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num',X65)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num',X66))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f4024,f604])).
fof(f4024,plain,(
  ( ! [X66,X65] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num',X65))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num',X65)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num',X66))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3888,f2124])).
fof(f3888,plain,(
  ( ! [X66,X65] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num',X66))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num',X65))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num',X65))))))) )),
  inference(superposition,[],[f590,f2703])).
fof(f5126,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))))) )),
  inference(superposition,[],[f3174,f101])).
fof(f5444,plain,(
  ( ! [X72,X71] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X72))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5443,f604])).
fof(f5443,plain,(
  ( ! [X72,X71] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X72))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5442,f101])).
fof(f5442,plain,(
  ( ! [X72,X71] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71)))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X72))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5243,f714])).
fof(f5243,plain,(
  ( ! [X72,X71] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X72))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))))))) )),
  inference(superposition,[],[f590,f5172])).
fof(f2981,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))))),s('type.num.num',X6)))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))),s('type.num.num',sK2(X6,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))))))) )),
  inference(superposition,[],[f590,f101])).
fof(f2737,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))))),s('type.num.num',X7)))) | s('type.num.num',X7) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X6))),s('type.num.num',X8)))) )),
  inference(superposition,[],[f519,f101])).
fof(f9006,plain,(
  ( ! [X132,X130,X133,X131] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X131),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X132)))) | s('type.num.num',X132) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X130))),s('type.num.num',X131))),s('type.num.num',sK2(X132,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X130))),s('type.num.num',X131)))))) | s(bool,X133) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X130))) | s(bool,'T_0') = s(bool,X133)) )),
  inference(superposition,[],[f590,f483])).
fof(f8996,plain,(
  ( ! [X94,X92,X95,X93,X91] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X92),s('type.num.num','const.num.|48|_0'))),s('type.num.num',X93)))) | s('type.num.num',X93) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X91))),s('type.num.num',X92))),s('type.num.num',X94))) | s(bool,X95) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X91))) | s(bool,'T_0') = s(bool,X95)) )),
  inference(superposition,[],[f519,f483])).
fof(f2970,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))),s('type.num.num',X5))),s('type.num.num',X6)))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))),s('type.num.num',sK2(X6,'const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))))))) )),
  inference(superposition,[],[f590,f101])).
fof(f2726,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num',X6))),s('type.num.num',X7)))) | s('type.num.num',X7) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))),s('type.num.num',X8)))) )),
  inference(superposition,[],[f519,f101])).
fof(f9005,plain,(
  ( ! [X127,X128,X126,X129] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X127))),s('type.num.num',X128)))) | s('type.num.num',X128) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X127),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X126))))),s('type.num.num',sK2(X128,'const.arithmetic.+_2'(s('type.num.num',X127),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X126)))))))) | s(bool,X129) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X126))) | s(bool,'T_0') = s(bool,X129)) )),
  inference(superposition,[],[f590,f483])).
fof(f8997,plain,(
  ( ! [X99,X97,X100,X98,X96] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X97))),s('type.num.num',X98)))) | s('type.num.num',X98) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X97),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X96))))),s('type.num.num',X99))) | s(bool,X100) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X96))) | s(bool,'T_0') = s(bool,X100)) )),
  inference(superposition,[],[f519,f483])).
fof(f8985,plain,(
  ( ! [X50,X48,X51,X49] : (s('type.num.num',X49) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X50))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X48))),s('type.num.num',X49)))) | s(bool,X51) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X48))) | s(bool,'T_0') = s(bool,X51)) )),
  inference(superposition,[],[f103,f483])).
fof(f3828,plain,(
  ( ! [X6,X8,X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.num.num',sK2(X7,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))))))) | s(bool,X8) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.num.num',X7))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f3811,f78])).
fof(f3811,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.num.num',sK2(X7,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))))))) | s(bool,X8) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s('type.num.num',X7))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f646,f154])).
fof(f646,plain,(
  ( ! [X8,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))),s('type.num.num',X8)))) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))),s('type.num.num',sK2(X8,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))))))))) )),
  inference(forward_demodulation,[],[f637,f83])).
fof(f637,plain,(
  ( ! [X8,X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))),s('type.num.num',X8)))) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))))),s('type.num.num',sK2(X8,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f102,f83])).
fof(f3823,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X15))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X16),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X15)))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X16),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X16),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X15))))))))) )),
  inference(forward_demodulation,[],[f3805,f105])).
fof(f3805,plain,(
  ( ! [X14,X15,X13,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X16),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X15)))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X15))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X16),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X15)))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X16),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f105])).
fof(f4207,plain,(
  ( ! [X154,X152,X153] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X152),'const.bool.the_value_0'))),s('type.num.num',X153))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X152),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X153)))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X154),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X152),'const.bool.the_value_0'))),s('type.num.num',X153))))))))) )),
  inference(forward_demodulation,[],[f4154,f891])).
fof(f4154,plain,(
  ( ! [X154,X152,X153] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X152),'const.bool.the_value_0'))),s('type.num.num',X153)))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X152),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X153))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X152),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X153)))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f891])).
fof(f4400,plain,(
  ( ! [X158,X156,X157] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X156),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X157),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X158),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X156))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X157),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X158),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X158),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X156),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X157),'const.bool.the_value_0'))))))))))) )),
  inference(forward_demodulation,[],[f4345,f906])).
fof(f4345,plain,(
  ( ! [X158,X156,X157] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X158),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X156),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X157),'const.bool.the_value_0')))))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X156))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X157),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X158),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X156))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X157),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X158),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f906])).
fof(f9017,plain,(
  ( ! [X167,X165,X166] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X166),'const.bool.the_value_0'))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X165))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X166),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X165)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X166),'const.bool.the_value_0')))))))) | s(bool,X167) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X165))) | s(bool,'T_0') = s(bool,X167)) )),
  inference(superposition,[],[f646,f483])).
fof(f7425,plain,(
  ( ! [X111,X112] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X112),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X111)))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X112),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X112),'const.bool.the_value_0'))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f7354,f2063])).
fof(f7354,plain,(
  ( ! [X111,X112] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X112),'const.bool.the_value_0'))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X111))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X112),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X111)))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X112),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f2063])).
fof(f3825,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X21),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f3807,f733])).
fof(f3807,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f733])).
fof(f3824,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X18),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X17),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X18),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X18),'const.bool.the_value_0'))),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f3806,f482])).
fof(f3806,plain,(
  ( ! [X17,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X18),'const.bool.the_value_0'))),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X17),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X18),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X17),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X18),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f482])).
fof(f3146,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))))) )),
  inference(forward_demodulation,[],[f3099,f83])).
fof(f3099,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f593,f83])).
fof(f3535,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f3518,f83])).
fof(f3518,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f645,f83])).
fof(f2678,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f2656,f83])).
fof(f2656,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f618,f83])).
fof(f3819,plain,(
  ( ! [X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X9),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3801,f763])).
fof(f3801,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f763])).
fof(f3820,plain,(
  ( ! [X10] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X10),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3802,f880])).
fof(f3802,plain,(
  ( ! [X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f880])).
fof(f3821,plain,(
  ( ! [X11] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3803,f1093])).
fof(f3803,plain,(
  ( ! [X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f1093])).
fof(f3822,plain,(
  ( ! [X12] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X12),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3804,f1829])).
fof(f3804,plain,(
  ( ! [X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f1829])).
fof(f4037,plain,(
  ( ! [X76] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X76),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f4036,f604])).
fof(f4036,plain,(
  ( ! [X76] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X76),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f3897,f2124])).
fof(f3897,plain,(
  ( ! [X76] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f2703])).
fof(f5160,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5125,f83])).
fof(f5125,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f3174,f83])).
fof(f5462,plain,(
  ( ! [X82] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X82),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X82),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X82),'const.bool.the_value_0'))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5461,f604])).
fof(f5461,plain,(
  ( ! [X82] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X82),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X82),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X82),'const.bool.the_value_0'))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5460,f101])).
fof(f5460,plain,(
  ( ! [X82] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X82),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X82),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X82),'const.bool.the_value_0'))),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5253,f714])).
fof(f5253,plain,(
  ( ! [X82] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X82),'const.bool.the_value_0'))),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X82),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X82),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f5172])).
fof(f619,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X4)))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X4,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(forward_demodulation,[],[f612,f604])).
fof(f612,plain,(
  ( ! [X4] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X4)))) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(X4,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f102,f604])).
fof(f844,plain,(
  ( ! [X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f821,f763])).
fof(f821,plain,(
  ( ! [X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X5)))) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) )),
  inference(superposition,[],[f102,f763])).
fof(f1054,plain,(
  ( ! [X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X9,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f1022,f880])).
fof(f1022,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X9)))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(X9,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) )),
  inference(superposition,[],[f102,f880])).
fof(f1761,plain,(
  ( ! [X12] : (s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X12,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X12))))) )),
  inference(forward_demodulation,[],[f1715,f1093])).
fof(f1715,plain,(
  ( ! [X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X12)))) | s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num',sK2(X12,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) )),
  inference(superposition,[],[f102,f1093])).
fof(f2218,plain,(
  ( ! [X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X13,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X13))))) )),
  inference(forward_demodulation,[],[f2152,f1829])).
fof(f2152,plain,(
  ( ! [X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X13)))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),s('type.num.num',sK2(X13,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))) )),
  inference(superposition,[],[f102,f1829])).
fof(f3035,plain,(
  ( ! [X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X6)))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X6,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) )),
  inference(forward_demodulation,[],[f3034,f604])).
fof(f3034,plain,(
  ( ! [X6] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(X6,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X6))))) )),
  inference(forward_demodulation,[],[f2993,f101])).
fof(f2993,plain,(
  ( ! [X6] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X6)))) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(X6,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f590,f604])).
fof(f3037,plain,(
  ( ! [X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X7,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X7))))) )),
  inference(forward_demodulation,[],[f3036,f763])).
fof(f3036,plain,(
  ( ! [X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(X7,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X7))))) )),
  inference(forward_demodulation,[],[f2994,f101])).
fof(f2994,plain,(
  ( ! [X7] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X7)))) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(X7,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f590,f763])).
fof(f3039,plain,(
  ( ! [X8] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X8,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X8))))) )),
  inference(forward_demodulation,[],[f3038,f880])).
fof(f3038,plain,(
  ( ! [X8] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(X8,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X8))))) )),
  inference(forward_demodulation,[],[f2995,f101])).
fof(f2995,plain,(
  ( ! [X8] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X8)))) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(X8,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) )),
  inference(superposition,[],[f590,f880])).
fof(f3041,plain,(
  ( ! [X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X9,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f3040,f1093])).
fof(f3040,plain,(
  ( ! [X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num',sK2(X9,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X9))))) )),
  inference(forward_demodulation,[],[f2996,f101])).
fof(f2996,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X9)))) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(X9,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) )),
  inference(superposition,[],[f590,f1093])).
fof(f3043,plain,(
  ( ! [X10] : (s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X10,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X10))))) )),
  inference(forward_demodulation,[],[f3042,f1829])).
fof(f3042,plain,(
  ( ! [X10] : (s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),s('type.num.num',sK2(X10,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X10))))) )),
  inference(forward_demodulation,[],[f2997,f101])).
fof(f2997,plain,(
  ( ! [X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X10)))) | s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num',sK2(X10,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) )),
  inference(superposition,[],[f590,f1829])).
fof(f3961,plain,(
  ( ! [X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f3960,f604])).
fof(f3960,plain,(
  ( ! [X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f3959,f2124])).
fof(f3959,plain,(
  ( ! [X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f3848,f101])).
fof(f3848,plain,(
  ( ! [X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X5)))) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f590,f2703])).
fof(f3995,plain,(
  ( ! [X20] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X20,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X20))))) )),
  inference(forward_demodulation,[],[f3994,f604])).
fof(f3994,plain,(
  ( ! [X20] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(X20,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X20))))) )),
  inference(forward_demodulation,[],[f3864,f2124])).
fof(f3864,plain,(
  ( ! [X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X20)))) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(X20,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f102,f2703])).
fof(f4263,plain,(
  ( ! [X4,X5] : (s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X4,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | s(bool,X5) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f4239,f78])).
fof(f4239,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X4,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | s(bool,X5) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X4))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f619,f154])).
fof(f4984,plain,(
  ( ! [X6,X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | s(bool,X6) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f4961,f78])).
fof(f4961,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | s(bool,X6) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3035,f154])).
fof(f5342,plain,(
  ( ! [X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f5341,f604])).
fof(f5341,plain,(
  ( ! [X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f5340,f101])).
fof(f5340,plain,(
  ( ! [X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f5339,f714])).
fof(f5339,plain,(
  ( ! [X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X5))))) )),
  inference(forward_demodulation,[],[f5200,f101])).
fof(f5200,plain,(
  ( ! [X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X5)))) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f590,f5172])).
fof(f5399,plain,(
  ( ! [X26] : (s('type.num.num',X26) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X26,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X26))))) )),
  inference(forward_demodulation,[],[f5398,f604])).
fof(f5398,plain,(
  ( ! [X26] : (s('type.num.num',X26) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(X26,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X26))))) )),
  inference(forward_demodulation,[],[f5397,f101])).
fof(f5397,plain,(
  ( ! [X26] : (s('type.num.num',X26) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(X26,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X26))))) )),
  inference(forward_demodulation,[],[f5219,f714])).
fof(f5219,plain,(
  ( ! [X26] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',X26)))) | s('type.num.num',X26) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(X26,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f102,f5172])).
fof(f4253,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))))))) )),
  inference(forward_demodulation,[],[f4230,f105])).
fof(f4230,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7)))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f619,f105])).
fof(f4977,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))))))) )),
  inference(forward_demodulation,[],[f4949,f105])).
fof(f4949,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7)))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f3035,f105])).
fof(f5063,plain,(
  ( ! [X19,X17,X18] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X18))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X19)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))))))) )),
  inference(forward_demodulation,[],[f5062,f604])).
fof(f5062,plain,(
  ( ! [X19,X17,X18] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X18))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X19)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))))))) )),
  inference(forward_demodulation,[],[f4992,f2124])).
fof(f4992,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X18))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X19)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f923,f2703])).
fof(f5064,plain,(
  ( ! [X21,X22,X20] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X21))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X22)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))))))))) )),
  inference(forward_demodulation,[],[f4993,f763])).
fof(f4993,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X21))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X22)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) )),
  inference(superposition,[],[f923,f763])).
fof(f5065,plain,(
  ( ! [X24,X23,X25] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num',X24))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num',X25)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))))))))) )),
  inference(forward_demodulation,[],[f4994,f880])).
fof(f4994,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num',X24))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num',X25)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) )),
  inference(superposition,[],[f923,f880])).
fof(f5066,plain,(
  ( ! [X28,X26,X27] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num',X27))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num',X28)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))))))))) )),
  inference(forward_demodulation,[],[f4995,f1093])).
fof(f4995,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num',X27))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num',X28)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) )),
  inference(superposition,[],[f923,f1093])).
fof(f5067,plain,(
  ( ! [X30,X31,X29] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X31))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num',X30))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num',X31)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X31))))))))) )),
  inference(forward_demodulation,[],[f4996,f1829])).
fof(f4996,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X31)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X31))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num',X30))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num',X31)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))) )),
  inference(superposition,[],[f923,f1829])).
fof(f5482,plain,(
  ( ! [X101,X99,X100] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X100),s('type.num.num',X101))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num',X100))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num',X101)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X100),s('type.num.num',X101))))))))) )),
  inference(forward_demodulation,[],[f5481,f604])).
fof(f5481,plain,(
  ( ! [X101,X99,X100] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X100),s('type.num.num',X101))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num',X100))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num',X101)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X100),s('type.num.num',X101))))))))) )),
  inference(forward_demodulation,[],[f5480,f101])).
fof(f5480,plain,(
  ( ! [X101,X99,X100] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X100),s('type.num.num',X101))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num',X100))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num',X101)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X100),s('type.num.num',X101))))))))) )),
  inference(forward_demodulation,[],[f5263,f714])).
fof(f5263,plain,(
  ( ! [X101,X99,X100] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X100),s('type.num.num',X101)))))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X100),s('type.num.num',X101))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num',X100))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num',X101)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f923,f5172])).
fof(f4978,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num',X9))))))))) )),
  inference(forward_demodulation,[],[f4950,f891])).
fof(f4950,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num',X9)))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f3035,f891])).
fof(f4254,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num',X9))))))))) )),
  inference(forward_demodulation,[],[f4231,f891])).
fof(f4231,plain,(
  ( ! [X8,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num',X9)))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f619,f891])).
fof(f4979,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X10))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))))))))) )),
  inference(forward_demodulation,[],[f4951,f906])).
fof(f4951,plain,(
  ( ! [X10,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0')))))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X10))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X10))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f3035,f906])).
fof(f4396,plain,(
  ( ! [X146,X145] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X146),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X145))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X146),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X146),'const.bool.the_value_0'))))))))))) )),
  inference(forward_demodulation,[],[f4341,f906])).
fof(f4341,plain,(
  ( ! [X146,X145] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X146),'const.bool.the_value_0')))))))))) | s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X145))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X146),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X145))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X146),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f619,f906])).
fof(f3147,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X12))))))) )),
  inference(forward_demodulation,[],[f3102,f604])).
fof(f3102,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',X12)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f593,f604])).
fof(f3148,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))))))) )),
  inference(forward_demodulation,[],[f3103,f763])).
fof(f3103,plain,(
  ( ! [X14,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) )),
  inference(superposition,[],[f593,f763])).
fof(f3149,plain,(
  ( ! [X15,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16))))))) )),
  inference(forward_demodulation,[],[f3104,f880])).
fof(f3104,plain,(
  ( ! [X15,X16] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X15),s('type.num.num',X16)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) )),
  inference(superposition,[],[f593,f880])).
fof(f3150,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))))))) )),
  inference(forward_demodulation,[],[f3105,f1093])).
fof(f3105,plain,(
  ( ! [X17,X18] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) )),
  inference(superposition,[],[f593,f1093])).
fof(f3151,plain,(
  ( ! [X19,X20] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X20))))))) )),
  inference(forward_demodulation,[],[f3106,f1829])).
fof(f3106,plain,(
  ( ! [X19,X20] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X20)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))) )),
  inference(superposition,[],[f593,f1829])).
fof(f4031,plain,(
  ( ! [X72,X71] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X72))))))) )),
  inference(forward_demodulation,[],[f4030,f604])).
fof(f4030,plain,(
  ( ! [X72,X71] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X72))))))) )),
  inference(forward_demodulation,[],[f3891,f2124])).
fof(f3891,plain,(
  ( ! [X72,X71] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num',X72)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f593,f2703])).
fof(f4941,plain,(
  ( ! [X2,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f3035,f101])).
fof(f5453,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X77))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X77)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) )),
  inference(forward_demodulation,[],[f5452,f604])).
fof(f5452,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X77))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X77)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) )),
  inference(forward_demodulation,[],[f5451,f101])).
fof(f5451,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X77))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X77)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78))))))) )),
  inference(forward_demodulation,[],[f5246,f714])).
fof(f5246,plain,(
  ( ! [X78,X77] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X77),s('type.num.num',X78)))))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X77))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X77)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f593,f5172])).
fof(f3536,plain,(
  ( ! [X8] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f3521,f604])).
fof(f3521,plain,(
  ( ! [X8] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f645,f604])).
fof(f3537,plain,(
  ( ! [X9] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X9),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f3522,f763])).
fof(f3522,plain,(
  ( ! [X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X9),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X9),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) )),
  inference(superposition,[],[f645,f763])).
fof(f3538,plain,(
  ( ! [X10] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X10),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f3523,f880])).
fof(f3523,plain,(
  ( ! [X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X10),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) )),
  inference(superposition,[],[f645,f880])).
fof(f3539,plain,(
  ( ! [X11] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f3524,f1093])).
fof(f3524,plain,(
  ( ! [X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) )),
  inference(superposition,[],[f645,f1093])).
fof(f3540,plain,(
  ( ! [X12] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X12),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f3525,f1829])).
fof(f3525,plain,(
  ( ! [X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X12),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))) )),
  inference(superposition,[],[f645,f1829])).
fof(f4035,plain,(
  ( ! [X75] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X75),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X75),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X75),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f4034,f604])).
fof(f4034,plain,(
  ( ! [X75] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X75),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X75),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X75),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f3896,f2124])).
fof(f3896,plain,(
  ( ! [X75] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X75),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X75),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X75),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f645,f2703])).
fof(f4970,plain,(
  ( ! [X0] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f4940,f83])).
fof(f4940,plain,(
  ( ! [X0] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f3035,f83])).
fof(f5459,plain,(
  ( ! [X81] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X81),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X81),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X81),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f5458,f604])).
fof(f5458,plain,(
  ( ! [X81] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X81),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X81),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X81),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f5457,f101])).
fof(f5457,plain,(
  ( ! [X81] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X81),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X81),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X81),'const.bool.the_value_0'))))))) )),
  inference(forward_demodulation,[],[f5252,f714])).
fof(f5252,plain,(
  ( ! [X81] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X81),'const.bool.the_value_0')))))) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X81),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X81),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f645,f5172])).
fof(f1138,plain,(
  ( ! [X2,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))))) )),
  inference(superposition,[],[f1014,f101])).
fof(f1838,plain,(
  ( ! [X2,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))))) )),
  inference(superposition,[],[f1705,f101])).
fof(f2350,plain,(
  ( ! [X2,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))))) )),
  inference(superposition,[],[f2137,f101])).
fof(f933,plain,(
  ( ! [X2,X1] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))))) )),
  inference(superposition,[],[f815,f101])).
fof(f1652,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))))))) )),
  inference(superposition,[],[f933,f101])).
fof(f1962,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))))))) )),
  inference(superposition,[],[f1138,f101])).
fof(f2491,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))))))) )),
  inference(superposition,[],[f1838,f101])).
fof(f5731,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))))))))) )),
  inference(superposition,[],[f2350,f101])).
fof(f1660,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4))))))) )),
  inference(superposition,[],[f933,f101])).
fof(f1971,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4))))))) )),
  inference(superposition,[],[f1138,f101])).
fof(f2502,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4))))))) )),
  inference(superposition,[],[f1838,f101])).
fof(f5746,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num',sK1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4))))))) )),
  inference(superposition,[],[f2350,f101])).
fof(f1014,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',X0))))) )),
  inference(superposition,[],[f103,f880])).
fof(f1705,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',X0))))) )),
  inference(superposition,[],[f103,f1093])).
fof(f2137,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',X0))))) )),
  inference(superposition,[],[f103,f1829])).
fof(f815,plain,(
  ( ! [X0] : (s('type.num.num',sK1) != s('type.num.num',X0) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',X0))))) )),
  inference(superposition,[],[f103,f763])).
fof(f483,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f477,f78])).
fof(f477,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f85,f154])).
fof(f734,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X2))) | s(bool,X4) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f724,f78])).
fof(f724,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X2))) | s(bool,X4) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f86,f154])).
fof(f8976,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.fcp.cart'(bool,X17),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) != s('type.fcp.cart'(bool,X17),'const.words.n2w_1'(s('type.num.num',X18))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X18),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X17),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X17),'const.bool.the_value_0'))))) | s(bool,X19) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f99,f483])).
fof(f8991,plain,(
  ( ! [X70,X72,X71] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X71)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X71),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))))))) | s(bool,X72) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))) | s(bool,'T_0') = s(bool,X72)) )),
  inference(superposition,[],[f474,f483])).
fof(f8992,plain,(
  ( ! [X74,X75,X73] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X73))),s('type.num.num',X74))))) | s(bool,X75) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X73))) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f474,f483])).
fof(f9018,plain,(
  ( ! [X171,X169,X170,X168] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X169)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X170),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X168))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X169),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X168))))))) | s(bool,X171) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X168))) | s(bool,'T_0') = s(bool,X171)) )),
  inference(superposition,[],[f718,f483])).
fof(f9019,plain,(
  ( ! [X175,X173,X174,X172] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X173),s('type.num.num','const.num.|48|_0')))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X174),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X172))),s('type.num.num',X173))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X172))),s('type.num.num',X173))))) | s(bool,X175) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X172))) | s(bool,'T_0') = s(bool,X175)) )),
  inference(superposition,[],[f718,f483])).
fof(f9034,plain,(
  ( ! [X237,X235,X233,X236,X234] : (s('type.fcp.cart'(bool,X234),'const.words.n2w_1'(s('type.num.num',X235))) != s('type.fcp.cart'(bool,X234),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X236),s('type.num.num','const.num.|48|_0'))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X235),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X234),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X233))),s('type.num.num',X236))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X234),'const.bool.the_value_0'))))) | s(bool,X237) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X233))) | s(bool,'T_0') = s(bool,X237)) )),
  inference(superposition,[],[f984,f483])).
fof(f9035,plain,(
  ( ! [X241,X239,X242,X240,X238] : (s('type.fcp.cart'(bool,X239),'const.words.n2w_1'(s('type.num.num',X240))) != s('type.fcp.cart'(bool,X239),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X241))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X240),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X239),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X241),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X238))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X239),'const.bool.the_value_0'))))) | s(bool,X242) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X238))) | s(bool,'T_0') = s(bool,X242)) )),
  inference(superposition,[],[f984,f483])).
fof(f9036,plain,(
  ( ! [X243,X246,X244,X247,X245] : (s('type.fcp.cart'(bool,X244),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) != s('type.fcp.cart'(bool,X244),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X245),s('type.num.num',X246))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X243))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X244),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X246),s('type.num.num',X245))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X244),'const.bool.the_value_0'))))) | s(bool,X247) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X243))) | s(bool,'T_0') = s(bool,X247)) )),
  inference(superposition,[],[f984,f483])).
fof(f9038,plain,(
  ( ! [X253,X251,X254,X252,X250] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X251),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X252),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X253),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X252),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X252),'const.words.n2w_1'(s('type.num.num',X251))) = s('type.fcp.cart'(bool,X252),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X250))),s('type.num.num',X253))))) | s(bool,X254) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X250))) | s(bool,'T_0') = s(bool,X254)) )),
  inference(superposition,[],[f1100,f483])).
fof(f9039,plain,(
  ( ! [X255,X257,X259,X256,X258] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X256),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X257),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X258))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X257),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X257),'const.words.n2w_1'(s('type.num.num',X256))) = s('type.fcp.cart'(bool,X257),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X258),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X255))))))) | s(bool,X259) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X255))) | s(bool,'T_0') = s(bool,X259)) )),
  inference(superposition,[],[f1100,f483])).
fof(f9043,plain,(
  ( ! [X271,X273,X272,X274] : (s('type.num.num',X272) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X273),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X271))),s('type.num.num',X272))) | s(bool,X274) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X271))) | s(bool,'T_0') = s(bool,X274)) )),
  inference(superposition,[],[f1213,f483])).
fof(f9044,plain,(
  ( ! [X277,X275,X276,X278] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X276),s('type.num.num',X277))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X277),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X275))))) | s(bool,X278) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X275))) | s(bool,'T_0') = s(bool,X278)) )),
  inference(superposition,[],[f1213,f483])).
fof(f9138,plain,(
  ( ! [X227,X225,X226,X224] : (s(X226,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X227))))) != s(X226,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X227))))) | s(fun(bool,X226),X224) = s(fun(bool,X226),X225) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X227))) | s(bool,'T_0') = s(bool,sK3(X224,X225,X226,bool))) )),
  inference(superposition,[],[f104,f483])).
fof(f9202,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2))) | s(bool,X0) = s(bool,X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X2)))) )),
  inference(condensation,[],[f9201])).
fof(f9201,plain,(
  ( ! [X43,X41,X42,X40] : (s(bool,X42) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X41))) | s(bool,'T_0') = s(bool,X40) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X41)))) )),
  inference(duplicate_literal_removal,[],[f9079])).
fof(f9079,plain,(
  ( ! [X43,X41,X42,X40] : (s(bool,X42) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X41))) | s(bool,'T_0') = s(bool,X40) | s(bool,X42) = s(bool,X43) | s(bool,'T_0') = s(bool,X43) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X41))) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f471,f483])).
fof(f9269,plain,(
  ( ! [X26,X24,X27,X25] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X26),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X25),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X25),'const.words.n2w_1'(s('type.num.num',X26))) = s('type.fcp.cart'(bool,X25),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X24))))) | s(bool,X27) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X24))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(forward_demodulation,[],[f8978,f482])).
fof(f8978,plain,(
  ( ! [X26,X24,X27,X25] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X25),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X26),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X25),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X25),'const.words.n2w_1'(s('type.num.num',X26))) = s('type.fcp.cart'(bool,X25),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X24))))) | s(bool,X27) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X24))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f100,f483])).
fof(f9278,plain,(
  ( ! [X261,X263,X260,X262,X264] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num',X263))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X261),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X261),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X260))))) = s('type.fcp.cart'(bool,X261),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X263),s('type.num.num',X262))))) | s(bool,X264) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X260))) | s(bool,'T_0') = s(bool,X264)) )),
  inference(forward_demodulation,[],[f9040,f482])).
fof(f9040,plain,(
  ( ! [X261,X263,X260,X262,X264] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X261),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X262),s('type.num.num',X263))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X261),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X261),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X260))))) = s('type.fcp.cart'(bool,X261),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X263),s('type.num.num',X262))))) | s(bool,X264) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X260))) | s(bool,'T_0') = s(bool,X264)) )),
  inference(superposition,[],[f1100,f483])).
fof(f3315,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) | s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f3282,f78])).
fof(f3282,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) | s(bool,X3) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f718,f154])).
fof(f2449,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f2416,f78])).
fof(f2416,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))) | s(bool,X2) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f474,f154])).
fof(f474,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(superposition,[],[f85,f101])).
fof(f718,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(superposition,[],[f86,f101])).
fof(f3265,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5)))))) )),
  inference(superposition,[],[f718,f101])).
fof(f2399,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4)))))) )),
  inference(superposition,[],[f474,f101])).
fof(f3254,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))),s('type.num.num',X5)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)))))))) )),
  inference(superposition,[],[f718,f101])).
fof(f2388,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))),s('type.num.num',X4)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))))) )),
  inference(superposition,[],[f474,f101])).
fof(f9181,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(equality_factoring,[],[f483])).
fof(f8204,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))))) )),
  inference(unit_resulting_resolution,[],[f2724,f88])).
fof(f7656,plain,(
  ( ! [X12] : (s('type.num.num',sK1) != s('type.num.num',X12) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',X12)))) )),
  inference(superposition,[],[f1213,f1829])).
fof(f7655,plain,(
  ( ! [X11] : (s('type.num.num',sK1) != s('type.num.num',X11) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',X11)))) )),
  inference(superposition,[],[f1213,f1093])).
fof(f7654,plain,(
  ( ! [X10] : (s('type.num.num',sK1) != s('type.num.num',X10) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',X10)))) )),
  inference(superposition,[],[f1213,f880])).
fof(f7653,plain,(
  ( ! [X9] : (s('type.num.num',sK1) != s('type.num.num',X9) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',X9)))) )),
  inference(superposition,[],[f1213,f763])).
fof(f7652,plain,(
  ( ! [X8] : (s('type.num.num',sK1) != s('type.num.num',X8) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',X8)))) )),
  inference(superposition,[],[f1213,f5172])).
fof(f7651,plain,(
  ( ! [X7] : (s('type.num.num',sK1) != s('type.num.num',X7) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',X7)))) )),
  inference(superposition,[],[f1213,f2703])).
fof(f7650,plain,(
  ( ! [X6] : (s('type.num.num',sK1) != s('type.num.num',X6) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',X6)))) )),
  inference(superposition,[],[f1213,f604])).
fof(f7648,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X2) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2)))) )),
  inference(superposition,[],[f1213,f101])).
fof(f7633,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num',X5) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5)))) )),
  inference(superposition,[],[f1213,f101])).
fof(f7601,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)))))) )),
  inference(superposition,[],[f1213,f101])).
fof(f5869,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | $spl51),
  inference(unit_resulting_resolution,[],[f5868,f84])).
fof(f5911,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl51),
  inference(trivial_inequality_removal,[],[f5906])).
fof(f5906,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl51),
  inference(superposition,[],[f5868,f154])).
fof(f5899,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl51),
  inference(superposition,[],[f5868,f154])).
fof(f5863,plain,(
  ( ! [X24,X23,X25] : (s(bool,X25) != s(bool,sK3(X23,X24,bool,bool)) | s(bool,'T_0') = s(bool,X25) | s(fun(bool,bool),X23) = s(fun(bool,bool),X24)) ) | $spl28),
  inference(subsumption_resolution,[],[f5838,f78])).
fof(f5838,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | s(bool,X25) != s(bool,sK3(X23,X24,bool,bool)) | s(bool,'T_0') = s(bool,X25) | s(fun(bool,bool),X23) = s(fun(bool,bool),X24)) ) | $spl28),
  inference(superposition,[],[f157,f2851])).
fof(f5862,plain,(
  ( ! [X12,X10,X11] : (s(bool,X12) != s(bool,sK3(X10,X11,bool,bool)) | p(s(bool,X12)) | s(fun(bool,bool),X10) = s(fun(bool,bool),X11)) ) | $spl28),
  inference(subsumption_resolution,[],[f5835,f78])).
fof(f5835,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,'T_0')) | s(bool,X12) != s(bool,sK3(X10,X11,bool,bool)) | p(s(bool,X12)) | s(fun(bool,bool),X10) = s(fun(bool,bool),X11)) ) | $spl28),
  inference(superposition,[],[f131,f2851])).
fof(f5722,plain,(
  ( ! [X4] : (s(bool,X4) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f5695,f78])).
fof(f5695,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | s(bool,X4) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f157,f5198])).
fof(f5719,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(subsumption_resolution,[],[f5686,f78])).
fof(f5686,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(superposition,[],[f102,f5198])).
fof(f5718,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(subsumption_resolution,[],[f5684,f78])).
fof(f5684,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(superposition,[],[f618,f5198])).
fof(f5717,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(subsumption_resolution,[],[f5683,f78])).
fof(f5683,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(superposition,[],[f3174,f5198])).
fof(f5669,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))))),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))))),s('type.num.num',X7)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X4),s('type.num.num',X6))))))))) )),
  inference(subsumption_resolution,[],[f5585,f78])).
fof(f5585,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))))),s('type.num.num',X7))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))))),s('type.num.num',X7)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X4),s('type.num.num',X6))))))))) )),
  inference(superposition,[],[f924,f562])).
fof(f5668,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X2))))))))) )),
  inference(subsumption_resolution,[],[f5584,f78])).
fof(f5584,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X0),s('type.num.num',X2))))))))) )),
  inference(superposition,[],[f924,f533])).
fof(f5198,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1)))),
  inference(superposition,[],[f533,f5172])).
fof(f5192,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))))),
  inference(unit_resulting_resolution,[],[f5172,f525])).
fof(f5178,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(subsumption_resolution,[],[f5149,f78])).
fof(f5149,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(superposition,[],[f3174,f3846])).
fof(f5177,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))),
  inference(subsumption_resolution,[],[f5148,f78])).
fof(f5148,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))),
  inference(superposition,[],[f3174,f2138])).
fof(f5176,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))),
  inference(subsumption_resolution,[],[f5147,f78])).
fof(f5147,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))),
  inference(superposition,[],[f3174,f1706])).
fof(f5175,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(subsumption_resolution,[],[f5146,f78])).
fof(f5146,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(superposition,[],[f3174,f1012])).
fof(f5174,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),
  inference(subsumption_resolution,[],[f5145,f78])).
fof(f5145,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),
  inference(superposition,[],[f3174,f813])).
fof(f5173,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(subsumption_resolution,[],[f5144,f78])).
fof(f5144,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(superposition,[],[f3174,f688])).
fof(f5172,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),
  inference(subsumption_resolution,[],[f5139,f78])).
fof(f5139,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),
  inference(superposition,[],[f3174,f135])).
fof(f4983,plain,(
  ( ! [X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X3)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) )),
  inference(subsumption_resolution,[],[f4959,f78])).
fof(f4959,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X3)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f3035,f562])).
fof(f4982,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK1)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) )),
  inference(subsumption_resolution,[],[f4958,f78])).
fof(f4958,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK1)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f3035,f533])).
fof(f4686,plain,(
  ( ! [X2,X0,X1] : (s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1)))))) )),
  inference(equality_resolution,[],[f1100])).
fof(f4665,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num',X6))) = s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X8)))))) )),
  inference(superposition,[],[f1100,f101])).
fof(f4651,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num',X8))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num',X6))) = s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))))) )),
  inference(superposition,[],[f1100,f101])).
fof(f4649,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X4),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X4),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5))))) = s('type.fcp.cart'(bool,X4),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X3),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X4),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f1100,f733])).
fof(f4699,plain,(
  ( ! [X50,X51,X49] : (s('type.fcp.cart'(bool,X49),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X49),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',X50))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',X51))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X49),'const.bool.the_value_0')))))) )),
  inference(forward_demodulation,[],[f4698,f482])).
fof(f4698,plain,(
  ( ! [X50,X48,X51,X49] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',X51))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X49),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X49),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',X50))))) = s('type.fcp.cart'(bool,X49),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X48),'const.bool.the_value_0')))))))) )),
  inference(forward_demodulation,[],[f4647,f482])).
fof(f4647,plain,(
  ( ! [X50,X48,X51,X49] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X49),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',X51))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X49),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X49),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X51),s('type.num.num',X50))))) = s('type.fcp.cart'(bool,X49),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X48),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f1100,f482])).
fof(f4636,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))) = s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7)))))) )),
  inference(superposition,[],[f1100,f101])).
fof(f4499,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X2),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X2),'const.bool.the_value_0')))))) )),
  inference(equality_resolution,[],[f984])).
fof(f4478,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num',X7))) != s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X8))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))))) )),
  inference(superposition,[],[f984,f101])).
fof(f4464,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num',X7))) != s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))),s('type.num.num',X8))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))))) )),
  inference(superposition,[],[f984,f101])).
fof(f4450,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',X4))))) != s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))))) )),
  inference(superposition,[],[f984,f101])).
fof(f4262,plain,(
  ( ! [X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(subsumption_resolution,[],[f4237,f78])).
fof(f4237,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f619,f562])).
fof(f4261,plain,(
  ( ! [X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK1)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(subsumption_resolution,[],[f4236,f78])).
fof(f4236,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK1)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f619,f533])).
fof(f4111,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f891,f83])).
fof(f4097,plain,(
  ( ! [X4] : (s(bool,X4) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f4072,f78])).
fof(f4072,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | s(bool,X4) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f157,f3846])).
fof(f4094,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(subsumption_resolution,[],[f4063,f78])).
fof(f4063,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(superposition,[],[f102,f3846])).
fof(f4093,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(subsumption_resolution,[],[f4061,f78])).
fof(f4061,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(superposition,[],[f618,f3846])).
fof(f3846,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1)))),
  inference(superposition,[],[f533,f2703])).
fof(f3840,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))))),
  inference(unit_resulting_resolution,[],[f2703,f525])).
fof(f3827,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X2),'const.bool.the_value_0'))),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X2),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X2),'const.bool.the_value_0'))),s('type.num.num',X3)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X2),'const.bool.the_value_0'))))))))) )),
  inference(subsumption_resolution,[],[f3809,f78])).
fof(f3809,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X2),'const.bool.the_value_0'))),s('type.num.num',X3))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X2),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X2),'const.bool.the_value_0'))),s('type.num.num',X3)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X2),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f562])).
fof(f3826,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))))) )),
  inference(subsumption_resolution,[],[f3808,f78])).
fof(f3808,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f646,f533])).
fof(f3054,plain,(
  ( ! [X4,X5,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5)),'const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))))))) )),
  inference(subsumption_resolution,[],[f3010,f78])).
fof(f3010,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5)),'const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))))))) )),
  inference(superposition,[],[f590,f562])).
fof(f3053,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))),'const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))))) )),
  inference(subsumption_resolution,[],[f3009,f78])).
fof(f3009,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))),'const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))))) )),
  inference(superposition,[],[f590,f533])).
fof(f2812,plain,(
  ( ! [X30,X28,X31,X29] : (s('type.num.num',X30) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',X28))),s('type.num.num',X31))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X29))),s('type.num.num',X30)))) )),
  inference(subsumption_resolution,[],[f2771,f80])).
fof(f2771,plain,(
  ( ! [X30,X28,X31,X29] : (p(s(bool,'F_0')) | s('type.num.num',X30) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',X28))),s('type.num.num',X31))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X29))),s('type.num.num',X30)))) )),
  inference(superposition,[],[f519,f84])).
fof(f2724,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))))))) )),
  inference(unit_resulting_resolution,[],[f101,f519])).
fof(f2708,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))),
  inference(subsumption_resolution,[],[f2672,f78])).
fof(f2672,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))),
  inference(superposition,[],[f618,f2138])).
fof(f2707,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))),
  inference(subsumption_resolution,[],[f2671,f78])).
fof(f2671,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))),
  inference(superposition,[],[f618,f1706])).
fof(f2706,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(subsumption_resolution,[],[f2670,f78])).
fof(f2670,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(superposition,[],[f618,f1012])).
fof(f2705,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),
  inference(subsumption_resolution,[],[f2669,f78])).
fof(f2669,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),
  inference(superposition,[],[f618,f813])).
fof(f2704,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(subsumption_resolution,[],[f2668,f78])).
fof(f2668,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(superposition,[],[f618,f688])).
fof(f2703,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),
  inference(subsumption_resolution,[],[f2667,f78])).
fof(f2667,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),
  inference(superposition,[],[f618,f135])).
fof(f2655,plain,(
  ( ! [X28,X26,X29,X27] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X26),s('type.num.num',X29))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28)))))) )),
  inference(subsumption_resolution,[],[f2612,f80])).
fof(f2612,plain,(
  ( ! [X28,X26,X29,X27] : (p(s(bool,'F_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X26),s('type.num.num',X29))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28)))))) )),
  inference(superposition,[],[f516,f84])).
fof(f2343,plain,(
  ( ! [X4] : (s(bool,X4) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2323,f78])).
fof(f2323,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | s(bool,X4) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f157,f2138])).
fof(f2340,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))),
  inference(subsumption_resolution,[],[f2314,f78])).
fof(f2314,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))),
  inference(superposition,[],[f102,f2138])).
fof(f2248,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num',X2))) = s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f100,f733])).
fof(f2138,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1)))),
  inference(superposition,[],[f533,f1829])).
fof(f2135,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))))),
  inference(unit_resulting_resolution,[],[f1829,f525])).
fof(f2127,plain,(
  ( ! [X30,X31,X29] : (s(bool,X31) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',X30))))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(subsumption_resolution,[],[f2107,f78])).
fof(f2107,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'T_0')) | s(bool,X31) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',X30))))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f157,f562])).
fof(f2124,plain,(
  ( ! [X4,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)),X4))))) )),
  inference(subsumption_resolution,[],[f2098,f78])).
fof(f2098,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)),X4))))) )),
  inference(superposition,[],[f102,f562])).
fof(f2066,plain,(
  ( ! [X17,X16] : (s(bool,X17) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X16))))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(subsumption_resolution,[],[f2045,f78])).
fof(f2045,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | s(bool,X17) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X16))))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f157,f215])).
fof(f2063,plain,(
  ( ! [X2] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))))) )),
  inference(subsumption_resolution,[],[f2036,f78])).
fof(f2036,plain,(
  ( ! [X2] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))))) )),
  inference(superposition,[],[f85,f215])).
fof(f2062,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))) )),
  inference(subsumption_resolution,[],[f2035,f78])).
fof(f2035,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))) )),
  inference(superposition,[],[f86,f215])).
fof(f1832,plain,(
  ( ! [X3] : (s(bool,X3) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f1813,f78])).
fof(f1813,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s(bool,X3) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f157,f1706])).
fof(f1829,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))),
  inference(subsumption_resolution,[],[f1804,f78])).
fof(f1804,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))),
  inference(superposition,[],[f102,f1706])).
fof(f1706,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1)))),
  inference(superposition,[],[f533,f1093])).
fof(f1213,plain,(
  ( ! [X24,X23,X25] : (s('type.num.num',X24) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X23))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num',X24)))) )),
  inference(subsumption_resolution,[],[f1191,f80])).
fof(f1191,plain,(
  ( ! [X24,X23,X25] : (p(s(bool,'F_0')) | s('type.num.num',X24) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X23))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X23),s('type.num.num',X24)))) )),
  inference(superposition,[],[f525,f84])).
fof(f1126,plain,(
  ( ! [X24,X23] : (s('type.fcp.cart'(bool,X23),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X23),'const.words.n2w_1'(s('type.num.num',X24))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X24),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X23),'const.bool.the_value_0')))))) )),
  inference(forward_demodulation,[],[f1125,f482])).
fof(f1125,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X24),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X23),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X23),'const.words.n2w_1'(s('type.num.num',X24))) = s('type.fcp.cart'(bool,X23),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X22),'const.bool.the_value_0')))))))) )),
  inference(forward_demodulation,[],[f1106,f482])).
fof(f1106,plain,(
  ( ! [X24,X23,X22] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X23),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X24),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X23),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X23),'const.words.n2w_1'(s('type.num.num',X24))) = s('type.fcp.cart'(bool,X23),'const.words.n2w_1'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X22),'const.bool.the_value_0')))))))) )),
  inference(superposition,[],[f100,f482])).
fof(f1100,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X5),'const.bool.the_value_0'))))) != s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X5),'const.bool.the_value_0'))))) | s('type.fcp.cart'(bool,X5),'const.words.n2w_1'(s('type.num.num',X6))) = s('type.fcp.cart'(bool,X5),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)))))) )),
  inference(superposition,[],[f100,f101])).
fof(f1096,plain,(
  ( ! [X3] : (s(bool,X3) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f1078,f78])).
fof(f1078,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s(bool,X3) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f157,f1012])).
fof(f1093,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(subsumption_resolution,[],[f1069,f78])).
fof(f1069,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(superposition,[],[f102,f1012])).
fof(f1012,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1)))),
  inference(superposition,[],[f533,f880])).
fof(f984,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.fcp.cart'(bool,X5),'const.words.n2w_1'(s('type.num.num',X6))) != s('type.fcp.cart'(bool,X5),'const.words.n2w_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X3))))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X6),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X5),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X5),'const.bool.the_value_0')))))) )),
  inference(superposition,[],[f99,f101])).
fof(f891,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X1)))))) )),
  inference(superposition,[],[f105,f83])).
fof(f883,plain,(
  ( ! [X3] : (s(bool,X3) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f866,f78])).
fof(f866,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s(bool,X3) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f157,f813])).
fof(f880,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),
  inference(subsumption_resolution,[],[f857,f78])).
fof(f857,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),
  inference(superposition,[],[f102,f813])).
fof(f813,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1)))),
  inference(superposition,[],[f533,f763])).
fof(f802,plain,(
  ( ! [X10,X8,X11,X9] : (s(X10,f(s(bool,X11))) != s(X10,g(s(bool,X11))) | s(fun(bool,X10),X8) = s(fun(bool,X10),X9) | s(bool,'T_0') = s(bool,sK3(X8,X9,X10,bool)) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f104,f154])).
fof(f766,plain,(
  ( ! [X3] : (s(bool,X3) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f750,f78])).
fof(f750,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s(bool,X3) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f157,f688])).
fof(f763,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(subsumption_resolution,[],[f741,f78])).
fof(f741,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),
  inference(superposition,[],[f102,f688])).
fof(f717,plain,(
  ( ! [X26,X27,X25] : (s(bool,X27) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X26),s('type.num.num',X25))))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(subsumption_resolution,[],[f701,f78])).
fof(f701,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | s(bool,X27) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X25),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X26),s('type.num.num',X25))))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f157,f533])).
fof(f714,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)),X0))))) )),
  inference(subsumption_resolution,[],[f692,f78])).
fof(f692,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)),X0))))) )),
  inference(superposition,[],[f102,f533])).
fof(f688,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1)))),
  inference(superposition,[],[f533,f604])).
fof(f604,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),
  inference(subsumption_resolution,[],[f596,f78])).
fof(f596,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),
  inference(superposition,[],[f102,f135])).
fof(f562,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f527,f88])).
fof(f533,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f515,f88])).
fof(f527,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) )),
  inference(equality_resolution,[],[f103])).
fof(f515,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0))))))) )),
  inference(unit_resulting_resolution,[],[f101,f103])).
fof(f471,plain,(
  ( ! [X14,X15,X13] : (s(bool,X13) != s(bool,X14) | s(bool,'T_0') = s(bool,X14) | s(bool,X13) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f326,f78])).
fof(f326,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,'T_0')) | s(bool,X13) != s(bool,X14) | s(bool,'T_0') = s(bool,X14) | s(bool,X13) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f157,f154])).
fof(f470,plain,(
  ( ! [X12,X10,X11] : (p(s(bool,X11)) | s(bool,X10) != s(bool,X11) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f325,f78])).
fof(f325,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,'T_0')) | s(bool,X10) != s(bool,X11) | p(s(bool,X11)) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f131,f154])).
fof(f314,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f78,f154])).
fof(f215,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))) )),
  inference(unit_resulting_resolution,[],[f82,f88])).
fof(f211,plain,(
  ( ! [X6,X5] : (s(bool,X6) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X5),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f209,f78])).
fof(f209,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | s(bool,X6) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X5),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f157,f149])).
fof(f210,plain,(
  ( ! [X4] : (s(bool,X4) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f208,f78])).
fof(f208,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | s(bool,X4) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f157,f135])).
fof(f135,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1)))),
  inference(unit_resulting_resolution,[],[f76,f88])).
fof(f133,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f80,f87])).
fof(f131,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | s(bool,X0) != s(bool,X1) | p(s(bool,X1))) )),
  inference(condensation,[],[f130])).
fof(f130,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,X0) != s(bool,X2)) )),
  inference(condensation,[],[f119])).
fof(f119,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | ~p(s(bool,X1)) | p(s(bool,X3))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | ~p(s(bool,X0)) | p(s(bool,X2)))))),
  inference(flattening,[],[f74])).
fof(f74,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X1)) | p(s(bool,X3)))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | (~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(flattening,[],[f58])).
fof(f58,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3))) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(ennf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) = s(bool,X1) & (p(s(bool,X1)) => s(bool,X2) = s(bool,X3))) => ((p(s(bool,X0)) => p(s(bool,X2))) <=> (p(s(bool,X1)) => p(s(bool,X3)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X12,X18,X13,X19] : ((s(bool,X12) = s(bool,X18) & (p(s(bool,X18)) => s(bool,X13) = s(bool,X19))) => ((p(s(bool,X12)) => p(s(bool,X13))) <=> (p(s(bool,X18)) => p(s(bool,X19)))))),
  file('thm.bvp_to_wordProps.pow_eq_|48|','thm.bool.IMP_CONG')).
fof(f101,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8,X9] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X9))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X8)))),
  file('thm.bvp_to_wordProps.pow_eq_|48|','thm.arithmetic.ADD_SYM')).
fof(f99,plain,(
  ( ! [X2,X0,X1] : (s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))) != s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X2))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X2),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) )),
  inference(cnf_transformation,[],[f67])).
fof(f87,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f61])).
fof(f82,plain,(
  ( ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))))))) )),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0] : p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0))))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X9] : p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9))))))),
  file('thm.bvp_to_wordProps.pow_eq_|48|','thm.logroot.logroot_34_prove_ltb')).
fof(f76,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))))),
  inference(cnf_transformation,[],[f60])).
fof(f32807,plain,(
  ( ! [X50,X48,X49] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X48) = s(fun(bool,bool),X49) | s(bool,'T_0') = s(bool,X50)) ) | ($spl28 | $spl33 | $spl51 | $spl121)),
  inference(subsumption_resolution,[],[f32263,f17878])).
fof(f32263,plain,(
  ( ! [X50,X48,X49] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X48) = s(fun(bool,bool),X49) | s(bool,X50) = s(bool,sK3(X48,X49,bool,bool)) | s(bool,'T_0') = s(bool,X50)) ) | ($spl33 | $spl51 | $spl121)),
  inference(superposition,[],[f800,f30062])).
fof(f30062,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl33 | $spl51 | $spl121)),
  inference(forward_demodulation,[],[f30001,f17888])).
fof(f17888,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl33 | $spl121)),
  inference(unit_resulting_resolution,[],[f11452,f84])).
fof(f11452,plain,(
  s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl33 | $spl121)),
  inference(unit_resulting_resolution,[],[f2854,f2854,f9267,f470])).
fof(f2854,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | $spl33),
  inference(cnf_transformation,[],[f2854_D])).
fof(f2854_D,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) <=> ~$spl33),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl33])])).
fof(f30001,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl33 | $spl51 | $spl121)),
  inference(unit_resulting_resolution,[],[f11452,f11452,f11452,f5868,f262])).
fof(f32799,plain,(
  ( ! [X4,X1] : (s(bool,'T_0') != s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,X4) | s(bool,X1) = s(bool,X4)) ) | $spl342),
  inference(cnf_transformation,[],[f32799_D])).
fof(f32799_D,plain,(
  ( ! [X4,X1] : (s(bool,'T_0') != s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,X4) | s(bool,X1) = s(bool,X4)) ) <=> ~$spl342),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl342])])).
fof(f32800,plain,(
  ( ! [X2,X0,X3] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,g(s(bool,sK3(X2,X3,bool,bool)))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3)) ) | $spl344),
  inference(cnf_transformation,[],[f32800_D])).
fof(f32800_D,plain,(
  ( ! [X2,X0,X3] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,g(s(bool,sK3(X2,X3,bool,bool)))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3)) ) <=> ~$spl344),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl344])])).
fof(f32802,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,X1))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X0) = s(bool,g(s(bool,sK3(X2,X3,bool,bool)))) | s(bool,X1) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl28),
  inference(condensation,[],[f32801])).
fof(f32801,plain,(
  ( ! [X26,X24,X23,X27,X25,X22] : (s(bool,'T_0') != s(bool,f(s(bool,X24))) | s(fun(bool,bool),X22) = s(fun(bool,bool),X23) | s(bool,X25) = s(bool,g(s(bool,sK3(X22,X23,bool,bool)))) | s(bool,'T_0') = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X27)) ) | $spl28),
  inference(subsumption_resolution,[],[f32311,f17878])).
fof(f32311,plain,(
  ( ! [X26,X24,X23,X27,X25,X22] : (s(bool,'T_0') != s(bool,f(s(bool,X24))) | s(fun(bool,bool),X22) = s(fun(bool,bool),X23) | s(bool,X25) = s(bool,g(s(bool,sK3(X22,X23,bool,bool)))) | s(bool,'T_0') = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'T_0') = s(bool,X26) | s(bool,X27) = s(bool,sK3(X22,X23,bool,bool)) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f805,f262])).
fof(f32798,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,X1))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X0) = s(bool,g(s(bool,sK3(X2,X3,bool,bool)))) | s(bool,X1) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl28),
  inference(condensation,[],[f32797])).
fof(f32797,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s(bool,'T_0') != s(bool,f(s(bool,X30))) | s(fun(bool,bool),X28) = s(fun(bool,bool),X29) | s(bool,X31) = s(bool,g(s(bool,sK3(X28,X29,bool,bool)))) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,X32) | s(bool,X30) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl28),
  inference(subsumption_resolution,[],[f32312,f17878])).
fof(f32312,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s(bool,'T_0') != s(bool,f(s(bool,X30))) | s(fun(bool,bool),X28) = s(fun(bool,bool),X29) | s(bool,X31) = s(bool,g(s(bool,sK3(X28,X29,bool,bool)))) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,sK3(X28,X29,bool,bool)) | s(bool,'T_0') = s(bool,X32) | s(bool,X30) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f805,f262])).
fof(f32784,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl28 | $spl40 | $spl51)),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f1706,f1829,f1832,f2062,f2063,f2066,f2124,f2127,f2135,f2138,f2248,f2340,f2343,f2652,f2654,f2655,f2679,f2684,f2687,f2690,f2693,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2724,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f3053,f3054,f3826,f3827,f3840,f3846,f4093,f4094,f4097,f4111,f4255,f4259,f4261,f4262,f4301,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4982,f4983,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5192,f5198,f5668,f5669,f5717,f5718,f5719,f5722,f5862,f5863,f5899,f5911,f5869,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8922,f9224,f9219,f8961,f8974,f8975,f9011,f9021,f9037,f9046,f9051,f9210,f9286,f9288,f9289,f9290,f9291,f9292,f9293,f9294,f9329,f9330,f9181,f9139,f2388,f3254,f2399,f3265,f718,f474,f2449,f3315,f9278,f9269,f9202,f9138,f9044,f9043,f9039,f9038,f9036,f9035,f9034,f9019,f9018,f8992,f8991,f8976,f734,f483,f86,f85,f815,f2137,f1705,f1014,f5746,f2502,f1971,f1660,f5731,f2491,f1962,f1652,f933,f2350,f1838,f1138,f5459,f4970,f4035,f3540,f3539,f3538,f3537,f3536,f5453,f4941,f4031,f3151,f3150,f3149,f3148,f3147,f4396,f4979,f4254,f4978,f5482,f5067,f5066,f5065,f5064,f5063,f4977,f4253,f5399,f5342,f4984,f4263,f3995,f3961,f3043,f3041,f3039,f3037,f3035,f2218,f1761,f1054,f844,f619,f5462,f5160,f4037,f3822,f3821,f3820,f3819,f2678,f3535,f3146,f3824,f3825,f7425,f9017,f4400,f4207,f3823,f646,f3828,f8985,f8997,f9005,f2726,f2970,f8996,f9006,f2737,f2981,f5444,f5126,f4025,f3049,f3048,f3047,f3046,f2657,f3044,f8271,f2567,f2999,f3051,f3052,f7417,f8998,f9007,f4390,f4198,f3050,f519,f1167,f590,f3055,f3542,f3543,f7424,f9016,f3153,f3154,f7420,f8995,f9010,f5071,f5072,f7432,f9027,f602,f2292,f7402,f8983,f8999,f5651,f5650,f5649,f5648,f5647,f5644,f5642,f5516,f9030,f4395,f5169,f4399,f4393,f5070,f4375,f4203,f5168,f4206,f4201,f5069,f4183,f9028,f5531,f9029,f5546,f5662,f5661,f5660,f5659,f5658,f5655,f5167,f2696,f3541,f3152,f5666,f5667,f7436,f9031,f5665,f5664,f5068,f924,f5560,f5670,f607,f623,f651,f656,f5396,f5346,f5179,f3993,f3964,f3182,f3180,f3178,f3176,f3174,f2709,f2217,f1760,f1053,f843,f618,f645,f3545,f8984,f2578,f3111,f8994,f9008,f2589,f3122,f8993,f9009,f516,f1175,f593,f3183,f603,f2291,f7401,f8982,f9000,f5354,f5118,f5117,f5116,f5115,f5114,f5112,f5003,f9026,f4374,f4182,f9024,f5017,f9025,f5031,f923,f5044,f5119,f103,f525,f605,f102,f9140,f2917,f807,f805,f809,f804,f92,f91,f80,f13013,f13010,f2914,f2851,f13058,f13108,f13109,f13111,f13281,f17715,f17877,f17878,f17886,f18590,f19267,f19272,f19301,f19306,f19309,f19312,f19315,f19318,f19322,f19325,f19328,f19331,f19334,f19337,f19341,f19344,f19347,f19350,f19353,f19356,f19360,f19363,f19381,f19384,f19386,f9012,f9057,f9053,f9052,f9048,f9047,f9042,f9041,f9033,f9032,f9015,f9014,f19400,f19402,f9013,f9056,f21903,f21747,f21745,f21743,f21741,f21739,f21737,f21735,f21733,f21731,f21729,f21727,f21725,f21723,f21721,f21677,f19774,f22010,f19988,f19990,f22105,f22108,f22111,f22127,f22128,f22130,f22135,f20164,f20166,f21095,f21093,f21091,f21087,f21085,f21083,f21081,f21079,f21077,f22172,f22173,f22174,f20254,f20256,f20259,f20261,f21010,f22247,f22252,f22253,f22254,f22255,f22256,f22257,f22258,f22259,f22260,f22261,f20340,f20342,f22281,f22282,f22286,f22397,f20646,f22467,f22469,f22909,f22912,f22913,f22914,f22915,f22916,f22918,f22919,f22920,f22921,f22922,f22483,f22923,f22905,f22888,f22887,f22519,f22533,f22537,f22970,f22973,f22974,f22975,f22976,f22977,f22979,f22980,f22981,f22982,f22983,f22551,f22578,f22984,f22985,f22986,f22582,f22987,f22988,f22989,f22587,f22588,f22990,f22991,f22591,f22992,f22602,f22603,f22604,f22605,f22611,f22612,f22613,f22614,f22615,f22616,f22617,f22618,f22619,f22620,f22621,f22622,f22627,f22628,f22629,f22630,f22631,f22632,f22633,f22634,f22635,f22636,f22637,f22639,f22642,f22643,f22644,f22645,f22646,f22647,f22648,f22649,f22650,f22651,f22652,f22653,f22654,f22655,f22656,f22657,f22658,f22664,f22859,f22996,f22998,f22839,f22837,f22999,f23000,f23001,f23002,f23003,f23004,f22739,f22741,f23053,f23055,f23057,f23060,f23647,f23649,f23663,f23683,f23685,f23699,f23701,f23703,f23717,f23782,f23995,f24009,f24011,f24013,f24027,f24029,f24031,f24045,f24145,f24149,f24155,f24469,f24471,f24486,f24508,f24509,f24514,f24515,f24516,f24518,f24520,f24535,f24537,f24539,f24554,f24621,f24945,f24959,f24961,f24963,f24979,f24981,f24983,f24999,f25091,f25034,f25035,f25317,f25323,f25337,f25727,f25710,f25709,f25708,f25378,f25421,f25772,f25427,f25428,f25429,f25430,f25436,f25437,f25438,f25440,f25441,f25442,f25443,f25444,f25445,f25446,f25447,f25452,f25453,f25454,f25455,f25456,f25457,f25458,f25459,f25460,f25462,f25463,f25464,f25465,f25470,f25471,f25472,f25473,f25474,f25475,f25476,f25477,f25478,f25479,f25480,f25482,f25483,f25774,f25485,f25486,f25487,f25489,f25490,f25491,f25492,f25493,f25497,f25498,f25500,f25501,f25502,f25503,f25688,f25778,f25780,f25668,f25666,f25665,f25781,f25782,f25783,f25784,f25785,f25786,f25589,f25591,f25823,f26219,f26222,f26208,f26224,f26225,f26580,f26582,f26583,f26693,f26694,f26710,f26713,f26714,f26715,f26717,f26718,f26725,f26729,f27006,f27007,f27008,f27010,f27014,f27015,f27016,f27017,f27023,f27024,f27025,f27027,f27028,f27029,f27030,f27031,f27032,f27033,f27034,f27039,f27040,f27041,f27042,f27043,f27044,f27045,f27046,f27047,f27048,f27049,f27050,f27051,f27052,f27054,f27057,f27060,f27061,f27062,f27063,f27064,f27065,f27066,f27067,f27068,f27069,f27070,f27071,f27072,f27073,f27074,f27075,f27076,f27077,f27079,f27080,f27081,f27082,f27083,f27087,f27088,f27090,f27091,f27092,f27093,f27098,f27615,f28251,f28398,f28399,f28415,f28418,f28419,f28420,f28422,f28423,f28430,f28434,f29230,f29234,f20605,f29500,f29499,f29498,f29541,f29547,f29569,f29571,f29580,f5868,f30017,f30019,f30049,f30047,f30245,f30328,f30329,f30260,f30261,f30332,f30334,f30336,f30338,f30266,f30340,f30345,f30422,f30501,f30502,f30443,f30511,f30512,f30513,f31337,f31339,f31354,f31355,f31358,f31361,f31365,f31367,f31382,f31383,f31386,f31389,f31872,f31855,f31854,f31853,f31852,f31443,f31458,f31459,f31462,f31471,f31486,f31487,f31490,f31533,f32034,f31539,f31540,f31541,f31542,f31548,f31549,f31550,f31552,f31553,f31554,f31555,f31556,f31557,f31558,f31559,f31564,f31565,f31566,f31567,f31568,f31569,f31570,f31571,f31572,f31574,f31575,f31576,f31577,f31579,f31585,f31586,f31587,f31588,f31589,f31590,f31591,f31592,f31593,f31594,f31595,f31597,f31598,f32037,f31600,f31601,f31602,f31604,f31605,f31606,f31607,f31608,f32039,f31617,f31618,f31620,f31621,f31622,f31623,f31830,f31810,f31808,f31807,f31806,f31804,f31725,f32081,f32345,f32343,f32781,f32782,f32783])).
fof(f32782,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl28 | $spl40 | $spl51)),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f1706,f1829,f1832,f2062,f2063,f2066,f2124,f2127,f2135,f2138,f2248,f2340,f2343,f2652,f2654,f2655,f2679,f2684,f2687,f2690,f2693,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2724,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f3053,f3054,f3826,f3827,f3840,f3846,f4093,f4094,f4097,f4111,f4255,f4259,f4261,f4262,f4301,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4982,f4983,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5192,f5198,f5668,f5669,f5717,f5718,f5719,f5722,f5862,f5863,f5899,f5911,f5869,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8922,f9224,f9219,f8961,f8974,f8975,f9011,f9021,f9037,f9046,f9051,f9210,f9286,f9288,f9289,f9290,f9291,f9292,f9293,f9294,f9329,f9330,f9181,f9139,f2388,f3254,f2399,f3265,f718,f474,f2449,f3315,f9278,f9269,f9202,f9138,f9044,f9043,f9039,f9038,f9036,f9035,f9034,f9019,f9018,f8992,f8991,f8976,f734,f483,f86,f85,f815,f2137,f1705,f1014,f5746,f2502,f1971,f1660,f5731,f2491,f1962,f1652,f933,f2350,f1838,f1138,f5459,f4970,f4035,f3540,f3539,f3538,f3537,f3536,f5453,f4941,f4031,f3151,f3150,f3149,f3148,f3147,f4396,f4979,f4254,f4978,f5482,f5067,f5066,f5065,f5064,f5063,f4977,f4253,f5399,f5342,f4984,f4263,f3995,f3961,f3043,f3041,f3039,f3037,f3035,f2218,f1761,f1054,f844,f619,f5462,f5160,f4037,f3822,f3821,f3820,f3819,f2678,f3535,f3146,f3824,f3825,f7425,f9017,f4400,f4207,f3823,f646,f3828,f8985,f8997,f9005,f2726,f2970,f8996,f9006,f2737,f2981,f5444,f5126,f4025,f3049,f3048,f3047,f3046,f2657,f3044,f8271,f2567,f2999,f3051,f3052,f7417,f8998,f9007,f4390,f4198,f3050,f519,f1167,f590,f3055,f3542,f3543,f7424,f9016,f3153,f3154,f7420,f8995,f9010,f5071,f5072,f7432,f9027,f602,f2292,f7402,f8983,f8999,f5651,f5650,f5649,f5648,f5647,f5644,f5642,f5516,f9030,f4395,f5169,f4399,f4393,f5070,f4375,f4203,f5168,f4206,f4201,f5069,f4183,f9028,f5531,f9029,f5546,f5662,f5661,f5660,f5659,f5658,f5655,f5167,f2696,f3541,f3152,f5666,f5667,f7436,f9031,f5665,f5664,f5068,f924,f5560,f5670,f607,f623,f651,f656,f5396,f5346,f5179,f3993,f3964,f3182,f3180,f3178,f3176,f3174,f2709,f2217,f1760,f1053,f843,f618,f645,f3545,f8984,f2578,f3111,f8994,f9008,f2589,f3122,f8993,f9009,f516,f1175,f593,f3183,f603,f2291,f7401,f8982,f9000,f5354,f5118,f5117,f5116,f5115,f5114,f5112,f5003,f9026,f4374,f4182,f9024,f5017,f9025,f5031,f923,f5044,f5119,f103,f525,f605,f102,f9140,f2917,f807,f805,f809,f804,f92,f91,f80,f13013,f13010,f2914,f2851,f13058,f13108,f13109,f13111,f13281,f17715,f17877,f17878,f17886,f18590,f19267,f19272,f19301,f19306,f19309,f19312,f19315,f19318,f19322,f19325,f19328,f19331,f19334,f19337,f19341,f19344,f19347,f19350,f19353,f19356,f19360,f19363,f19381,f19384,f19386,f9012,f9057,f9053,f9052,f9048,f9047,f9042,f9041,f9033,f9032,f9015,f9014,f19400,f19402,f9013,f9056,f21903,f21747,f21745,f21743,f21741,f21739,f21737,f21735,f21733,f21731,f21729,f21727,f21725,f21723,f21721,f21677,f19774,f22010,f19988,f19990,f22105,f22108,f22111,f22127,f22128,f22130,f22135,f20164,f20166,f21095,f21093,f21091,f21087,f21085,f21083,f21081,f21079,f21077,f22172,f22173,f22174,f20254,f20256,f20259,f20261,f21010,f22247,f22252,f22253,f22254,f22255,f22256,f22257,f22258,f22259,f22260,f22261,f20340,f20342,f22281,f22282,f22286,f22397,f20646,f22467,f22469,f22909,f22912,f22913,f22914,f22915,f22916,f22918,f22919,f22920,f22921,f22922,f22483,f22923,f22905,f22888,f22887,f22519,f22533,f22537,f22970,f22973,f22974,f22975,f22976,f22977,f22979,f22980,f22981,f22982,f22983,f22551,f22578,f22984,f22985,f22986,f22582,f22987,f22988,f22989,f22587,f22588,f22990,f22991,f22591,f22992,f22602,f22603,f22604,f22605,f22611,f22612,f22613,f22614,f22615,f22616,f22617,f22618,f22619,f22620,f22621,f22622,f22627,f22628,f22629,f22630,f22631,f22632,f22633,f22634,f22635,f22636,f22637,f22639,f22642,f22643,f22644,f22645,f22646,f22647,f22648,f22649,f22650,f22651,f22652,f22653,f22654,f22655,f22656,f22657,f22658,f22664,f22859,f22996,f22998,f22839,f22837,f22999,f23000,f23001,f23002,f23003,f23004,f22739,f22741,f23053,f23055,f23057,f23060,f23647,f23649,f23663,f23683,f23685,f23699,f23701,f23703,f23717,f23782,f23995,f24009,f24011,f24013,f24027,f24029,f24031,f24045,f24145,f24149,f24155,f24469,f24471,f24486,f24508,f24509,f24514,f24515,f24516,f24518,f24520,f24535,f24537,f24539,f24554,f24621,f24945,f24959,f24961,f24963,f24979,f24981,f24983,f24999,f25091,f25034,f25035,f25317,f25323,f25337,f25727,f25710,f25709,f25708,f25378,f25421,f25772,f25427,f25428,f25429,f25430,f25436,f25437,f25438,f25440,f25441,f25442,f25443,f25444,f25445,f25446,f25447,f25452,f25453,f25454,f25455,f25456,f25457,f25458,f25459,f25460,f25462,f25463,f25464,f25465,f25470,f25471,f25472,f25473,f25474,f25475,f25476,f25477,f25478,f25479,f25480,f25482,f25483,f25774,f25485,f25486,f25487,f25489,f25490,f25491,f25492,f25493,f25497,f25498,f25500,f25501,f25502,f25503,f25688,f25778,f25780,f25668,f25666,f25665,f25781,f25782,f25783,f25784,f25785,f25786,f25589,f25591,f25823,f26219,f26222,f26208,f26224,f26225,f26580,f26582,f26583,f26693,f26694,f26710,f26713,f26714,f26715,f26717,f26718,f26725,f26729,f27006,f27007,f27008,f27010,f27014,f27015,f27016,f27017,f27023,f27024,f27025,f27027,f27028,f27029,f27030,f27031,f27032,f27033,f27034,f27039,f27040,f27041,f27042,f27043,f27044,f27045,f27046,f27047,f27048,f27049,f27050,f27051,f27052,f27054,f27057,f27060,f27061,f27062,f27063,f27064,f27065,f27066,f27067,f27068,f27069,f27070,f27071,f27072,f27073,f27074,f27075,f27076,f27077,f27079,f27080,f27081,f27082,f27083,f27087,f27088,f27090,f27091,f27092,f27093,f27098,f27615,f28251,f28398,f28399,f28415,f28418,f28419,f28420,f28422,f28423,f28430,f28434,f29230,f29234,f20605,f29500,f29499,f29498,f29541,f29547,f29569,f29571,f29580,f5868,f30017,f30019,f30049,f30047,f30245,f30328,f30329,f30260,f30261,f30332,f30334,f30336,f30338,f30266,f30340,f30345,f30422,f30501,f30502,f30443,f30511,f30512,f30513,f31337,f31339,f31354,f31355,f31358,f31361,f31365,f31367,f31382,f31383,f31386,f31389,f31872,f31855,f31854,f31853,f31852,f31443,f31458,f31459,f31462,f31471,f31486,f31487,f31490,f31533,f32034,f31539,f31540,f31541,f31542,f31548,f31549,f31550,f31552,f31553,f31554,f31555,f31556,f31557,f31558,f31559,f31564,f31565,f31566,f31567,f31568,f31569,f31570,f31571,f31572,f31574,f31575,f31576,f31577,f31579,f31585,f31586,f31587,f31588,f31589,f31590,f31591,f31592,f31593,f31594,f31595,f31597,f31598,f32037,f31600,f31601,f31602,f31604,f31605,f31606,f31607,f31608,f32039,f31617,f31618,f31620,f31621,f31622,f31623,f31830,f31810,f31808,f31807,f31806,f31804,f31725,f32081,f32345,f32343,f32781])).
fof(f32774,plain,(
  ( ! [X21,X19,X20] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X21))) | s(fun(fun(bool,bool),bool),X19) = s(fun(fun(bool,bool),bool),X20) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK3(X19,X20,bool,fun(bool,bool)))))) ) | $spl48),
  inference(superposition,[],[f809,f5866])).
fof(f32773,plain,(
  ( ! [X17,X18,X16] : (s(bool,'T_0') = s(bool,g(s(fun(bool,bool),X18))) | s(fun(fun(bool,bool),bool),X16) = s(fun(fun(bool,bool),bool),X17) | s(bool,'T_0') = s(bool,f(s(fun(bool,bool),sK3(X16,X17,bool,fun(bool,bool)))))) ) | $spl48),
  inference(superposition,[],[f2917,f5866])).
fof(f32772,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'T_0') != s(bool,f(s(fun(bool,bool),X14))) | s(fun(fun(bool,bool),bool),X12) = s(fun(fun(bool,bool),bool),X13) | s(bool,X15) = s(bool,g(s(fun(bool,bool),sK3(X12,X13,bool,fun(bool,bool))))) | s(bool,'T_0') = s(bool,X15)) ) | $spl48),
  inference(superposition,[],[f805,f5866])).
fof(f32766,plain,(
  ( ! [X21,X19,X20] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X21))) | s(fun(fun(bool,bool),bool),X19) = s(fun(fun(bool,bool),bool),X20) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK3(X19,X20,bool,fun(bool,bool)))))) ) | $spl48),
  inference(superposition,[],[f809,f5866])).
fof(f32765,plain,(
  ( ! [X17,X18,X16] : (s(bool,'T_0') = s(bool,g(s(fun(bool,bool),X18))) | s(fun(fun(bool,bool),bool),X16) = s(fun(fun(bool,bool),bool),X17) | s(bool,'T_0') = s(bool,f(s(fun(bool,bool),sK3(X16,X17,bool,fun(bool,bool)))))) ) | $spl48),
  inference(superposition,[],[f2917,f5866])).
fof(f32764,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'T_0') != s(bool,f(s(fun(bool,bool),X14))) | s(fun(fun(bool,bool),bool),X12) = s(fun(fun(bool,bool),bool),X13) | s(bool,X15) = s(bool,g(s(fun(bool,bool),sK3(X12,X13,bool,fun(bool,bool))))) | s(bool,'T_0') = s(bool,X15)) ) | $spl48),
  inference(superposition,[],[f805,f5866])).
fof(f31945,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1)))))) ) | $spl326),
  inference(cnf_transformation,[],[f31945_D])).
fof(f31945_D,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1)))))) ) <=> ~$spl326),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl326])])).
fof(f1211,plain,(
  ( ! [X17] : (p(s(bool,X17))) ) | $spl2),
  inference(cnf_transformation,[],[f1211_D])).
fof(f1211_D,plain,(
  ( ! [X17] : (p(s(bool,X17))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f32081,plain,(
  ( ! [X39,X38,X40] : (p(s(bool,X40)) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38)))))) )),
  inference(subsumption_resolution,[],[f31738,f87])).
fof(f31738,plain,(
  ( ! [X39,X38,X40] : (p(s(bool,X40)) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X38),s('type.num.num',X39))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X39),s('type.num.num',X38))))) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f92,f2449])).
fof(f32054,plain,(
  ( ! [X156,X157,X155] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X156),s('type.num.num',X157))))) | s(bool,'T_0') = s(bool,X155) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num',X156)))))) ) | ($spl7 | $spl33 | $spl121)),
  inference(forward_demodulation,[],[f31796,f19424])).
fof(f19424,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | ($spl7 | $spl33 | $spl121)),
  inference(forward_demodulation,[],[f19414,f17888])).
fof(f19414,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl7 | $spl33 | $spl121)),
  inference(unit_resulting_resolution,[],[f11452,f2681,f314])).
fof(f31796,plain,(
  ( ! [X156,X157,X155] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X156),s('type.num.num',X157))))) | s(bool,'T_0') = s(bool,X155) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num',X156)))))) ) | $spl7),
  inference(duplicate_literal_removal,[],[f31678])).
fof(f31678,plain,(
  ( ! [X156,X157,X155] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X156),s('type.num.num',X157))))) | s(bool,'T_0') = s(bool,X155) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X157),s('type.num.num',X156))))) | s(bool,'T_0') = s(bool,X155)) ) | $spl7),
  inference(superposition,[],[f19428,f2449])).
fof(f19428,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl7),
  inference(subsumption_resolution,[],[f19420,f78])).
fof(f19420,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl7),
  inference(superposition,[],[f2681,f154])).
fof(f31948,plain,(
  ( ! [X80,X78,X79,X77] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X77))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X79))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X80),s('type.num.num',X77))),s('type.num.num',X77))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',X78)))))) ) | $spl332),
  inference(cnf_transformation,[],[f31948_D])).
fof(f31948_D,plain,(
  ( ! [X80,X78,X79,X77] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X77))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X79))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X80),s('type.num.num',X77))),s('type.num.num',X77))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',X78)))))) ) <=> ~$spl332),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl332])])).
fof(f31806,plain,(
  ( ! [X125,X123,X126,X124,X122] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X123),s('type.num.num',X124))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X126),s('type.num.num',X125))),s('type.num.num',X125))) | s(bool,'T_0') = s(bool,X122) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X124),s('type.num.num',X123)))))) )),
  inference(duplicate_literal_removal,[],[f31669])).
fof(f31669,plain,(
  ( ! [X125,X123,X126,X124,X122] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X123),s('type.num.num',X124))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X126),s('type.num.num',X125))),s('type.num.num',X125))) | s(bool,'T_0') = s(bool,X122) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X124),s('type.num.num',X123))))) | s(bool,'T_0') = s(bool,X122)) )),
  inference(superposition,[],[f734,f2449])).
fof(f31947,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',X73))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',X75))))) | s('type.num.num',X73) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',sK2(X73,X72)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X74)))))) ) | $spl330),
  inference(cnf_transformation,[],[f31947_D])).
fof(f31947_D,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',X73))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',X75))))) | s('type.num.num',X73) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',sK2(X73,X72)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X74)))))) ) <=> ~$spl330),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl330])])).
fof(f31807,plain,(
  ( ! [X121,X118,X120,X119,X117] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X120),s('type.num.num',X121))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X118),s('type.num.num',X119))))) | s('type.num.num',X121) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X120),s('type.num.num',sK2(X121,X120)))) | s(bool,'T_0') = s(bool,X117) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X119),s('type.num.num',X118)))))) )),
  inference(duplicate_literal_removal,[],[f31668])).
fof(f31668,plain,(
  ( ! [X121,X118,X120,X119,X117] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X120),s('type.num.num',X121))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X118),s('type.num.num',X119))))) | s('type.num.num',X121) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X120),s('type.num.num',sK2(X121,X120)))) | s(bool,'T_0') = s(bool,X117) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X119),s('type.num.num',X118))))) | s(bool,'T_0') = s(bool,X117)) )),
  inference(superposition,[],[f605,f2449])).
fof(f31946,plain,(
  ( ! [X70,X68,X69] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num',X70))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X69)))))) ) | $spl328),
  inference(cnf_transformation,[],[f31946_D])).
fof(f31946_D,plain,(
  ( ! [X70,X68,X69] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num',X70))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X69)))))) ) <=> ~$spl328),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl328])])).
fof(f31808,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',X115))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))) | s(bool,'T_0') = s(bool,X113) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X115),s('type.num.num',X114)))))) )),
  inference(duplicate_literal_removal,[],[f31667])).
fof(f31667,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',X115))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))) | s(bool,'T_0') = s(bool,X113) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X115),s('type.num.num',X114))))) | s(bool,'T_0') = s(bool,X113)) )),
  inference(superposition,[],[f483,f2449])).
fof(f31830,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1)))))) )),
  inference(duplicate_literal_removal,[],[f31642])).
fof(f31642,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f84,f2449])).
fof(f32036,plain,(
  ( ! [X88,X87,X89,X86] : (s(bool,X88) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num',X87))))))) | s(bool,'T_0') = s(bool,X89) | s(bool,X89) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num',X86))))) | s(bool,'T_0') = s(bool,X88)) ) | $spl336),
  inference(cnf_transformation,[],[f32036_D])).
fof(f32036_D,plain,(
  ( ! [X88,X87,X89,X86] : (s(bool,X88) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num',X87))))))) | s(bool,'T_0') = s(bool,X89) | s(bool,X89) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num',X86))))) | s(bool,'T_0') = s(bool,X88)) ) <=> ~$spl336),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl336])])).
fof(f25746,plain,(
  ( ! [X53] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X53),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) ) | $spl272),
  inference(cnf_transformation,[],[f25746_D])).
fof(f25746_D,plain,(
  ( ! [X53] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X53),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl272])])).
fof(f31579,plain,(
  ( ! [X229,X227,X230,X228,X226] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X228),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) | s(bool,X229) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X226),s('type.num.num',X227))))))) | s(bool,'T_0') = s(bool,X229) | s(bool,X230) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X227),s('type.num.num',X226))))) | s(bool,'T_0') = s(bool,X230)) )),
  inference(superposition,[],[f734,f2449])).
fof(f9241,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | $spl110),
  inference(cnf_transformation,[],[f9241_D])).
fof(f9241_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f31550,plain,(
  ( ! [X88,X87,X89,X86] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,X88) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X86),s('type.num.num',X87))))))) | s(bool,'T_0') = s(bool,X88) | s(bool,X89) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num',X86))))) | s(bool,'T_0') = s(bool,X89)) )),
  inference(superposition,[],[f483,f2449])).
fof(f31950,plain,(
  ( ! [X88,X87,X86] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num',X88))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num',X87))))) | s(bool,'T_0') = s(bool,X86)) ) | ($spl7 | $spl33 | $spl121)),
  inference(forward_demodulation,[],[f31851,f19424])).
fof(f31851,plain,(
  ( ! [X88,X87,X86] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num',X88))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num',X87))))) | s(bool,'T_0') = s(bool,X86)) ) | $spl7),
  inference(duplicate_literal_removal,[],[f31423])).
fof(f31423,plain,(
  ( ! [X88,X87,X86] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X87),s('type.num.num',X88))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X88),s('type.num.num',X87))))) | s(bool,'T_0') = s(bool,X86) | s(bool,'T_0') = s(bool,X86)) ) | $spl7),
  inference(superposition,[],[f2449,f19428])).
fof(f31949,plain,(
  ( ! [X85,X83,X84,X82] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X82),s('type.num.num',X83))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num',X85))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num',X82))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X85),s('type.num.num',X84)))))) ) | $spl334),
  inference(cnf_transformation,[],[f31949_D])).
fof(f31949_D,plain,(
  ( ! [X85,X83,X84,X82] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X82),s('type.num.num',X83))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num',X85))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num',X82))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X85),s('type.num.num',X84)))))) ) <=> ~$spl334),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl334])])).
fof(f31852,plain,(
  ( ! [X85,X83,X81,X84,X82] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X82),s('type.num.num',X83))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num',X85))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X85),s('type.num.num',X84))))) | s(bool,'T_0') = s(bool,X81) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num',X82)))))) )),
  inference(duplicate_literal_removal,[],[f31422])).
fof(f31422,plain,(
  ( ! [X85,X83,X81,X84,X82] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X82),s('type.num.num',X83))))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X84),s('type.num.num',X85))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X85),s('type.num.num',X84))))) | s(bool,'T_0') = s(bool,X81) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X83),s('type.num.num',X82))))) | s(bool,'T_0') = s(bool,X81)) )),
  inference(superposition,[],[f2449,f2449])).
fof(f31853,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X77))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X79))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',X78))))) | s(bool,'T_0') = s(bool,X76) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X80),s('type.num.num',X77))),s('type.num.num',X77)))) )),
  inference(duplicate_literal_removal,[],[f31421])).
fof(f31421,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X77))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X79))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',X78))))) | s(bool,'T_0') = s(bool,X76) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X80),s('type.num.num',X77))),s('type.num.num',X77))) | s(bool,'T_0') = s(bool,X76)) )),
  inference(superposition,[],[f2449,f734])).
fof(f31854,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',X73))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',X75))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X74))))) | s(bool,'T_0') = s(bool,X71) | s('type.num.num',X73) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',sK2(X73,X72))))) )),
  inference(duplicate_literal_removal,[],[f31420])).
fof(f31420,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',X73))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',X75))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X75),s('type.num.num',X74))))) | s(bool,'T_0') = s(bool,X71) | s('type.num.num',X73) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',sK2(X73,X72)))) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f2449,f605])).
fof(f31855,plain,(
  ( ! [X70,X68,X69,X67] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num',X70))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X69))))) | s(bool,'T_0') = s(bool,X67) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)))) )),
  inference(duplicate_literal_removal,[],[f31419])).
fof(f31419,plain,(
  ( ! [X70,X68,X69,X67] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num',X70))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X70),s('type.num.num',X69))))) | s(bool,'T_0') = s(bool,X67) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f2449,f483])).
fof(f31872,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f31406])).
fof(f31406,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f2449,f84])).
fof(f30308,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | $spl307),
  inference(cnf_transformation,[],[f30308_D])).
fof(f30308_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) <=> ~$spl307),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl307])])).
fof(f30341,plain,(
  ( ! [X87,X85,X86,X84] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X86),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X87),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X87),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X84),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X85),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X85),'const.bool.the_value_0'))))))))) ) | $spl324),
  inference(cnf_transformation,[],[f30341_D])).
fof(f30341_D,plain,(
  ( ! [X87,X85,X86,X84] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X86),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X87),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X87),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X84),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X85),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X85),'const.bool.the_value_0'))))))))) ) <=> ~$spl324),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl324])])).
fof(f30340,plain,(
  ( ! [X87,X85,X86,X84] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X86),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X87),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X87),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X84),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X85),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X85),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f30268,f733])).
fof(f30268,plain,(
  ( ! [X87,X85,X86,X84] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X84),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X85),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X85),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X86),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X87),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X87),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X84),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X85),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X85),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f2291,f733])).
fof(f30339,plain,(
  ( ! [X72,X71,X73] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X72),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X73),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X73),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X71),'const.bool.the_value_0'))))))))) ) | $spl322),
  inference(cnf_transformation,[],[f30339_D])).
fof(f30339_D,plain,(
  ( ! [X72,X71,X73] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X72),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X73),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X73),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X71),'const.bool.the_value_0'))))))))) ) <=> ~$spl322),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl322])])).
fof(f30338,plain,(
  ( ! [X72,X71,X73] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X72),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X73),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X73),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X71),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f30265,f482])).
fof(f30265,plain,(
  ( ! [X72,X71,X73] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X71),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X72),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X73),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X73),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X71),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f2291,f482])).
fof(f30337,plain,(
  ( ! [X70,X68,X69,X67] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X69),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X70),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X70),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X68),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X68),'const.bool.the_value_0'))))))))) ) | $spl320),
  inference(cnf_transformation,[],[f30337_D])).
fof(f30337_D,plain,(
  ( ! [X70,X68,X69,X67] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X69),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X70),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X70),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X68),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X68),'const.bool.the_value_0'))))))))) ) <=> ~$spl320),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl320])])).
fof(f30336,plain,(
  ( ! [X70,X68,X69,X67] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X69),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X70),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X70),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X68),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X68),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f30264,f4301])).
fof(f30264,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X68),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X68),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X69),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X70),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X70),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X68),'const.bool.the_value_0'))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X68),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f2291,f4301])).
fof(f30335,plain,(
  ( ! [X66,X64,X65,X63] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X65),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X66),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X66),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X64))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X64))))))))) ) | $spl318),
  inference(cnf_transformation,[],[f30335_D])).
fof(f30335_D,plain,(
  ( ! [X66,X64,X65,X63] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X65),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X66),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X66),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X64))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X64))))))))) ) <=> ~$spl318),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl318])])).
fof(f30334,plain,(
  ( ! [X66,X64,X65,X63] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X65),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X66),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X66),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X64))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X64)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f30263,f2062])).
fof(f30263,plain,(
  ( ! [X66,X64,X65,X63] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X64))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X64))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X65),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X66),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X66),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X64))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X64))))))))) )),
  inference(superposition,[],[f2291,f2062])).
fof(f30333,plain,(
  ( ! [X61,X62,X60] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X61),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X62),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X62),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X60))))))))) ) | $spl316),
  inference(cnf_transformation,[],[f30333_D])).
fof(f30333_D,plain,(
  ( ! [X61,X62,X60] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X61),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X62),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X62),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X60))))))))) ) <=> ~$spl316),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl316])])).
fof(f30332,plain,(
  ( ! [X61,X62,X60] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X61),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X62),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X62),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X60)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f30262,f2063])).
fof(f30262,plain,(
  ( ! [X61,X62,X60] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X60))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X61),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X62),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X62),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X60))))))))) )),
  inference(superposition,[],[f2291,f2063])).
fof(f30331,plain,(
  ( ! [X59,X57,X58,X56,X55] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X56))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X58),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X58),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X56)))))) | s(bool,'T_0') = s(bool,X59) | s(bool,X59) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56)))) ) | $spl314),
  inference(cnf_transformation,[],[f30331_D])).
fof(f30331_D,plain,(
  ( ! [X59,X57,X58,X56,X55] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X56))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X58),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X58),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X56)))))) | s(bool,'T_0') = s(bool,X59) | s(bool,X59) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56)))) ) <=> ~$spl314),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl314])])).
fof(f30261,plain,(
  ( ! [X59,X57,X58,X56,X55] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X56))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X57),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X58),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X58),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num',X56))),s('type.num.num',X56)))))) | s(bool,X59) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X56))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f2291,f734])).
fof(f30330,plain,(
  ( ! [X54,X52,X53,X51] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X52),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X53),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X53),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51)))))) | s(bool,'T_0') = s(bool,X54) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51)))) ) | $spl312),
  inference(cnf_transformation,[],[f30330_D])).
fof(f30330_D,plain,(
  ( ! [X54,X52,X53,X51] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X52),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X53),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X53),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51)))))) | s(bool,'T_0') = s(bool,X54) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51)))) ) <=> ~$spl312),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl312])])).
fof(f30260,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X52),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X53),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X53),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51)))))) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f2291,f483])).
fof(f30326,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK1)),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))))))))) ) | $spl310),
  inference(cnf_transformation,[],[f30326_D])).
fof(f30326_D,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK1)),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))))))))) ) <=> ~$spl310),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl310])])).
fof(f30325,plain,(
  ( ! [X37,X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK1)),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1)))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))))) ) | $spl42),
  inference(forward_demodulation,[],[f30256,f25209])).
fof(f25209,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK1)),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))))) | $spl42),
  inference(subsumption_resolution,[],[f25141,f78])).
fof(f25141,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK1)),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))))) | $spl42),
  inference(superposition,[],[f102,f24643])).
fof(f24643,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.num.|48|_0',sK1)),s('type.num.num','const.num.|48|_0'))) | $spl42),
  inference(unit_resulting_resolution,[],[f22402,f1213])).
fof(f22402,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.num.|48|_0',sK1)))) | $spl42),
  inference(unit_resulting_resolution,[],[f4256,f102])).
fof(f4256,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | $spl42),
  inference(cnf_transformation,[],[f4256_D])).
fof(f4256_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f30256,plain,(
  ( ! [X37,X36] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK1)),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK1)),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))))))))) ) | $spl42),
  inference(superposition,[],[f2291,f25209])).
fof(f30309,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X25),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X25),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.num.|48|_0',sK1)))))))) ) | $spl308),
  inference(cnf_transformation,[],[f30309_D])).
fof(f30309_D,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X25),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X25),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.num.|48|_0',sK1)))))))) ) <=> ~$spl308),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl308])])).
fof(f30306,plain,(
  ( ! [X24,X25] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X25),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X25),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.num.|48|_0',sK1))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))))) ) | $spl42),
  inference(forward_demodulation,[],[f30250,f22402])).
fof(f30250,plain,(
  ( ! [X24,X25] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.num.|48|_0',sK1)))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X24),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X25),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X25),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.num.|48|_0',sK1)))))))) ) | $spl42),
  inference(superposition,[],[f2291,f22402])).
fof(f29605,plain,(
  ( ! [X17,X15,X16] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X17))) | s(fun(fun(bool,bool),bool),X15) = s(fun(fun(bool,bool),bool),X16) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK3(X15,X16,bool,fun(bool,bool)))))) ) | ($spl28 | $spl41 | $spl50)),
  inference(superposition,[],[f809,f29260])).
fof(f29260,plain,(
  ( ! [X128,X129] : (s(fun(bool,bool),X128) = s(fun(bool,bool),X129)) ) | ($spl28 | $spl41 | $spl50)),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f1706,f1829,f1832,f2062,f2063,f2066,f2124,f2127,f2135,f2138,f2248,f2340,f2343,f2652,f2654,f2655,f2679,f2684,f2687,f2690,f2693,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2724,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2915,f3053,f3054,f3229,f3319,f3354,f3750,f3826,f3827,f3840,f3846,f4093,f4094,f4097,f4111,f4255,f4259,f4261,f4262,f4301,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4982,f4983,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5192,f5198,f5668,f5669,f5717,f5718,f5719,f5722,f5862,f5863,f5865,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f5867,f7160,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8851,f8902,f8922,f9224,f9219,f8961,f8974,f8975,f9011,f9021,f9037,f9046,f9051,f9210,f9286,f9288,f9289,f9290,f9291,f9292,f9293,f9294,f9296,f9329,f9330,f9181,f9139,f2388,f3254,f2399,f3265,f718,f474,f2449,f3315,f9278,f9269,f9202,f9138,f9044,f9043,f9039,f9038,f9036,f9035,f9034,f9019,f9018,f8992,f8991,f8976,f734,f483,f86,f85,f815,f2137,f1705,f1014,f5746,f2502,f1971,f1660,f5731,f2491,f1962,f1652,f933,f2350,f1838,f1138,f5459,f4970,f4035,f3540,f3539,f3538,f3537,f3536,f5453,f4941,f4031,f3151,f3150,f3149,f3148,f3147,f4396,f4979,f4254,f4978,f5482,f5067,f5066,f5065,f5064,f5063,f4977,f4253,f5399,f5342,f4984,f4263,f3995,f3961,f3043,f3041,f3039,f3037,f3035,f2218,f1761,f1054,f844,f619,f5462,f5160,f4037,f3822,f3821,f3820,f3819,f2678,f3535,f3146,f3824,f3825,f7425,f9017,f4400,f4207,f3823,f646,f3828,f8985,f8997,f9005,f2726,f2970,f8996,f9006,f2737,f2981,f5444,f5126,f4025,f3049,f3048,f3047,f3046,f2657,f3044,f8271,f2567,f2999,f3051,f3052,f7417,f8998,f9007,f4390,f4198,f3050,f519,f1167,f590,f3055,f3542,f3543,f7424,f9016,f3153,f3154,f7420,f8995,f9010,f5071,f5072,f7432,f9027,f602,f2292,f7402,f8983,f8999,f5651,f5650,f5649,f5648,f5647,f5644,f5642,f5516,f9030,f4395,f5169,f4399,f4393,f5070,f4375,f4203,f5168,f4206,f4201,f5069,f4183,f9028,f5531,f9029,f5546,f5662,f5661,f5660,f5659,f5658,f5655,f5167,f2696,f3541,f3152,f5666,f5667,f7436,f9031,f5665,f5664,f5068,f924,f5560,f5670,f607,f623,f651,f656,f5396,f5346,f5179,f3993,f3964,f3182,f3180,f3178,f3176,f3174,f2709,f2217,f1760,f1053,f843,f618,f645,f3545,f8984,f2578,f3111,f8994,f9008,f2589,f3122,f8993,f9009,f516,f1175,f593,f3183,f603,f2291,f7401,f8982,f9000,f5354,f5118,f5117,f5116,f5115,f5114,f5112,f5003,f9026,f4374,f4182,f9024,f5017,f9025,f5031,f923,f5044,f5119,f103,f525,f605,f102,f9140,f2917,f807,f805,f3230,f809,f804,f92,f91,f80,f13013,f13010,f2851,f17715,f17877,f17878,f18590,f19267,f19272,f19301,f19306,f19309,f19312,f19315,f19318,f19322,f19325,f19328,f19331,f19334,f19337,f19341,f19344,f19347,f19350,f19353,f19356,f19360,f19363,f19381,f19384,f19386,f9012,f9057,f9053,f9052,f9048,f9047,f9042,f9041,f9033,f9032,f9015,f9014,f19400,f19402,f9013,f9056,f21903,f21749,f21747,f21745,f21743,f21741,f21739,f21737,f21735,f21733,f21731,f21729,f21727,f21725,f21723,f21721,f21677,f19774,f19988,f19990,f22105,f22108,f22111,f22127,f22128,f22130,f22135,f20164,f20166,f21095,f21093,f21091,f21087,f21085,f21083,f21081,f21079,f21077,f22172,f22173,f22174,f20254,f20256,f20260,f21010,f22247,f22252,f22253,f22254,f22255,f22256,f22257,f22258,f22259,f22260,f22261,f20340,f20342,f22281,f22282,f22286,f22397,f20646,f22467,f22469,f22909,f22912,f22913,f22914,f22915,f22916,f22918,f22919,f22920,f22921,f22922,f22483,f22923,f22905,f22888,f22887,f22519,f22533,f22537,f22970,f22973,f22974,f22975,f22976,f22977,f22979,f22980,f22981,f22982,f22983,f22551,f22578,f22984,f22985,f22986,f22582,f22987,f22988,f22989,f22587,f22588,f22990,f22991,f22591,f22992,f22602,f22603,f22604,f22605,f22611,f22612,f22613,f22614,f22615,f22616,f22617,f22618,f22619,f22620,f22621,f22622,f22627,f22628,f22629,f22630,f22631,f22632,f22633,f22634,f22635,f22636,f22637,f22639,f22642,f22643,f22644,f22645,f22646,f22647,f22648,f22649,f22650,f22651,f22652,f22653,f22654,f22655,f22656,f22657,f22658,f22664,f22859,f22996,f22998,f22839,f22837,f22999,f23000,f23001,f23002,f23003,f23004,f22739,f22741,f23053,f23055,f23057,f23060,f23647,f23649,f23663,f23683,f23685,f23699,f23701,f23703,f23717,f23782,f23995,f24009,f24011,f24013,f24027,f24029,f24031,f24045,f24145,f24149,f24155,f24469,f24471,f24486,f24508,f24509,f24514,f24515,f24516,f24518,f24520,f24535,f24537,f24539,f24554,f24621,f24945,f24959,f24961,f24963,f24979,f24981,f24983,f24999,f25091,f25034,f25035,f25317,f25323,f25337,f25727,f25710,f25709,f25708,f25378,f25421,f25772,f25427,f25428,f25429,f25430,f25436,f25437,f25438,f25440,f25441,f25442,f25443,f25444,f25445,f25446,f25447,f25452,f25453,f25454,f25455,f25456,f25457,f25458,f25459,f25460,f25462,f25463,f25464,f25465,f25470,f25471,f25472,f25473,f25474,f25475,f25476,f25477,f25478,f25479,f25480,f25482,f25483,f25774,f25485,f25486,f25487,f25489,f25490,f25491,f25492,f25493,f25497,f25498,f25500,f25501,f25502,f25503,f25688,f25778,f25780,f25668,f25666,f25665,f25781,f25782,f25783,f25784,f25785,f25786,f25589,f25591,f25823,f26219,f26222,f26208,f26224,f26225,f26580,f26582,f26583,f26693,f26694,f26710,f26713,f26714,f26715,f26717,f26718,f26725,f26729,f27006,f27007,f27008,f27010,f27014,f27015,f27016,f27017,f27023,f27024,f27025,f27027,f27028,f27029,f27030,f27031,f27032,f27033,f27034,f27039,f27040,f27041,f27042,f27043,f27044,f27045,f27046,f27047,f27048,f27049,f27050,f27051,f27052,f27054,f27057,f27060,f27061,f27062,f27063,f27064,f27065,f27066,f27067,f27068,f27069,f27070,f27071,f27072,f27073,f27074,f27075,f27076,f27077,f27079,f27080,f27081,f27082,f27083,f27087,f27088,f27090,f27091,f27092,f27093,f27098,f27615,f28251,f28398,f28399,f28415,f28418,f28419,f28420,f28422,f28423,f28430,f28434,f29230,f29231,f29234,f29235,f29239,f29244,f29247,f29248,f29255,f29256,f29257,f29258,f20605,f29259,f17887])).
fof(f17887,plain,(
  ( ! [X128,X129] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X128) = s(fun(bool,bool),X129)) ) | ($spl28 | $spl50)),
  inference(forward_demodulation,[],[f17865,f5867])).
fof(f17865,plain,(
  ( ! [X128,X129] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X128) = s(fun(bool,bool),X129)) ) | $spl28),
  inference(duplicate_literal_removal,[],[f17864])).
fof(f17864,plain,(
  ( ! [X128,X129] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X128) = s(fun(bool,bool),X129) | s(fun(bool,bool),X128) = s(fun(bool,bool),X129)) ) | $spl28),
  inference(superposition,[],[f104,f2851])).
fof(f29259,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl41),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f1706,f1829,f1832,f2062,f2063,f2066,f2124,f2127,f2135,f2138,f2248,f2340,f2343,f2652,f2654,f2655,f2679,f2684,f2687,f2690,f2693,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2724,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2915,f3053,f3054,f3229,f3319,f3354,f3750,f3826,f3827,f3840,f3846,f4093,f4094,f4097,f4111,f4255,f4259,f4261,f4262,f4301,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4982,f4983,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5192,f5198,f5668,f5669,f5717,f5718,f5719,f5722,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8922,f9224,f9219,f8961,f8974,f8975,f9011,f9021,f9037,f9046,f9051,f9210,f9286,f9288,f9289,f9290,f9291,f9292,f9293,f9294,f9296,f9329,f9330,f9181,f9139,f2388,f3254,f2399,f3265,f718,f474,f2449,f3315,f9278,f9269,f9202,f9138,f9044,f9043,f9039,f9038,f9036,f9035,f9034,f9019,f9018,f8992,f8991,f8976,f734,f483,f86,f85,f815,f2137,f1705,f1014,f5746,f2502,f1971,f1660,f5731,f2491,f1962,f1652,f933,f2350,f1838,f1138,f5459,f4970,f4035,f3540,f3539,f3538,f3537,f3536,f5453,f4941,f4031,f3151,f3150,f3149,f3148,f3147,f4396,f4979,f4254,f4978,f5482,f5067,f5066,f5065,f5064,f5063,f4977,f4253,f5399,f5342,f4984,f4263,f3995,f3961,f3043,f3041,f3039,f3037,f3035,f2218,f1761,f1054,f844,f619,f5462,f5160,f4037,f3822,f3821,f3820,f3819,f2678,f3535,f3146,f3824,f3825,f7425,f9017,f4400,f4207,f3823,f646,f3828,f8985,f8997,f9005,f2726,f2970,f8996,f9006,f2737,f2981,f5444,f5126,f4025,f3049,f3048,f3047,f3046,f2657,f3044,f8271,f2567,f2999,f3051,f3052,f7417,f8998,f9007,f4390,f4198,f3050,f519,f1167,f590,f3055,f3542,f3543,f7424,f9016,f3153,f3154,f7420,f8995,f9010,f5071,f5072,f7432,f9027,f602,f2292,f7402,f8983,f8999,f5651,f5650,f5649,f5648,f5647,f5644,f5642,f5516,f9030,f4395,f5169,f4399,f4393,f5070,f4375,f4203,f5168,f4206,f4201,f5069,f4183,f9028,f5531,f9029,f5546,f5662,f5661,f5660,f5659,f5658,f5655,f5167,f2696,f3541,f3152,f5666,f5667,f7436,f9031,f5665,f5664,f5068,f924,f5560,f5670,f607,f623,f651,f656,f5396,f5346,f5179,f3993,f3964,f3182,f3180,f3178,f3176,f3174,f2709,f2217,f1760,f1053,f843,f618,f645,f3545,f8984,f2578,f3111,f8994,f9008,f2589,f3122,f8993,f9009,f516,f1175,f593,f3183,f603,f2291,f7401,f8982,f9000,f5354,f5118,f5117,f5116,f5115,f5114,f5112,f5003,f9026,f4374,f4182,f9024,f5017,f9025,f5031,f923,f5044,f5119,f103,f525,f605,f102,f9140,f2917,f807,f805,f3230,f809,f804,f92,f91,f80,f13013,f13010,f17715,f18590,f19267,f19272,f19301,f19306,f19309,f19312,f19315,f19318,f19322,f19325,f19328,f19331,f19334,f19337,f19341,f19344,f19347,f19350,f19353,f19356,f19360,f19363,f19381,f19384,f19386,f9012,f9057,f9053,f9052,f9048,f9047,f9042,f9041,f9033,f9032,f9015,f9014,f19400,f19402,f9013,f9056,f21903,f21747,f21745,f21743,f21741,f21739,f21737,f21735,f21733,f21731,f21729,f21727,f21725,f21721,f21677,f19774,f19988,f19990,f22105,f22108,f22111,f22127,f22128,f22130,f22135,f20164,f20166,f21095,f21093,f21091,f21087,f21085,f21083,f21081,f21079,f21077,f22172,f22173,f22174,f20254,f20256,f21010,f22247,f22252,f22253,f22254,f22255,f22256,f22257,f22258,f22259,f22260,f22261,f20340,f20342,f22281,f22282,f22286,f22397,f20646,f22467,f22469,f22909,f22912,f22913,f22914,f22915,f22916,f22918,f22919,f22920,f22921,f22922,f22483,f22923,f22905,f22888,f22887,f22519,f22533,f22537,f22970,f22973,f22974,f22975,f22976,f22977,f22979,f22980,f22981,f22982,f22983,f22551,f22578,f22984,f22985,f22986,f22582,f22987,f22988,f22989,f22587,f22588,f22990,f22991,f22591,f22992,f22602,f22603,f22604,f22605,f22611,f22612,f22613,f22614,f22615,f22616,f22617,f22618,f22619,f22620,f22621,f22622,f22627,f22628,f22629,f22630,f22631,f22632,f22633,f22634,f22635,f22636,f22637,f22639,f22642,f22643,f22644,f22645,f22646,f22647,f22648,f22649,f22650,f22651,f22652,f22653,f22654,f22655,f22656,f22657,f22658,f22664,f22859,f22996,f22998,f22839,f22837,f22999,f23000,f23001,f23002,f23003,f23004,f22739,f22741,f23053,f23055,f23057,f23060,f23647,f23649,f23663,f23683,f23685,f23699,f23701,f23703,f23717,f23782,f23995,f24009,f24011,f24013,f24027,f24029,f24031,f24045,f24145,f24149,f24155,f24469,f24471,f24486,f24508,f24509,f24514,f24515,f24516,f24518,f24520,f24535,f24537,f24539,f24554,f24621,f24945,f24959,f24961,f24963,f24979,f24981,f24983,f24999,f25091,f25034,f25035,f25317,f25323,f25337,f25727,f25710,f25709,f25708,f25378,f25421,f25772,f25427,f25428,f25429,f25430,f25436,f25437,f25438,f25440,f25441,f25442,f25443,f25444,f25445,f25446,f25447,f25452,f25453,f25454,f25455,f25456,f25457,f25458,f25459,f25460,f25462,f25463,f25464,f25465,f25470,f25471,f25472,f25473,f25474,f25475,f25476,f25477,f25478,f25479,f25480,f25482,f25483,f25774,f25485,f25486,f25487,f25489,f25490,f25491,f25492,f25493,f25497,f25498,f25500,f25501,f25502,f25503,f25688,f25778,f25780,f25668,f25666,f25665,f25781,f25782,f25783,f25784,f25785,f25786,f25589,f25591,f25823,f26208,f26224,f26225,f26580,f26582,f26583,f26693,f26694,f26710,f26713,f26714,f26715,f26717,f26718,f26725,f26729,f27006,f27007,f27008,f27010,f27014,f27015,f27016,f27017,f27023,f27024,f27025,f27027,f27028,f27029,f27030,f27031,f27032,f27033,f27034,f27039,f27040,f27041,f27042,f27043,f27044,f27045,f27046,f27047,f27048,f27049,f27050,f27051,f27052,f27054,f27057,f27060,f27061,f27062,f27063,f27064,f27065,f27066,f27067,f27068,f27069,f27070,f27071,f27072,f27073,f27074,f27075,f27076,f27077,f27079,f27080,f27081,f27082,f27083,f27087,f27088,f27090,f27091,f27092,f27093,f27098,f27615,f28251,f28398,f28399,f28415,f28418,f28419,f28420,f28422,f28423,f28430,f28434,f20605])).
fof(f29257,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2)) ) | ($spl28 | $spl50)),
  inference(subsumption_resolution,[],[f27631,f17878])).
fof(f27631,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,X2) = s(bool,sK3(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,X2)) ) | $spl50),
  inference(superposition,[],[f800,f5867])).
fof(f29255,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl28 | $spl50)),
  inference(subsumption_resolution,[],[f29254,f8902])).
fof(f29254,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,X0) = s(bool,g(s(bool,'T_0')))) ) | $spl28),
  inference(condensation,[],[f29253])).
fof(f29253,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,'T_0') = s(bool,X8) | s(bool,X9) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X9)) ) | $spl28),
  inference(subsumption_resolution,[],[f27633,f17878])).
fof(f27633,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,X8) = s(bool,sK3(X6,X7,bool,bool)) | s(bool,'T_0') = s(bool,X8) | s(bool,X9) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f800,f154])).
fof(f29247,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl28 | $spl50)),
  inference(subsumption_resolution,[],[f29246,f8902])).
fof(f29246,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,X0) = s(bool,g(s(bool,'T_0')))) ) | $spl28),
  inference(condensation,[],[f29245])).
fof(f29245,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X18) = s(fun(bool,bool),X19) | s(bool,'T_0') = s(bool,X20) | s(bool,X21) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X21)) ) | $spl28),
  inference(subsumption_resolution,[],[f27636,f17878])).
fof(f27636,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X18) = s(fun(bool,bool),X19) | s(bool,X20) = s(bool,sK3(X18,X19,bool,bool)) | s(bool,'T_0') = s(bool,X20) | s(bool,X21) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f800,f154])).
fof(f20260,plain,(
  ( ! [X24,X23,X25,X22] : (s(bool,X22) = s(bool,g(s(bool,X22))) | s(bool,X23) = s(bool,X24) | s(bool,X22) = s(bool,X24) | s(bool,X23) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) ) | $spl50),
  inference(superposition,[],[f5867,f262])).
fof(f21749,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,g(s(bool,'T_0'))) | s(bool,X0) = s(bool,X1)) ) | $spl50),
  inference(condensation,[],[f21748])).
fof(f21748,plain,(
  ( ! [X121,X120,X119] : (s(bool,'T_0') = s(bool,X119) | s(bool,X120) = s(bool,g(s(bool,'T_0'))) | s(bool,X120) = s(bool,X121) | s(bool,'T_0') = s(bool,X121)) ) | $spl50),
  inference(duplicate_literal_removal,[],[f19723])).
fof(f19723,plain,(
  ( ! [X121,X120,X119] : (s(bool,'T_0') = s(bool,X119) | s(bool,X120) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X119) | s(bool,X120) = s(bool,X121) | s(bool,'T_0') = s(bool,X121)) ) | $spl50),
  inference(superposition,[],[f262,f5867])).
fof(f3230,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl41),
  inference(superposition,[],[f2915,f154])).
fof(f8902,plain,(
  ( ! [X3] : (s(bool,X3) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl50),
  inference(subsumption_resolution,[],[f8868,f78])).
fof(f8868,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s(bool,X3) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl50),
  inference(superposition,[],[f157,f5867])).
fof(f8851,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl50),
  inference(superposition,[],[f5867,f154])).
fof(f5867,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl50),
  inference(cnf_transformation,[],[f5867_D])).
fof(f5867_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f3750,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl41),
  inference(superposition,[],[f3354,f154])).
fof(f3354,plain,(
  ( ! [X3] : (s(bool,X3) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl41),
  inference(subsumption_resolution,[],[f3336,f78])).
fof(f3336,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s(bool,X3) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl41),
  inference(superposition,[],[f157,f3229])).
fof(f3319,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl41),
  inference(superposition,[],[f3229,f154])).
fof(f3229,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl41),
  inference(unit_resulting_resolution,[],[f133,f2915,f154])).
fof(f29604,plain,(
  ( ! [X14,X12,X13] : (s(bool,'T_0') = s(bool,g(s(fun(bool,bool),X14))) | s(fun(fun(bool,bool),bool),X12) = s(fun(fun(bool,bool),bool),X13) | s(bool,'T_0') = s(bool,f(s(fun(bool,bool),sK3(X12,X13,bool,fun(bool,bool)))))) ) | ($spl28 | $spl41 | $spl50)),
  inference(superposition,[],[f2917,f29260])).
fof(f29598,plain,(
  ( ! [X17,X15,X16] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X17))) | s(fun(fun(bool,bool),bool),X15) = s(fun(fun(bool,bool),bool),X16) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK3(X15,X16,bool,fun(bool,bool)))))) ) | ($spl28 | $spl41 | $spl50)),
  inference(superposition,[],[f809,f29260])).
fof(f29597,plain,(
  ( ! [X14,X12,X13] : (s(bool,'T_0') = s(bool,g(s(fun(bool,bool),X14))) | s(fun(fun(bool,bool),bool),X12) = s(fun(fun(bool,bool),bool),X13) | s(bool,'T_0') = s(bool,f(s(fun(bool,bool),sK3(X12,X13,bool,fun(bool,bool)))))) ) | ($spl28 | $spl41 | $spl50)),
  inference(superposition,[],[f2917,f29260])).
fof(f29258,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X2) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | ($spl28 | $spl41 | $spl50)),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f1706,f1829,f1832,f2062,f2063,f2066,f2124,f2127,f2135,f2138,f2248,f2340,f2343,f2652,f2654,f2655,f2679,f2684,f2687,f2690,f2693,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2724,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2915,f3053,f3054,f3229,f3319,f3354,f3750,f3826,f3827,f3840,f3846,f4093,f4094,f4097,f4111,f4255,f4259,f4261,f4262,f4301,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4982,f4983,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5192,f5198,f5668,f5669,f5717,f5718,f5719,f5722,f5862,f5863,f5865,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f5867,f7160,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8851,f8902,f8922,f9224,f9219,f8961,f8974,f8975,f9011,f9021,f9037,f9046,f9051,f9210,f9286,f9288,f9289,f9290,f9291,f9292,f9293,f9294,f9296,f9329,f9330,f9181,f9139,f2388,f3254,f2399,f3265,f718,f474,f2449,f3315,f9278,f9269,f9202,f9138,f9044,f9043,f9039,f9038,f9036,f9035,f9034,f9019,f9018,f8992,f8991,f8976,f734,f483,f86,f85,f815,f2137,f1705,f1014,f5746,f2502,f1971,f1660,f5731,f2491,f1962,f1652,f933,f2350,f1838,f1138,f5459,f4970,f4035,f3540,f3539,f3538,f3537,f3536,f5453,f4941,f4031,f3151,f3150,f3149,f3148,f3147,f4396,f4979,f4254,f4978,f5482,f5067,f5066,f5065,f5064,f5063,f4977,f4253,f5399,f5342,f4984,f4263,f3995,f3961,f3043,f3041,f3039,f3037,f3035,f2218,f1761,f1054,f844,f619,f5462,f5160,f4037,f3822,f3821,f3820,f3819,f2678,f3535,f3146,f3824,f3825,f7425,f9017,f4400,f4207,f3823,f646,f3828,f8985,f8997,f9005,f2726,f2970,f8996,f9006,f2737,f2981,f5444,f5126,f4025,f3049,f3048,f3047,f3046,f2657,f3044,f8271,f2567,f2999,f3051,f3052,f7417,f8998,f9007,f4390,f4198,f3050,f519,f1167,f590,f3055,f3542,f3543,f7424,f9016,f3153,f3154,f7420,f8995,f9010,f5071,f5072,f7432,f9027,f602,f2292,f7402,f8983,f8999,f5651,f5650,f5649,f5648,f5647,f5644,f5642,f5516,f9030,f4395,f5169,f4399,f4393,f5070,f4375,f4203,f5168,f4206,f4201,f5069,f4183,f9028,f5531,f9029,f5546,f5662,f5661,f5660,f5659,f5658,f5655,f5167,f2696,f3541,f3152,f5666,f5667,f7436,f9031,f5665,f5664,f5068,f924,f5560,f5670,f607,f623,f651,f656,f5396,f5346,f5179,f3993,f3964,f3182,f3180,f3178,f3176,f3174,f2709,f2217,f1760,f1053,f843,f618,f645,f3545,f8984,f2578,f3111,f8994,f9008,f2589,f3122,f8993,f9009,f516,f1175,f593,f3183,f603,f2291,f7401,f8982,f9000,f5354,f5118,f5117,f5116,f5115,f5114,f5112,f5003,f9026,f4374,f4182,f9024,f5017,f9025,f5031,f923,f5044,f5119,f103,f525,f605,f102,f9140,f2917,f807,f805,f3230,f809,f804,f92,f91,f80,f13013,f13010,f2851,f17715,f17877,f17878,f18590,f19267,f19272,f19301,f19306,f19309,f19312,f19315,f19318,f19322,f19325,f19328,f19331,f19334,f19337,f19341,f19344,f19347,f19350,f19353,f19356,f19360,f19363,f19381,f19384,f19386,f9012,f9057,f9053,f9052,f9048,f9047,f9042,f9041,f9033,f9032,f9015,f9014,f19400,f19402,f9013,f9056,f21903,f21749,f21747,f21745,f21743,f21741,f21739,f21737,f21735,f21733,f21731,f21729,f21727,f21725,f21723,f21721,f21677,f19774,f19988,f19990,f22105,f22108,f22111,f22127,f22128,f22130,f22135,f20164,f20166,f21095,f21093,f21091,f21087,f21085,f21083,f21081,f21079,f21077,f22172,f22173,f22174,f20254,f20256,f20260,f21010,f22247,f22252,f22253,f22254,f22255,f22256,f22257,f22258,f22259,f22260,f22261,f20340,f20342,f22281,f22282,f22286,f22397,f20646,f22467,f22469,f22909,f22912,f22913,f22914,f22915,f22916,f22918,f22919,f22920,f22921,f22922,f22483,f22923,f22905,f22888,f22887,f22519,f22533,f22537,f22970,f22973,f22974,f22975,f22976,f22977,f22979,f22980,f22981,f22982,f22983,f22551,f22578,f22984,f22985,f22986,f22582,f22987,f22988,f22989,f22587,f22588,f22990,f22991,f22591,f22992,f22602,f22603,f22604,f22605,f22611,f22612,f22613,f22614,f22615,f22616,f22617,f22618,f22619,f22620,f22621,f22622,f22627,f22628,f22629,f22630,f22631,f22632,f22633,f22634,f22635,f22636,f22637,f22639,f22642,f22643,f22644,f22645,f22646,f22647,f22648,f22649,f22650,f22651,f22652,f22653,f22654,f22655,f22656,f22657,f22658,f22664,f22859,f22996,f22998,f22839,f22837,f22999,f23000,f23001,f23002,f23003,f23004,f22739,f22741,f23053,f23055,f23057,f23060,f23647,f23649,f23663,f23683,f23685,f23699,f23701,f23703,f23717,f23782,f23995,f24009,f24011,f24013,f24027,f24029,f24031,f24045,f24145,f24149,f24155,f24469,f24471,f24486,f24508,f24509,f24514,f24515,f24516,f24518,f24520,f24535,f24537,f24539,f24554,f24621,f24945,f24959,f24961,f24963,f24979,f24981,f24983,f24999,f25091,f25034,f25035,f25317,f25323,f25337,f25727,f25710,f25709,f25708,f25378,f25421,f25772,f25427,f25428,f25429,f25430,f25436,f25437,f25438,f25440,f25441,f25442,f25443,f25444,f25445,f25446,f25447,f25452,f25453,f25454,f25455,f25456,f25457,f25458,f25459,f25460,f25462,f25463,f25464,f25465,f25470,f25471,f25472,f25473,f25474,f25475,f25476,f25477,f25478,f25479,f25480,f25482,f25483,f25774,f25485,f25486,f25487,f25489,f25490,f25491,f25492,f25493,f25497,f25498,f25500,f25501,f25502,f25503,f25688,f25778,f25780,f25668,f25666,f25665,f25781,f25782,f25783,f25784,f25785,f25786,f25589,f25591,f25823,f26219,f26222,f26208,f26224,f26225,f26580,f26582,f26583,f26693,f26694,f26710,f26713,f26714,f26715,f26717,f26718,f26725,f26729,f27006,f27007,f27008,f27010,f27014,f27015,f27016,f27017,f27023,f27024,f27025,f27027,f27028,f27029,f27030,f27031,f27032,f27033,f27034,f27039,f27040,f27041,f27042,f27043,f27044,f27045,f27046,f27047,f27048,f27049,f27050,f27051,f27052,f27054,f27057,f27060,f27061,f27062,f27063,f27064,f27065,f27066,f27067,f27068,f27069,f27070,f27071,f27072,f27073,f27074,f27075,f27076,f27077,f27079,f27080,f27081,f27082,f27083,f27087,f27088,f27090,f27091,f27092,f27093,f27098,f27615,f28251,f28398,f28399,f28415,f28418,f28419,f28420,f28422,f28423,f28430,f28434,f29230,f29231,f29234,f29235,f29239,f29244,f29247,f29248,f29255,f29256,f29257])).
fof(f29256,plain,(
  ( ! [X2,X0,X1] : (s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,X0)) ) | ($spl28 | $spl41 | $spl50)),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f1706,f1829,f1832,f2062,f2063,f2066,f2124,f2127,f2135,f2138,f2248,f2340,f2343,f2652,f2654,f2655,f2679,f2684,f2687,f2690,f2693,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2724,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2915,f3053,f3054,f3229,f3319,f3354,f3750,f3826,f3827,f3840,f3846,f4093,f4094,f4097,f4111,f4255,f4259,f4261,f4262,f4301,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4982,f4983,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5192,f5198,f5668,f5669,f5717,f5718,f5719,f5722,f5862,f5863,f5865,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f5867,f7160,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8851,f8902,f8922,f9224,f9219,f8961,f8974,f8975,f9011,f9021,f9037,f9046,f9051,f9210,f9286,f9288,f9289,f9290,f9291,f9292,f9293,f9294,f9296,f9329,f9330,f9181,f9139,f2388,f3254,f2399,f3265,f718,f474,f2449,f3315,f9278,f9269,f9202,f9138,f9044,f9043,f9039,f9038,f9036,f9035,f9034,f9019,f9018,f8992,f8991,f8976,f734,f483,f86,f85,f815,f2137,f1705,f1014,f5746,f2502,f1971,f1660,f5731,f2491,f1962,f1652,f933,f2350,f1838,f1138,f5459,f4970,f4035,f3540,f3539,f3538,f3537,f3536,f5453,f4941,f4031,f3151,f3150,f3149,f3148,f3147,f4396,f4979,f4254,f4978,f5482,f5067,f5066,f5065,f5064,f5063,f4977,f4253,f5399,f5342,f4984,f4263,f3995,f3961,f3043,f3041,f3039,f3037,f3035,f2218,f1761,f1054,f844,f619,f5462,f5160,f4037,f3822,f3821,f3820,f3819,f2678,f3535,f3146,f3824,f3825,f7425,f9017,f4400,f4207,f3823,f646,f3828,f8985,f8997,f9005,f2726,f2970,f8996,f9006,f2737,f2981,f5444,f5126,f4025,f3049,f3048,f3047,f3046,f2657,f3044,f8271,f2567,f2999,f3051,f3052,f7417,f8998,f9007,f4390,f4198,f3050,f519,f1167,f590,f3055,f3542,f3543,f7424,f9016,f3153,f3154,f7420,f8995,f9010,f5071,f5072,f7432,f9027,f602,f2292,f7402,f8983,f8999,f5651,f5650,f5649,f5648,f5647,f5644,f5642,f5516,f9030,f4395,f5169,f4399,f4393,f5070,f4375,f4203,f5168,f4206,f4201,f5069,f4183,f9028,f5531,f9029,f5546,f5662,f5661,f5660,f5659,f5658,f5655,f5167,f2696,f3541,f3152,f5666,f5667,f7436,f9031,f5665,f5664,f5068,f924,f5560,f5670,f607,f623,f651,f656,f5396,f5346,f5179,f3993,f3964,f3182,f3180,f3178,f3176,f3174,f2709,f2217,f1760,f1053,f843,f618,f645,f3545,f8984,f2578,f3111,f8994,f9008,f2589,f3122,f8993,f9009,f516,f1175,f593,f3183,f603,f2291,f7401,f8982,f9000,f5354,f5118,f5117,f5116,f5115,f5114,f5112,f5003,f9026,f4374,f4182,f9024,f5017,f9025,f5031,f923,f5044,f5119,f103,f525,f605,f102,f9140,f2917,f807,f805,f3230,f809,f804,f92,f91,f80,f13013,f13010,f2851,f17715,f17877,f17878,f18590,f19267,f19272,f19301,f19306,f19309,f19312,f19315,f19318,f19322,f19325,f19328,f19331,f19334,f19337,f19341,f19344,f19347,f19350,f19353,f19356,f19360,f19363,f19381,f19384,f19386,f9012,f9057,f9053,f9052,f9048,f9047,f9042,f9041,f9033,f9032,f9015,f9014,f19400,f19402,f9013,f9056,f21903,f21749,f21747,f21745,f21743,f21741,f21739,f21737,f21735,f21733,f21731,f21729,f21727,f21725,f21723,f21721,f21677,f19774,f19988,f19990,f22105,f22108,f22111,f22127,f22128,f22130,f22135,f20164,f20166,f21095,f21093,f21091,f21087,f21085,f21083,f21081,f21079,f21077,f22172,f22173,f22174,f20254,f20256,f20260,f21010,f22247,f22252,f22253,f22254,f22255,f22256,f22257,f22258,f22259,f22260,f22261,f20340,f20342,f22281,f22282,f22286,f22397,f20646,f22467,f22469,f22909,f22912,f22913,f22914,f22915,f22916,f22918,f22919,f22920,f22921,f22922,f22483,f22923,f22905,f22888,f22887,f22519,f22533,f22537,f22970,f22973,f22974,f22975,f22976,f22977,f22979,f22980,f22981,f22982,f22983,f22551,f22578,f22984,f22985,f22986,f22582,f22987,f22988,f22989,f22587,f22588,f22990,f22991,f22591,f22992,f22602,f22603,f22604,f22605,f22611,f22612,f22613,f22614,f22615,f22616,f22617,f22618,f22619,f22620,f22621,f22622,f22627,f22628,f22629,f22630,f22631,f22632,f22633,f22634,f22635,f22636,f22637,f22639,f22642,f22643,f22644,f22645,f22646,f22647,f22648,f22649,f22650,f22651,f22652,f22653,f22654,f22655,f22656,f22657,f22658,f22664,f22859,f22996,f22998,f22839,f22837,f22999,f23000,f23001,f23002,f23003,f23004,f22739,f22741,f23053,f23055,f23057,f23060,f23647,f23649,f23663,f23683,f23685,f23699,f23701,f23703,f23717,f23782,f23995,f24009,f24011,f24013,f24027,f24029,f24031,f24045,f24145,f24149,f24155,f24469,f24471,f24486,f24508,f24509,f24514,f24515,f24516,f24518,f24520,f24535,f24537,f24539,f24554,f24621,f24945,f24959,f24961,f24963,f24979,f24981,f24983,f24999,f25091,f25034,f25035,f25317,f25323,f25337,f25727,f25710,f25709,f25708,f25378,f25421,f25772,f25427,f25428,f25429,f25430,f25436,f25437,f25438,f25440,f25441,f25442,f25443,f25444,f25445,f25446,f25447,f25452,f25453,f25454,f25455,f25456,f25457,f25458,f25459,f25460,f25462,f25463,f25464,f25465,f25470,f25471,f25472,f25473,f25474,f25475,f25476,f25477,f25478,f25479,f25480,f25482,f25483,f25774,f25485,f25486,f25487,f25489,f25490,f25491,f25492,f25493,f25497,f25498,f25500,f25501,f25502,f25503,f25688,f25778,f25780,f25668,f25666,f25665,f25781,f25782,f25783,f25784,f25785,f25786,f25589,f25591,f25823,f26219,f26222,f26208,f26224,f26225,f26580,f26582,f26583,f26693,f26694,f26710,f26713,f26714,f26715,f26717,f26718,f26725,f26729,f27006,f27007,f27008,f27010,f27014,f27015,f27016,f27017,f27023,f27024,f27025,f27027,f27028,f27029,f27030,f27031,f27032,f27033,f27034,f27039,f27040,f27041,f27042,f27043,f27044,f27045,f27046,f27047,f27048,f27049,f27050,f27051,f27052,f27054,f27057,f27060,f27061,f27062,f27063,f27064,f27065,f27066,f27067,f27068,f27069,f27070,f27071,f27072,f27073,f27074,f27075,f27076,f27077,f27079,f27080,f27081,f27082,f27083,f27087,f27088,f27090,f27091,f27092,f27093,f27098,f27615,f28251,f28398,f28399,f28415,f28418,f28419,f28420,f28422,f28423,f28430,f28434,f29230,f29231,f29234,f29235,f29239,f29244,f29247,f29248,f29255])).
fof(f29248,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl28 | $spl41 | $spl50)),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f1706,f1829,f1832,f2062,f2063,f2066,f2124,f2127,f2135,f2138,f2248,f2340,f2343,f2652,f2654,f2655,f2679,f2684,f2687,f2690,f2693,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2724,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2915,f3053,f3054,f3229,f3319,f3354,f3750,f3826,f3827,f3840,f3846,f4093,f4094,f4097,f4111,f4255,f4259,f4261,f4262,f4301,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4982,f4983,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5192,f5198,f5668,f5669,f5717,f5718,f5719,f5722,f5862,f5863,f5865,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f5867,f7160,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8851,f8902,f8922,f9224,f9219,f8961,f8974,f8975,f9011,f9021,f9037,f9046,f9051,f9210,f9286,f9288,f9289,f9290,f9291,f9292,f9293,f9294,f9296,f9329,f9330,f9181,f9139,f2388,f3254,f2399,f3265,f718,f474,f2449,f3315,f9278,f9269,f9202,f9138,f9044,f9043,f9039,f9038,f9036,f9035,f9034,f9019,f9018,f8992,f8991,f8976,f734,f483,f86,f85,f815,f2137,f1705,f1014,f5746,f2502,f1971,f1660,f5731,f2491,f1962,f1652,f933,f2350,f1838,f1138,f5459,f4970,f4035,f3540,f3539,f3538,f3537,f3536,f5453,f4941,f4031,f3151,f3150,f3149,f3148,f3147,f4396,f4979,f4254,f4978,f5482,f5067,f5066,f5065,f5064,f5063,f4977,f4253,f5399,f5342,f4984,f4263,f3995,f3961,f3043,f3041,f3039,f3037,f3035,f2218,f1761,f1054,f844,f619,f5462,f5160,f4037,f3822,f3821,f3820,f3819,f2678,f3535,f3146,f3824,f3825,f7425,f9017,f4400,f4207,f3823,f646,f3828,f8985,f8997,f9005,f2726,f2970,f8996,f9006,f2737,f2981,f5444,f5126,f4025,f3049,f3048,f3047,f3046,f2657,f3044,f8271,f2567,f2999,f3051,f3052,f7417,f8998,f9007,f4390,f4198,f3050,f519,f1167,f590,f3055,f3542,f3543,f7424,f9016,f3153,f3154,f7420,f8995,f9010,f5071,f5072,f7432,f9027,f602,f2292,f7402,f8983,f8999,f5651,f5650,f5649,f5648,f5647,f5644,f5642,f5516,f9030,f4395,f5169,f4399,f4393,f5070,f4375,f4203,f5168,f4206,f4201,f5069,f4183,f9028,f5531,f9029,f5546,f5662,f5661,f5660,f5659,f5658,f5655,f5167,f2696,f3541,f3152,f5666,f5667,f7436,f9031,f5665,f5664,f5068,f924,f5560,f5670,f607,f623,f651,f656,f5396,f5346,f5179,f3993,f3964,f3182,f3180,f3178,f3176,f3174,f2709,f2217,f1760,f1053,f843,f618,f645,f3545,f8984,f2578,f3111,f8994,f9008,f2589,f3122,f8993,f9009,f516,f1175,f593,f3183,f603,f2291,f7401,f8982,f9000,f5354,f5118,f5117,f5116,f5115,f5114,f5112,f5003,f9026,f4374,f4182,f9024,f5017,f9025,f5031,f923,f5044,f5119,f103,f525,f605,f102,f9140,f2917,f807,f805,f3230,f809,f804,f92,f91,f80,f13013,f13010,f2851,f17715,f17877,f17878,f18590,f19267,f19272,f19301,f19306,f19309,f19312,f19315,f19318,f19322,f19325,f19328,f19331,f19334,f19337,f19341,f19344,f19347,f19350,f19353,f19356,f19360,f19363,f19381,f19384,f19386,f9012,f9057,f9053,f9052,f9048,f9047,f9042,f9041,f9033,f9032,f9015,f9014,f19400,f19402,f9013,f9056,f21903,f21749,f21747,f21745,f21743,f21741,f21739,f21737,f21735,f21733,f21731,f21729,f21727,f21725,f21723,f21721,f21677,f19774,f19988,f19990,f22105,f22108,f22111,f22127,f22128,f22130,f22135,f20164,f20166,f21095,f21093,f21091,f21087,f21085,f21083,f21081,f21079,f21077,f22172,f22173,f22174,f20254,f20256,f20260,f21010,f22247,f22252,f22253,f22254,f22255,f22256,f22257,f22258,f22259,f22260,f22261,f20340,f20342,f22281,f22282,f22286,f22397,f20646,f22467,f22469,f22909,f22912,f22913,f22914,f22915,f22916,f22918,f22919,f22920,f22921,f22922,f22483,f22923,f22905,f22888,f22887,f22519,f22533,f22537,f22970,f22973,f22974,f22975,f22976,f22977,f22979,f22980,f22981,f22982,f22983,f22551,f22578,f22984,f22985,f22986,f22582,f22987,f22988,f22989,f22587,f22588,f22990,f22991,f22591,f22992,f22602,f22603,f22604,f22605,f22611,f22612,f22613,f22614,f22615,f22616,f22617,f22618,f22619,f22620,f22621,f22622,f22627,f22628,f22629,f22630,f22631,f22632,f22633,f22634,f22635,f22636,f22637,f22639,f22642,f22643,f22644,f22645,f22646,f22647,f22648,f22649,f22650,f22651,f22652,f22653,f22654,f22655,f22656,f22657,f22658,f22664,f22859,f22996,f22998,f22839,f22837,f22999,f23000,f23001,f23002,f23003,f23004,f22739,f22741,f23053,f23055,f23057,f23060,f23647,f23649,f23663,f23683,f23685,f23699,f23701,f23703,f23717,f23782,f23995,f24009,f24011,f24013,f24027,f24029,f24031,f24045,f24145,f24149,f24155,f24469,f24471,f24486,f24508,f24509,f24514,f24515,f24516,f24518,f24520,f24535,f24537,f24539,f24554,f24621,f24945,f24959,f24961,f24963,f24979,f24981,f24983,f24999,f25091,f25034,f25035,f25317,f25323,f25337,f25727,f25710,f25709,f25708,f25378,f25421,f25772,f25427,f25428,f25429,f25430,f25436,f25437,f25438,f25440,f25441,f25442,f25443,f25444,f25445,f25446,f25447,f25452,f25453,f25454,f25455,f25456,f25457,f25458,f25459,f25460,f25462,f25463,f25464,f25465,f25470,f25471,f25472,f25473,f25474,f25475,f25476,f25477,f25478,f25479,f25480,f25482,f25483,f25774,f25485,f25486,f25487,f25489,f25490,f25491,f25492,f25493,f25497,f25498,f25500,f25501,f25502,f25503,f25688,f25778,f25780,f25668,f25666,f25665,f25781,f25782,f25783,f25784,f25785,f25786,f25589,f25591,f25823,f26219,f26222,f26208,f26224,f26225,f26580,f26582,f26583,f26693,f26694,f26710,f26713,f26714,f26715,f26717,f26718,f26725,f26729,f27006,f27007,f27008,f27010,f27014,f27015,f27016,f27017,f27023,f27024,f27025,f27027,f27028,f27029,f27030,f27031,f27032,f27033,f27034,f27039,f27040,f27041,f27042,f27043,f27044,f27045,f27046,f27047,f27048,f27049,f27050,f27051,f27052,f27054,f27057,f27060,f27061,f27062,f27063,f27064,f27065,f27066,f27067,f27068,f27069,f27070,f27071,f27072,f27073,f27074,f27075,f27076,f27077,f27079,f27080,f27081,f27082,f27083,f27087,f27088,f27090,f27091,f27092,f27093,f27098,f27615,f28251,f28398,f28399,f28415,f28418,f28419,f28420,f28422,f28423,f28430,f28434,f29230,f29231,f29234,f29235,f29239,f29244,f29247])).
fof(f29240,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1) | s(bool,X1) != s(bool,f(s(bool,'T_0')))) ) | $spl296),
  inference(cnf_transformation,[],[f29240_D])).
fof(f29240_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1) | s(bool,X1) != s(bool,f(s(bool,'T_0')))) ) <=> ~$spl296),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl296])])).
fof(f29244,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X0) = s(bool,X1)) ) | ($spl28 | $spl50)),
  inference(condensation,[],[f29243])).
fof(f29243,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X4)) ) | ($spl28 | $spl50)),
  inference(subsumption_resolution,[],[f29242,f8902])).
fof(f29242,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X0) = s(bool,X1) | s(bool,X4) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl28),
  inference(condensation,[],[f29241])).
fof(f29241,plain,(
  ( ! [X26,X24,X23,X27,X25,X22] : (s(bool,X22) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X23) = s(fun(bool,bool),X24) | s(bool,'T_0') = s(bool,X25) | s(bool,X22) = s(bool,X26) | s(bool,'T_0') = s(bool,X26) | s(bool,X27) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X27)) ) | $spl28),
  inference(subsumption_resolution,[],[f27637,f17878])).
fof(f27637,plain,(
  ( ! [X26,X24,X23,X27,X25,X22] : (s(bool,X22) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X23) = s(fun(bool,bool),X24) | s(bool,X25) = s(bool,sK3(X23,X24,bool,bool)) | s(bool,'T_0') = s(bool,X25) | s(bool,X22) = s(bool,X26) | s(bool,'T_0') = s(bool,X26) | s(bool,X27) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f800,f262])).
fof(f29239,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X0) = s(bool,X1)) ) | ($spl28 | $spl50)),
  inference(condensation,[],[f29238])).
fof(f29238,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X1) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | ($spl28 | $spl50)),
  inference(subsumption_resolution,[],[f29237,f8902])).
fof(f29237,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,X1) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl28),
  inference(condensation,[],[f29236])).
fof(f29236,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s(bool,X28) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X29) = s(fun(bool,bool),X30) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X32) | s(bool,X28) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) ) | $spl28),
  inference(subsumption_resolution,[],[f27638,f17878])).
fof(f27638,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (s(bool,X28) != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X29) = s(fun(bool,bool),X30) | s(bool,X31) = s(bool,sK3(X29,X30,bool,bool)) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X32) | s(bool,X28) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f800,f262])).
fof(f29232,plain,(
  ( ! [X4,X0,X3] : (s(bool,X3) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X4) | s(bool,X3) = s(bool,X4)) ) | $spl294),
  inference(cnf_transformation,[],[f29232_D])).
fof(f29232_D,plain,(
  ( ! [X4,X0,X3] : (s(bool,X3) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X4) | s(bool,X3) = s(bool,X4)) ) <=> ~$spl294),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl294])])).
fof(f29235,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X3) = s(bool,X4) | s(bool,X0) = s(bool,X3) | s(bool,X4) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2)) ) | ($spl28 | $spl41)),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f1706,f1829,f1832,f2062,f2063,f2066,f2124,f2127,f2135,f2138,f2248,f2340,f2343,f2652,f2654,f2655,f2679,f2684,f2687,f2690,f2693,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2724,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2915,f3053,f3054,f3229,f3319,f3354,f3750,f3826,f3827,f3840,f3846,f4093,f4094,f4097,f4111,f4255,f4259,f4261,f4262,f4301,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4982,f4983,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5192,f5198,f5668,f5669,f5717,f5718,f5719,f5722,f5862,f5863,f5865,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8922,f9224,f9219,f8961,f8974,f8975,f9011,f9021,f9037,f9046,f9051,f9210,f9286,f9288,f9289,f9290,f9291,f9292,f9293,f9294,f9296,f9329,f9330,f9181,f9139,f2388,f3254,f2399,f3265,f718,f474,f2449,f3315,f9278,f9269,f9202,f9138,f9044,f9043,f9039,f9038,f9036,f9035,f9034,f9019,f9018,f8992,f8991,f8976,f734,f483,f86,f85,f815,f2137,f1705,f1014,f5746,f2502,f1971,f1660,f5731,f2491,f1962,f1652,f933,f2350,f1838,f1138,f5459,f4970,f4035,f3540,f3539,f3538,f3537,f3536,f5453,f4941,f4031,f3151,f3150,f3149,f3148,f3147,f4396,f4979,f4254,f4978,f5482,f5067,f5066,f5065,f5064,f5063,f4977,f4253,f5399,f5342,f4984,f4263,f3995,f3961,f3043,f3041,f3039,f3037,f3035,f2218,f1761,f1054,f844,f619,f5462,f5160,f4037,f3822,f3821,f3820,f3819,f2678,f3535,f3146,f3824,f3825,f7425,f9017,f4400,f4207,f3823,f646,f3828,f8985,f8997,f9005,f2726,f2970,f8996,f9006,f2737,f2981,f5444,f5126,f4025,f3049,f3048,f3047,f3046,f2657,f3044,f8271,f2567,f2999,f3051,f3052,f7417,f8998,f9007,f4390,f4198,f3050,f519,f1167,f590,f3055,f3542,f3543,f7424,f9016,f3153,f3154,f7420,f8995,f9010,f5071,f5072,f7432,f9027,f602,f2292,f7402,f8983,f8999,f5651,f5650,f5649,f5648,f5647,f5644,f5642,f5516,f9030,f4395,f5169,f4399,f4393,f5070,f4375,f4203,f5168,f4206,f4201,f5069,f4183,f9028,f5531,f9029,f5546,f5662,f5661,f5660,f5659,f5658,f5655,f5167,f2696,f3541,f3152,f5666,f5667,f7436,f9031,f5665,f5664,f5068,f924,f5560,f5670,f607,f623,f651,f656,f5396,f5346,f5179,f3993,f3964,f3182,f3180,f3178,f3176,f3174,f2709,f2217,f1760,f1053,f843,f618,f645,f3545,f8984,f2578,f3111,f8994,f9008,f2589,f3122,f8993,f9009,f516,f1175,f593,f3183,f603,f2291,f7401,f8982,f9000,f5354,f5118,f5117,f5116,f5115,f5114,f5112,f5003,f9026,f4374,f4182,f9024,f5017,f9025,f5031,f923,f5044,f5119,f103,f525,f605,f102,f9140,f2917,f807,f805,f3230,f809,f804,f92,f91,f80,f13013,f13010,f2851,f17715,f17877,f17878,f18590,f19267,f19272,f19301,f19306,f19309,f19312,f19315,f19318,f19322,f19325,f19328,f19331,f19334,f19337,f19341,f19344,f19347,f19350,f19353,f19356,f19360,f19363,f19381,f19384,f19386,f9012,f9057,f9053,f9052,f9048,f9047,f9042,f9041,f9033,f9032,f9015,f9014,f19400,f19402,f9013,f9056,f21903,f21747,f21745,f21743,f21741,f21739,f21737,f21735,f21733,f21731,f21729,f21727,f21725,f21723,f21721,f21677,f19774,f19988,f19990,f22105,f22108,f22111,f22127,f22128,f22130,f22135,f20164,f20166,f21095,f21093,f21091,f21087,f21085,f21083,f21081,f21079,f21077,f22172,f22173,f22174,f20254,f20256,f21010,f22247,f22252,f22253,f22254,f22255,f22256,f22257,f22258,f22259,f22260,f22261,f20340,f20342,f22281,f22282,f22286,f22397,f20646,f22467,f22469,f22909,f22912,f22913,f22914,f22915,f22916,f22918,f22919,f22920,f22921,f22922,f22483,f22923,f22905,f22888,f22887,f22519,f22533,f22537,f22970,f22973,f22974,f22975,f22976,f22977,f22979,f22980,f22981,f22982,f22983,f22551,f22578,f22984,f22985,f22986,f22582,f22987,f22988,f22989,f22587,f22588,f22990,f22991,f22591,f22992,f22602,f22603,f22604,f22605,f22611,f22612,f22613,f22614,f22615,f22616,f22617,f22618,f22619,f22620,f22621,f22622,f22627,f22628,f22629,f22630,f22631,f22632,f22633,f22634,f22635,f22636,f22637,f22639,f22642,f22643,f22644,f22645,f22646,f22647,f22648,f22649,f22650,f22651,f22652,f22653,f22654,f22655,f22656,f22657,f22658,f22664,f22859,f22996,f22998,f22839,f22837,f22999,f23000,f23001,f23002,f23003,f23004,f22739,f22741,f23053,f23055,f23057,f23060,f23647,f23649,f23663,f23683,f23685,f23699,f23701,f23703,f23717,f23782,f23995,f24009,f24011,f24013,f24027,f24029,f24031,f24045,f24145,f24149,f24155,f24469,f24471,f24486,f24508,f24509,f24514,f24515,f24516,f24518,f24520,f24535,f24537,f24539,f24554,f24621,f24945,f24959,f24961,f24963,f24979,f24981,f24983,f24999,f25091,f25034,f25035,f25317,f25323,f25337,f25727,f25710,f25709,f25708,f25378,f25421,f25772,f25427,f25428,f25429,f25430,f25436,f25437,f25438,f25440,f25441,f25442,f25443,f25444,f25445,f25446,f25447,f25452,f25453,f25454,f25455,f25456,f25457,f25458,f25459,f25460,f25462,f25463,f25464,f25465,f25470,f25471,f25472,f25473,f25474,f25475,f25476,f25477,f25478,f25479,f25480,f25482,f25483,f25774,f25485,f25486,f25487,f25489,f25490,f25491,f25492,f25493,f25497,f25498,f25500,f25501,f25502,f25503,f25688,f25778,f25780,f25668,f25666,f25665,f25781,f25782,f25783,f25784,f25785,f25786,f25589,f25591,f25823,f26219,f26222,f26208,f26224,f26225,f26580,f26582,f26583,f26693,f26694,f26710,f26713,f26714,f26715,f26717,f26718,f26725,f26729,f27006,f27007,f27008,f27010,f27014,f27015,f27016,f27017,f27023,f27024,f27025,f27027,f27028,f27029,f27030,f27031,f27032,f27033,f27034,f27039,f27040,f27041,f27042,f27043,f27044,f27045,f27046,f27047,f27048,f27049,f27050,f27051,f27052,f27054,f27057,f27060,f27061,f27062,f27063,f27064,f27065,f27066,f27067,f27068,f27069,f27070,f27071,f27072,f27073,f27074,f27075,f27076,f27077,f27079,f27080,f27081,f27082,f27083,f27087,f27088,f27090,f27091,f27092,f27093,f27098,f27615,f28251,f28398,f28399,f28415,f28418,f28419,f28420,f28422,f28423,f28430,f28434,f29230,f29231,f29234])).
fof(f29231,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X3) = s(bool,g(s(bool,'T_0'))) | s(bool,X3) = s(bool,X4) | s(bool,X0) = s(bool,X4) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,X0)) ) | ($spl28 | $spl41)),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f1706,f1829,f1832,f2062,f2063,f2066,f2124,f2127,f2135,f2138,f2248,f2340,f2343,f2652,f2654,f2655,f2679,f2684,f2687,f2690,f2693,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2724,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2915,f3053,f3054,f3229,f3319,f3354,f3750,f3826,f3827,f3840,f3846,f4093,f4094,f4097,f4111,f4255,f4259,f4261,f4262,f4301,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4982,f4983,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5192,f5198,f5668,f5669,f5717,f5718,f5719,f5722,f5862,f5863,f5865,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8922,f9224,f9219,f8961,f8974,f8975,f9011,f9021,f9037,f9046,f9051,f9210,f9286,f9288,f9289,f9290,f9291,f9292,f9293,f9294,f9296,f9329,f9330,f9181,f9139,f2388,f3254,f2399,f3265,f718,f474,f2449,f3315,f9278,f9269,f9202,f9138,f9044,f9043,f9039,f9038,f9036,f9035,f9034,f9019,f9018,f8992,f8991,f8976,f734,f483,f86,f85,f815,f2137,f1705,f1014,f5746,f2502,f1971,f1660,f5731,f2491,f1962,f1652,f933,f2350,f1838,f1138,f5459,f4970,f4035,f3540,f3539,f3538,f3537,f3536,f5453,f4941,f4031,f3151,f3150,f3149,f3148,f3147,f4396,f4979,f4254,f4978,f5482,f5067,f5066,f5065,f5064,f5063,f4977,f4253,f5399,f5342,f4984,f4263,f3995,f3961,f3043,f3041,f3039,f3037,f3035,f2218,f1761,f1054,f844,f619,f5462,f5160,f4037,f3822,f3821,f3820,f3819,f2678,f3535,f3146,f3824,f3825,f7425,f9017,f4400,f4207,f3823,f646,f3828,f8985,f8997,f9005,f2726,f2970,f8996,f9006,f2737,f2981,f5444,f5126,f4025,f3049,f3048,f3047,f3046,f2657,f3044,f8271,f2567,f2999,f3051,f3052,f7417,f8998,f9007,f4390,f4198,f3050,f519,f1167,f590,f3055,f3542,f3543,f7424,f9016,f3153,f3154,f7420,f8995,f9010,f5071,f5072,f7432,f9027,f602,f2292,f7402,f8983,f8999,f5651,f5650,f5649,f5648,f5647,f5644,f5642,f5516,f9030,f4395,f5169,f4399,f4393,f5070,f4375,f4203,f5168,f4206,f4201,f5069,f4183,f9028,f5531,f9029,f5546,f5662,f5661,f5660,f5659,f5658,f5655,f5167,f2696,f3541,f3152,f5666,f5667,f7436,f9031,f5665,f5664,f5068,f924,f5560,f5670,f607,f623,f651,f656,f5396,f5346,f5179,f3993,f3964,f3182,f3180,f3178,f3176,f3174,f2709,f2217,f1760,f1053,f843,f618,f645,f3545,f8984,f2578,f3111,f8994,f9008,f2589,f3122,f8993,f9009,f516,f1175,f593,f3183,f603,f2291,f7401,f8982,f9000,f5354,f5118,f5117,f5116,f5115,f5114,f5112,f5003,f9026,f4374,f4182,f9024,f5017,f9025,f5031,f923,f5044,f5119,f103,f525,f605,f102,f9140,f2917,f807,f805,f3230,f809,f804,f92,f91,f80,f13013,f13010,f2851,f17715,f17877,f17878,f18590,f19267,f19272,f19301,f19306,f19309,f19312,f19315,f19318,f19322,f19325,f19328,f19331,f19334,f19337,f19341,f19344,f19347,f19350,f19353,f19356,f19360,f19363,f19381,f19384,f19386,f9012,f9057,f9053,f9052,f9048,f9047,f9042,f9041,f9033,f9032,f9015,f9014,f19400,f19402,f9013,f9056,f21903,f21747,f21745,f21743,f21741,f21739,f21737,f21735,f21733,f21731,f21729,f21727,f21725,f21723,f21721,f21677,f19774,f19988,f19990,f22105,f22108,f22111,f22127,f22128,f22130,f22135,f20164,f20166,f21095,f21093,f21091,f21087,f21085,f21083,f21081,f21079,f21077,f22172,f22173,f22174,f20254,f20256,f21010,f22247,f22252,f22253,f22254,f22255,f22256,f22257,f22258,f22259,f22260,f22261,f20340,f20342,f22281,f22282,f22286,f22397,f20646,f22467,f22469,f22909,f22912,f22913,f22914,f22915,f22916,f22918,f22919,f22920,f22921,f22922,f22483,f22923,f22905,f22888,f22887,f22519,f22533,f22537,f22970,f22973,f22974,f22975,f22976,f22977,f22979,f22980,f22981,f22982,f22983,f22551,f22578,f22984,f22985,f22986,f22582,f22987,f22988,f22989,f22587,f22588,f22990,f22991,f22591,f22992,f22602,f22603,f22604,f22605,f22611,f22612,f22613,f22614,f22615,f22616,f22617,f22618,f22619,f22620,f22621,f22622,f22627,f22628,f22629,f22630,f22631,f22632,f22633,f22634,f22635,f22636,f22637,f22639,f22642,f22643,f22644,f22645,f22646,f22647,f22648,f22649,f22650,f22651,f22652,f22653,f22654,f22655,f22656,f22657,f22658,f22664,f22859,f22996,f22998,f22839,f22837,f22999,f23000,f23001,f23002,f23003,f23004,f22739,f22741,f23053,f23055,f23057,f23060,f23647,f23649,f23663,f23683,f23685,f23699,f23701,f23703,f23717,f23782,f23995,f24009,f24011,f24013,f24027,f24029,f24031,f24045,f24145,f24149,f24155,f24469,f24471,f24486,f24508,f24509,f24514,f24515,f24516,f24518,f24520,f24535,f24537,f24539,f24554,f24621,f24945,f24959,f24961,f24963,f24979,f24981,f24983,f24999,f25091,f25034,f25035,f25317,f25323,f25337,f25727,f25710,f25709,f25708,f25378,f25421,f25772,f25427,f25428,f25429,f25430,f25436,f25437,f25438,f25440,f25441,f25442,f25443,f25444,f25445,f25446,f25447,f25452,f25453,f25454,f25455,f25456,f25457,f25458,f25459,f25460,f25462,f25463,f25464,f25465,f25470,f25471,f25472,f25473,f25474,f25475,f25476,f25477,f25478,f25479,f25480,f25482,f25483,f25774,f25485,f25486,f25487,f25489,f25490,f25491,f25492,f25493,f25497,f25498,f25500,f25501,f25502,f25503,f25688,f25778,f25780,f25668,f25666,f25665,f25781,f25782,f25783,f25784,f25785,f25786,f25589,f25591,f25823,f26219,f26222,f26208,f26224,f26225,f26580,f26582,f26583,f26693,f26694,f26710,f26713,f26714,f26715,f26717,f26718,f26725,f26729,f27006,f27007,f27008,f27010,f27014,f27015,f27016,f27017,f27023,f27024,f27025,f27027,f27028,f27029,f27030,f27031,f27032,f27033,f27034,f27039,f27040,f27041,f27042,f27043,f27044,f27045,f27046,f27047,f27048,f27049,f27050,f27051,f27052,f27054,f27057,f27060,f27061,f27062,f27063,f27064,f27065,f27066,f27067,f27068,f27069,f27070,f27071,f27072,f27073,f27074,f27075,f27076,f27077,f27079,f27080,f27081,f27082,f27083,f27087,f27088,f27090,f27091,f27092,f27093,f27098,f27615,f28251,f28398,f28399,f28415,f28418,f28419,f28420,f28422,f28423,f28430,f28434,f29230])).
fof(f29222,plain,(
  ( ! [X163,X162] : (s(bool,'T_0') != s(bool,f(s(bool,sK3(X162,X163,bool,bool)))) | s(fun(bool,bool),X162) = s(fun(bool,bool),X163)) ) | $spl292),
  inference(cnf_transformation,[],[f29222_D])).
fof(f29222_D,plain,(
  ( ! [X163,X162] : (s(bool,'T_0') != s(bool,f(s(bool,sK3(X162,X163,bool,bool)))) | s(fun(bool,bool),X162) = s(fun(bool,bool),X163)) ) <=> ~$spl292),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl292])])).
fof(f29221,plain,(
  ( ! [X163,X164,X162] : (s(bool,'T_0') != s(bool,f(s(bool,sK3(X162,X163,bool,bool)))) | s(fun(bool,bool),X162) = s(fun(bool,bool),X163) | s(bool,'T_0') = s(bool,X164)) ) | ($spl28 | $spl38)),
  inference(subsumption_resolution,[],[f28929,f17878])).
fof(f28929,plain,(
  ( ! [X163,X164,X162] : (s(bool,'T_0') != s(bool,f(s(bool,sK3(X162,X163,bool,bool)))) | s(fun(bool,bool),X162) = s(fun(bool,bool),X163) | s(bool,X164) = s(bool,sK3(X162,X163,bool,bool)) | s(bool,'T_0') = s(bool,X164)) ) | $spl38),
  inference(duplicate_literal_removal,[],[f28923])).
fof(f28923,plain,(
  ( ! [X163,X164,X162] : (s(bool,'T_0') != s(bool,f(s(bool,sK3(X162,X163,bool,bool)))) | s(fun(bool,bool),X162) = s(fun(bool,bool),X163) | s(bool,X164) = s(bool,sK3(X162,X163,bool,bool)) | s(fun(bool,bool),X162) = s(fun(bool,bool),X163) | s(bool,'T_0') = s(bool,X164)) ) | $spl38),
  inference(superposition,[],[f104,f2913])).
fof(f29214,plain,(
  ( ! [X19,X17,X18] : (s(bool,X19) != s(bool,g(s(bool,sK3(X17,X18,bool,bool)))) | s(fun(bool,bool),X17) = s(fun(bool,bool),X18) | p(s(bool,X19))) ) | $spl290),
  inference(cnf_transformation,[],[f29214_D])).
fof(f29214_D,plain,(
  ( ! [X19,X17,X18] : (s(bool,X19) != s(bool,g(s(bool,sK3(X17,X18,bool,bool)))) | s(fun(bool,bool),X17) = s(fun(bool,bool),X18) | p(s(bool,X19))) ) <=> ~$spl290),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl290])])).
fof(f29213,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,X19) != s(bool,g(s(bool,sK3(X17,X18,bool,bool)))) | p(s(bool,X19)) | s(fun(bool,bool),X17) = s(fun(bool,bool),X18) | s(bool,'T_0') = s(bool,X20)) ) | ($spl28 | $spl38)),
  inference(subsumption_resolution,[],[f29212,f78])).
fof(f29212,plain,(
  ( ! [X19,X17,X20,X18] : (~p(s(bool,'T_0')) | s(bool,X19) != s(bool,g(s(bool,sK3(X17,X18,bool,bool)))) | p(s(bool,X19)) | s(fun(bool,bool),X17) = s(fun(bool,bool),X18) | s(bool,'T_0') = s(bool,X20)) ) | ($spl28 | $spl38)),
  inference(subsumption_resolution,[],[f28891,f17878])).
fof(f28891,plain,(
  ( ! [X19,X17,X20,X18] : (~p(s(bool,'T_0')) | s(bool,X19) != s(bool,g(s(bool,sK3(X17,X18,bool,bool)))) | p(s(bool,X19)) | s(bool,X20) = s(bool,sK3(X17,X18,bool,bool)) | s(fun(bool,bool),X17) = s(fun(bool,bool),X18) | s(bool,'T_0') = s(bool,X20)) ) | $spl38),
  inference(superposition,[],[f131,f2913])).
fof(f26848,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1)))))) | $spl288),
  inference(cnf_transformation,[],[f26848_D])).
fof(f26848_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1)))))) <=> ~$spl288),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl288])])).
fof(f26822,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))))))) ) | $spl42),
  inference(duplicate_literal_removal,[],[f26779])).
fof(f26779,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1)))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl42),
  inference(superposition,[],[f605,f26342])).
fof(f26342,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))),s('type.num.num','const.num.|48|_0'))) | $spl42),
  inference(unit_resulting_resolution,[],[f25209,f1213])).
fof(f26839,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))))))) ) | $spl42),
  inference(duplicate_literal_removal,[],[f26766])).
fof(f26766,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1)))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl42),
  inference(superposition,[],[f26342,f605])).
fof(f26327,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.num.|48|_0'))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.num.|48|_0')))))) | $spl286),
  inference(cnf_transformation,[],[f26327_D])).
fof(f26327_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.num.|48|_0'))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.num.|48|_0')))))) <=> ~$spl286),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl286])])).
fof(f26301,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.num.|48|_0'))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.num.|48|_0'))))))) ) | $spl18),
  inference(duplicate_literal_removal,[],[f26258])).
fof(f26258,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.num.|48|_0'))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.num.|48|_0')))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(superposition,[],[f605,f25887])).
fof(f25887,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.num.|48|_0'))),s('type.num.num',sK1))) | $spl18),
  inference(unit_resulting_resolution,[],[f24931,f1213])).
fof(f24931,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.num.|48|_0')),s('type.num.num',sK2(sK1,sK2(sK1,'const.num.|48|_0'))))) | $spl18),
  inference(subsumption_resolution,[],[f24863,f78])).
fof(f24863,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.num.|48|_0')),s('type.num.num',sK2(sK1,sK2(sK1,'const.num.|48|_0'))))) | $spl18),
  inference(superposition,[],[f102,f24267])).
fof(f24267,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.num.|48|_0')),s('type.num.num',sK1))) | $spl18),
  inference(unit_resulting_resolution,[],[f19429,f1213])).
fof(f19429,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(sK1,'const.num.|48|_0')))) | $spl18),
  inference(unit_resulting_resolution,[],[f2698,f102])).
fof(f2698,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | $spl18),
  inference(cnf_transformation,[],[f2698_D])).
fof(f2698_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f26318,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.num.|48|_0'))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.num.|48|_0'))))))) ) | $spl18),
  inference(duplicate_literal_removal,[],[f26245])).
fof(f26245,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.num.|48|_0'))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.num.|48|_0')))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(superposition,[],[f25887,f605])).
fof(f26220,plain,(
  ( ! [X2,X1] : (s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,f(s(bool,sK3(X1,X2,bool,bool))))) ) | $spl284),
  inference(cnf_transformation,[],[f26220_D])).
fof(f26220_D,plain,(
  ( ! [X2,X1] : (s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,f(s(bool,sK3(X1,X2,bool,bool))))) ) <=> ~$spl284),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl284])])).
fof(f6624,plain,(
  ( ! [X23,X25] : (s(bool,X23) = s(bool,X25) | s(bool,'T_0') = s(bool,g(s(bool,X23))) | s(bool,'T_0') = s(bool,X25)) ) | $spl60),
  inference(cnf_transformation,[],[f6624_D])).
fof(f6624_D,plain,(
  ( ! [X23,X25] : (s(bool,X23) = s(bool,X25) | s(bool,'T_0') = s(bool,g(s(bool,X23))) | s(bool,'T_0') = s(bool,X25)) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f26222,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,f(s(bool,sK3(X1,X2,bool,bool)))) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl28),
  inference(condensation,[],[f26221])).
fof(f26221,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s(bool,'T_0') = s(bool,g(s(bool,X23))) | s(fun(bool,bool),X21) = s(fun(bool,bool),X22) | s(bool,'T_0') = s(bool,f(s(bool,sK3(X21,X22,bool,bool)))) | s(bool,'T_0') = s(bool,X24) | s(bool,X23) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) ) | $spl28),
  inference(subsumption_resolution,[],[f26126,f17878])).
fof(f26126,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s(bool,'T_0') = s(bool,g(s(bool,X23))) | s(fun(bool,bool),X21) = s(fun(bool,bool),X22) | s(bool,'T_0') = s(bool,f(s(bool,sK3(X21,X22,bool,bool)))) | s(bool,X24) = s(bool,sK3(X21,X22,bool,bool)) | s(bool,'T_0') = s(bool,X24) | s(bool,X23) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f2917,f262])).
fof(f26219,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,g(s(bool,X0))) | s(fun(bool,bool),X1) = s(fun(bool,bool),X2) | s(bool,'T_0') = s(bool,f(s(bool,sK3(X1,X2,bool,bool)))) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl28),
  inference(condensation,[],[f26218])).
fof(f26218,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,'T_0') = s(bool,g(s(bool,X18))) | s(fun(bool,bool),X16) = s(fun(bool,bool),X17) | s(bool,'T_0') = s(bool,f(s(bool,sK3(X16,X17,bool,bool)))) | s(bool,X18) = s(bool,X19) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X20)) ) | $spl28),
  inference(subsumption_resolution,[],[f26125,f17878])).
fof(f26125,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,'T_0') = s(bool,g(s(bool,X18))) | s(fun(bool,bool),X16) = s(fun(bool,bool),X17) | s(bool,'T_0') = s(bool,f(s(bool,sK3(X16,X17,bool,bool)))) | s(bool,X18) = s(bool,X19) | s(bool,'T_0') = s(bool,X19) | s(bool,X20) = s(bool,sK3(X16,X17,bool,bool)) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f2917,f262])).
fof(f25750,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X1)))) ) | $spl274),
  inference(cnf_transformation,[],[f25750_D])).
fof(f25750_D,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X1)))) ) <=> ~$spl274),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl274])])).
fof(f25823,plain,(
  ( ! [X52,X53,X51] : (p(s(bool,X52)) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X53),s('type.num.num',X51))),s('type.num.num',X51)))) )),
  inference(subsumption_resolution,[],[f25607,f87])).
fof(f25607,plain,(
  ( ! [X52,X53,X51] : (p(s(bool,X52)) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X53),s('type.num.num',X51))),s('type.num.num',X51))) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f92,f734])).
fof(f23041,plain,(
  ( ! [X295] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X295)))) ) | $spl254),
  inference(cnf_transformation,[],[f23041_D])).
fof(f23041_D,plain,(
  ( ! [X295] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X295)))) ) <=> ~$spl254),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl254])])).
fof(f25779,plain,(
  ( ! [X41,X40] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X40))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X41),s('type.num.num',X40))),s('type.num.num',X40)))) ) | $spl282),
  inference(cnf_transformation,[],[f25779_D])).
fof(f25779_D,plain,(
  ( ! [X41,X40] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X40))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X41),s('type.num.num',X40))),s('type.num.num',X40)))) ) <=> ~$spl282),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl282])])).
fof(f25807,plain,(
  ( ! [X294,X293,X295] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X294))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X293))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X295),s('type.num.num',X294))),s('type.num.num',X294)))) ) | $spl136),
  inference(subsumption_resolution,[],[f25578,f9287])).
fof(f25578,plain,(
  ( ! [X294,X293,X295] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X294))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X293))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X295),s('type.num.num',X294))),s('type.num.num',X294))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X293)))) ) | $spl136),
  inference(superposition,[],[f9287,f734])).
fof(f25787,plain,(
  ( ! [X142,X143,X141] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X142))) | s(bool,'T_0') = s(bool,X141) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X143),s('type.num.num',X142))),s('type.num.num',X142)))) ) | ($spl30 | $spl34)),
  inference(forward_demodulation,[],[f25658,f2852])).
fof(f2852,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) | $spl30),
  inference(cnf_transformation,[],[f2852_D])).
fof(f2852_D,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'F_0'))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f25658,plain,(
  ( ! [X142,X143,X141] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X142))) | s(bool,'T_0') = s(bool,X141) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X143),s('type.num.num',X142))),s('type.num.num',X142)))) ) | $spl34),
  inference(duplicate_literal_removal,[],[f25545])).
fof(f25545,plain,(
  ( ! [X142,X143,X141] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X142))) | s(bool,'T_0') = s(bool,X141) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X143),s('type.num.num',X142))),s('type.num.num',X142))) | s(bool,'T_0') = s(bool,X141)) ) | $spl34),
  inference(superposition,[],[f2856,f734])).
fof(f25786,plain,(
  ( ! [X140,X138,X139] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X139))) | s(bool,'T_0') = s(bool,X138) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X140),s('type.num.num',X139))),s('type.num.num',X139)))) )),
  inference(forward_demodulation,[],[f25659,f2138])).
fof(f25659,plain,(
  ( ! [X140,X138,X139] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X139))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X138) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X140),s('type.num.num',X139))),s('type.num.num',X139)))) )),
  inference(duplicate_literal_removal,[],[f25544])).
fof(f25544,plain,(
  ( ! [X140,X138,X139] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X139))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X138) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X140),s('type.num.num',X139))),s('type.num.num',X139))) | s(bool,'T_0') = s(bool,X138)) )),
  inference(superposition,[],[f2343,f734])).
fof(f25785,plain,(
  ( ! [X134,X135,X137] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X135))) | s(bool,'T_0') = s(bool,X134) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X137),s('type.num.num',X135))),s('type.num.num',X135)))) )),
  inference(forward_demodulation,[],[f25660,f215])).
fof(f25660,plain,(
  ( ! [X134,X136,X135,X137] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X135))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X136))))) | s(bool,'T_0') = s(bool,X134) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X137),s('type.num.num',X135))),s('type.num.num',X135)))) )),
  inference(duplicate_literal_removal,[],[f25543])).
fof(f25543,plain,(
  ( ! [X134,X136,X135,X137] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X135))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X136))))) | s(bool,'T_0') = s(bool,X134) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X137),s('type.num.num',X135))),s('type.num.num',X135))) | s(bool,'T_0') = s(bool,X134)) )),
  inference(superposition,[],[f2066,f734])).
fof(f25784,plain,(
  ( ! [X132,X133,X131] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X132))) | s(bool,'T_0') = s(bool,X131) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X133),s('type.num.num',X132))),s('type.num.num',X132)))) )),
  inference(forward_demodulation,[],[f25661,f1706])).
fof(f25661,plain,(
  ( ! [X132,X133,X131] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X132))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X131) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X133),s('type.num.num',X132))),s('type.num.num',X132)))) )),
  inference(duplicate_literal_removal,[],[f25542])).
fof(f25542,plain,(
  ( ! [X132,X133,X131] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X132))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X131) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X133),s('type.num.num',X132))),s('type.num.num',X132))) | s(bool,'T_0') = s(bool,X131)) )),
  inference(superposition,[],[f1832,f734])).
fof(f25783,plain,(
  ( ! [X130,X128,X129] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129))) | s(bool,'T_0') = s(bool,X128) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X130),s('type.num.num',X129))),s('type.num.num',X129)))) )),
  inference(forward_demodulation,[],[f25662,f1012])).
fof(f25662,plain,(
  ( ! [X130,X128,X129] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X128) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X130),s('type.num.num',X129))),s('type.num.num',X129)))) )),
  inference(duplicate_literal_removal,[],[f25541])).
fof(f25541,plain,(
  ( ! [X130,X128,X129] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X128) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X130),s('type.num.num',X129))),s('type.num.num',X129))) | s(bool,'T_0') = s(bool,X128)) )),
  inference(superposition,[],[f1096,f734])).
fof(f25782,plain,(
  ( ! [X127,X125,X126] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X126))) | s(bool,'T_0') = s(bool,X125) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X127),s('type.num.num',X126))),s('type.num.num',X126)))) )),
  inference(forward_demodulation,[],[f25663,f813])).
fof(f25663,plain,(
  ( ! [X127,X125,X126] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X126))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X125) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X127),s('type.num.num',X126))),s('type.num.num',X126)))) )),
  inference(duplicate_literal_removal,[],[f25540])).
fof(f25540,plain,(
  ( ! [X127,X125,X126] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X126))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X125) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X127),s('type.num.num',X126))),s('type.num.num',X126))) | s(bool,'T_0') = s(bool,X125)) )),
  inference(superposition,[],[f883,f734])).
fof(f25781,plain,(
  ( ! [X123,X124,X122] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X123))) | s(bool,'T_0') = s(bool,X122) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X124),s('type.num.num',X123))),s('type.num.num',X123)))) )),
  inference(forward_demodulation,[],[f25664,f688])).
fof(f25664,plain,(
  ( ! [X123,X124,X122] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X123))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X122) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X124),s('type.num.num',X123))),s('type.num.num',X123)))) )),
  inference(duplicate_literal_removal,[],[f25539])).
fof(f25539,plain,(
  ( ! [X123,X124,X122] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X123))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X122) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X124),s('type.num.num',X123))),s('type.num.num',X123))) | s(bool,'T_0') = s(bool,X122)) )),
  inference(superposition,[],[f766,f734])).
fof(f25752,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X74))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',X73))) | s('type.num.num',X73) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',sK2(X73,X72)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X75),s('type.num.num',X74))),s('type.num.num',X74)))) ) | $spl278),
  inference(cnf_transformation,[],[f25752_D])).
fof(f25752_D,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X74))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',X73))) | s('type.num.num',X73) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',sK2(X73,X72)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X75),s('type.num.num',X74))),s('type.num.num',X74)))) ) <=> ~$spl278),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl278])])).
fof(f25665,plain,(
  ( ! [X121,X118,X120,X119,X117] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X118))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X119),s('type.num.num',X120))) | s('type.num.num',X120) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X119),s('type.num.num',sK2(X120,X119)))) | s(bool,'T_0') = s(bool,X117) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X121),s('type.num.num',X118))),s('type.num.num',X118)))) )),
  inference(duplicate_literal_removal,[],[f25538])).
fof(f25538,plain,(
  ( ! [X121,X118,X120,X119,X117] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X118))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X119),s('type.num.num',X120))) | s('type.num.num',X120) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X119),s('type.num.num',sK2(X120,X119)))) | s(bool,'T_0') = s(bool,X117) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X121),s('type.num.num',X118))),s('type.num.num',X118))) | s(bool,'T_0') = s(bool,X117)) )),
  inference(superposition,[],[f605,f734])).
fof(f25751,plain,(
  ( ! [X70,X68,X69] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X69))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X69))),s('type.num.num',X69)))) ) | $spl276),
  inference(cnf_transformation,[],[f25751_D])).
fof(f25751_D,plain,(
  ( ! [X70,X68,X69] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X69))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X69))),s('type.num.num',X69)))) ) <=> ~$spl276),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl276])])).
fof(f25666,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X114))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X115))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X115))) | s(bool,'T_0') = s(bool,X113) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X116),s('type.num.num',X114))),s('type.num.num',X114)))) )),
  inference(duplicate_literal_removal,[],[f25537])).
fof(f25537,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X114))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X115))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X115))) | s(bool,'T_0') = s(bool,X113) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X116),s('type.num.num',X114))),s('type.num.num',X114))) | s(bool,'T_0') = s(bool,X113)) )),
  inference(superposition,[],[f483,f734])).
fof(f25780,plain,(
  ( ! [X45,X43,X42] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X43))) | s(bool,'T_0') = s(bool,X42) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X45),s('type.num.num',X43))),s('type.num.num',X43)))) )),
  inference(forward_demodulation,[],[f25681,f149])).
fof(f25681,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X43))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X44),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X42) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X45),s('type.num.num',X43))),s('type.num.num',X43)))) )),
  inference(duplicate_literal_removal,[],[f25524])).
fof(f25524,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X43))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X44),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X42) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X45),s('type.num.num',X43))),s('type.num.num',X43))) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f211,f734])).
fof(f25778,plain,(
  ( ! [X39,X41,X40] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X40))) | s(bool,'T_0') = s(bool,X39) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X41),s('type.num.num',X40))),s('type.num.num',X40)))) )),
  inference(forward_demodulation,[],[f25682,f135])).
fof(f25682,plain,(
  ( ! [X39,X41,X40] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X40))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X39) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X41),s('type.num.num',X40))),s('type.num.num',X40)))) )),
  inference(duplicate_literal_removal,[],[f25523])).
fof(f25523,plain,(
  ( ! [X39,X41,X40] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X40))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X39) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X41),s('type.num.num',X40))),s('type.num.num',X40))) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f210,f734])).
fof(f25688,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X1)))) )),
  inference(duplicate_literal_removal,[],[f25512])).
fof(f25512,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f84,f734])).
fof(f25745,plain,(
  ( ! [X54,X52,X55,X51] : (s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X51),s('type.num.num',X52))),s('type.num.num',X52))))) | s(bool,'T_0') = s(bool,X55) | s(bool,X55) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X52))) | s(bool,'T_0') = s(bool,X54)) ) | $spl270),
  inference(cnf_transformation,[],[f25745_D])).
fof(f25745_D,plain,(
  ( ! [X54,X52,X55,X51] : (s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X51),s('type.num.num',X52))),s('type.num.num',X52))))) | s(bool,'T_0') = s(bool,X55) | s(bool,X55) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X52))) | s(bool,'T_0') = s(bool,X54)) ) <=> ~$spl270),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl270])])).
fof(f25438,plain,(
  ( ! [X101,X99,X102,X100] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,X101) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X99),s('type.num.num',X100))),s('type.num.num',X100))))) | s(bool,'T_0') = s(bool,X101) | s(bool,X102) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X100))) | s(bool,'T_0') = s(bool,X102)) )),
  inference(superposition,[],[f483,f734])).
fof(f25753,plain,(
  ( ! [X80,X78,X79,X77] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X77))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X80),s('type.num.num',X77))),s('type.num.num',X77))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X79),s('type.num.num',X78))),s('type.num.num',X78)))) ) | $spl280),
  inference(cnf_transformation,[],[f25753_D])).
fof(f25753_D,plain,(
  ( ! [X80,X78,X79,X77] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X77))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X80),s('type.num.num',X77))),s('type.num.num',X77))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X79),s('type.num.num',X78))),s('type.num.num',X78)))) ) <=> ~$spl280),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl280])])).
fof(f25708,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X77))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X79),s('type.num.num',X78))),s('type.num.num',X78))) | s(bool,'T_0') = s(bool,X76) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X80),s('type.num.num',X77))),s('type.num.num',X77)))) )),
  inference(duplicate_literal_removal,[],[f25356])).
fof(f25356,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X77))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X78))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X79),s('type.num.num',X78))),s('type.num.num',X78))) | s(bool,'T_0') = s(bool,X76) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X80),s('type.num.num',X77))),s('type.num.num',X77))) | s(bool,'T_0') = s(bool,X76)) )),
  inference(superposition,[],[f734,f734])).
fof(f25709,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X74))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',X73))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X75),s('type.num.num',X74))),s('type.num.num',X74))) | s(bool,'T_0') = s(bool,X71) | s('type.num.num',X73) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',sK2(X73,X72))))) )),
  inference(duplicate_literal_removal,[],[f25355])).
fof(f25355,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X74))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',X73))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X75),s('type.num.num',X74))),s('type.num.num',X74))) | s(bool,'T_0') = s(bool,X71) | s('type.num.num',X73) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',sK2(X73,X72)))) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f734,f605])).
fof(f25710,plain,(
  ( ! [X70,X68,X69,X67] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X69))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X69))),s('type.num.num',X69))) | s(bool,'T_0') = s(bool,X67) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)))) )),
  inference(duplicate_literal_removal,[],[f25354])).
fof(f25354,plain,(
  ( ! [X70,X68,X69,X67] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X69))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X70),s('type.num.num',X69))),s('type.num.num',X69))) | s(bool,'T_0') = s(bool,X67) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f734,f483])).
fof(f25727,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f25341])).
fof(f25341,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f734,f84])).
fof(f25337,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X53),s('type.num.num','const.num.|48|_0'))),s('type.num.num','const.num.|48|_0'))) | s(bool,X54) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X51),s('type.num.num',X52))),s('type.num.num',X52))))) | s(bool,'T_0') = s(bool,X54) | s(bool,X55) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X52))) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f734,f734])).
fof(f25206,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK1)),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))))) | $spl268),
  inference(cnf_transformation,[],[f25206_D])).
fof(f25206_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK1)),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))))) <=> ~$spl268),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl268])])).
fof(f25180,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK1)),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1)))))) ) | $spl42),
  inference(duplicate_literal_removal,[],[f25139])).
fof(f25139,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK1)),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl42),
  inference(superposition,[],[f605,f24643])).
fof(f25197,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK1)),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1)))))) ) | $spl42),
  inference(duplicate_literal_removal,[],[f25127])).
fof(f25127,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2('const.num.|48|_0',sK1)),s('type.num.num',sK2('const.num.|48|_0',sK2('const.num.|48|_0',sK1))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl42),
  inference(superposition,[],[f24643,f605])).
fof(f24928,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.num.|48|_0')),s('type.num.num',sK2(sK1,sK2(sK1,'const.num.|48|_0'))))) | $spl266),
  inference(cnf_transformation,[],[f24928_D])).
fof(f24928_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.num.|48|_0')),s('type.num.num',sK2(sK1,sK2(sK1,'const.num.|48|_0'))))) <=> ~$spl266),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl266])])).
fof(f24902,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.num.|48|_0')),s('type.num.num',sK2(sK1,sK2(sK1,'const.num.|48|_0')))))) ) | $spl18),
  inference(duplicate_literal_removal,[],[f24861])).
fof(f24861,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.num.|48|_0')),s('type.num.num',sK2(sK1,sK2(sK1,'const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(superposition,[],[f605,f24267])).
fof(f24919,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.num.|48|_0')),s('type.num.num',sK2(sK1,sK2(sK1,'const.num.|48|_0')))))) ) | $spl18),
  inference(duplicate_literal_removal,[],[f24849])).
fof(f24849,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.num.|48|_0')),s('type.num.num',sK2(sK1,sK2(sK1,'const.num.|48|_0'))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(superposition,[],[f24267,f605])).
fof(f24150,plain,(
  ( ! [X68,X64,X69,X67,X65,X63] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num',X64))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X63))) | s(bool,'T_0') = s(bool,X69) | s(bool,X68) = s(bool,X69) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X64),s('type.num.num',X65)))))) ) | $spl264),
  inference(cnf_transformation,[],[f24150_D])).
fof(f24150_D,plain,(
  ( ! [X68,X64,X69,X67,X65,X63] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num',X64))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X63))) | s(bool,'T_0') = s(bool,X69) | s(bool,X68) = s(bool,X69) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X64),s('type.num.num',X65)))))) ) <=> ~$spl264),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl264])])).
fof(f24155,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X82] : (p(s(bool,X80)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',X78))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X81),s('type.num.num',X77))) | s(bool,X82) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X77),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X79))))) | s(bool,X82) = s(bool,X83) | s(bool,'T_0') = s(bool,X83)) )),
  inference(subsumption_resolution,[],[f24070,f87])).
fof(f24070,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X82] : (p(s(bool,X80)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',X78))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X81),s('type.num.num',X77))) | s(bool,X82) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X77),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X79))))) | s(bool,X82) = s(bool,X83) | s(bool,'T_0') = s(bool,X83) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f1175,f262])).
fof(f24149,plain,(
  ( ! [X68,X66,X64,X69,X67,X65,X63] : (p(s(bool,X66)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num',X64))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X63))) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X64),s('type.num.num',X65))))) | s(bool,X68) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(subsumption_resolution,[],[f24068,f87])).
fof(f24068,plain,(
  ( ! [X68,X66,X64,X69,X67,X65,X63] : (p(s(bool,X66)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X65),s('type.num.num',X64))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X67),s('type.num.num',X63))) | s(bool,X68) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X63),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X64),s('type.num.num',X65))))) | s(bool,'T_0') = s(bool,X66) | s(bool,X68) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f1175,f262])).
fof(f24146,plain,(
  ( ! [X6,X10,X8,X7] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8)),X6))))) ) | $spl262),
  inference(cnf_transformation,[],[f24146_D])).
fof(f24146_D,plain,(
  ( ! [X6,X10,X8,X7] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8)),X6))))) ) <=> ~$spl262),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl262])])).
fof(f24145,plain,(
  ( ! [X6,X10,X8,X7,X9] : (p(s(bool,X9)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8)),X6))))) )),
  inference(subsumption_resolution,[],[f24058,f87])).
fof(f24058,plain,(
  ( ! [X6,X10,X8,X7,X9] : (p(s(bool,X9)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X7))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X6))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8)),X6)))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f1175,f605])).
fof(f22926,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK2(X2,X1))))) ) | $spl246),
  inference(cnf_transformation,[],[f22926_D])).
fof(f22926_D,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK2(X2,X1))))) ) <=> ~$spl246),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl246])])).
fof(f23060,plain,(
  ( ! [X80,X81,X79] : (p(s(bool,X81)) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X79),s('type.num.num',X80))) | s('type.num.num',X80) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',sK2(X80,X79))))) )),
  inference(subsumption_resolution,[],[f22772,f87])).
fof(f22772,plain,(
  ( ! [X80,X81,X79] : (p(s(bool,X81)) | s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X79),s('type.num.num',X80))) | s('type.num.num',X80) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X79),s('type.num.num',sK2(X80,X79)))) | s(bool,'T_0') = s(bool,X81)) )),
  inference(superposition,[],[f92,f605])).
fof(f23058,plain,(
  ( ! [X43,X46,X44,X42] : (s('type.num.num',X44) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num',X42))),s('type.num.num',X46))) | s('type.num.num',X44) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X43))),s('type.num.num',sK2(X44,'const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X43))))))) ) | $spl260),
  inference(cnf_transformation,[],[f23058_D])).
fof(f23058_D,plain,(
  ( ! [X43,X46,X44,X42] : (s('type.num.num',X44) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num',X42))),s('type.num.num',X46))) | s('type.num.num',X44) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X43))),s('type.num.num',sK2(X44,'const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X43))))))) ) <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f23057,plain,(
  ( ! [X45,X43,X46,X44,X42] : (p(s(bool,X45)) | s('type.num.num',X44) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num',X42))),s('type.num.num',X46))) | s('type.num.num',X44) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X43))),s('type.num.num',sK2(X44,'const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X43))))))) )),
  inference(subsumption_resolution,[],[f22754,f87])).
fof(f22754,plain,(
  ( ! [X45,X43,X46,X44,X42] : (p(s(bool,X45)) | s('type.num.num',X44) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num',X42))),s('type.num.num',X46))) | s('type.num.num',X44) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X43))),s('type.num.num',sK2(X44,'const.arithmetic.+_2'(s('type.num.num',X42),s('type.num.num',X43)))))) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f519,f605])).
fof(f23056,plain,(
  ( ! [X23,X21,X19,X20] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X23))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21)),X19))))) ) | $spl258),
  inference(cnf_transformation,[],[f23056_D])).
fof(f23056_D,plain,(
  ( ! [X23,X21,X19,X20] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X23))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21)),X19))))) ) <=> ~$spl258),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl258])])).
fof(f23055,plain,(
  ( ! [X23,X21,X19,X22,X20] : (p(s(bool,X22)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X23))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21)),X19))))) )),
  inference(subsumption_resolution,[],[f22747,f87])).
fof(f22747,plain,(
  ( ! [X23,X21,X19,X22,X20] : (p(s(bool,X22)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X23))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X20))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21)),X19)))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f516,f605])).
fof(f23054,plain,(
  ( ! [X0,X3,X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X0))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2(X1,X0))))) ) | $spl256),
  inference(cnf_transformation,[],[f23054_D])).
fof(f23054_D,plain,(
  ( ! [X0,X3,X1] : (s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X0))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2(X1,X0))))) ) <=> ~$spl256),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl256])])).
fof(f23053,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X0))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2(X1,X0))))) )),
  inference(subsumption_resolution,[],[f22742,f87])).
fof(f22742,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X0))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2(X1,X0)))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f525,f605])).
fof(f22997,plain,(
  ( ! [X41,X40] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X40),s('type.num.num',X41))) | s('type.num.num',X41) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',sK2(X41,X40))))) ) | $spl252),
  inference(cnf_transformation,[],[f22997_D])).
fof(f22997_D,plain,(
  ( ! [X41,X40] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X40),s('type.num.num',X41))) | s('type.num.num',X41) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',sK2(X41,X40))))) ) <=> ~$spl252),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl252])])).
fof(f23040,plain,(
  ( ! [X296,X295,X297] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X296),s('type.num.num',X297))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X295))) | s('type.num.num',X297) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X296),s('type.num.num',sK2(X297,X296))))) ) | $spl136),
  inference(subsumption_resolution,[],[f22728,f9287])).
fof(f22728,plain,(
  ( ! [X296,X295,X297] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X296),s('type.num.num',X297))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X295))) | s('type.num.num',X297) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X296),s('type.num.num',sK2(X297,X296)))) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X295)))) ) | $spl136),
  inference(superposition,[],[f9287,f605])).
fof(f23005,plain,(
  ( ! [X138,X136,X137] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X137),s('type.num.num',X138))) | s(bool,'T_0') = s(bool,X136) | s('type.num.num',X138) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X137),s('type.num.num',sK2(X138,X137))))) ) | ($spl30 | $spl34)),
  inference(forward_demodulation,[],[f22830,f2852])).
fof(f22830,plain,(
  ( ! [X138,X136,X137] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X137),s('type.num.num',X138))) | s(bool,'T_0') = s(bool,X136) | s('type.num.num',X138) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X137),s('type.num.num',sK2(X138,X137))))) ) | $spl34),
  inference(duplicate_literal_removal,[],[f22699])).
fof(f22699,plain,(
  ( ! [X138,X136,X137] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X137),s('type.num.num',X138))) | s(bool,'T_0') = s(bool,X136) | s('type.num.num',X138) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X137),s('type.num.num',sK2(X138,X137)))) | s(bool,'T_0') = s(bool,X136)) ) | $spl34),
  inference(superposition,[],[f2856,f605])).
fof(f23004,plain,(
  ( ! [X134,X135,X133] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X134),s('type.num.num',X135))) | s(bool,'T_0') = s(bool,X133) | s('type.num.num',X135) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X134),s('type.num.num',sK2(X135,X134))))) )),
  inference(forward_demodulation,[],[f22831,f2138])).
fof(f22831,plain,(
  ( ! [X134,X135,X133] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X134),s('type.num.num',X135))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X133) | s('type.num.num',X135) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X134),s('type.num.num',sK2(X135,X134))))) )),
  inference(duplicate_literal_removal,[],[f22698])).
fof(f22698,plain,(
  ( ! [X134,X135,X133] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X134),s('type.num.num',X135))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X133) | s('type.num.num',X135) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X134),s('type.num.num',sK2(X135,X134)))) | s(bool,'T_0') = s(bool,X133)) )),
  inference(superposition,[],[f2343,f605])).
fof(f23003,plain,(
  ( ! [X130,X131,X129] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X130),s('type.num.num',X131))) | s(bool,'T_0') = s(bool,X129) | s('type.num.num',X131) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X130),s('type.num.num',sK2(X131,X130))))) )),
  inference(forward_demodulation,[],[f22832,f215])).
fof(f22832,plain,(
  ( ! [X132,X130,X131,X129] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X130),s('type.num.num',X131))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X132))))) | s(bool,'T_0') = s(bool,X129) | s('type.num.num',X131) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X130),s('type.num.num',sK2(X131,X130))))) )),
  inference(duplicate_literal_removal,[],[f22697])).
fof(f22697,plain,(
  ( ! [X132,X130,X131,X129] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X130),s('type.num.num',X131))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X132))))) | s(bool,'T_0') = s(bool,X129) | s('type.num.num',X131) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X130),s('type.num.num',sK2(X131,X130)))) | s(bool,'T_0') = s(bool,X129)) )),
  inference(superposition,[],[f2066,f605])).
fof(f23002,plain,(
  ( ! [X127,X128,X126] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X127),s('type.num.num',X128))) | s(bool,'T_0') = s(bool,X126) | s('type.num.num',X128) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X127),s('type.num.num',sK2(X128,X127))))) )),
  inference(forward_demodulation,[],[f22833,f1706])).
fof(f22833,plain,(
  ( ! [X127,X128,X126] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X127),s('type.num.num',X128))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X126) | s('type.num.num',X128) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X127),s('type.num.num',sK2(X128,X127))))) )),
  inference(duplicate_literal_removal,[],[f22696])).
fof(f22696,plain,(
  ( ! [X127,X128,X126] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X127),s('type.num.num',X128))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X126) | s('type.num.num',X128) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X127),s('type.num.num',sK2(X128,X127)))) | s(bool,'T_0') = s(bool,X126)) )),
  inference(superposition,[],[f1832,f605])).
fof(f23001,plain,(
  ( ! [X125,X123,X124] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X124),s('type.num.num',X125))) | s(bool,'T_0') = s(bool,X123) | s('type.num.num',X125) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X124),s('type.num.num',sK2(X125,X124))))) )),
  inference(forward_demodulation,[],[f22834,f1012])).
fof(f22834,plain,(
  ( ! [X125,X123,X124] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X124),s('type.num.num',X125))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X123) | s('type.num.num',X125) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X124),s('type.num.num',sK2(X125,X124))))) )),
  inference(duplicate_literal_removal,[],[f22695])).
fof(f22695,plain,(
  ( ! [X125,X123,X124] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X124),s('type.num.num',X125))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X123) | s('type.num.num',X125) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X124),s('type.num.num',sK2(X125,X124)))) | s(bool,'T_0') = s(bool,X123)) )),
  inference(superposition,[],[f1096,f605])).
fof(f23000,plain,(
  ( ! [X121,X122,X120] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X121),s('type.num.num',X122))) | s(bool,'T_0') = s(bool,X120) | s('type.num.num',X122) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X121),s('type.num.num',sK2(X122,X121))))) )),
  inference(forward_demodulation,[],[f22835,f813])).
fof(f22835,plain,(
  ( ! [X121,X122,X120] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X121),s('type.num.num',X122))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X120) | s('type.num.num',X122) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X121),s('type.num.num',sK2(X122,X121))))) )),
  inference(duplicate_literal_removal,[],[f22694])).
fof(f22694,plain,(
  ( ! [X121,X122,X120] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X121),s('type.num.num',X122))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X120) | s('type.num.num',X122) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X121),s('type.num.num',sK2(X122,X121)))) | s(bool,'T_0') = s(bool,X120)) )),
  inference(superposition,[],[f883,f605])).
fof(f22999,plain,(
  ( ! [X118,X119,X117] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X118),s('type.num.num',X119))) | s(bool,'T_0') = s(bool,X117) | s('type.num.num',X119) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X118),s('type.num.num',sK2(X119,X118))))) )),
  inference(forward_demodulation,[],[f22836,f688])).
fof(f22836,plain,(
  ( ! [X118,X119,X117] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X118),s('type.num.num',X119))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X117) | s('type.num.num',X119) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X118),s('type.num.num',sK2(X119,X118))))) )),
  inference(duplicate_literal_removal,[],[f22693])).
fof(f22693,plain,(
  ( ! [X118,X119,X117] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X118),s('type.num.num',X119))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X117) | s('type.num.num',X119) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X118),s('type.num.num',sK2(X119,X118)))) | s(bool,'T_0') = s(bool,X117)) )),
  inference(superposition,[],[f766,f605])).
fof(f22927,plain,(
  ( ! [X70,X68,X69] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X69),s('type.num.num',X70))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) | s('type.num.num',X70) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num',sK2(X70,X69))))) ) | $spl248),
  inference(cnf_transformation,[],[f22927_D])).
fof(f22927_D,plain,(
  ( ! [X70,X68,X69] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X69),s('type.num.num',X70))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) | s('type.num.num',X70) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num',sK2(X70,X69))))) ) <=> ~$spl248),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl248])])).
fof(f22837,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X114),s('type.num.num',X115))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))) | s(bool,'T_0') = s(bool,X113) | s('type.num.num',X115) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',sK2(X115,X114))))) )),
  inference(duplicate_literal_removal,[],[f22692])).
fof(f22692,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X114),s('type.num.num',X115))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))) | s(bool,'T_0') = s(bool,X113) | s('type.num.num',X115) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',sK2(X115,X114)))) | s(bool,'T_0') = s(bool,X113)) )),
  inference(superposition,[],[f483,f605])).
fof(f22998,plain,(
  ( ! [X43,X44,X42] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X43),s('type.num.num',X44))) | s(bool,'T_0') = s(bool,X42) | s('type.num.num',X44) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num',sK2(X44,X43))))) )),
  inference(forward_demodulation,[],[f22852,f149])).
fof(f22852,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X43),s('type.num.num',X44))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X45),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X42) | s('type.num.num',X44) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num',sK2(X44,X43))))) )),
  inference(duplicate_literal_removal,[],[f22679])).
fof(f22679,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X43),s('type.num.num',X44))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X45),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X42) | s('type.num.num',X44) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num',sK2(X44,X43)))) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f211,f605])).
fof(f22996,plain,(
  ( ! [X39,X41,X40] : (s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num',X40),s('type.num.num',X41))) | s(bool,'T_0') = s(bool,X39) | s('type.num.num',X41) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',sK2(X41,X40))))) )),
  inference(forward_demodulation,[],[f22853,f135])).
fof(f22853,plain,(
  ( ! [X39,X41,X40] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X40),s('type.num.num',X41))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X39) | s('type.num.num',X41) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',sK2(X41,X40))))) )),
  inference(duplicate_literal_removal,[],[f22678])).
fof(f22678,plain,(
  ( ! [X39,X41,X40] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X40),s('type.num.num',X41))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X39) | s('type.num.num',X41) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X40),s('type.num.num',sK2(X41,X40)))) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f210,f605])).
fof(f22859,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK2(X2,X1))))) )),
  inference(duplicate_literal_removal,[],[f22667])).
fof(f22667,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK2(X2,X1)))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f84,f605])).
fof(f22925,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) | $spl244),
  inference(cnf_transformation,[],[f22925_D])).
fof(f22925_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) <=> ~$spl244),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl244])])).
fof(f22992,plain,(
  ( ! [X70] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X70)) )),
  inference(subsumption_resolution,[],[f22593,f717])).
fof(f22593,plain,(
  ( ! [X70] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) | s(bool,X70) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f5172,f605])).
fof(f22928,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',X73))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X74),s('type.num.num',X75))) | s('type.num.num',X73) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',sK2(X73,X72)))) | s('type.num.num',X75) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',sK2(X75,X74))))) ) | $spl250),
  inference(cnf_transformation,[],[f22928_D])).
fof(f22928_D,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',X73))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X74),s('type.num.num',X75))) | s('type.num.num',X73) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',sK2(X73,X72)))) | s('type.num.num',X75) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',sK2(X75,X74))))) ) <=> ~$spl250),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl250])])).
fof(f22887,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',X73))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X74),s('type.num.num',X75))) | s('type.num.num',X75) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',sK2(X75,X74)))) | s(bool,'T_0') = s(bool,X71) | s('type.num.num',X73) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',sK2(X73,X72))))) )),
  inference(duplicate_literal_removal,[],[f22500])).
fof(f22500,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',X72),s('type.num.num',X73))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X74),s('type.num.num',X75))) | s('type.num.num',X75) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X74),s('type.num.num',sK2(X75,X74)))) | s(bool,'T_0') = s(bool,X71) | s('type.num.num',X73) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',sK2(X73,X72)))) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f605,f605])).
fof(f22888,plain,(
  ( ! [X70,X68,X69,X67] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X69),s('type.num.num',X70))) | s('type.num.num',X70) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num',sK2(X70,X69)))) | s(bool,'T_0') = s(bool,X67) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)))) )),
  inference(duplicate_literal_removal,[],[f22499])).
fof(f22499,plain,(
  ( ! [X70,X68,X69,X67] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X69),s('type.num.num',X70))) | s('type.num.num',X70) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X69),s('type.num.num',sK2(X70,X69)))) | s(bool,'T_0') = s(bool,X67) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) | s(bool,'T_0') = s(bool,X67)) )),
  inference(superposition,[],[f605,f483])).
fof(f22905,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK2(X2,X1)))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f22486])).
fof(f22486,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK2(X2,X1)))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f605,f84])).
fof(f22923,plain,(
  ( ! [X7] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f22485,f717])).
fof(f22485,plain,(
  ( ! [X7] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) | s(bool,X7) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f605,f5172])).
fof(f22136,plain,(
  ( ! [X269,X273,X268,X270,X272,X274] : (s('type.num.num',X270) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X269),s('type.num.num',X268))),s('type.num.num',X272))) | s(bool,'T_0') = s(bool,X274) | s(bool,X273) = s(bool,X274) | s(bool,X273) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X268),s('type.num.num',X269))),s('type.num.num',X270)))) ) | $spl242),
  inference(cnf_transformation,[],[f22136_D])).
fof(f22136_D,plain,(
  ( ! [X269,X273,X268,X270,X272,X274] : (s('type.num.num',X270) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X269),s('type.num.num',X268))),s('type.num.num',X272))) | s(bool,'T_0') = s(bool,X274) | s(bool,X273) = s(bool,X274) | s(bool,X273) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X268),s('type.num.num',X269))),s('type.num.num',X270)))) ) <=> ~$spl242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl242])])).
fof(f22286,plain,(
  ( ! [X269,X271,X273,X268,X270,X272,X274] : (p(s(bool,X271)) | s('type.num.num',X270) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X269),s('type.num.num',X268))),s('type.num.num',X272))) | s(bool,X273) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X268),s('type.num.num',X269))),s('type.num.num',X270))) | s(bool,X273) = s(bool,X274) | s(bool,'T_0') = s(bool,X274)) )),
  inference(subsumption_resolution,[],[f20402,f87])).
fof(f20402,plain,(
  ( ! [X269,X271,X273,X268,X270,X272,X274] : (p(s(bool,X271)) | s('type.num.num',X270) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X269),s('type.num.num',X268))),s('type.num.num',X272))) | s(bool,X273) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X268),s('type.num.num',X269))),s('type.num.num',X270))) | s(bool,X273) = s(bool,X274) | s(bool,'T_0') = s(bool,X274) | s(bool,'T_0') = s(bool,X271)) )),
  inference(superposition,[],[f519,f262])).
fof(f22131,plain,(
  ( ! [X231,X237,X235,X233,X236,X232] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X231),s('type.num.num',X235))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X233),s('type.num.num',X232))) | s(bool,'T_0') = s(bool,X237) | s(bool,X236) = s(bool,X237) | s(bool,X236) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X231),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X232),s('type.num.num',X233)))))) ) | $spl240),
  inference(cnf_transformation,[],[f22131_D])).
fof(f22131_D,plain,(
  ( ! [X231,X237,X235,X233,X236,X232] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X231),s('type.num.num',X235))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X233),s('type.num.num',X232))) | s(bool,'T_0') = s(bool,X237) | s(bool,X236) = s(bool,X237) | s(bool,X236) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X231),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X232),s('type.num.num',X233)))))) ) <=> ~$spl240),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl240])])).
fof(f22282,plain,(
  ( ! [X231,X237,X235,X233,X236,X234,X232] : (p(s(bool,X234)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X231),s('type.num.num',X235))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X233),s('type.num.num',X232))) | s(bool,X236) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X231),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X232),s('type.num.num',X233))))) | s(bool,X236) = s(bool,X237) | s(bool,'T_0') = s(bool,X237)) )),
  inference(subsumption_resolution,[],[f20395,f87])).
fof(f20395,plain,(
  ( ! [X231,X237,X235,X233,X236,X234,X232] : (p(s(bool,X234)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X231),s('type.num.num',X235))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X233),s('type.num.num',X232))) | s(bool,X236) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X231),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X232),s('type.num.num',X233))))) | s(bool,X236) = s(bool,X237) | s(bool,'T_0') = s(bool,X237) | s(bool,'T_0') = s(bool,X234)) )),
  inference(superposition,[],[f516,f262])).
fof(f22129,plain,(
  ( ! [X206,X202,X207,X205,X203] : (s('type.num.num',X203) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X205),s('type.num.num',X202))) | s(bool,'T_0') = s(bool,X207) | s(bool,X206) = s(bool,X207) | s(bool,X206) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X202),s('type.num.num',X203)))) ) | $spl238),
  inference(cnf_transformation,[],[f22129_D])).
fof(f22129_D,plain,(
  ( ! [X206,X202,X207,X205,X203] : (s('type.num.num',X203) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X205),s('type.num.num',X202))) | s(bool,'T_0') = s(bool,X207) | s(bool,X206) = s(bool,X207) | s(bool,X206) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X202),s('type.num.num',X203)))) ) <=> ~$spl238),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl238])])).
fof(f22281,plain,(
  ( ! [X206,X204,X202,X207,X205,X203] : (p(s(bool,X204)) | s('type.num.num',X203) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X205),s('type.num.num',X202))) | s(bool,X206) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X202),s('type.num.num',X203))) | s(bool,X206) = s(bool,X207) | s(bool,'T_0') = s(bool,X207)) )),
  inference(subsumption_resolution,[],[f20390,f87])).
fof(f20390,plain,(
  ( ! [X206,X204,X202,X207,X205,X203] : (p(s(bool,X204)) | s('type.num.num',X203) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X205),s('type.num.num',X202))) | s(bool,X206) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X202),s('type.num.num',X203))) | s(bool,X206) = s(bool,X207) | s(bool,'T_0') = s(bool,X207) | s(bool,'T_0') = s(bool,X204)) )),
  inference(superposition,[],[f525,f262])).
fof(f22135,plain,(
  ( ! [X269,X271,X273,X268,X270,X272,X274] : (p(s(bool,X271)) | s('type.num.num',X270) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X269),s('type.num.num',X268))),s('type.num.num',X272))) | s(bool,X273) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X268),s('type.num.num',X269))),s('type.num.num',X270))) | s(bool,X273) = s(bool,X274) | s(bool,'T_0') = s(bool,X274)) )),
  inference(subsumption_resolution,[],[f20138,f87])).
fof(f20138,plain,(
  ( ! [X269,X271,X273,X268,X270,X272,X274] : (p(s(bool,X271)) | s('type.num.num',X270) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X269),s('type.num.num',X268))),s('type.num.num',X272))) | s(bool,X273) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X268),s('type.num.num',X269))),s('type.num.num',X270))) | s(bool,'T_0') = s(bool,X271) | s(bool,X273) = s(bool,X274) | s(bool,'T_0') = s(bool,X274)) )),
  inference(superposition,[],[f519,f262])).
fof(f22130,plain,(
  ( ! [X231,X237,X235,X233,X236,X234,X232] : (p(s(bool,X234)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X231),s('type.num.num',X235))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X233),s('type.num.num',X232))) | s(bool,X236) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X231),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X232),s('type.num.num',X233))))) | s(bool,X236) = s(bool,X237) | s(bool,'T_0') = s(bool,X237)) )),
  inference(subsumption_resolution,[],[f20131,f87])).
fof(f20131,plain,(
  ( ! [X231,X237,X235,X233,X236,X234,X232] : (p(s(bool,X234)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X231),s('type.num.num',X235))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X233),s('type.num.num',X232))) | s(bool,X236) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X231),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X232),s('type.num.num',X233))))) | s(bool,'T_0') = s(bool,X234) | s(bool,X236) = s(bool,X237) | s(bool,'T_0') = s(bool,X237)) )),
  inference(superposition,[],[f516,f262])).
fof(f22128,plain,(
  ( ! [X206,X204,X202,X207,X205,X203] : (p(s(bool,X204)) | s('type.num.num',X203) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X205),s('type.num.num',X202))) | s(bool,X206) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X202),s('type.num.num',X203))) | s(bool,X206) = s(bool,X207) | s(bool,'T_0') = s(bool,X207)) )),
  inference(subsumption_resolution,[],[f20126,f87])).
fof(f20126,plain,(
  ( ! [X206,X204,X202,X207,X205,X203] : (p(s(bool,X204)) | s('type.num.num',X203) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X205),s('type.num.num',X202))) | s(bool,X206) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X202),s('type.num.num',X203))) | s(bool,'T_0') = s(bool,X204) | s(bool,X206) = s(bool,X207) | s(bool,'T_0') = s(bool,X207)) )),
  inference(superposition,[],[f525,f262])).
fof(f22112,plain,(
  ( ! [X68,X66,X64,X69,X67] : (s(bool,X64) != s(bool,X66) | s(bool,'T_0') = s(bool,X69) | s(bool,X68) = s(bool,X69) | s(bool,X64) = s(bool,X68) | s(bool,'T_0') = s(bool,X67) | s(bool,X66) = s(bool,X67)) ) | $spl236),
  inference(cnf_transformation,[],[f22112_D])).
fof(f22112_D,plain,(
  ( ! [X68,X66,X64,X69,X67] : (s(bool,X64) != s(bool,X66) | s(bool,'T_0') = s(bool,X69) | s(bool,X68) = s(bool,X69) | s(bool,X64) = s(bool,X68) | s(bool,'T_0') = s(bool,X67) | s(bool,X66) = s(bool,X67)) ) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f22111,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (p(s(bool,X65)) | s(bool,X64) != s(bool,X66) | s(bool,X66) = s(bool,X67) | s(bool,'T_0') = s(bool,X67) | s(bool,X64) = s(bool,X68) | s(bool,X68) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(subsumption_resolution,[],[f20094,f87])).
fof(f20094,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (p(s(bool,X65)) | s(bool,X64) != s(bool,X66) | s(bool,X66) = s(bool,X67) | s(bool,'T_0') = s(bool,X67) | s(bool,X64) = s(bool,X68) | s(bool,'T_0') = s(bool,X65) | s(bool,X68) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) )),
  inference(superposition,[],[f470,f262])).
fof(f22106,plain,(
  ( ! [X6,X4,X7] : (s(bool,'T_0') != s(bool,X4) | s(bool,'T_0') = s(bool,X7) | s(bool,X6) = s(bool,X7) | s(bool,X4) = s(bool,X6)) ) | $spl234),
  inference(cnf_transformation,[],[f22106_D])).
fof(f22106_D,plain,(
  ( ! [X6,X4,X7] : (s(bool,'T_0') != s(bool,X4) | s(bool,'T_0') = s(bool,X7) | s(bool,X6) = s(bool,X7) | s(bool,X4) = s(bool,X6)) ) <=> ~$spl234),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl234])])).
fof(f22105,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,X5)) | s(bool,'T_0') != s(bool,X4) | s(bool,X4) = s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f20081,f87])).
fof(f20081,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,X5)) | s(bool,'T_0') != s(bool,X4) | s(bool,X4) = s(bool,X6) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f87,f262])).
fof(f2681,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | $spl7),
  inference(cnf_transformation,[],[f2681_D])).
fof(f2681_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f19383,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | $spl232),
  inference(cnf_transformation,[],[f19383_D])).
fof(f19383_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f19381,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f19380,f604])).
fof(f19380,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f3893,f2124])).
fof(f3893,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(superposition,[],[f618,f2703])).
fof(f2683,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | $spl8),
  inference(cnf_transformation,[],[f2683_D])).
fof(f2683_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f19363,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f4224,f604])).
fof(f4224,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(superposition,[],[f619,f604])).
fof(f19362,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | $spl230),
  inference(cnf_transformation,[],[f19362_D])).
fof(f19362_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f19360,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f19359,f604])).
fof(f19359,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f4225,f2124])).
fof(f4225,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(superposition,[],[f619,f2703])).
fof(f19358,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | $spl228),
  inference(cnf_transformation,[],[f19358_D])).
fof(f19358_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) <=> ~$spl228),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl228])])).
fof(f19356,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f4226,f763])).
fof(f4226,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(superposition,[],[f619,f763])).
fof(f19355,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | $spl226),
  inference(cnf_transformation,[],[f19355_D])).
fof(f19355_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f19353,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f4227,f880])).
fof(f4227,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(superposition,[],[f619,f880])).
fof(f19352,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | $spl224),
  inference(cnf_transformation,[],[f19352_D])).
fof(f19352_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) <=> ~$spl224),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl224])])).
fof(f19350,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f4228,f1093])).
fof(f4228,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(superposition,[],[f619,f1093])).
fof(f19349,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | $spl222),
  inference(cnf_transformation,[],[f19349_D])).
fof(f19349_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f19347,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f4229,f1829])).
fof(f4229,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(superposition,[],[f619,f1829])).
fof(f19346,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | $spl220),
  inference(cnf_transformation,[],[f19346_D])).
fof(f19346_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) <=> ~$spl220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl220])])).
fof(f19344,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f4943,f604])).
fof(f4943,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),
  inference(superposition,[],[f3035,f604])).
fof(f19343,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | $spl218),
  inference(cnf_transformation,[],[f19343_D])).
fof(f19343_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f19341,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f19340,f604])).
fof(f19340,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f4944,f2124])).
fof(f4944,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),
  inference(superposition,[],[f3035,f2703])).
fof(f19339,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | $spl216),
  inference(cnf_transformation,[],[f19339_D])).
fof(f19339_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f19337,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f4945,f763])).
fof(f4945,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),
  inference(superposition,[],[f3035,f763])).
fof(f19336,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | $spl214),
  inference(cnf_transformation,[],[f19336_D])).
fof(f19336_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) <=> ~$spl214),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl214])])).
fof(f19334,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f4946,f880])).
fof(f4946,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),
  inference(superposition,[],[f3035,f880])).
fof(f19333,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | $spl212),
  inference(cnf_transformation,[],[f19333_D])).
fof(f19333_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) <=> ~$spl212),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl212])])).
fof(f19331,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f4947,f1093])).
fof(f4947,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),
  inference(superposition,[],[f3035,f1093])).
fof(f19330,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | $spl210),
  inference(cnf_transformation,[],[f19330_D])).
fof(f19330_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) <=> ~$spl210),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl210])])).
fof(f19328,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f4948,f1829])).
fof(f4948,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),
  inference(superposition,[],[f3035,f1829])).
fof(f19327,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | $spl208),
  inference(cnf_transformation,[],[f19327_D])).
fof(f19327_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f19325,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f5128,f604])).
fof(f5128,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(superposition,[],[f3174,f604])).
fof(f19324,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | $spl206),
  inference(cnf_transformation,[],[f19324_D])).
fof(f19324_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f19322,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f19321,f604])).
fof(f19321,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f5129,f2124])).
fof(f5129,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(superposition,[],[f3174,f2703])).
fof(f19320,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) | $spl204),
  inference(cnf_transformation,[],[f19320_D])).
fof(f19320_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f19318,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f5130,f763])).
fof(f5130,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))),
  inference(superposition,[],[f3174,f763])).
fof(f19317,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | $spl202),
  inference(cnf_transformation,[],[f19317_D])).
fof(f19317_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f19315,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f5131,f880])).
fof(f5131,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))),
  inference(superposition,[],[f3174,f880])).
fof(f19314,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) | $spl200),
  inference(cnf_transformation,[],[f19314_D])).
fof(f19314_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) <=> ~$spl200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl200])])).
fof(f19312,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f5132,f1093])).
fof(f5132,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))),
  inference(superposition,[],[f3174,f1093])).
fof(f19311,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) | $spl198),
  inference(cnf_transformation,[],[f19311_D])).
fof(f19311_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) <=> ~$spl198),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl198])])).
fof(f19309,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f5133,f1829])).
fof(f5133,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))),
  inference(superposition,[],[f3174,f1829])).
fof(f19308,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | $spl196),
  inference(cnf_transformation,[],[f19308_D])).
fof(f19308_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f19306,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f19305,f604])).
fof(f19305,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f19304,f101])).
fof(f19304,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f5248,f714])).
fof(f5248,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(superposition,[],[f618,f5172])).
fof(f19303,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | $spl194),
  inference(cnf_transformation,[],[f19303_D])).
fof(f19303_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f19301,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f19300,f604])).
fof(f19300,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f19299,f101])).
fof(f19299,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f5249,f714])).
fof(f5249,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(superposition,[],[f619,f5172])).
fof(f19274,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | $spl192),
  inference(cnf_transformation,[],[f19274_D])).
fof(f19274_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f19272,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f19271,f604])).
fof(f19271,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f19270,f101])).
fof(f19270,plain,(
  s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f5283,f714])).
fof(f5283,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),
  inference(superposition,[],[f3035,f5172])).
fof(f19269,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | $spl190),
  inference(cnf_transformation,[],[f19269_D])).
fof(f19269_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f19267,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f19266,f604])).
fof(f19266,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f19265,f101])).
fof(f19265,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f5284,f714])).
fof(f5284,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(superposition,[],[f3174,f5172])).
fof(f19098,plain,(
  ( ! [X64] : (s(bool,g(s(bool,'F_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64)))) ) | $spl188),
  inference(cnf_transformation,[],[f19098_D])).
fof(f19098_D,plain,(
  ( ! [X64] : (s(bool,g(s(bool,'F_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64)))) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f18922,plain,(
  ( ! [X19,X20] : (s(bool,g(s(bool,'F_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X20))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X20))) | s(bool,'T_0') = s(bool,X19)) ) | $spl26),
  inference(duplicate_literal_removal,[],[f18528])).
fof(f18528,plain,(
  ( ! [X19,X20] : (s(bool,g(s(bool,'F_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X20))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X20))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) ) | $spl26),
  inference(superposition,[],[f483,f2850])).
fof(f19097,plain,(
  ( ! [X68] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)))) ) | $spl186),
  inference(cnf_transformation,[],[f19097_D])).
fof(f19097_D,plain,(
  ( ! [X68] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)))) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f18921,plain,(
  ( ! [X21,X22] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X22))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X22))) | s(bool,'T_0') = s(bool,X21)) ) | $spl19),
  inference(duplicate_literal_removal,[],[f18529])).
fof(f18529,plain,(
  ( ! [X21,X22] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X22))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X22))) | s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) ) | $spl19),
  inference(superposition,[],[f483,f6850])).
fof(f6850,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl19),
  inference(subsumption_resolution,[],[f6844,f78])).
fof(f6844,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl19),
  inference(superposition,[],[f2699,f154])).
fof(f19096,plain,(
  ( ! [X70] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70)))) ) | $spl184),
  inference(cnf_transformation,[],[f19096_D])).
fof(f19096_D,plain,(
  ( ! [X70] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70)))) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f18920,plain,(
  ( ! [X24,X23] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X24))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X24))) | s(bool,'T_0') = s(bool,X23)) ) | $spl43),
  inference(duplicate_literal_removal,[],[f18530])).
fof(f18530,plain,(
  ( ! [X24,X23] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X24))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X24))) | s(bool,'T_0') = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) ) | $spl43),
  inference(superposition,[],[f483,f6917])).
fof(f6917,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl43),
  inference(subsumption_resolution,[],[f6910,f78])).
fof(f6910,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl43),
  inference(superposition,[],[f4257,f154])).
fof(f18893,plain,(
  ( ! [X64,X63] : (s(bool,g(s(bool,'F_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64))) | s(bool,'T_0') = s(bool,X63) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64)))) ) | $spl26),
  inference(duplicate_literal_removal,[],[f18689])).
fof(f18689,plain,(
  ( ! [X64,X63] : (s(bool,g(s(bool,'F_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64))) | s(bool,'T_0') = s(bool,X63) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64))) | s(bool,'T_0') = s(bool,X63)) ) | $spl26),
  inference(superposition,[],[f2850,f483])).
fof(f18891,plain,(
  ( ! [X68,X67] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) | s(bool,'T_0') = s(bool,X67) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68)))) ) | $spl19),
  inference(duplicate_literal_removal,[],[f18691])).
fof(f18691,plain,(
  ( ! [X68,X67] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) | s(bool,'T_0') = s(bool,X67) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X68))) | s(bool,'T_0') = s(bool,X67)) ) | $spl19),
  inference(superposition,[],[f6850,f483])).
fof(f18890,plain,(
  ( ! [X70,X69] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))) | s(bool,'T_0') = s(bool,X69) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70)))) ) | $spl43),
  inference(duplicate_literal_removal,[],[f18692])).
fof(f18692,plain,(
  ( ! [X70,X69] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))) | s(bool,'T_0') = s(bool,X69) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))) | s(bool,'T_0') = s(bool,X69)) ) | $spl43),
  inference(superposition,[],[f6917,f483])).
fof(f19094,plain,(
  ( ! [X143] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X143))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X143)))) ) | $spl182),
  inference(cnf_transformation,[],[f19094_D])).
fof(f19094_D,plain,(
  ( ! [X143] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X143))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X143)))) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f19093,plain,(
  ( ! [X144,X143] : (p(s(bool,X144)) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X143))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X143)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18856,f87])).
fof(f18856,plain,(
  ( ! [X144,X143] : (p(s(bool,X144)) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X143))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X143))) | s(bool,'T_0') = s(bool,X144)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f12979,f483])).
fof(f12979,plain,(
  ( ! [X18] : (p(s(bool,X18)) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,X18)))))))))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f12949,f87])).
fof(f12949,plain,(
  ( ! [X18] : (p(s(bool,X18)) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,X18))))))))) | s(bool,'T_0') = s(bool,X18)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11427,f10572])).
fof(f10572,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f10513,f84])).
fof(f10513,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | ($spl7 | $spl33)),
  inference(forward_demodulation,[],[f10443,f2713])).
fof(f2713,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | $spl7),
  inference(unit_resulting_resolution,[],[f133,f2681,f314])).
fof(f10443,plain,(
  s(bool,g(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | ($spl7 | $spl33)),
  inference(unit_resulting_resolution,[],[f2854,f2722])).
fof(f2722,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl7),
  inference(subsumption_resolution,[],[f2716,f78])).
fof(f2716,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl7),
  inference(superposition,[],[f2681,f154])).
fof(f11427,plain,(
  ( ! [X16] : (p(s(bool,X16)) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,X16)))))))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f11401,f87])).
fof(f11401,plain,(
  ( ! [X16] : (p(s(bool,X16)) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,X16))))))) | s(bool,'T_0') = s(bool,X16)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11060,f10572])).
fof(f11060,plain,(
  ( ! [X15] : (p(s(bool,X15)) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,X15)))))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f11038,f87])).
fof(f11038,plain,(
  ( ! [X15] : (p(s(bool,X15)) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,X15))))) | s(bool,'T_0') = s(bool,X15)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f10809,f10572])).
fof(f10809,plain,(
  ( ! [X4] : (p(s(bool,X4)) | s(bool,'F_0') = s(bool,g(s(bool,X4)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f10769,f87])).
fof(f10769,plain,(
  ( ! [X4] : (p(s(bool,X4)) | s(bool,'F_0') = s(bool,g(s(bool,X4))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f92,f10572])).
fof(f19010,plain,(
  ( ! [X110] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X110))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X110)))) ) | $spl166),
  inference(cnf_transformation,[],[f19010_D])).
fof(f19010_D,plain,(
  ( ! [X110] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X110))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X110)))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f19092,plain,(
  ( ! [X138,X137] : (p(s(bool,X138)) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X137))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X137)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18853,f87])).
fof(f18853,plain,(
  ( ! [X138,X137] : (p(s(bool,X138)) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X137))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X137))) | s(bool,'T_0') = s(bool,X138)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f12574,f483])).
fof(f12574,plain,(
  ( ! [X18] : (p(s(bool,X18)) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,X18)))))))))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f12542,f87])).
fof(f12542,plain,(
  ( ! [X18] : (p(s(bool,X18)) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,X18))))))))) | s(bool,'T_0') = s(bool,X18)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11151,f10572])).
fof(f11151,plain,(
  ( ! [X15] : (p(s(bool,X15)) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,X15)))))))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f11125,f87])).
fof(f11125,plain,(
  ( ! [X15] : (p(s(bool,X15)) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,X15))))))) | s(bool,'T_0') = s(bool,X15)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f10850,f10572])).
fof(f10850,plain,(
  ( ! [X15] : (p(s(bool,X15)) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,X15)))))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f10829,f87])).
fof(f10829,plain,(
  ( ! [X15] : (p(s(bool,X15)) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,X15))))) | s(bool,'T_0') = s(bool,X15)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f10807,f10572])).
fof(f10807,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'T_0') != s(bool,g(s(bool,X1)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f10766,f87])).
fof(f10766,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'T_0') != s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f87,f10572])).
fof(f19008,plain,(
  ( ! [X106] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X106))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X106)))) ) | $spl164),
  inference(cnf_transformation,[],[f19008_D])).
fof(f19008_D,plain,(
  ( ! [X106] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X106))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X106)))) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f19091,plain,(
  ( ! [X134,X133] : (p(s(bool,X134)) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X133))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X133)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18851,f87])).
fof(f18851,plain,(
  ( ! [X134,X133] : (p(s(bool,X134)) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X133))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X133))) | s(bool,'T_0') = s(bool,X134)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11427,f483])).
fof(f19007,plain,(
  ( ! [X104] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X104))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X104)))) ) | $spl162),
  inference(cnf_transformation,[],[f19007_D])).
fof(f19007_D,plain,(
  ( ! [X104] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X104))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X104)))) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f19090,plain,(
  ( ! [X125,X126] : (p(s(bool,X126)) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18847,f87])).
fof(f18847,plain,(
  ( ! [X125,X126] : (p(s(bool,X126)) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125))) | s(bool,'T_0') = s(bool,X126)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11151,f483])).
fof(f19006,plain,(
  ( ! [X102] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X102))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X102)))) ) | $spl160),
  inference(cnf_transformation,[],[f19006_D])).
fof(f19006_D,plain,(
  ( ! [X102] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X102))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X102)))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f19089,plain,(
  ( ! [X121,X122] : (p(s(bool,X122)) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X121))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X121)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18845,f87])).
fof(f18845,plain,(
  ( ! [X121,X122] : (p(s(bool,X122)) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X121))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X121))) | s(bool,'T_0') = s(bool,X122)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11060,f483])).
fof(f19004,plain,(
  ( ! [X98] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X98))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X98)))) ) | $spl158),
  inference(cnf_transformation,[],[f19004_D])).
fof(f19004_D,plain,(
  ( ! [X98] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X98))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X98)))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f19088,plain,(
  ( ! [X118,X117] : (p(s(bool,X118)) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X117))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X117)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18843,f87])).
fof(f18843,plain,(
  ( ! [X118,X117] : (p(s(bool,X118)) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X117))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X117))) | s(bool,'T_0') = s(bool,X118)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f10850,f483])).
fof(f19002,plain,(
  ( ! [X94] : (s(bool,'F_0') = s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X94))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X94)))) ) | $spl156),
  inference(cnf_transformation,[],[f19002_D])).
fof(f19002_D,plain,(
  ( ! [X94] : (s(bool,'F_0') = s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X94))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X94)))) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f19086,plain,(
  ( ! [X112,X113] : (p(s(bool,X113)) | s(bool,'F_0') = s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X112))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X112)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18841,f87])).
fof(f18841,plain,(
  ( ! [X112,X113] : (p(s(bool,X113)) | s(bool,'F_0') = s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X112))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X112))) | s(bool,'T_0') = s(bool,X113)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f10809,f483])).
fof(f19026,plain,(
  ( ! [X176] : (s(bool,'T_0') != s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X176))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X176)))) ) | $spl180),
  inference(cnf_transformation,[],[f19026_D])).
fof(f19026_D,plain,(
  ( ! [X176] : (s(bool,'T_0') != s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X176))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X176)))) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f19085,plain,(
  ( ! [X109,X108] : (p(s(bool,X109)) | s(bool,'T_0') != s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X108))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X108)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18839,f87])).
fof(f18839,plain,(
  ( ! [X109,X108] : (p(s(bool,X109)) | s(bool,'T_0') != s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X108))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X108))) | s(bool,'T_0') = s(bool,X109)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f10807,f483])).
fof(f18999,plain,(
  ( ! [X85] : (~p(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X85)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X85)))) ) | $spl154),
  inference(cnf_transformation,[],[f18999_D])).
fof(f18999_D,plain,(
  ( ! [X85] : (~p(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X85)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X85)))) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f19049,plain,(
  ( ! [X227,X226] : (~p(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X227)))))) | s(bool,'T_0') = s(bool,X226) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X227)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18748,f11278])).
fof(f11278,plain,(
  ( ! [X46] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,X46))))))) | s(bool,'T_0') = s(bool,X46)) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f11239,f80])).
fof(f11239,plain,(
  ( ! [X46] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,X46))))))) | s(bool,'T_0') = s(bool,X46)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f10850,f11055])).
fof(f11055,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f11025,f80])).
fof(f11025,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f10809,f84])).
fof(f18748,plain,(
  ( ! [X227,X226] : (~p(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X227)))))) | s(bool,'T_0') = s(bool,X226) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X227))) | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,X226)))))))) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f15907,f483])).
fof(f15907,plain,(
  ( ! [X0] : (~p(s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,X0)))))))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl7 | $spl33)),
  inference(condensation,[],[f15906])).
fof(f15906,plain,(
  ( ! [X107,X108] : (~p(s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,X108)))))))))) | s(bool,'T_0') = s(bool,X107) | s(bool,'T_0') = s(bool,X108)) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f15726])).
fof(f15726,plain,(
  ( ! [X107,X108] : (~p(s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,X108)))))))))) | s(bool,'T_0') = s(bool,X107) | s(bool,'T_0') = s(bool,X108) | s(bool,'T_0') = s(bool,X107)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f14426,f10794])).
fof(f10794,plain,(
  ( ! [X2,X3] : (s(bool,X3) = s(bool,g(s(bool,X2))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X3)) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f10759])).
fof(f10759,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X3) = s(bool,g(s(bool,X2))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f10572,f154])).
fof(f14426,plain,(
  ( ! [X17] : (~p(s(bool,g(s(bool,g(s(bool,g(s(bool,X17)))))))) | s(bool,'T_0') = s(bool,X17)) ) | ($spl7 | $spl33)),
  inference(trivial_inequality_removal,[],[f14388])).
fof(f14388,plain,(
  ( ! [X17] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,g(s(bool,g(s(bool,g(s(bool,X17)))))))) | s(bool,'T_0') = s(bool,X17)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f91,f11426])).
fof(f11426,plain,(
  ( ! [X15] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,X15))))))) | s(bool,'T_0') = s(bool,X15)) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f11400,f80])).
fof(f11400,plain,(
  ( ! [X15] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,X15))))))) | s(bool,'T_0') = s(bool,X15)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11060,f11055])).
fof(f19048,plain,(
  ( ! [X225,X224] : (s(bool,'T_0') != s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X225))))) | s(bool,'T_0') = s(bool,X224) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X225)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18747,f11278])).
fof(f18747,plain,(
  ( ! [X225,X224] : (s(bool,'T_0') != s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X225))))) | s(bool,'T_0') = s(bool,X224) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X225))) | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,X224)))))))) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f12573,f483])).
fof(f12573,plain,(
  ( ! [X17] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,X17))))))))) | s(bool,'T_0') = s(bool,X17)) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f12541,f80])).
fof(f12541,plain,(
  ( ! [X17] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,X17))))))))) | s(bool,'T_0') = s(bool,X17)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11151,f11055])).
fof(f19012,plain,(
  ( ! [X114] : (~p(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X114)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X114)))) ) | $spl168),
  inference(cnf_transformation,[],[f19012_D])).
fof(f19012_D,plain,(
  ( ! [X114] : (~p(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X114)))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X114)))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f19046,plain,(
  ( ! [X220,X221] : (~p(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X221)))))))) | s(bool,'T_0') = s(bool,X220) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X221)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18745,f11143])).
fof(f11143,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,X0))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f11112,f80])).
fof(f11112,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,X0))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f10850,f84])).
fof(f18745,plain,(
  ( ! [X220,X221] : (~p(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X221)))))))) | s(bool,'T_0') = s(bool,X220) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X221))) | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,X220)))))) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f15907,f483])).
fof(f19044,plain,(
  ( ! [X216,X217] : (~p(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X217)))))) | s(bool,'T_0') = s(bool,X216) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X217)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18743,f11143])).
fof(f18743,plain,(
  ( ! [X216,X217] : (~p(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X217)))))) | s(bool,'T_0') = s(bool,X216) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X217))) | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,X216)))))) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f14426,f483])).
fof(f19041,plain,(
  ( ! [X210,X211] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X211))))))) | s(bool,'T_0') = s(bool,X210) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X211)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18740,f11143])).
fof(f18740,plain,(
  ( ! [X210,X211] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X211))))))) | s(bool,'T_0') = s(bool,X210) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X211))) | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,X210)))))) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f12573,f483])).
fof(f19040,plain,(
  ( ! [X208,X209] : (s(bool,'F_0') = s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X209))))) | s(bool,'T_0') = s(bool,X208) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X209)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18739,f11143])).
fof(f18739,plain,(
  ( ! [X208,X209] : (s(bool,'F_0') = s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X209))))) | s(bool,'T_0') = s(bool,X208) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X209))) | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,X208)))))) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11426,f483])).
fof(f19039,plain,(
  ( ! [X206,X207] : (s(bool,'T_0') != s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X207))))) | s(bool,'T_0') = s(bool,X206) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X207)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18738,f11143])).
fof(f18738,plain,(
  ( ! [X206,X207] : (s(bool,'T_0') != s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X207))))) | s(bool,'T_0') = s(bool,X206) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X207))) | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,X206)))))) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11278,f483])).
fof(f18997,plain,(
  ( ! [X72] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72))) = s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72)))) ) | $spl152),
  inference(cnf_transformation,[],[f18997_D])).
fof(f18997_D,plain,(
  ( ! [X72] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72))) = s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72)))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f19036,plain,(
  ( ! [X196,X195] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X196))) = s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X196))))) | s(bool,'T_0') = s(bool,X195) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X196)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18735,f10484])).
fof(f10484,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl33),
  inference(superposition,[],[f2854,f84])).
fof(f18735,plain,(
  ( ! [X196,X195] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X196))) = s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X196))))) | s(bool,'T_0') = s(bool,X195) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X196))) | s(bool,'T_0') = s(bool,g(s(bool,X195)))) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f15925,f483])).
fof(f15925,plain,(
  ( ! [X0] : (s(bool,g(s(bool,X0))) = s(bool,g(s(bool,g(s(bool,X0))))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl7 | $spl33)),
  inference(condensation,[],[f15924])).
fof(f15924,plain,(
  ( ! [X68,X67] : (s(bool,g(s(bool,X68))) = s(bool,g(s(bool,g(s(bool,X68))))) | s(bool,'T_0') = s(bool,X67) | s(bool,'T_0') = s(bool,X68)) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f15707])).
fof(f15707,plain,(
  ( ! [X68,X67] : (s(bool,g(s(bool,X68))) = s(bool,g(s(bool,g(s(bool,X68))))) | s(bool,'T_0') = s(bool,X67) | s(bool,'T_0') = s(bool,X68) | s(bool,'T_0') = s(bool,X67)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f10572,f10794])).
fof(f19015,plain,(
  ( ! [X123] : (~p(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X123)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X123)))) ) | $spl172),
  inference(cnf_transformation,[],[f19015_D])).
fof(f19015_D,plain,(
  ( ! [X123] : (~p(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X123)))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X123)))) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f19035,plain,(
  ( ! [X194,X193] : (~p(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X194)))))))))) | s(bool,'T_0') = s(bool,X193) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X194)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18734,f10484])).
fof(f18734,plain,(
  ( ! [X194,X193] : (~p(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X194)))))))))) | s(bool,'T_0') = s(bool,X193) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X194))) | s(bool,'T_0') = s(bool,g(s(bool,X193)))) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f15907,f483])).
fof(f19033,plain,(
  ( ! [X189,X190] : (~p(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X190)))))))) | s(bool,'T_0') = s(bool,X189) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X190)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18732,f10484])).
fof(f18732,plain,(
  ( ! [X189,X190] : (~p(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X190)))))))) | s(bool,'T_0') = s(bool,X189) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X190))) | s(bool,'T_0') = s(bool,g(s(bool,X189)))) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f14426,f483])).
fof(f19031,plain,(
  ( ! [X185,X186] : (~p(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X186)))))) | s(bool,'T_0') = s(bool,X185) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X186)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18730,f10484])).
fof(f18730,plain,(
  ( ! [X185,X186] : (~p(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X186)))))) | s(bool,'T_0') = s(bool,X185) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X186))) | s(bool,'T_0') = s(bool,g(s(bool,X185)))) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f12705,f483])).
fof(f12705,plain,(
  ( ! [X8] : (~p(s(bool,g(s(bool,g(s(bool,X8)))))) | s(bool,'T_0') = s(bool,X8)) ) | ($spl7 | $spl33)),
  inference(trivial_inequality_removal,[],[f12672])).
fof(f12672,plain,(
  ( ! [X8] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,g(s(bool,g(s(bool,X8)))))) | s(bool,'T_0') = s(bool,X8)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f91,f11277])).
fof(f11277,plain,(
  ( ! [X45] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,X45))))) | s(bool,'T_0') = s(bool,X45)) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f11238,f80])).
fof(f11238,plain,(
  ( ! [X45] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,X45))))) | s(bool,'T_0') = s(bool,X45)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f10809,f11055])).
fof(f19030,plain,(
  ( ! [X184,X183] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X184))))))))) | s(bool,'T_0') = s(bool,X183) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X184)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18729,f10484])).
fof(f18729,plain,(
  ( ! [X184,X183] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X184))))))))) | s(bool,'T_0') = s(bool,X183) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X184))) | s(bool,'T_0') = s(bool,g(s(bool,X183)))) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f12573,f483])).
fof(f19029,plain,(
  ( ! [X182,X181] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X182))))))) | s(bool,'T_0') = s(bool,X181) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X182)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18728,f10484])).
fof(f18728,plain,(
  ( ! [X182,X181] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X182))))))) | s(bool,'T_0') = s(bool,X181) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X182))) | s(bool,'T_0') = s(bool,g(s(bool,X181)))) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11426,f483])).
fof(f19028,plain,(
  ( ! [X180,X179] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X180))))))) | s(bool,'T_0') = s(bool,X179) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X180)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18727,f10484])).
fof(f18727,plain,(
  ( ! [X180,X179] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X180))))))) | s(bool,'T_0') = s(bool,X179) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X180))) | s(bool,'T_0') = s(bool,g(s(bool,X179)))) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11278,f483])).
fof(f19027,plain,(
  ( ! [X177,X178] : (s(bool,'F_0') = s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X178))))) | s(bool,'T_0') = s(bool,X177) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X178)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18726,f10484])).
fof(f18726,plain,(
  ( ! [X177,X178] : (s(bool,'F_0') = s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X178))))) | s(bool,'T_0') = s(bool,X177) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X178))) | s(bool,'T_0') = s(bool,g(s(bool,X177)))) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11277,f483])).
fof(f19025,plain,(
  ( ! [X175,X176] : (s(bool,'T_0') != s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X176))))) | s(bool,'T_0') = s(bool,X175) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X176)))) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f18725,f10484])).
fof(f18725,plain,(
  ( ! [X175,X176] : (s(bool,'T_0') != s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X176))))) | s(bool,'T_0') = s(bool,X175) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X176))) | s(bool,'T_0') = s(bool,g(s(bool,X175)))) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11143,f483])).
fof(f19018,plain,(
  ( ! [X129] : (s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129))))) = s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129)))) ) | $spl178),
  inference(cnf_transformation,[],[f19018_D])).
fof(f19018_D,plain,(
  ( ! [X129] : (s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129))))) = s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129)))) ) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f18872,plain,(
  ( ! [X128,X129] : (s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129))))) = s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129))))))) | s(bool,'T_0') = s(bool,X128) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129)))) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f18719])).
fof(f18719,plain,(
  ( ! [X128,X129] : (s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129))))) = s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129))))))) | s(bool,'T_0') = s(bool,X128) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X129))) | s(bool,'T_0') = s(bool,X128)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f15925,f483])).
fof(f19017,plain,(
  ( ! [X127] : (~p(s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X127)))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X127)))) ) | $spl176),
  inference(cnf_transformation,[],[f19017_D])).
fof(f19017_D,plain,(
  ( ! [X127] : (~p(s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X127)))))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X127)))) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f18873,plain,(
  ( ! [X127,X126] : (~p(s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X127)))))))))))) | s(bool,'T_0') = s(bool,X126) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X127)))) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f18718])).
fof(f18718,plain,(
  ( ! [X127,X126] : (~p(s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X127)))))))))))) | s(bool,'T_0') = s(bool,X126) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X127))) | s(bool,'T_0') = s(bool,X126)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f15907,f483])).
fof(f19016,plain,(
  ( ! [X125] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125))) = s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125)))) ) | $spl174),
  inference(cnf_transformation,[],[f19016_D])).
fof(f19016_D,plain,(
  ( ! [X125] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125))) = s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125))))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125)))) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f18874,plain,(
  ( ! [X125,X124] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125))) = s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125))))))))) | s(bool,'T_0') = s(bool,X124) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125)))) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f18717])).
fof(f18717,plain,(
  ( ! [X125,X124] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125))) = s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125))))))))) | s(bool,'T_0') = s(bool,X124) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X125))) | s(bool,'T_0') = s(bool,X124)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f14468,f483])).
fof(f14468,plain,(
  ( ! [X14] : (s(bool,X14) = s(bool,g(s(bool,g(s(bool,g(s(bool,X14))))))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f14308,f133])).
fof(f14308,plain,(
  ( ! [X14] : (s(bool,X14) = s(bool,g(s(bool,g(s(bool,g(s(bool,X14))))))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X14)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11426,f84])).
fof(f18875,plain,(
  ( ! [X123,X122] : (~p(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X123)))))))))) | s(bool,'T_0') = s(bool,X122) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X123)))) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f18716])).
fof(f18716,plain,(
  ( ! [X123,X122] : (~p(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X123)))))))))) | s(bool,'T_0') = s(bool,X122) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X123))) | s(bool,'T_0') = s(bool,X122)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f14426,f483])).
fof(f19013,plain,(
  ( ! [X116] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))) = s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116)))) ) | $spl170),
  inference(cnf_transformation,[],[f19013_D])).
fof(f19013_D,plain,(
  ( ! [X116] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))) = s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116)))) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f18876,plain,(
  ( ! [X116,X115] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))) = s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))))))) | s(bool,'T_0') = s(bool,X115) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116)))) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f18713])).
fof(f18713,plain,(
  ( ! [X116,X115] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))) = s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))))))) | s(bool,'T_0') = s(bool,X115) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X116))) | s(bool,'T_0') = s(bool,X115)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f12733,f483])).
fof(f12733,plain,(
  ( ! [X14] : (s(bool,X14) = s(bool,g(s(bool,g(s(bool,X14))))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f12618,f133])).
fof(f12618,plain,(
  ( ! [X14] : (s(bool,X14) = s(bool,g(s(bool,g(s(bool,X14))))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X14)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11277,f84])).
fof(f18877,plain,(
  ( ! [X114,X113] : (~p(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X114)))))))) | s(bool,'T_0') = s(bool,X113) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X114)))) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f18712])).
fof(f18712,plain,(
  ( ! [X114,X113] : (~p(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X114)))))))) | s(bool,'T_0') = s(bool,X113) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X114))) | s(bool,'T_0') = s(bool,X113)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f12705,f483])).
fof(f18878,plain,(
  ( ! [X109,X110] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X110))))))))))) | s(bool,'T_0') = s(bool,X109) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X110)))) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f18710])).
fof(f18710,plain,(
  ( ! [X109,X110] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X110))))))))))) | s(bool,'T_0') = s(bool,X109) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X110))) | s(bool,'T_0') = s(bool,X109)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f12573,f483])).
fof(f18879,plain,(
  ( ! [X105,X106] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X106))))))))) | s(bool,'T_0') = s(bool,X105) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X106)))) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f18708])).
fof(f18708,plain,(
  ( ! [X105,X106] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X106))))))))) | s(bool,'T_0') = s(bool,X105) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X106))) | s(bool,'T_0') = s(bool,X105)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11426,f483])).
fof(f18880,plain,(
  ( ! [X103,X104] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X104))))))))) | s(bool,'T_0') = s(bool,X103) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X104)))) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f18707])).
fof(f18707,plain,(
  ( ! [X103,X104] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X104))))))))) | s(bool,'T_0') = s(bool,X103) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X104))) | s(bool,'T_0') = s(bool,X103)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11278,f483])).
fof(f18881,plain,(
  ( ! [X101,X102] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X102))))))) | s(bool,'T_0') = s(bool,X101) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X102)))) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f18706])).
fof(f18706,plain,(
  ( ! [X101,X102] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X102))))))) | s(bool,'T_0') = s(bool,X101) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X102))) | s(bool,'T_0') = s(bool,X101)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11277,f483])).
fof(f18882,plain,(
  ( ! [X97,X98] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X98))))))) | s(bool,'T_0') = s(bool,X97) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X98)))) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f18704])).
fof(f18704,plain,(
  ( ! [X97,X98] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X98))))))) | s(bool,'T_0') = s(bool,X97) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X98))) | s(bool,'T_0') = s(bool,X97)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11143,f483])).
fof(f18883,plain,(
  ( ! [X94,X93] : (s(bool,'F_0') = s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X94))))) | s(bool,'T_0') = s(bool,X93) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X94)))) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f18702])).
fof(f18702,plain,(
  ( ! [X94,X93] : (s(bool,'F_0') = s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X94))))) | s(bool,'T_0') = s(bool,X93) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X94))) | s(bool,'T_0') = s(bool,X93)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f11055,f483])).
fof(f18884,plain,(
  ( ! [X85,X84] : (~p(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X85)))))) | s(bool,'T_0') = s(bool,X84) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X85)))) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f18698])).
fof(f18698,plain,(
  ( ! [X85,X84] : (~p(s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X85)))))) | s(bool,'T_0') = s(bool,X84) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X85))) | s(bool,'T_0') = s(bool,X84)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f10808,f483])).
fof(f10808,plain,(
  ( ! [X3] : (~p(s(bool,g(s(bool,X3)))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl7 | $spl33)),
  inference(subsumption_resolution,[],[f10768,f84])).
fof(f10768,plain,(
  ( ! [X3] : (s(bool,'F_0') != s(bool,X3) | ~p(s(bool,g(s(bool,X3)))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f91,f10572])).
fof(f18889,plain,(
  ( ! [X72,X71] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72))) = s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72))))) | s(bool,'T_0') = s(bool,X71) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72)))) ) | ($spl7 | $spl33)),
  inference(duplicate_literal_removal,[],[f18693])).
fof(f18693,plain,(
  ( ! [X72,X71] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72))) = s(bool,g(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72))))) | s(bool,'T_0') = s(bool,X71) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X72))) | s(bool,'T_0') = s(bool,X71)) ) | ($spl7 | $spl33)),
  inference(superposition,[],[f10572,f483])).
fof(f2913,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) = s(bool,sK3(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X0,X1,bool,bool)))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2)) ) | $spl38),
  inference(cnf_transformation,[],[f2913_D])).
fof(f2913_D,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) = s(bool,sK3(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X0,X1,bool,bool)))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f2915,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl41),
  inference(cnf_transformation,[],[f2915_D])).
fof(f2915_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f13010,plain,(
  ( ! [X4,X2,X3] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X2,X3,bool,bool)))) | s(bool,X4) = s(bool,sK3(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f809,f154])).
fof(f13013,plain,(
  ( ! [X12,X13,X11] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X11,X12,bool,bool)))) | s(bool,X13) = s(bool,sK3(X11,X12,bool,bool)) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f809,f154])).
fof(f2851,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK3(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl28),
  inference(cnf_transformation,[],[f2851_D])).
fof(f2851_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK3(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f6835,plain,(
  ( ! [X11] : (s(bool,'F_0') != s(bool,f(s(bool,X11))) | s(bool,'T_0') = s(bool,X11)) ) | $spl104),
  inference(cnf_transformation,[],[f6835_D])).
fof(f6835_D,plain,(
  ( ! [X11] : (s(bool,'F_0') != s(bool,f(s(bool,X11))) | s(bool,'T_0') = s(bool,X11)) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f13030,plain,(
  ( ! [X10,X8,X9] : (s(bool,'F_0') != s(bool,f(s(bool,X10))) | s(fun(bool,bool),X8) = s(fun(bool,bool),X9) | s(bool,'T_0') = s(bool,sK3(X8,X9,bool,bool)) | s(bool,'T_0') = s(bool,X10)) ) | $spl33),
  inference(subsumption_resolution,[],[f13012,f10484])).
fof(f13012,plain,(
  ( ! [X10,X8,X9] : (s(bool,'F_0') != s(bool,f(s(bool,X10))) | s(fun(bool,bool),X8) = s(fun(bool,bool),X9) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X8,X9,bool,bool)))) | s(bool,'T_0') = s(bool,sK3(X8,X9,bool,bool)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f809,f154])).
fof(f13029,plain,(
  ( ! [X6,X7,X5] : (s(bool,'F_0') != s(bool,f(s(bool,X7))) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,sK3(X5,X6,bool,bool))) ) | $spl33),
  inference(subsumption_resolution,[],[f13011,f10484])).
fof(f13011,plain,(
  ( ! [X6,X7,X5] : (s(bool,'F_0') != s(bool,f(s(bool,X7))) | s(fun(bool,bool),X5) = s(fun(bool,bool),X6) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X5,X6,bool,bool)))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,sK3(X5,X6,bool,bool))) )),
  inference(superposition,[],[f809,f154])).
fof(f6834,plain,(
  ( ! [X74,X75] : (s(fun(bool,bool),X74) = s(fun(bool,bool),X75) | s(bool,'T_0') = s(bool,sK3(X74,X75,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X74,X75,bool,bool))))) ) | $spl102),
  inference(cnf_transformation,[],[f6834_D])).
fof(f6834_D,plain,(
  ( ! [X74,X75] : (s(fun(bool,bool),X74) = s(fun(bool,bool),X75) | s(bool,'T_0') = s(bool,sK3(X74,X75,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X74,X75,bool,bool))))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f10033,plain,(
  ( ! [X230] : (s(bool,'F_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X230))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X230)))) ) | $spl150),
  inference(cnf_transformation,[],[f10033_D])).
fof(f10033_D,plain,(
  ( ! [X230] : (s(bool,'F_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X230))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X230)))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f9139,plain,(
  ( ! [X229,X230,X228] : (s(bool,'F_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X230))))) | s(fun(bool,bool),X228) = s(fun(bool,bool),X229) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X228,X229,bool,bool)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X230))) | s(bool,'T_0') = s(bool,sK3(X228,X229,bool,bool))) )),
  inference(superposition,[],[f809,f483])).
fof(f10032,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999,f10001,f10003,f10005,f10007,f10009,f10011,f10013,f10015,f10017,f10021,f10023,f10025,f10027,f10029,f10031])).
fof(f10031,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9642,f78])).
fof(f9642,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3)))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f2388])).
fof(f10029,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9641,f78])).
fof(f9641,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3254])).
fof(f10027,plain,(
  ( ! [X4,X2,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4)))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9640,f78])).
fof(f9640,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X3))),s('type.num.num',X4)))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f2399])).
fof(f10025,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5)))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9639,f78])).
fof(f9639,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5)))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3265])).
fof(f10023,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9638,f78])).
fof(f9638,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f718])).
fof(f10021,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9637,f78])).
fof(f9637,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f474])).
fof(f10017,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0)))) ) | $spl52),
  inference(subsumption_resolution,[],[f9611,f78])).
fof(f9611,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X1),s('type.num.num',X0))),s('type.num.num',X0)))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f86])).
fof(f10015,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | $spl52),
  inference(subsumption_resolution,[],[f9610,f78])).
fof(f9610,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f85])).
fof(f10013,plain,(
  ( ! [X81] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X81),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X81),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9593,f78])).
fof(f9593,plain,(
  ( ! [X81] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X81),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X81),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5459])).
fof(f10011,plain,(
  ( ! [X0] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9592,f78])).
fof(f9592,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4970])).
fof(f10009,plain,(
  ( ! [X75] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X75),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X75),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9591,f78])).
fof(f9591,plain,(
  ( ! [X75] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X75),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X75),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4035])).
fof(f10007,plain,(
  ( ! [X12] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X12),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9590,f78])).
fof(f9590,plain,(
  ( ! [X12] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X12),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3540])).
fof(f10005,plain,(
  ( ! [X11] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9589,f78])).
fof(f9589,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3539])).
fof(f10003,plain,(
  ( ! [X10] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X10),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9588,f78])).
fof(f9588,plain,(
  ( ! [X10] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X10),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3538])).
fof(f10001,plain,(
  ( ! [X9] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X9),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9587,f78])).
fof(f9587,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X9),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3537])).
fof(f9999,plain,(
  ( ! [X8] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9586,f78])).
fof(f9586,plain,(
  ( ! [X8] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3536])).
fof(f9997,plain,(
  ( ! [X78,X77] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X77))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X77)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9585,f78])).
fof(f9585,plain,(
  ( ! [X78,X77] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X77))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X78),s('type.num.num',X77)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5453])).
fof(f9995,plain,(
  ( ! [X2,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9584,f78])).
fof(f9584,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4941])).
fof(f9993,plain,(
  ( ! [X72,X71] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9583,f78])).
fof(f9583,plain,(
  ( ! [X72,X71] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4031])).
fof(f9991,plain,(
  ( ! [X19,X20] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9582,f78])).
fof(f9582,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3151])).
fof(f9989,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9581,f78])).
fof(f9581,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3150])).
fof(f9987,plain,(
  ( ! [X15,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9580,f78])).
fof(f9580,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3149])).
fof(f9985,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9579,f78])).
fof(f9579,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13)),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3148])).
fof(f9983,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9578,f78])).
fof(f9578,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',X11)),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3147])).
fof(f9981,plain,(
  ( ! [X146,X145] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X146),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X145))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X146),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9577,f78])).
fof(f9577,plain,(
  ( ! [X146,X145] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X145),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X146),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X145))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X146),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4396])).
fof(f9979,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X10))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9576,f78])).
fof(f9576,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X10))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4979])).
fof(f9977,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9575,f78])).
fof(f9575,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4254])).
fof(f9975,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9574,f78])).
fof(f9574,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num',X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4978])).
fof(f9973,plain,(
  ( ! [X101,X99,X100] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X100),s('type.num.num',X101))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num',X100))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num',X101)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9573,f78])).
fof(f9573,plain,(
  ( ! [X101,X99,X100] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X100),s('type.num.num',X101))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num',X100))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X99),s('type.num.num',X101)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5482])).
fof(f9971,plain,(
  ( ! [X30,X31,X29] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X31))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num',X30))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num',X31)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9572,f78])).
fof(f9572,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X31))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num',X30))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num',X31)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5067])).
fof(f9969,plain,(
  ( ! [X28,X26,X27] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num',X27))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num',X28)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9571,f78])).
fof(f9571,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num',X27))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num',X28)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5066])).
fof(f9967,plain,(
  ( ! [X24,X23,X25] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num',X24))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num',X25)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9570,f78])).
fof(f9570,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num',X24))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num',X25)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5065])).
fof(f9965,plain,(
  ( ! [X21,X22,X20] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X21))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X22)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9569,f78])).
fof(f9569,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X21))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X22)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5064])).
fof(f9963,plain,(
  ( ! [X19,X17,X18] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X18))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X19)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9568,f78])).
fof(f9568,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X18))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X19)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5063])).
fof(f9961,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9567,f78])).
fof(f9567,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7)))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4977])).
fof(f9959,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9566,f78])).
fof(f9566,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7)))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4253])).
fof(f9957,plain,(
  ( ! [X26] : (s('type.num.num',X26) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X26,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9565,f78])).
fof(f9565,plain,(
  ( ! [X26] : (~p(s(bool,'T_0')) | s('type.num.num',X26) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X26,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5399])).
fof(f9955,plain,(
  ( ! [X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9564,f78])).
fof(f9564,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5342])).
fof(f9953,plain,(
  ( ! [X20] : (s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X20,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9561,f78])).
fof(f9561,plain,(
  ( ! [X20] : (~p(s(bool,'T_0')) | s('type.num.num',X20) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X20,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3995])).
fof(f9951,plain,(
  ( ! [X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9560,f78])).
fof(f9560,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3961])).
fof(f9949,plain,(
  ( ! [X10] : (s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X10,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9559,f78])).
fof(f9559,plain,(
  ( ! [X10] : (~p(s(bool,'T_0')) | s('type.num.num',X10) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X10,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3043])).
fof(f9947,plain,(
  ( ! [X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X9,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9558,f78])).
fof(f9558,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X9,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3041])).
fof(f9945,plain,(
  ( ! [X8] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X8,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9557,f78])).
fof(f9557,plain,(
  ( ! [X8] : (~p(s(bool,'T_0')) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X8,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3039])).
fof(f9943,plain,(
  ( ! [X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X7,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9556,f78])).
fof(f9556,plain,(
  ( ! [X7] : (~p(s(bool,'T_0')) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X7,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3037])).
fof(f9941,plain,(
  ( ! [X6] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X6,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9555,f78])).
fof(f9555,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X6,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3035])).
fof(f9939,plain,(
  ( ! [X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X13,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9554,f78])).
fof(f9554,plain,(
  ( ! [X13] : (~p(s(bool,'T_0')) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X13,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f2218])).
fof(f9937,plain,(
  ( ! [X12] : (s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X12,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9553,f78])).
fof(f9553,plain,(
  ( ! [X12] : (~p(s(bool,'T_0')) | s('type.num.num',X12) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X12,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f1761])).
fof(f9935,plain,(
  ( ! [X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X9,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9552,f78])).
fof(f9552,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X9,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f1054])).
fof(f9933,plain,(
  ( ! [X5] : (s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9551,f78])).
fof(f9551,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | s('type.num.num',X5) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X5,'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f844])).
fof(f9931,plain,(
  ( ! [X4] : (s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X4,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9550,f78])).
fof(f9550,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | s('type.num.num',X4) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2(X4,'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f619])).
fof(f9929,plain,(
  ( ! [X82] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X82),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X82),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9549,f78])).
fof(f9549,plain,(
  ( ! [X82] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X82),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X82),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5462])).
fof(f9927,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9548,f78])).
fof(f9548,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5160])).
fof(f9925,plain,(
  ( ! [X76] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9547,f78])).
fof(f9547,plain,(
  ( ! [X76] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X76),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4037])).
fof(f9923,plain,(
  ( ! [X12] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9546,f78])).
fof(f9546,plain,(
  ( ! [X12] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3822])).
fof(f9921,plain,(
  ( ! [X11] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9545,f78])).
fof(f9545,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3821])).
fof(f9919,plain,(
  ( ! [X10] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9544,f78])).
fof(f9544,plain,(
  ( ! [X10] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3820])).
fof(f9917,plain,(
  ( ! [X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9543,f78])).
fof(f9543,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X9),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3819])).
fof(f9915,plain,(
  ( ! [X0] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9542,f78])).
fof(f9542,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f2678])).
fof(f9913,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9541,f78])).
fof(f9541,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3535])).
fof(f9911,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9540,f78])).
fof(f9540,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1)),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3146])).
fof(f9909,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X18),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X17),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X18),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9539,f78])).
fof(f9539,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X18),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X17),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X18),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3824])).
fof(f9907,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9538,f78])).
fof(f9538,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3825])).
fof(f9905,plain,(
  ( ! [X111,X112] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X112),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X111)))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X112),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9537,f78])).
fof(f9537,plain,(
  ( ! [X111,X112] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X112),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X111)))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X112),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f7425])).
fof(f9903,plain,(
  ( ! [X158,X156,X157] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X156),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X157),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X158),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X156))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X157),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X158),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9535,f78])).
fof(f9535,plain,(
  ( ! [X158,X156,X157] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X156),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X157),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X158),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X156))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X157),'const.bool.the_value_0')))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X158),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4400])).
fof(f9901,plain,(
  ( ! [X154,X152,X153] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X152),'const.bool.the_value_0'))),s('type.num.num',X153))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X152),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X153)))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9534,f78])).
fof(f9534,plain,(
  ( ! [X154,X152,X153] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X152),'const.bool.the_value_0'))),s('type.num.num',X153))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X152),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X153)))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4207])).
fof(f9899,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X15))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X16),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X15)))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X16),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9533,f78])).
fof(f9533,plain,(
  ( ! [X14,X15,X13,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X15))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X16),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X15)))),'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X16),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3823])).
fof(f9897,plain,(
  ( ! [X8,X7] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))),s('type.num.num',sK2(X8,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9532,f78])).
fof(f9532,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))),s('type.num.num',sK2(X8,'const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f646])).
fof(f9895,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))),s('type.num.num',sK2(X6,'const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9526,f78])).
fof(f9526,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))),s('type.num.num',sK2(X6,'const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f2970])).
fof(f9893,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))),s('type.num.num',sK2(X6,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9522,f78])).
fof(f9522,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num',X6) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))),s('type.num.num',sK2(X6,'const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X5))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f2981])).
fof(f9891,plain,(
  ( ! [X72,X71] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9521,f78])).
fof(f9521,plain,(
  ( ! [X72,X71] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',X72),s('type.num.num',X71))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5444])).
fof(f9889,plain,(
  ( ! [X2,X1] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9520,f78])).
fof(f9520,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5126])).
fof(f9887,plain,(
  ( ! [X66,X65] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num',X65))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num',X65))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9519,f78])).
fof(f9519,plain,(
  ( ! [X66,X65] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num',X65))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',X66),s('type.num.num',X65))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4025])).
fof(f9885,plain,(
  ( ! [X19,X20] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9518,f78])).
fof(f9518,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X19))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3049])).
fof(f9883,plain,(
  ( ! [X17,X18] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9517,f78])).
fof(f9517,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3048])).
fof(f9881,plain,(
  ( ! [X15,X16] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9516,f78])).
fof(f9516,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X15))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3047])).
fof(f9879,plain,(
  ( ! [X14,X13] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9515,f78])).
fof(f9515,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X13))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3046])).
fof(f9877,plain,(
  ( ! [X2,X1] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9514,f78])).
fof(f9514,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f2657])).
fof(f9875,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9513,f78])).
fof(f9513,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X1))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3044])).
fof(f9873,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)),'const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9510,f78])).
fof(f9510,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)),'const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X5))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f2999])).
fof(f9871,plain,(
  ( ! [X28,X26,X27] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X26),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9509,f78])).
fof(f9509,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X26),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3051])).
fof(f9869,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9508,f78])).
fof(f9508,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3052])).
fof(f9867,plain,(
  ( ! [X92,X90,X91] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X92),s('type.num.num',X91))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X90)))),'const.arithmetic.+_2'(s('type.num.num',X92),s('type.num.num',X91))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9507,f78])).
fof(f9507,plain,(
  ( ! [X92,X90,X91] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X92),s('type.num.num',X91))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X90)))),'const.arithmetic.+_2'(s('type.num.num',X92),s('type.num.num',X91))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f7417])).
fof(f9865,plain,(
  ( ! [X127,X125,X128,X126] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X126),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X128),s('type.num.num',X127))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X125))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X126),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X128),s('type.num.num',X127))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9504,f78])).
fof(f9504,plain,(
  ( ! [X127,X125,X128,X126] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X125),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X126),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X128),s('type.num.num',X127))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X125))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X126),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',X128),s('type.num.num',X127))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4390])).
fof(f9863,plain,(
  ( ! [X125,X123,X126,X124] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X123),'const.bool.the_value_0'))),s('type.num.num',X124))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X125))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X123),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X124)))),'const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X125))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9503,f78])).
fof(f9503,plain,(
  ( ! [X125,X123,X126,X124] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X123),'const.bool.the_value_0'))),s('type.num.num',X124))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X125))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X123),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X124)))),'const.arithmetic.+_2'(s('type.num.num',X126),s('type.num.num',X125))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4198])).
fof(f9861,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X22))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X23)))),'const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9502,f78])).
fof(f9502,plain,(
  ( ! [X24,X23,X21,X25,X22] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X22))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X23)))),'const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3050])).
fof(f9859,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',sK2(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9499,f78])).
fof(f9499,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X2) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num',sK2(X2,'const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f590])).
fof(f9857,plain,(
  ( ! [X17,X18] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X18),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X18),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X17),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9497,f78])).
fof(f9497,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X18),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X18),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X17),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3542])).
fof(f9855,plain,(
  ( ! [X21,X19,X20] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X21),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9496,f78])).
fof(f9496,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X21),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X21),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X19),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X20),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3543])).
fof(f9853,plain,(
  ( ! [X109,X110] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X110),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X110),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X109))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9495,f78])).
fof(f9495,plain,(
  ( ! [X109,X110] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X110),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X110),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X109))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f7424])).
fof(f9851,plain,(
  ( ! [X28,X26,X27] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27)),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X26),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9493,f78])).
fof(f9493,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X28),s('type.num.num',X27)),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X26),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3153])).
fof(f9849,plain,(
  ( ! [X30,X31,X29,X32] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31)),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9492,f78])).
fof(f9492,plain,(
  ( ! [X30,X31,X29,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num',X31)),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X29),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3154])).
fof(f9847,plain,(
  ( ! [X101,X99,X100] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num',X100))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num',X100)),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X99))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9491,f78])).
fof(f9491,plain,(
  ( ! [X101,X99,X100] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num',X100))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X101),s('type.num.num',X100)),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X99))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f7420])).
fof(f9845,plain,(
  ( ! [X50,X48,X51,X49] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X49),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',X51))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X49),s('type.num.num',X50))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X49),s('type.num.num',X51)))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X48),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9488,f78])).
fof(f9488,plain,(
  ( ! [X50,X48,X51,X49] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X49),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X50),s('type.num.num',X51))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X49),s('type.num.num',X50))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X49),s('type.num.num',X51)))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X48),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5071])).
fof(f9843,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X54),s('type.num.num',X55))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X54),s('type.num.num',X56)))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X52),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X53),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X53),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9487,f78])).
fof(f9487,plain,(
  ( ! [X54,X52,X56,X55,X53] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X54),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X55),s('type.num.num',X56))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X54),s('type.num.num',X55))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X54),s('type.num.num',X56)))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X52),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X53),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X53),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5072])).
fof(f9841,plain,(
  ( ! [X140,X138,X141,X139] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X139),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X141))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X139),s('type.num.num',X140))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X139),s('type.num.num',X141)))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X138))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9486,f78])).
fof(f9486,plain,(
  ( ! [X140,X138,X141,X139] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X139),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X141))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X139),s('type.num.num',X140))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X139),s('type.num.num',X141)))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X138))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f7432])).
fof(f9839,plain,(
  ( ! [X6,X7] : (s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X7,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9484,f78])).
fof(f9484,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s('type.num.num',X7) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X7,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f602])).
fof(f9837,plain,(
  ( ! [X37,X38,X36] : (s('type.num.num',X38) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X38,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9483,f78])).
fof(f9483,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,'T_0')) | s('type.num.num',X38) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X38,'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X36),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X37),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f2292])).
fof(f9835,plain,(
  ( ! [X21,X22] : (s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X22,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X21))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9482,f78])).
fof(f9482,plain,(
  ( ! [X21,X22] : (~p(s(bool,'T_0')) | s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2(X22,'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X21))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f7402])).
fof(f9833,plain,(
  ( ! [X21,X20] : (s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',sK1))),s('type.num.num',sK2(X21,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9479,f78])).
fof(f9479,plain,(
  ( ! [X21,X20] : (~p(s(bool,'T_0')) | s('type.num.num',X21) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',sK1))),s('type.num.num',sK2(X21,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5651])).
fof(f9831,plain,(
  ( ! [X19,X18] : (s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X18),s('type.num.num',sK1))),s('type.num.num',sK2(X19,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X18),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X18),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9478,f78])).
fof(f9478,plain,(
  ( ! [X19,X18] : (~p(s(bool,'T_0')) | s('type.num.num',X19) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X18),s('type.num.num',sK1))),s('type.num.num',sK2(X19,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X18),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X18),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5650])).
fof(f9829,plain,(
  ( ! [X17,X16] : (s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num',sK1))),s('type.num.num',sK2(X17,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9477,f78])).
fof(f9477,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | s('type.num.num',X17) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num',sK1))),s('type.num.num',sK2(X17,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X16),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5649])).
fof(f9827,plain,(
  ( ! [X14,X15] : (s('type.num.num',X15) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X14),s('type.num.num',sK1))),s('type.num.num',sK2(X15,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X14),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X14),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9476,f78])).
fof(f9476,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | s('type.num.num',X15) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X14),s('type.num.num',sK1))),s('type.num.num',sK2(X15,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X14),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X14),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5648])).
fof(f9825,plain,(
  ( ! [X12,X13] : (s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',sK1))),s('type.num.num',sK2(X13,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9475,f78])).
fof(f9475,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',sK1))),s('type.num.num',sK2(X13,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X12),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5647])).
fof(f9823,plain,(
  ( ! [X10,X11] : (s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num',sK1))),s('type.num.num',sK2(X11,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9474,f78])).
fof(f9474,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | s('type.num.num',X11) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num',sK1))),s('type.num.num',sK2(X11,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X10),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5644])).
fof(f9821,plain,(
  ( ! [X8,X9] : (s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num',sK1))),s('type.num.num',sK2(X9,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9473,f78])).
fof(f9473,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num',X9) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num',sK1))),s('type.num.num',sK2(X9,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X8),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5642])).
fof(f9819,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num',sK2(X8,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X7))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9472,f78])).
fof(f9472,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num',sK2(X8,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X7))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5516])).
fof(f9817,plain,(
  ( ! [X144,X143] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X144),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X143))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X144),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9470,f78])).
fof(f9470,plain,(
  ( ! [X144,X143] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X144),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X143))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X144),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4395])).
fof(f9815,plain,(
  ( ! [X10,X11] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X10))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9469,f78])).
fof(f9469,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X10))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X11),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5169])).
fof(f9813,plain,(
  ( ! [X154,X155,X153] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X155),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X153),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X155),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X153))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9468,f78])).
fof(f9468,plain,(
  ( ! [X154,X155,X153] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X155),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X153),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X155),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X153))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X154),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4399])).
fof(f9811,plain,(
  ( ! [X140,X138,X139,X137] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X139))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X137),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X138),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X139)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X137))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X138),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9467,f78])).
fof(f9467,plain,(
  ( ! [X140,X138,X139,X137] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X139))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X137),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X138),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X140),s('type.num.num',X139)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X137))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X138),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4393])).
fof(f9809,plain,(
  ( ! [X47,X45,X43,X46,X44] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',X47))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X44),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X45),s('type.num.num',X46))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X45),s('type.num.num',X47)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X43))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X44),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9466,f78])).
fof(f9466,plain,(
  ( ! [X47,X45,X43,X46,X44] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X45),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num',X47))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X43),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X44),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X45),s('type.num.num',X46))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X45),s('type.num.num',X47)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X43))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X44),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5070])).
fof(f9807,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X33),'const.bool.the_value_0'))))))),s('type.num.num',sK2(X34,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X32))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X33),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9465,f78])).
fof(f9465,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s('type.num.num',X34) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X32),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X33),'const.bool.the_value_0'))))))),s('type.num.num',sK2(X34,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X32))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X33),'const.bool.the_value_0'))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4375])).
fof(f9805,plain,(
  ( ! [X142,X141] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X141),'const.bool.the_value_0'))),s('type.num.num',X142))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X141),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X142))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9464,f78])).
fof(f9464,plain,(
  ( ! [X142,X141] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X141),'const.bool.the_value_0'))),s('type.num.num',X142))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X141),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X142))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4203])).
fof(f9803,plain,(
  ( ! [X8,X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num',X9))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9463,f78])).
fof(f9463,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num',X9))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X9))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5168])).
fof(f9801,plain,(
  ( ! [X151,X149,X150] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X151),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X149),'const.bool.the_value_0'))),s('type.num.num',X150))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X151),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X149),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X150))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9462,f78])).
fof(f9462,plain,(
  ( ! [X151,X149,X150] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X151),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X149),'const.bool.the_value_0'))),s('type.num.num',X150))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X151),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X149),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X150))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4206])).
fof(f9799,plain,(
  ( ! [X138,X136,X135,X137] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X138),s('type.num.num',X137))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X135),'const.bool.the_value_0'))),s('type.num.num',X136))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X138),s('type.num.num',X137)),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X135),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X136))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9461,f78])).
fof(f9461,plain,(
  ( ! [X138,X136,X135,X137] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X138),s('type.num.num',X137))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X135),'const.bool.the_value_0'))),s('type.num.num',X136))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X138),s('type.num.num',X137)),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X135),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X136))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4201])).
fof(f9797,plain,(
  ( ! [X39,X41,X38,X42,X40] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X42))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X38),'const.bool.the_value_0'))),s('type.num.num',X39))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X40),s('type.num.num',X41))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X40),s('type.num.num',X42)))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X38),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X39))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9460,f78])).
fof(f9460,plain,(
  ( ! [X39,X41,X38,X42,X40] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X40),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X41),s('type.num.num',X42))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X38),'const.bool.the_value_0'))),s('type.num.num',X39))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X40),s('type.num.num',X41))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X40),s('type.num.num',X42)))),'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X38),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X39))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5069])).
fof(f9795,plain,(
  ( ! [X30,X31,X32] : (s('type.num.num',X32) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))),s('type.num.num',X31))))),s('type.num.num',sK2(X32,'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X31))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9459,f78])).
fof(f9459,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'T_0')) | s('type.num.num',X32) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))),s('type.num.num',X31))))),s('type.num.num',sK2(X32,'const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X31))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4183])).
fof(f9793,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X7))))),s('type.num.num',sK2(X8,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num',X7))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9457,f78])).
fof(f9457,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X7))))),s('type.num.num',sK2(X8,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num',X7))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5531])).
fof(f9791,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',sK2(X8,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9455,f78])).
fof(f9455,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | s('type.num.num',X8) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',sK2(X8,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num',X7))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5546])).
fof(f9789,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X34))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X34))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9454,f78])).
fof(f9454,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X34))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X34))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5662])).
fof(f9787,plain,(
  ( ! [X30,X31,X29] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X31))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num',X30))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num',X31))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9453,f78])).
fof(f9453,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X30),s('type.num.num',X31))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num',X30))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X29),s('type.num.num',X31))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5661])).
fof(f9785,plain,(
  ( ! [X28,X26,X27] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num',X27))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num',X28))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9452,f78])).
fof(f9452,plain,(
  ( ! [X28,X26,X27] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X27),s('type.num.num',X28))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num',X27))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X26),s('type.num.num',X28))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5660])).
fof(f9783,plain,(
  ( ! [X24,X23,X25] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num',X24))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num',X25))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9451,f78])).
fof(f9451,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X25))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num',X24))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X23),s('type.num.num',X25))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5659])).
fof(f9781,plain,(
  ( ! [X21,X22,X20] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X21))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X22))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9450,f78])).
fof(f9450,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X22))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X21))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X20),s('type.num.num',X22))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5658])).
fof(f9779,plain,(
  ( ! [X19,X17,X18] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X18))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X19))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9449,f78])).
fof(f9449,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X18))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',X19))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5655])).
fof(f9777,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9448,f78])).
fof(f9448,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5167])).
fof(f9775,plain,(
  ( ! [X6,X7,X5] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9447,f78])).
fof(f9447,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',X7))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X6))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X5),s('type.num.num',X7))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f2696])).
fof(f9773,plain,(
  ( ! [X14,X15,X13,X16] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X16),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X15))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X16),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X15))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9446,f78])).
fof(f9446,plain,(
  ( ! [X14,X15,X13,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X16),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X15))))),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X16),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X14))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',X15))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3541])).
fof(f9771,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X22))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X23))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9445,f78])).
fof(f9445,plain,(
  ( ! [X24,X23,X21,X25,X22] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',X24)),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X22))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X21),s('type.num.num',X23))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3152])).
fof(f9769,plain,(
  ( ! [X54,X52,X53,X51] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X51),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X52),s('type.num.num',X53))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X52),s('type.num.num',X54))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9444,f78])).
fof(f9444,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X52),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X53),s('type.num.num',X54))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X51),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X52),s('type.num.num',X53))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X52),s('type.num.num',X54))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5666])).
fof(f9767,plain,(
  ( ! [X59,X57,X58,X56,X55] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',X59))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X56),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X56),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X57),s('type.num.num',X59))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9443,f78])).
fof(f9443,plain,(
  ( ! [X59,X57,X58,X56,X55] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X57),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X58),s('type.num.num',X59))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X55),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X56),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X56),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X57),s('type.num.num',X58))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X57),s('type.num.num',X59))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5667])).
fof(f9765,plain,(
  ( ! [X156,X154,X157,X155] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X156),s('type.num.num',X157))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X154)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X155),s('type.num.num',X156))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X155),s('type.num.num',X157))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9442,f78])).
fof(f9442,plain,(
  ( ! [X156,X154,X157,X155] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X155),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X156),s('type.num.num',X157))))),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X154)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X155),s('type.num.num',X156))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X155),s('type.num.num',X157))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f7436])).
fof(f9763,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X47),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X48),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X49),s('type.num.num',X50))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X46))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X48),s('type.num.num',X49))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X48),s('type.num.num',X50))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9440,f78])).
fof(f9440,plain,(
  ( ! [X47,X50,X48,X46,X49] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X46),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X47),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X48),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X49),s('type.num.num',X50))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X46))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X47),'const.bool.the_value_0')))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X48),s('type.num.num',X49))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X48),s('type.num.num',X50))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5665])).
fof(f9761,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X41),'const.bool.the_value_0'))),s('type.num.num',X42))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X45))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X41),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X42)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X43),s('type.num.num',X44))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X43),s('type.num.num',X45))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9439,f78])).
fof(f9439,plain,(
  ( ! [X45,X43,X41,X44,X42] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X41),'const.bool.the_value_0'))),s('type.num.num',X42))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X43),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X44),s('type.num.num',X45))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X41),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X42)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X43),s('type.num.num',X44))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X43),s('type.num.num',X45))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5664])).
fof(f9759,plain,(
  ( ! [X37,X35,X33,X36,X34,X32] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X37))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X34))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X35),s('type.num.num',X36))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X35),s('type.num.num',X37)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X34))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9438,f78])).
fof(f9438,plain,(
  ( ! [X37,X35,X33,X36,X34,X32] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X35),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X36),s('type.num.num',X37))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X33),s('type.num.num',X34))))),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X35),s('type.num.num',X36))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X35),s('type.num.num',X37)))),'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X33))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X32),s('type.num.num',X34))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5068])).
fof(f9757,plain,(
  ( ! [X21,X19,X22,X20] : (s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))))),s('type.num.num',sK2(X22,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',X21))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9437,f78])).
fof(f9437,plain,(
  ( ! [X21,X19,X22,X20] : (~p(s(bool,'T_0')) | s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',X21))))),s('type.num.num',sK2(X22,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',X20))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',X21))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f924])).
fof(f9755,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num',sK2(X3,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X1))))))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9436,f78])).
fof(f9436,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X3) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))),s('type.num.num',sK2(X3,'const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X0))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X2),s('type.num.num',X1))))))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5560])).
fof(f9753,plain,(
  ( ! [X25] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X25))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9430,f78])).
fof(f9430,plain,(
  ( ! [X25] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X25),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X25))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5396])).
fof(f9751,plain,(
  ( ! [X6] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9429,f78])).
fof(f9429,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5346])).
fof(f9749,plain,(
  ( ! [X19] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X19))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9427,f78])).
fof(f9427,plain,(
  ( ! [X19] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X19))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3993])).
fof(f9747,plain,(
  ( ! [X6] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9426,f78])).
fof(f9426,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3964])).
fof(f9745,plain,(
  ( ! [X10] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),X10))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9425,f78])).
fof(f9425,plain,(
  ( ! [X10] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),X10))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3182])).
fof(f9743,plain,(
  ( ! [X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X9))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9424,f78])).
fof(f9424,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X9))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3180])).
fof(f9741,plain,(
  ( ! [X8] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),X8))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9423,f78])).
fof(f9423,plain,(
  ( ! [X8] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),X8))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3178])).
fof(f9739,plain,(
  ( ! [X7] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X7))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9422,f78])).
fof(f9422,plain,(
  ( ! [X7] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X7))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3176])).
fof(f9737,plain,(
  ( ! [X6] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9421,f78])).
fof(f9421,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),X6))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3174])).
fof(f9735,plain,(
  ( ! [X12] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),X12))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9419,f78])).
fof(f9419,plain,(
  ( ! [X12] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),X12))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f2217])).
fof(f9733,plain,(
  ( ! [X11] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),X11))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9418,f78])).
fof(f9418,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),X11))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f1760])).
fof(f9731,plain,(
  ( ! [X8] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X8))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9417,f78])).
fof(f9417,plain,(
  ( ! [X8] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X8))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f1053])).
fof(f9729,plain,(
  ( ! [X4] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),X4))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9416,f78])).
fof(f9416,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),X4))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f843])).
fof(f9727,plain,(
  ( ! [X3] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X3))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9415,f78])).
fof(f9415,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),X3))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f618])).
fof(f9725,plain,(
  ( ! [X6,X5] : (s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X5),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X5),'const.bool.the_value_0')))),X6))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9414,f78])).
fof(f9414,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X5),'const.bool.the_value_0'))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X5),'const.bool.the_value_0')))),X6))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f645])).
fof(f9723,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)))),X5))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9410,f78])).
fof(f9410,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4)))),X5))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3111])).
fof(f9721,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X6)),X5))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9406,f78])).
fof(f9406,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X6))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X4))),s('type.num.num',X6)),X5))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f3122])).
fof(f9719,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)),X2))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9401,f78])).
fof(f9401,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)),X2))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f593])).
fof(f9717,plain,(
  ( ! [X6,X7] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))),X7))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9399,f78])).
fof(f9399,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))),X7))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f603])).
fof(f9715,plain,(
  ( ! [X35,X33,X34] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X34),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X34),'const.bool.the_value_0')))),X35))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9398,f78])).
fof(f9398,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X35),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X33),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X34),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X34),'const.bool.the_value_0')))),X35))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f2291])).
fof(f9713,plain,(
  ( ! [X19,X20] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X19)))),X20))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9397,f78])).
fof(f9397,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X20),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X19)))),X20))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f7401])).
fof(f9711,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X8))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9394,f78])).
fof(f9394,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X8))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5354])).
fof(f9709,plain,(
  ( ! [X19,X18] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))),X18))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9393,f78])).
fof(f9393,plain,(
  ( ! [X19,X18] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X19),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))),X18))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5118])).
fof(f9707,plain,(
  ( ! [X17,X16] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),X16))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9392,f78])).
fof(f9392,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X17),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),X16))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5117])).
fof(f9705,plain,(
  ( ! [X14,X15] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),X14))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9391,f78])).
fof(f9391,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),X14))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5116])).
fof(f9703,plain,(
  ( ! [X12,X13] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),X12))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9390,f78])).
fof(f9390,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X12),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X13),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),X12))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5115])).
fof(f9701,plain,(
  ( ! [X10,X11] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X10))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9389,f78])).
fof(f9389,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X11),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X10))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5114])).
fof(f9699,plain,(
  ( ! [X8,X9] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X8))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9388,f78])).
fof(f9388,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X9),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),X8))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5112])).
fof(f9697,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X7))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X8)))),X6))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9387,f78])).
fof(f9387,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X7),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X7))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X8)))),X6))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5003])).
fof(f9695,plain,(
  ( ! [X30,X31,X29] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X29))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0')))),X31))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9385,f78])).
fof(f9385,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X30),'const.bool.the_value_0'))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X31),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X29))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X30),'const.bool.the_value_0')))),X31))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4374])).
fof(f9693,plain,(
  ( ! [X28,X29,X27] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X27),'const.bool.the_value_0'))),s('type.num.num',X28))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X27),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X28)))),X29))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9384,f78])).
fof(f9384,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X27),'const.bool.the_value_0'))),s('type.num.num',X28))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X29),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X27),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X28)))),X29))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f4182])).
fof(f9691,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num',X8)))),X6))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9382,f78])).
fof(f9382,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))),s('type.num.num',X8))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num',X8)))),X6))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5017])).
fof(f9689,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))),X6))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9380,f78])).
fof(f9380,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X6),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X5)))))),X6))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5031])).
fof(f9687,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',X16))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',X17)))),X18))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9379,f78])).
fof(f9379,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X17))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',X16))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X15),s('type.num.num',X17)))),X18))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f923])).
fof(f9685,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X3),s('type.num.num',X0))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X3),s('type.num.num',X1)))),X2))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9378,f78])).
fof(f9378,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',sK2('const.arithmetic.*_2'(s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X3),s('type.num.num',X0))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num',X3),s('type.num.num',X1)))),X2))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f5044])).
fof(f9683,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2(X1,X0))))) ) | $spl52),
  inference(subsumption_resolution,[],[f9373,f78])).
fof(f9373,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',sK2(X1,X0))))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f102])).
fof(f9681,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl52),
  inference(subsumption_resolution,[],[f9359,f6618])).
fof(f9359,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl52),
  inference(backward_demodulation,[],[f6618,f91])).
fof(f10030,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999,f10001,f10003,f10005,f10007,f10009,f10011,f10013,f10015,f10017,f10021,f10023,f10025,f10027,f10029])).
fof(f10028,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999,f10001,f10003,f10005,f10007,f10009,f10011,f10013,f10015,f10017,f10021,f10023,f10025,f10027])).
fof(f10026,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999,f10001,f10003,f10005,f10007,f10009,f10011,f10013,f10015,f10017,f10021,f10023,f10025])).
fof(f10024,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999,f10001,f10003,f10005,f10007,f10009,f10011,f10013,f10015,f10017,f10021,f10023])).
fof(f10022,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999,f10001,f10003,f10005,f10007,f10009,f10011,f10013,f10015,f10017,f10021])).
fof(f10020,plain,(
  $false | ($spl52 | $spl121)),
  inference(subsumption_resolution,[],[f9634,f78])).
fof(f9634,plain,(
  ~p(s(bool,'T_0')) | ($spl52 | $spl121)),
  inference(backward_demodulation,[],[f6618,f9267])).
fof(f10019,plain,(
  $false | ($spl52 | $spl136)),
  inference(global_subsumption,[],[f9646,f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999,f10001,f10003,f10005,f10007,f10009,f10011,f10013,f10015,f10017])).
fof(f9646,plain,(
  ( ! [X29] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29)))) ) | ($spl52 | $spl136)),
  inference(trivial_inequality_removal,[],[f9633])).
fof(f9633,plain,(
  ( ! [X29] : (s(bool,'T_0') != s(bool,'T_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29)))) ) | ($spl52 | $spl136)),
  inference(backward_demodulation,[],[f6618,f9287])).
fof(f10018,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999,f10001,f10003,f10005,f10007,f10009,f10011,f10013,f10015,f10017])).
fof(f10016,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999,f10001,f10003,f10005,f10007,f10009,f10011,f10013,f10015])).
fof(f10014,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999,f10001,f10003,f10005,f10007,f10009,f10011,f10013])).
fof(f10012,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999,f10001,f10003,f10005,f10007,f10009,f10011])).
fof(f10010,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999,f10001,f10003,f10005,f10007,f10009])).
fof(f10008,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999,f10001,f10003,f10005,f10007])).
fof(f10006,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999,f10001,f10003,f10005])).
fof(f10004,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999,f10001,f10003])).
fof(f10002,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999,f10001])).
fof(f10000,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997,f9999])).
fof(f9998,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995,f9997])).
fof(f9996,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993,f9995])).
fof(f9994,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991,f9993])).
fof(f9992,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989,f9991])).
fof(f9990,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987,f9989])).
fof(f9988,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985,f9987])).
fof(f9986,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983,f9985])).
fof(f9984,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981,f9983])).
fof(f9982,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979,f9981])).
fof(f9980,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977,f9979])).
fof(f9978,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975,f9977])).
fof(f9976,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973,f9975])).
fof(f9974,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971,f9973])).
fof(f9972,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969,f9971])).
fof(f9970,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967,f9969])).
fof(f9968,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965,f9967])).
fof(f9966,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963,f9965])).
fof(f9964,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961,f9963])).
fof(f9962,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959,f9961])).
fof(f9960,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957,f9959])).
fof(f9958,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955,f9957])).
fof(f9956,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953,f9955])).
fof(f9954,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951,f9953])).
fof(f9952,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949,f9951])).
fof(f9950,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947,f9949])).
fof(f9948,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945,f9947])).
fof(f9946,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943,f9945])).
fof(f9944,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941,f9943])).
fof(f9942,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939,f9941])).
fof(f9940,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937,f9939])).
fof(f9938,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935,f9937])).
fof(f9936,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933,f9935])).
fof(f9934,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931,f9933])).
fof(f9932,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929,f9931])).
fof(f9930,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927,f9929])).
fof(f9928,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925,f9927])).
fof(f9926,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923,f9925])).
fof(f9924,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921,f9923])).
fof(f9922,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919,f9921])).
fof(f9920,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917,f9919])).
fof(f9918,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915,f9917])).
fof(f9916,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913,f9915])).
fof(f9914,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911,f9913])).
fof(f9912,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909,f9911])).
fof(f9910,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907,f9909])).
fof(f9908,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905,f9907])).
fof(f9906,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903,f9905])).
fof(f9904,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901,f9903])).
fof(f9902,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899,f9901])).
fof(f9900,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897,f9899])).
fof(f9898,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895,f9897])).
fof(f9896,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893,f9895])).
fof(f9894,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891,f9893])).
fof(f9892,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889,f9891])).
fof(f9890,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887,f9889])).
fof(f9888,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885,f9887])).
fof(f9886,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883,f9885])).
fof(f9884,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881,f9883])).
fof(f9882,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879,f9881])).
fof(f9880,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877,f9879])).
fof(f9878,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875,f9877])).
fof(f9876,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873,f9875])).
fof(f9874,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871,f9873])).
fof(f9872,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869,f9871])).
fof(f9870,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867,f9869])).
fof(f9868,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865,f9867])).
fof(f9866,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863,f9865])).
fof(f9864,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861,f9863])).
fof(f9862,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859,f9861])).
fof(f9860,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857,f9859])).
fof(f9858,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855,f9857])).
fof(f9856,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853,f9855])).
fof(f9854,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851,f9853])).
fof(f9852,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849,f9851])).
fof(f9850,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847,f9849])).
fof(f9848,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845,f9847])).
fof(f9846,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843,f9845])).
fof(f9844,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841,f9843])).
fof(f9842,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839,f9841])).
fof(f9840,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837,f9839])).
fof(f9838,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835,f9837])).
fof(f9836,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833,f9835])).
fof(f9834,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831,f9833])).
fof(f9832,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829,f9831])).
fof(f9830,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827,f9829])).
fof(f9828,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825,f9827])).
fof(f9826,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823,f9825])).
fof(f9824,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821,f9823])).
fof(f9822,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819,f9821])).
fof(f9820,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817,f9819])).
fof(f9818,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815,f9817])).
fof(f9816,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813,f9815])).
fof(f9814,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811,f9813])).
fof(f9812,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809,f9811])).
fof(f9810,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807,f9809])).
fof(f9808,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805,f9807])).
fof(f9806,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803,f9805])).
fof(f9804,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801,f9803])).
fof(f9802,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799,f9801])).
fof(f9800,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797,f9799])).
fof(f9798,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795,f9797])).
fof(f9796,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793,f9795])).
fof(f9794,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791,f9793])).
fof(f9792,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789,f9791])).
fof(f9790,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787,f9789])).
fof(f9788,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785,f9787])).
fof(f9786,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783,f9785])).
fof(f9784,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781,f9783])).
fof(f9782,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779,f9781])).
fof(f9780,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777,f9779])).
fof(f9778,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775,f9777])).
fof(f9776,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773,f9775])).
fof(f9774,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771,f9773])).
fof(f9772,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769,f9771])).
fof(f9770,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767,f9769])).
fof(f9768,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765,f9767])).
fof(f9766,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763,f9765])).
fof(f9764,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761,f9763])).
fof(f9762,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759,f9761])).
fof(f9760,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757,f9759])).
fof(f9758,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755,f9757])).
fof(f9756,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753,f9755])).
fof(f9754,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751,f9753])).
fof(f9752,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749,f9751])).
fof(f9750,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747,f9749])).
fof(f9748,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745,f9747])).
fof(f9746,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743,f9745])).
fof(f9744,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741,f9743])).
fof(f9742,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739,f9741])).
fof(f9740,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737,f9739])).
fof(f9738,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735,f9737])).
fof(f9736,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733,f9735])).
fof(f9734,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731,f9733])).
fof(f9732,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729,f9731])).
fof(f9730,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727,f9729])).
fof(f9728,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725,f9727])).
fof(f9726,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723,f9725])).
fof(f9724,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721,f9723])).
fof(f9722,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719,f9721])).
fof(f9720,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717,f9719])).
fof(f9718,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715,f9717])).
fof(f9716,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713,f9715])).
fof(f9714,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711,f9713])).
fof(f9712,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709,f9711])).
fof(f9710,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707,f9709])).
fof(f9708,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705,f9707])).
fof(f9706,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703,f9705])).
fof(f9704,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701,f9703])).
fof(f9702,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699,f9701])).
fof(f9700,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697,f9699])).
fof(f9698,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695,f9697])).
fof(f9696,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693,f9695])).
fof(f9694,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691,f9693])).
fof(f9692,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689,f9691])).
fof(f9690,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687,f9689])).
fof(f9688,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685,f9687])).
fof(f9686,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683,f9685])).
fof(f9684,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681,f9683])).
fof(f9682,plain,(
  $false | $spl52),
  inference(global_subsumption,[],[f77,f76,f78,f81,f82,f83,f84,f88,f87,f100,f99,f101,f104,f105,f131,f133,f135,f149,f154,f157,f210,f211,f215,f262,f314,f470,f471,f482,f515,f527,f533,f562,f604,f688,f714,f717,f733,f763,f766,f800,f802,f813,f880,f883,f891,f906,f984,f1012,f1093,f1096,f1118,f1100,f1126,f1209,f1212,f1213,f483,f734,f1138,f933,f1014,f815,f619,f844,f1054,f646,f519,f1167,f602,f924,f656,f651,f623,f607,f516,f1175,f103,f525,f605,f805,f807,f809,f804,f92,f91,f80,f718,f86,f474,f85,f590,f603,f923,f1053,f843,f618,f593,f645,f102,f1652,f1660,f1705,f1706,f1760,f1761,f1829,f1832,f1838,f1962,f1971,f2062,f2063,f2066,f2124,f2127,f2135,f2137,f2138,f2217,f2218,f2248,f2291,f2292,f2340,f2343,f2350,f2388,f2399,f2449,f2491,f2502,f2567,f2578,f2589,f2652,f2654,f2655,f2678,f2657,f2679,f2684,f2687,f2690,f2693,f2696,f2697,f2701,f2703,f2704,f2705,f2706,f2707,f2708,f2709,f2724,f2726,f2737,f2809,f2811,f2812,f2845,f2846,f2847,f2848,f2849,f2902,f2903,f2917,f2970,f2981,f3035,f3037,f3039,f3041,f3043,f3044,f2999,f3046,f3047,f3048,f3049,f3050,f3051,f3052,f3053,f3054,f3055,f3146,f3147,f3148,f3149,f3150,f3151,f3152,f3153,f3154,f3111,f3122,f3174,f3176,f3178,f3180,f3182,f3183,f3254,f3265,f3315,f3535,f3536,f3537,f3538,f3539,f3540,f3541,f3542,f3543,f3545,f3819,f3820,f3821,f3822,f3823,f3824,f3825,f3826,f3827,f3828,f3840,f3846,f3961,f3964,f3993,f3995,f4025,f4031,f4035,f4037,f4093,f4094,f4097,f4111,f4182,f4183,f4198,f4201,f4203,f4206,f4207,f4253,f4254,f4255,f4259,f4261,f4262,f4263,f4301,f4374,f4375,f4390,f4393,f4395,f4396,f4399,f4400,f4450,f4464,f4478,f4499,f4636,f4699,f4649,f4651,f4665,f4686,f4970,f4941,f4977,f4978,f4979,f4982,f4983,f4984,f5063,f5064,f5065,f5066,f5067,f5068,f5069,f5070,f5071,f5072,f5003,f5017,f5031,f5044,f5112,f5114,f5115,f5116,f5117,f5118,f5119,f5160,f5126,f5167,f5168,f5169,f5172,f5173,f5174,f5175,f5176,f5177,f5178,f5179,f5192,f5198,f5342,f5346,f5354,f5396,f5399,f5444,f5453,f5459,f5462,f5482,f5516,f5531,f5546,f5560,f5642,f5644,f5647,f5648,f5649,f5650,f5651,f5655,f5658,f5659,f5660,f5661,f5662,f5664,f5665,f5666,f5667,f5668,f5669,f5670,f5717,f5718,f5719,f5722,f5731,f5746,f6795,f6797,f6829,f6831,f2906,f2905,f2904,f7160,f7401,f7402,f7417,f7420,f7424,f7425,f7432,f7436,f7601,f7633,f7648,f7650,f7651,f7652,f7653,f7654,f7655,f7656,f8204,f8271,f8922,f9224,f9219,f8961,f8974,f8975,f8976,f9269,f8982,f8983,f8984,f8985,f8991,f8992,f8993,f8994,f8995,f8996,f8997,f8998,f8999,f9000,f9005,f9006,f9007,f9008,f9009,f9010,f9011,f9016,f9017,f9018,f9019,f9021,f9024,f9025,f9026,f9027,f9028,f9029,f9030,f9031,f9034,f9035,f9036,f9037,f9038,f9039,f9278,f9043,f9044,f9046,f9051,f9210,f9286,f9288,f9202,f9289,f9290,f9291,f9292,f9293,f9294,f9138,f9140,f9329,f9330,f9181,f9056,f6618,f9681])).
fof(f9680,plain,(
  $false | $spl52),
  inference(subsumption_resolution,[],[f9358,f78])).
fof(f9358,plain,(
  ~p(s(bool,'T_0')) | $spl52),
  inference(backward_demodulation,[],[f6618,f80])).
fof(f2853,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl31),
  inference(cnf_transformation,[],[f2853_D])).
fof(f2853_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f6975,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,'T_0') = s(bool,sK3(X6,X7,bool,bool))) ) | $spl32),
  inference(superposition,[],[f804,f2855])).
fof(f9342,plain,(
  ( ! [X99] : (s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X99))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X99)))) ) | $spl148),
  inference(cnf_transformation,[],[f9342_D])).
fof(f9342_D,plain,(
  ( ! [X99] : (s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X99))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X99)))) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f9341,plain,(
  ( ! [X99,X100] : (p(s(bool,X100)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X99))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X99)))) ) | ($spl7 | $spl31)),
  inference(subsumption_resolution,[],[f9180,f87])).
fof(f9180,plain,(
  ( ! [X99,X100] : (p(s(bool,X100)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X99))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X99))) | s(bool,'T_0') = s(bool,X100)) ) | ($spl7 | $spl31)),
  inference(superposition,[],[f8496,f483])).
fof(f8496,plain,(
  ( ! [X15] : (p(s(bool,X15)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,X15)))))) ) | ($spl7 | $spl31)),
  inference(subsumption_resolution,[],[f8473,f87])).
fof(f8473,plain,(
  ( ! [X15] : (p(s(bool,X15)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,X15))))) | s(bool,'T_0') = s(bool,X15)) ) | ($spl7 | $spl31)),
  inference(superposition,[],[f8141,f6922])).
fof(f6922,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl7 | $spl31)),
  inference(superposition,[],[f6890,f84])).
fof(f6890,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl7 | $spl31)),
  inference(forward_demodulation,[],[f6871,f2713])).
fof(f6871,plain,(
  s(bool,f(s(bool,'F_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | ($spl7 | $spl31)),
  inference(unit_resulting_resolution,[],[f2853,f2722])).
fof(f8141,plain,(
  ( ! [X7] : (p(s(bool,X7)) | s(bool,'F_0') = s(bool,f(s(bool,X7)))) ) | ($spl7 | $spl31)),
  inference(subsumption_resolution,[],[f8103,f87])).
fof(f8103,plain,(
  ( ! [X7] : (p(s(bool,X7)) | s(bool,'F_0') = s(bool,f(s(bool,X7))) | s(bool,'T_0') = s(bool,X7)) ) | ($spl7 | $spl31)),
  inference(superposition,[],[f92,f6922])).
fof(f9340,plain,(
  ( ! [X95] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X95))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X95)))) ) | $spl146),
  inference(cnf_transformation,[],[f9340_D])).
fof(f9340_D,plain,(
  ( ! [X95] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X95))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X95)))) ) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f9339,plain,(
  ( ! [X95,X96] : (p(s(bool,X96)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X95))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X95)))) ) | ($spl7 | $spl31)),
  inference(subsumption_resolution,[],[f9178,f87])).
fof(f9178,plain,(
  ( ! [X95,X96] : (p(s(bool,X96)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X95))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X95))) | s(bool,'T_0') = s(bool,X96)) ) | ($spl7 | $spl31)),
  inference(superposition,[],[f8181,f483])).
fof(f8181,plain,(
  ( ! [X15] : (p(s(bool,X15)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,X15)))))) ) | ($spl7 | $spl31)),
  inference(subsumption_resolution,[],[f8159,f87])).
fof(f8159,plain,(
  ( ! [X15] : (p(s(bool,X15)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,X15))))) | s(bool,'T_0') = s(bool,X15)) ) | ($spl7 | $spl31)),
  inference(superposition,[],[f8139,f6922])).
fof(f8139,plain,(
  ( ! [X4] : (p(s(bool,X4)) | s(bool,'T_0') != s(bool,f(s(bool,X4)))) ) | ($spl7 | $spl31)),
  inference(subsumption_resolution,[],[f8100,f87])).
fof(f8100,plain,(
  ( ! [X4] : (p(s(bool,X4)) | s(bool,'T_0') != s(bool,f(s(bool,X4))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl7 | $spl31)),
  inference(superposition,[],[f87,f6922])).
fof(f9302,plain,(
  ( ! [X76] : (s(bool,'F_0') = s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76)))) ) | $spl142),
  inference(cnf_transformation,[],[f9302_D])).
fof(f9302_D,plain,(
  ( ! [X76] : (s(bool,'F_0') = s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76)))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f9338,plain,(
  ( ! [X94,X93] : (p(s(bool,X94)) | s(bool,'F_0') = s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X93))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X93)))) ) | ($spl7 | $spl31)),
  inference(subsumption_resolution,[],[f9177,f87])).
fof(f9177,plain,(
  ( ! [X94,X93] : (p(s(bool,X94)) | s(bool,'F_0') = s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X93))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X93))) | s(bool,'T_0') = s(bool,X94)) ) | ($spl7 | $spl31)),
  inference(superposition,[],[f8141,f483])).
fof(f9337,plain,(
  ( ! [X89] : (s(bool,'T_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X89))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X89)))) ) | $spl144),
  inference(cnf_transformation,[],[f9337_D])).
fof(f9337_D,plain,(
  ( ! [X89] : (s(bool,'T_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X89))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X89)))) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f9336,plain,(
  ( ! [X90,X89] : (p(s(bool,X90)) | s(bool,'T_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X89))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X89)))) ) | ($spl7 | $spl31)),
  inference(subsumption_resolution,[],[f9175,f87])).
fof(f9175,plain,(
  ( ! [X90,X89] : (p(s(bool,X90)) | s(bool,'T_0') != s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X89))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X89))) | s(bool,'T_0') = s(bool,X90)) ) | ($spl7 | $spl31)),
  inference(superposition,[],[f8139,f483])).
fof(f9242,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) | $spl112),
  inference(cnf_transformation,[],[f9242_D])).
fof(f9242_D,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f9330,plain,(
  ( ! [X30,X31] : (p(s(bool,X31)) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X30))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X30)))) )),
  inference(subsumption_resolution,[],[f9153,f87])).
fof(f9153,plain,(
  ( ! [X30,X31] : (p(s(bool,X31)) | s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X30))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X30))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f92,f483])).
fof(f9287,plain,(
  ( ! [X29] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29)))) ) | $spl136),
  inference(cnf_transformation,[],[f9287_D])).
fof(f9287_D,plain,(
  ( ! [X29] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29)))) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f9329,plain,(
  ( ! [X24,X25] : (p(s(bool,X25)) | s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X24))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X24)))) )),
  inference(subsumption_resolution,[],[f9150,f87])).
fof(f9150,plain,(
  ( ! [X24,X25] : (p(s(bool,X25)) | s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X24))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X24))) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f87,f483])).
fof(f9304,plain,(
  ( ! [X107,X108] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X108))) | s(bool,'T_0') = s(bool,X107) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X108)))) ) | ($spl7 | $spl31)),
  inference(subsumption_resolution,[],[f9097,f6876])).
fof(f6876,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | $spl31),
  inference(superposition,[],[f2853,f84])).
fof(f9097,plain,(
  ( ! [X107,X108] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X108))) | s(bool,'T_0') = s(bool,X107) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X108))) | s(bool,'T_0') = s(bool,f(s(bool,X107)))) ) | ($spl7 | $spl31)),
  inference(superposition,[],[f8491,f483])).
fof(f8491,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl7 | $spl31)),
  inference(subsumption_resolution,[],[f8462,f80])).
fof(f8462,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl7 | $spl31)),
  inference(superposition,[],[f8141,f84])).
fof(f9190,plain,(
  ( ! [X76,X75] : (s(bool,'F_0') = s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))))) | s(bool,'T_0') = s(bool,X75) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76)))) ) | ($spl7 | $spl31)),
  inference(duplicate_literal_removal,[],[f9094])).
fof(f9094,plain,(
  ( ! [X76,X75] : (s(bool,'F_0') = s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))))) | s(bool,'T_0') = s(bool,X75) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X76))) | s(bool,'T_0') = s(bool,X75)) ) | ($spl7 | $spl31)),
  inference(superposition,[],[f8491,f483])).
fof(f9299,plain,(
  ( ! [X70] : (~p(s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70)))) ) | $spl140),
  inference(cnf_transformation,[],[f9299_D])).
fof(f9299_D,plain,(
  ( ! [X70] : (~p(s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70)))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f9191,plain,(
  ( ! [X70,X69] : (~p(s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70)))))) | s(bool,'T_0') = s(bool,X69) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70)))) ) | ($spl7 | $spl31)),
  inference(duplicate_literal_removal,[],[f9091])).
fof(f9091,plain,(
  ( ! [X70,X69] : (~p(s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70)))))) | s(bool,'T_0') = s(bool,X69) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X70))) | s(bool,'T_0') = s(bool,X69)) ) | ($spl7 | $spl31)),
  inference(superposition,[],[f8140,f483])).
fof(f8140,plain,(
  ( ! [X6] : (~p(s(bool,f(s(bool,X6)))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl7 | $spl31)),
  inference(subsumption_resolution,[],[f8102,f84])).
fof(f8102,plain,(
  ( ! [X6] : (s(bool,'F_0') != s(bool,X6) | ~p(s(bool,f(s(bool,X6)))) | s(bool,'T_0') = s(bool,X6)) ) | ($spl7 | $spl31)),
  inference(superposition,[],[f91,f6922])).
fof(f9297,plain,(
  ( ! [X66] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66))) = s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66)))) ) | $spl138),
  inference(cnf_transformation,[],[f9297_D])).
fof(f9297_D,plain,(
  ( ! [X66] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66))) = s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66)))) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f9192,plain,(
  ( ! [X66,X65] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66))) = s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66))))) | s(bool,'T_0') = s(bool,X65) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66)))) ) | ($spl7 | $spl31)),
  inference(duplicate_literal_removal,[],[f9089])).
fof(f9089,plain,(
  ( ! [X66,X65] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66))) = s(bool,f(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66))))) | s(bool,'T_0') = s(bool,X65) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X66))) | s(bool,'T_0') = s(bool,X65)) ) | ($spl7 | $spl31)),
  inference(superposition,[],[f6922,f483])).
fof(f9296,plain,(
  ( ! [X64,X63] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64))) | s(bool,'T_0') = s(bool,X63) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64)))) ) | $spl41),
  inference(forward_demodulation,[],[f9193,f3229])).
fof(f9193,plain,(
  ( ! [X64,X63] : (s(bool,f(s(bool,'T_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64))) | s(bool,'T_0') = s(bool,X63) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64)))) ) | $spl41),
  inference(duplicate_literal_removal,[],[f9088])).
fof(f9088,plain,(
  ( ! [X64,X63] : (s(bool,f(s(bool,'T_0'))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64))) | s(bool,'T_0') = s(bool,X63) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X64))) | s(bool,'T_0') = s(bool,X63)) ) | $spl41),
  inference(superposition,[],[f3354,f483])).
fof(f9295,plain,(
  ( ! [X61,X62] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X62))) | s(bool,'T_0') = s(bool,X61) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X62)))) ) | $spl7),
  inference(forward_demodulation,[],[f9194,f2713])).
fof(f9194,plain,(
  ( ! [X61,X62] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X62))) | s(bool,'T_0') = s(bool,X61) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X62)))) ) | $spl7),
  inference(duplicate_literal_removal,[],[f9087])).
fof(f9087,plain,(
  ( ! [X61,X62] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X62))) | s(bool,'T_0') = s(bool,X61) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X62))) | s(bool,'T_0') = s(bool,X61)) ) | $spl7),
  inference(superposition,[],[f2722,f483])).
fof(f9294,plain,(
  ( ! [X59,X60] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X60))) | s(bool,'T_0') = s(bool,X59) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X60)))) )),
  inference(forward_demodulation,[],[f9195,f2138])).
fof(f9195,plain,(
  ( ! [X59,X60] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X60))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X59) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X60)))) )),
  inference(duplicate_literal_removal,[],[f9086])).
fof(f9086,plain,(
  ( ! [X59,X60] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X60))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X59) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X60))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f2343,f483])).
fof(f9293,plain,(
  ( ! [X57,X56] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X57))) | s(bool,'T_0') = s(bool,X56) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X57)))) )),
  inference(forward_demodulation,[],[f9196,f215])).
fof(f9196,plain,(
  ( ! [X57,X58,X56] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X57))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X58))))) | s(bool,'T_0') = s(bool,X56) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X57)))) )),
  inference(duplicate_literal_removal,[],[f9085])).
fof(f9085,plain,(
  ( ! [X57,X58,X56] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X57))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X58))))) | s(bool,'T_0') = s(bool,X56) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X57))) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f2066,f483])).
fof(f9292,plain,(
  ( ! [X54,X55] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X55))) | s(bool,'T_0') = s(bool,X54) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X55)))) )),
  inference(forward_demodulation,[],[f9197,f1706])).
fof(f9197,plain,(
  ( ! [X54,X55] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X55))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X54) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X55)))) )),
  inference(duplicate_literal_removal,[],[f9084])).
fof(f9084,plain,(
  ( ! [X54,X55] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X55))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X54) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X55))) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f1832,f483])).
fof(f9291,plain,(
  ( ! [X52,X53] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53))) | s(bool,'T_0') = s(bool,X52) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53)))) )),
  inference(forward_demodulation,[],[f9198,f1012])).
fof(f9198,plain,(
  ( ! [X52,X53] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X52) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53)))) )),
  inference(duplicate_literal_removal,[],[f9083])).
fof(f9083,plain,(
  ( ! [X52,X53] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X52) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X53))) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f1096,f483])).
fof(f9290,plain,(
  ( ! [X50,X51] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) | s(bool,'T_0') = s(bool,X50) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51)))) )),
  inference(forward_demodulation,[],[f9199,f813])).
fof(f9199,plain,(
  ( ! [X50,X51] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X50) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51)))) )),
  inference(duplicate_literal_removal,[],[f9082])).
fof(f9082,plain,(
  ( ! [X50,X51] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X50) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X51))) | s(bool,'T_0') = s(bool,X50)) )),
  inference(superposition,[],[f883,f483])).
fof(f9289,plain,(
  ( ! [X48,X49] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X49))) | s(bool,'T_0') = s(bool,X48) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X49)))) )),
  inference(forward_demodulation,[],[f9200,f688])).
fof(f9200,plain,(
  ( ! [X48,X49] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X49))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X48) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X49)))) )),
  inference(duplicate_literal_removal,[],[f9081])).
fof(f9081,plain,(
  ( ! [X48,X49] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X49))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X48) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X49))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f766,f483])).
fof(f9288,plain,(
  ( ! [X30,X31] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X31))) | s(bool,'T_0') = s(bool,X30) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X31)))) )),
  inference(forward_demodulation,[],[f9203,f149])).
fof(f9203,plain,(
  ( ! [X30,X31,X32] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X31))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X32),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X30) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X31)))) )),
  inference(duplicate_literal_removal,[],[f9076])).
fof(f9076,plain,(
  ( ! [X30,X31,X32] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X31))) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X32),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X30) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X31))) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f211,f483])).
fof(f9286,plain,(
  ( ! [X28,X29] : (s(bool,'T_0') != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))) | s(bool,'T_0') = s(bool,X28) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29)))) )),
  inference(forward_demodulation,[],[f9204,f135])).
fof(f9204,plain,(
  ( ! [X28,X29] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X28) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29)))) )),
  inference(duplicate_literal_removal,[],[f9075])).
fof(f9075,plain,(
  ( ! [X28,X29] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X28) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X29))) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f210,f483])).
fof(f9210,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1)))) )),
  inference(duplicate_literal_removal,[],[f9064])).
fof(f9064,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f84,f483])).
fof(f9280,plain,(
  ( ! [X296,X297] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X296)))))) | s(bool,'T_0') = s(bool,X297) | s(bool,X297) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X296)))) ) | $spl134),
  inference(cnf_transformation,[],[f9280_D])).
fof(f9280_D,plain,(
  ( ! [X296,X297] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X296)))))) | s(bool,'T_0') = s(bool,X297) | s(bool,X297) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X296)))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f9273,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | $spl127),
  inference(cnf_transformation,[],[f9273_D])).
fof(f9273_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) <=> ~$spl127),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl127])])).
fof(f9051,plain,(
  ( ! [X296,X297] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X296)))))) | s(bool,X297) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X296))) | s(bool,'T_0') = s(bool,X297)) )),
  inference(superposition,[],[f2137,f483])).
fof(f9279,plain,(
  ( ! [X283,X284] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X283)))))) | s(bool,'T_0') = s(bool,X284) | s(bool,X284) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X283)))) ) | $spl132),
  inference(cnf_transformation,[],[f9279_D])).
fof(f9279_D,plain,(
  ( ! [X283,X284] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X283)))))) | s(bool,'T_0') = s(bool,X284) | s(bool,X284) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X283)))) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f9046,plain,(
  ( ! [X283,X284] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X283)))))) | s(bool,X284) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X283))) | s(bool,'T_0') = s(bool,X284)) )),
  inference(superposition,[],[f1705,f483])).
fof(f9277,plain,(
  ( ! [X249,X248] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X248)))))) | s(bool,'T_0') = s(bool,X249) | s(bool,X249) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X248)))) ) | $spl130),
  inference(cnf_transformation,[],[f9277_D])).
fof(f9277_D,plain,(
  ( ! [X249,X248] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X248)))))) | s(bool,'T_0') = s(bool,X249) | s(bool,X249) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X248)))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f9037,plain,(
  ( ! [X249,X248] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X248)))))) | s(bool,X249) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X248))) | s(bool,'T_0') = s(bool,X249)) )),
  inference(superposition,[],[f1014,f483])).
fof(f9276,plain,(
  ( ! [X180,X179] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X179)))))) | s(bool,'T_0') = s(bool,X180) | s(bool,X180) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X179)))) ) | $spl128),
  inference(cnf_transformation,[],[f9276_D])).
fof(f9276_D,plain,(
  ( ! [X180,X179] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X179)))))) | s(bool,'T_0') = s(bool,X180) | s(bool,X180) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X179)))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f9021,plain,(
  ( ! [X180,X179] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X179)))))) | s(bool,X180) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X179))) | s(bool,'T_0') = s(bool,X180)) )),
  inference(superposition,[],[f815,f483])).
fof(f9271,plain,(
  ( ! [X151,X150] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X150)))))) | s(bool,'T_0') = s(bool,X151) | s(bool,X151) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X150)))) ) | $spl124),
  inference(cnf_transformation,[],[f9271_D])).
fof(f9271_D,plain,(
  ( ! [X151,X150] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X150)))))) | s(bool,'T_0') = s(bool,X151) | s(bool,X151) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X150)))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f9011,plain,(
  ( ! [X151,X150] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',sK1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X150)))))) | s(bool,X151) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X150))) | s(bool,'T_0') = s(bool,X151)) )),
  inference(superposition,[],[f607,f483])).
fof(f9268,plain,(
  ( ! [X14,X15,X13] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13))))) | s(bool,'T_0') = s(bool,X15) | s(bool,X15) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13)))) ) | $spl122),
  inference(cnf_transformation,[],[f9268_D])).
fof(f9268_D,plain,(
  ( ! [X14,X15,X13] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13))))) | s(bool,'T_0') = s(bool,X15) | s(bool,X15) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13)))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f9267,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | $spl121),
  inference(cnf_transformation,[],[f9267_D])).
fof(f9267_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) <=> ~$spl121),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl121])])).
fof(f8975,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13))))),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13))))) | s(bool,X15) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X13))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f86,f483])).
fof(f9264,plain,(
  ( ! [X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))))) | s(bool,'T_0') = s(bool,X34) | s(bool,X34) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32)))) ) | $spl116),
  inference(cnf_transformation,[],[f9264_D])).
fof(f9264_D,plain,(
  ( ! [X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))))) | s(bool,'T_0') = s(bool,X34) | s(bool,X34) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32)))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f8974,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11))))) | s(bool,X12) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X11))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f85,f483])).
fof(f9265,plain,(
  ( ! [X33] : (s(bool,X33) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X33)) ) | $spl118),
  inference(cnf_transformation,[],[f9265_D])).
fof(f9265_D,plain,(
  ( ! [X33] : (s(bool,X33) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X33)) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f8961,plain,(
  ( ! [X33,X34,X32] : (s(bool,X33) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))))) | s(bool,'T_0') = s(bool,X33) | s(bool,X34) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f483,f483])).
fof(f9245,plain,(
  ( ! [X28,X27] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28))) | s(bool,'T_0') = s(bool,X27)) ) | ($spl7 | $spl31)),
  inference(subsumption_resolution,[],[f8930,f6876])).
fof(f8930,plain,(
  ( ! [X28,X27] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X28))) | s(bool,'T_0') = s(bool,f(s(bool,X27))) | s(bool,'T_0') = s(bool,X27)) ) | ($spl7 | $spl31)),
  inference(superposition,[],[f483,f8491])).
fof(f9244,plain,(
  ( ! [X17,X18] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18))) | s(bool,'T_0') = s(bool,X17)) ) | $spl7),
  inference(forward_demodulation,[],[f9218,f2713])).
fof(f9218,plain,(
  ( ! [X17,X18] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18))) | s(bool,'T_0') = s(bool,X17)) ) | $spl7),
  inference(duplicate_literal_removal,[],[f8929])).
fof(f8929,plain,(
  ( ! [X17,X18] : (s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X18))) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) ) | $spl7),
  inference(superposition,[],[f483,f2722])).
fof(f9243,plain,(
  ( ! [X15,X16] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)))) ) | $spl114),
  inference(cnf_transformation,[],[f9243_D])).
fof(f9243_D,plain,(
  ( ! [X15,X16] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16)))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f9219,plain,(
  ( ! [X14,X15,X16] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16))) | s(bool,'T_0') = s(bool,X14) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15)))) )),
  inference(duplicate_literal_removal,[],[f8928])).
fof(f8928,plain,(
  ( ! [X14,X15,X16] : (s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X16))) | s(bool,'T_0') = s(bool,X14) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f483,f483])).
fof(f9224,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f8923])).
fof(f8923,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X1))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f483,f84])).
fof(f9239,plain,(
  ( ! [X33,X34,X32] : (s(bool,X33) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))))) | s(bool,'T_0') = s(bool,X34) | s(bool,X34) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))) | s(bool,'T_0') = s(bool,X33)) ) | $spl108),
  inference(cnf_transformation,[],[f9239_D])).
fof(f9239_D,plain,(
  ( ! [X33,X34,X32] : (s(bool,X33) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))))) | s(bool,'T_0') = s(bool,X34) | s(bool,X34) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))) | s(bool,'T_0') = s(bool,X33)) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f8922,plain,(
  ( ! [X33,X34,X32] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | s(bool,X33) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))))) | s(bool,'T_0') = s(bool,X33) | s(bool,X34) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X32))) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f483,f483])).
fof(f7161,plain,(
  ( ! [X31,X32] : (s(bool,'F_0') != s(bool,X31) | s(bool,'T_0') = s(bool,X32) | s(bool,X31) = s(bool,X32)) ) | $spl106),
  inference(cnf_transformation,[],[f7161_D])).
fof(f7161_D,plain,(
  ( ! [X31,X32] : (s(bool,'F_0') != s(bool,X31) | s(bool,'T_0') = s(bool,X32) | s(bool,X31) = s(bool,X32)) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f7164,plain,(
  ( ! [X50,X51,X49] : (s(bool,'F_0') != s(bool,X50) | p(s(bool,X49)) | s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X51)) ) | $spl7),
  inference(forward_demodulation,[],[f7163,f2713])).
fof(f7163,plain,(
  ( ! [X50,X51,X49] : (p(s(bool,X49)) | s(bool,X50) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X51)) ) | $spl7),
  inference(subsumption_resolution,[],[f7097,f87])).
fof(f7097,plain,(
  ( ! [X50,X51,X49] : (p(s(bool,X49)) | s(bool,X50) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X51) | s(bool,'T_0') = s(bool,X49)) ) | $spl7),
  inference(superposition,[],[f470,f2722])).
fof(f7160,plain,(
  ( ! [X30,X31,X32] : (p(s(bool,X30)) | s(bool,'F_0') != s(bool,X31) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f7090,f87])).
fof(f7090,plain,(
  ( ! [X30,X31,X32] : (p(s(bool,X30)) | s(bool,'F_0') != s(bool,X31) | s(bool,X31) = s(bool,X32) | s(bool,'T_0') = s(bool,X32) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f470,f84])).
fof(f2904,plain,(
  ( ! [X6,X8,X7] : (s(bool,'F_0') != s(bool,f(s(bool,X8))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X6,X7,bool,bool)))) | s(bool,'T_0') = s(bool,sK3(X6,X7,bool,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f809,f154])).
fof(f2905,plain,(
  ( ! [X10,X11,X9] : (s(bool,'F_0') != s(bool,f(s(bool,X11))) | s(fun(bool,bool),X9) = s(fun(bool,bool),X10) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X9,X10,bool,bool)))) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,sK3(X9,X10,bool,bool))) )),
  inference(superposition,[],[f809,f154])).
fof(f2858,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl37),
  inference(cnf_transformation,[],[f2858_D])).
fof(f2858_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f2906,plain,(
  ( ! [X12,X13] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X12,X13,bool,bool)))) | s(bool,'T_0') = s(bool,sK3(X12,X13,bool,bool))) )),
  inference(superposition,[],[f809,f84])).
fof(f6833,plain,(
  ( ! [X74,X75] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X74,X75,bool,bool)))) | s(bool,'T_0') = s(bool,sK3(X74,X75,bool,bool))) ) | $spl7),
  inference(forward_demodulation,[],[f3431,f2713])).
fof(f3431,plain,(
  ( ! [X74,X75] : (s(bool,'F_0') != s(bool,f(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X74,X75,bool,bool)))) | s(bool,'T_0') = s(bool,sK3(X74,X75,bool,bool))) ) | $spl7),
  inference(superposition,[],[f809,f2722])).
fof(f4257,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | $spl43),
  inference(cnf_transformation,[],[f4257_D])).
fof(f4257_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) <=> ~$spl43),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl43])])).
fof(f6832,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl100),
  inference(cnf_transformation,[],[f6832_D])).
fof(f6832_D,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f6831,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f4953,f733])).
fof(f4953,plain,(
  ( ! [X14,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f3035,f733])).
fof(f6830,plain,(
  ( ! [X12] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) | $spl98),
  inference(cnf_transformation,[],[f6830_D])).
fof(f6830_D,plain,(
  ( ! [X12] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f6829,plain,(
  ( ! [X12] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f4952,f482])).
fof(f4952,plain,(
  ( ! [X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f3035,f482])).
fof(f2699,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | $spl19),
  inference(cnf_transformation,[],[f2699_D])).
fof(f2699_D,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f6798,plain,(
  ( ! [X12] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))))))))) ) | $spl96),
  inference(cnf_transformation,[],[f6798_D])).
fof(f6798_D,plain,(
  ( ! [X12] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))))))))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f6797,plain,(
  ( ! [X12] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5137,f482])).
fof(f5137,plain,(
  ( ! [X12] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f3174,f482])).
fof(f6796,plain,(
  ( ! [X14,X13] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))))))) ) | $spl94),
  inference(cnf_transformation,[],[f6796_D])).
fof(f6796_D,plain,(
  ( ! [X14,X13] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))))))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f6795,plain,(
  ( ! [X14,X13] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f5138,f733])).
fof(f5138,plain,(
  ( ! [X14,X13] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X13),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X14),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f3174,f733])).
fof(f6735,plain,(
  ( ! [X45] : (s(bool,X45) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X45)))) ) | $spl92),
  inference(cnf_transformation,[],[f6735_D])).
fof(f6735_D,plain,(
  ( ! [X45] : (s(bool,X45) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X45)))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f6519,plain,(
  ( ! [X45,X44] : (s(bool,X45) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X44) | s(bool,'F_0') = s(bool,g(s(bool,X45)))) ) | ($spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6322])).
fof(f6322,plain,(
  ( ! [X45,X44] : (s(bool,X45) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X44) | s(bool,'F_0') = s(bool,g(s(bool,X45))) | s(bool,'T_0') = s(bool,X44)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f2343,f5936])).
fof(f5936,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f5914,f154])).
fof(f5914,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl19 | $spl43 | $spl51)),
  inference(forward_demodulation,[],[f5895,f4280])).
fof(f4280,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | ($spl19 | $spl43)),
  inference(forward_demodulation,[],[f4271,f2816])).
fof(f2816,plain,(
  s(bool,'F_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | $spl19),
  inference(unit_resulting_resolution,[],[f133,f2699,f314])).
fof(f4271,plain,(
  s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | ($spl19 | $spl43)),
  inference(unit_resulting_resolution,[],[f2818,f4257,f314])).
fof(f2818,plain,(
  s(bool,'T_0') != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | $spl19),
  inference(unit_resulting_resolution,[],[f2699,f87])).
fof(f5895,plain,(
  s(bool,g(s(bool,'T_0'))) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | ($spl43 | $spl51)),
  inference(unit_resulting_resolution,[],[f5868,f4283])).
fof(f4283,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl43),
  inference(subsumption_resolution,[],[f4275,f78])).
fof(f4275,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl43),
  inference(superposition,[],[f4257,f154])).
fof(f6734,plain,(
  ( ! [X43] : (s(bool,X43) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X43)))) ) | $spl90),
  inference(cnf_transformation,[],[f6734_D])).
fof(f6734_D,plain,(
  ( ! [X43] : (s(bool,X43) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X43)))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f6520,plain,(
  ( ! [X43,X42] : (s(bool,X43) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X42) | s(bool,'F_0') = s(bool,g(s(bool,X43)))) ) | ($spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6321])).
fof(f6321,plain,(
  ( ! [X43,X42] : (s(bool,X43) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X42) | s(bool,'F_0') = s(bool,g(s(bool,X43))) | s(bool,'T_0') = s(bool,X42)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f1832,f5936])).
fof(f6733,plain,(
  ( ! [X41] : (s(bool,X41) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X41)))) ) | $spl88),
  inference(cnf_transformation,[],[f6733_D])).
fof(f6733_D,plain,(
  ( ! [X41] : (s(bool,X41) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X41)))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f6521,plain,(
  ( ! [X41,X40] : (s(bool,X41) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X40) | s(bool,'F_0') = s(bool,g(s(bool,X41)))) ) | ($spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6320])).
fof(f6320,plain,(
  ( ! [X41,X40] : (s(bool,X41) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X40) | s(bool,'F_0') = s(bool,g(s(bool,X41))) | s(bool,'T_0') = s(bool,X40)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f1096,f5936])).
fof(f6732,plain,(
  ( ! [X39] : (s(bool,X39) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X39)))) ) | $spl86),
  inference(cnf_transformation,[],[f6732_D])).
fof(f6732_D,plain,(
  ( ! [X39] : (s(bool,X39) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X39)))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f6522,plain,(
  ( ! [X39,X38] : (s(bool,X39) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X38) | s(bool,'F_0') = s(bool,g(s(bool,X39)))) ) | ($spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6319])).
fof(f6319,plain,(
  ( ! [X39,X38] : (s(bool,X39) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X38) | s(bool,'F_0') = s(bool,g(s(bool,X39))) | s(bool,'T_0') = s(bool,X38)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f883,f5936])).
fof(f6731,plain,(
  ( ! [X37] : (s(bool,X37) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X37)))) ) | $spl84),
  inference(cnf_transformation,[],[f6731_D])).
fof(f6731_D,plain,(
  ( ! [X37] : (s(bool,X37) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X37)))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f6523,plain,(
  ( ! [X37,X36] : (s(bool,X37) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X36) | s(bool,'F_0') = s(bool,g(s(bool,X37)))) ) | ($spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6318])).
fof(f6318,plain,(
  ( ! [X37,X36] : (s(bool,X37) != s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X36) | s(bool,'F_0') = s(bool,g(s(bool,X37))) | s(bool,'T_0') = s(bool,X36)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f766,f5936])).
fof(f6730,plain,(
  ( ! [X31,X32] : (s(bool,X31) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X32),'const.bool.the_value_0'))))) | s(bool,'F_0') = s(bool,g(s(bool,X31)))) ) | $spl82),
  inference(cnf_transformation,[],[f6730_D])).
fof(f6730_D,plain,(
  ( ! [X31,X32] : (s(bool,X31) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X32),'const.bool.the_value_0'))))) | s(bool,'F_0') = s(bool,g(s(bool,X31)))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f6524,plain,(
  ( ! [X30,X31,X32] : (s(bool,X31) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X32),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X30) | s(bool,'F_0') = s(bool,g(s(bool,X31)))) ) | ($spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6316])).
fof(f6316,plain,(
  ( ! [X30,X31,X32] : (s(bool,X31) != s(bool,'const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X32),'const.bool.the_value_0'))))) | s(bool,'T_0') = s(bool,X30) | s(bool,'F_0') = s(bool,g(s(bool,X31))) | s(bool,'T_0') = s(bool,X30)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f211,f5936])).
fof(f6729,plain,(
  ( ! [X29] : (s(bool,X29) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X29)))) ) | $spl80),
  inference(cnf_transformation,[],[f6729_D])).
fof(f6729_D,plain,(
  ( ! [X29] : (s(bool,X29) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X29)))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f6525,plain,(
  ( ! [X28,X29] : (s(bool,X29) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X28) | s(bool,'F_0') = s(bool,g(s(bool,X29)))) ) | ($spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6315])).
fof(f6315,plain,(
  ( ! [X28,X29] : (s(bool,X29) != s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X28) | s(bool,'F_0') = s(bool,g(s(bool,X29))) | s(bool,'T_0') = s(bool,X28)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f210,f5936])).
fof(f6640,plain,(
  ( ! [X72,X73] : (s(bool,'F_0') = s(bool,g(s(bool,sK3(X72,X73,bool,bool)))) | s(fun(bool,bool),X72) = s(fun(bool,bool),X73)) ) | $spl64),
  inference(cnf_transformation,[],[f6640_D])).
fof(f6640_D,plain,(
  ( ! [X72,X73] : (s(bool,'F_0') = s(bool,g(s(bool,sK3(X72,X73,bool,bool)))) | s(fun(bool,bool),X72) = s(fun(bool,bool),X73)) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f6532,plain,(
  ( ! [X200,X199,X201] : (s(bool,'T_0') = s(bool,X201) | s(fun(bool,bool),X199) = s(fun(bool,bool),X200) | s(bool,'F_0') = s(bool,g(s(bool,sK3(X199,X200,bool,bool))))) ) | ($spl19 | $spl28 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6299])).
fof(f6299,plain,(
  ( ! [X200,X199,X201] : (s(bool,'T_0') = s(bool,X201) | s(fun(bool,bool),X199) = s(fun(bool,bool),X200) | s(bool,'F_0') = s(bool,g(s(bool,sK3(X199,X200,bool,bool)))) | s(bool,'T_0') = s(bool,X201)) ) | ($spl19 | $spl28 | $spl43 | $spl51)),
  inference(superposition,[],[f2851,f5936])).
fof(f6697,plain,(
  ( ! [X144,X147,X145,X143] : (s('type.num.num',X145) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X144),s('type.num.num',X143))),s('type.num.num',X147))) | s(bool,'F_0') = s(bool,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num',X144))),s('type.num.num',X145)))))) ) | $spl78),
  inference(cnf_transformation,[],[f6697_D])).
fof(f6697_D,plain,(
  ( ! [X144,X147,X145,X143] : (s('type.num.num',X145) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X144),s('type.num.num',X143))),s('type.num.num',X147))) | s(bool,'F_0') = s(bool,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num',X144))),s('type.num.num',X145)))))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f6696,plain,(
  ( ! [X146,X144,X147,X145,X143] : (p(s(bool,X146)) | s('type.num.num',X145) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X144),s('type.num.num',X143))),s('type.num.num',X147))) | s(bool,'F_0') = s(bool,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num',X144))),s('type.num.num',X145)))))) ) | ($spl19 | $spl43 | $spl51)),
  inference(subsumption_resolution,[],[f6270,f87])).
fof(f6270,plain,(
  ( ! [X146,X144,X147,X145,X143] : (p(s(bool,X146)) | s('type.num.num',X145) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X144),s('type.num.num',X143))),s('type.num.num',X147))) | s(bool,'F_0') = s(bool,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X143),s('type.num.num',X144))),s('type.num.num',X145))))) | s(bool,'T_0') = s(bool,X146)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f519,f5936])).
fof(f6690,plain,(
  ( ! [X116,X114,X112,X113] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X112),s('type.num.num',X116))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',X113))) | s(bool,'F_0') = s(bool,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X112),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X113),s('type.num.num',X114)))))))) ) | $spl76),
  inference(cnf_transformation,[],[f6690_D])).
fof(f6690_D,plain,(
  ( ! [X116,X114,X112,X113] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X112),s('type.num.num',X116))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',X113))) | s(bool,'F_0') = s(bool,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X112),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X113),s('type.num.num',X114)))))))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f6689,plain,(
  ( ! [X116,X114,X112,X115,X113] : (p(s(bool,X115)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X112),s('type.num.num',X116))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',X113))) | s(bool,'F_0') = s(bool,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X112),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X113),s('type.num.num',X114)))))))) ) | ($spl19 | $spl43 | $spl51)),
  inference(subsumption_resolution,[],[f6258,f87])).
fof(f6258,plain,(
  ( ! [X116,X114,X112,X115,X113] : (p(s(bool,X115)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X112),s('type.num.num',X116))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X114),s('type.num.num',X113))) | s(bool,'F_0') = s(bool,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X112),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X113),s('type.num.num',X114))))))) | s(bool,'T_0') = s(bool,X115)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f516,f5936])).
fof(f6687,plain,(
  ( ! [X94,X93,X96] : (s('type.num.num',X94) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X96),s('type.num.num',X93))) | s(bool,'F_0') = s(bool,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X93),s('type.num.num',X94)))))) ) | $spl74),
  inference(cnf_transformation,[],[f6687_D])).
fof(f6687_D,plain,(
  ( ! [X94,X93,X96] : (s('type.num.num',X94) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X96),s('type.num.num',X93))) | s(bool,'F_0') = s(bool,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X93),s('type.num.num',X94)))))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f6686,plain,(
  ( ! [X94,X95,X93,X96] : (p(s(bool,X95)) | s('type.num.num',X94) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X96),s('type.num.num',X93))) | s(bool,'F_0') = s(bool,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X93),s('type.num.num',X94)))))) ) | ($spl19 | $spl43 | $spl51)),
  inference(subsumption_resolution,[],[f6253,f87])).
fof(f6253,plain,(
  ( ! [X94,X95,X93,X96] : (p(s(bool,X95)) | s('type.num.num',X94) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X96),s('type.num.num',X93))) | s(bool,'F_0') = s(bool,g(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X93),s('type.num.num',X94))))) | s(bool,'T_0') = s(bool,X95)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f525,f5936])).
fof(f6675,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,X2) | s(bool,'F_0') = s(bool,g(s(bool,X2)))) ) | $spl72),
  inference(cnf_transformation,[],[f6675_D])).
fof(f6675_D,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,X2) | s(bool,'F_0') = s(bool,g(s(bool,X2)))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f6674,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,'T_0') != s(bool,X2) | s(bool,'F_0') = s(bool,g(s(bool,X2)))) ) | ($spl19 | $spl43 | $spl51)),
  inference(subsumption_resolution,[],[f6214,f87])).
fof(f6214,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,'T_0') != s(bool,X2) | s(bool,'F_0') = s(bool,g(s(bool,X2))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f87,f5936])).
fof(f6643,plain,(
  ( ! [X19] : (s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,g(s(bool,X19)))) ) | $spl70),
  inference(cnf_transformation,[],[f6643_D])).
fof(f6643_D,plain,(
  ( ! [X19] : (s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,g(s(bool,X19)))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f6558,plain,(
  ( ! [X43,X42] : (s(bool,'T_0') = s(bool,X42) | s(bool,'F_0') = s(bool,g(s(bool,X43))) | s(bool,X43) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) ) | ($spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6186])).
fof(f6186,plain,(
  ( ! [X43,X42] : (s(bool,'T_0') = s(bool,X42) | s(bool,'F_0') = s(bool,g(s(bool,X43))) | s(bool,X43) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X42)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f5936,f4283])).
fof(f6641,plain,(
  ( ! [X15] : (s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X15)))) ) | $spl66),
  inference(cnf_transformation,[],[f6641_D])).
fof(f6641_D,plain,(
  ( ! [X15] : (s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X15)))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f6559,plain,(
  ( ! [X39,X40] : (s(bool,'T_0') = s(bool,X39) | s(bool,'F_0') = s(bool,g(s(bool,X40))) | s(bool,X40) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) ) | ($spl7 | $spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6184])).
fof(f6184,plain,(
  ( ! [X39,X40] : (s(bool,'T_0') = s(bool,X39) | s(bool,'F_0') = s(bool,g(s(bool,X40))) | s(bool,X40) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X39)) ) | ($spl7 | $spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f5936,f2722])).
fof(f6642,plain,(
  ( ! [X17] : (s(bool,X17) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X17)))) ) | $spl68),
  inference(cnf_transformation,[],[f6642_D])).
fof(f6642_D,plain,(
  ( ! [X17] : (s(bool,X17) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X17)))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f6560,plain,(
  ( ! [X37,X36] : (s(bool,'T_0') = s(bool,X36) | s(bool,'F_0') = s(bool,g(s(bool,X37))) | s(bool,X37) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) ) | ($spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6182])).
fof(f6182,plain,(
  ( ! [X37,X36] : (s(bool,'T_0') = s(bool,X36) | s(bool,'F_0') = s(bool,g(s(bool,X37))) | s(bool,X37) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X36)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f5936,f2825])).
fof(f2825,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl19),
  inference(subsumption_resolution,[],[f2819,f78])).
fof(f2819,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl19),
  inference(superposition,[],[f2699,f154])).
fof(f6619,plain,(
  ( ! [X31,X29] : (s(bool,'F_0') = s(bool,g(s(bool,X29))) | s(bool,X29) = s(bool,X31) | s(bool,'F_0') = s(bool,g(s(bool,X31)))) ) | $spl54),
  inference(cnf_transformation,[],[f6619_D])).
fof(f6619_D,plain,(
  ( ! [X31,X29] : (s(bool,'F_0') = s(bool,g(s(bool,X29))) | s(bool,X29) = s(bool,X31) | s(bool,'F_0') = s(bool,g(s(bool,X31)))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f6562,plain,(
  ( ! [X17,X18,X16] : (s(bool,'T_0') = s(bool,X17) | s(bool,'F_0') = s(bool,g(s(bool,X18))) | s(bool,X16) = s(bool,X18) | s(bool,'F_0') = s(bool,g(s(bool,X16)))) ) | ($spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6177])).
fof(f6177,plain,(
  ( ! [X17,X18,X16] : (s(bool,'T_0') = s(bool,X17) | s(bool,'F_0') = s(bool,g(s(bool,X18))) | s(bool,X16) = s(bool,X18) | s(bool,'F_0') = s(bool,g(s(bool,X16))) | s(bool,'T_0') = s(bool,X17)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f5936,f5936])).
fof(f6571,plain,(
  ( ! [X24,X23,X25] : (s(bool,X24) = s(bool,X25) | s(bool,'F_0') = s(bool,g(s(bool,X25))) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,g(s(bool,X24)))) ) | ($spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6133])).
fof(f6133,plain,(
  ( ! [X24,X23,X25] : (s(bool,X24) = s(bool,X25) | s(bool,'F_0') = s(bool,g(s(bool,X25))) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,g(s(bool,X24))) | s(bool,'T_0') = s(bool,X23)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f5936,f5936])).
fof(f6572,plain,(
  ( ! [X19,X18] : (s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,g(s(bool,X19))) | s(bool,'T_0') = s(bool,X18)) ) | ($spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6131])).
fof(f6131,plain,(
  ( ! [X19,X18] : (s(bool,X19) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,g(s(bool,X19))) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f5936,f4283])).
fof(f6573,plain,(
  ( ! [X17,X16] : (s(bool,X17) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X17))) | s(bool,'T_0') = s(bool,X16)) ) | ($spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6130])).
fof(f6130,plain,(
  ( ! [X17,X16] : (s(bool,X17) = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X17))) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X16)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f5936,f2825])).
fof(f6574,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X15))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl7 | $spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6129])).
fof(f6129,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))) | s(bool,'F_0') = s(bool,g(s(bool,X15))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) ) | ($spl7 | $spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f5936,f2722])).
fof(f6625,plain,(
  ( ! [X24] : (s(bool,'F_0') = s(bool,X24) | s(bool,'F_0') = s(bool,g(s(bool,X24)))) ) | $spl62),
  inference(cnf_transformation,[],[f6625_D])).
fof(f6625_D,plain,(
  ( ! [X24] : (s(bool,'F_0') = s(bool,X24) | s(bool,'F_0') = s(bool,g(s(bool,X24)))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f6579,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6124])).
fof(f6124,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f5936,f84])).
fof(f6580,plain,(
  ( ! [X74,X72,X73] : (s(bool,'T_0') = s(bool,X74) | s(bool,'F_0') = s(bool,g(s(bool,sK3(X72,X73,bool,bool)))) | s(fun(bool,bool),X72) = s(fun(bool,bool),X73)) ) | ($spl19 | $spl28 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6123])).
fof(f6123,plain,(
  ( ! [X74,X72,X73] : (s(bool,'T_0') = s(bool,X74) | s(bool,'F_0') = s(bool,g(s(bool,sK3(X72,X73,bool,bool)))) | s(bool,'T_0') = s(bool,X74) | s(fun(bool,bool),X72) = s(fun(bool,bool),X73)) ) | ($spl19 | $spl28 | $spl43 | $spl51)),
  inference(superposition,[],[f5936,f2851])).
fof(f6600,plain,(
  ( ! [X28,X26,X27] : (s(bool,'T_0') = s(bool,X27) | s(bool,'F_0') = s(bool,g(s(bool,X26))) | s(bool,'F_0') = s(bool,g(s(bool,X28))) | s(bool,X26) = s(bool,X28)) ) | ($spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6097])).
fof(f6097,plain,(
  ( ! [X28,X26,X27] : (s(bool,'T_0') = s(bool,X27) | s(bool,'F_0') = s(bool,g(s(bool,X26))) | s(bool,'T_0') = s(bool,X27) | s(bool,'F_0') = s(bool,g(s(bool,X28))) | s(bool,X26) = s(bool,X28)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f5936,f5936])).
fof(f6085,plain,(
  ( ! [X24,X23,X25] : (s(bool,'F_0') = s(bool,X24) | s(bool,X23) = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,'F_0') = s(bool,g(s(bool,X24))) | s(bool,'T_0') = s(bool,g(s(bool,X23)))) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f5936,f5936])).
fof(f6620,plain,(
  ( ! [X43,X44,X42] : (s(bool,X43) = s(bool,g(s(bool,X42))) | s(bool,'T_0') = s(bool,X44) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X43)) ) | $spl56),
  inference(cnf_transformation,[],[f6620_D])).
fof(f6620_D,plain,(
  ( ! [X43,X44,X42] : (s(bool,X43) = s(bool,g(s(bool,X42))) | s(bool,'T_0') = s(bool,X44) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X43)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f6622,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | $spl58),
  inference(cnf_transformation,[],[f6622_D])).
fof(f6622_D,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f6057,plain,(
  ( ! [X43,X44,X42] : (s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,X43) = s(bool,g(s(bool,X42))) | s(bool,'T_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f5936,f5936])).
fof(f6610,plain,(
  ( ! [X30,X31,X29] : (s(bool,'F_0') = s(bool,g(s(bool,X29))) | s(bool,'T_0') = s(bool,X30) | s(bool,'F_0') = s(bool,g(s(bool,X31))) | s(bool,X29) = s(bool,X31)) ) | ($spl19 | $spl43 | $spl51)),
  inference(duplicate_literal_removal,[],[f6051])).
fof(f6051,plain,(
  ( ! [X30,X31,X29] : (s(bool,'F_0') = s(bool,g(s(bool,X29))) | s(bool,'T_0') = s(bool,X30) | s(bool,'T_0') = s(bool,X30) | s(bool,'F_0') = s(bool,g(s(bool,X31))) | s(bool,X29) = s(bool,X31)) ) | ($spl19 | $spl43 | $spl51)),
  inference(superposition,[],[f5936,f5936])).
fof(f5868,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | $spl51),
  inference(cnf_transformation,[],[f5868_D])).
fof(f5868_D,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) <=> ~$spl51),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl51])])).
fof(f5865,plain,(
  ( ! [X52,X51] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X51) = s(fun(bool,bool),X52)) ) | ($spl28 | $spl41)),
  inference(forward_demodulation,[],[f5852,f3229])).
fof(f5852,plain,(
  ( ! [X52,X51] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X51) = s(fun(bool,bool),X52)) ) | $spl28),
  inference(duplicate_literal_removal,[],[f5851])).
fof(f5851,plain,(
  ( ! [X52,X51] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X51) = s(fun(bool,bool),X52) | s(fun(bool,bool),X51) = s(fun(bool,bool),X52)) ) | $spl28),
  inference(superposition,[],[f104,f2851])).
fof(f4260,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X11),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl46),
  inference(cnf_transformation,[],[f4260_D])).
fof(f4260_D,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X11),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f4259,plain,(
  ( ! [X12,X11] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X11),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f4233,f733])).
fof(f4233,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X11),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X11),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X12),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f619,f733])).
fof(f4258,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) | $spl44),
  inference(cnf_transformation,[],[f4258_D])).
fof(f4258_D,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f4255,plain,(
  ( ! [X10] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0'))))) )),
  inference(forward_demodulation,[],[f4232,f482])).
fof(f4232,plain,(
  ( ! [X10] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num','const.num.|48|_0')))) | s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0')))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) )),
  inference(superposition,[],[f619,f482])).
fof(f2903,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X3,X4,bool,bool)))) | s(bool,X5) = s(bool,sK3(X3,X4,bool,bool)) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f809,f154])).
fof(f2902,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,g(s(bool,sK3(X0,X1,bool,bool)))) | s(bool,X2) = s(bool,sK3(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f809,f154])).
fof(f2855,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl32),
  inference(cnf_transformation,[],[f2855_D])).
fof(f2855_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f2849,plain,(
  ( ! [X12,X13] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13) | s(bool,'T_0') = s(bool,sK3(X12,X13,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f804,f84])).
fof(f2856,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl34),
  inference(cnf_transformation,[],[f2856_D])).
fof(f2856_D,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f2848,plain,(
  ( ! [X10,X11,X9] : (s(bool,X9) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X10) = s(fun(bool,bool),X11) | s(bool,'T_0') = s(bool,sK3(X10,X11,bool,bool)) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f804,f154])).
fof(f2847,plain,(
  ( ! [X6,X8,X7] : (s(bool,X6) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X7) = s(fun(bool,bool),X8) | s(bool,'T_0') = s(bool,sK3(X7,X8,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f804,f154])).
fof(f2850,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl26),
  inference(cnf_transformation,[],[f2850_D])).
fof(f2850_D,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f2846,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,'T_0') = s(bool,sK3(X3,X4,bool,bool)) | s(bool,X5) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f804,f154])).
fof(f2845,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK3(X0,X1,bool,bool)) | s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f804,f154])).
fof(f2810,plain,(
  ( ! [X19,X22,X20,X18] : (s('type.num.num',X20) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X18))),s('type.num.num',X22))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20)))) ) | $spl24),
  inference(cnf_transformation,[],[f2810_D])).
fof(f2810_D,plain,(
  ( ! [X19,X22,X20,X18] : (s('type.num.num',X20) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X18))),s('type.num.num',X22))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20)))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f2811,plain,(
  ( ! [X26,X24,X23,X27,X25] : (p(s(bool,X26)) | s('type.num.num',X25) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X23))),s('type.num.num',X27))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))),s('type.num.num',X25)))) )),
  inference(subsumption_resolution,[],[f2770,f87])).
fof(f2770,plain,(
  ( ! [X26,X24,X23,X27,X25] : (p(s(bool,X26)) | s('type.num.num',X25) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X24),s('type.num.num',X23))),s('type.num.num',X27))) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X24))),s('type.num.num',X25)))) )),
  inference(superposition,[],[f519,f154])).
fof(f2809,plain,(
  ( ! [X21,X19,X22,X20,X18] : (p(s(bool,X21)) | s('type.num.num',X20) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X18))),s('type.num.num',X22))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20)))) )),
  inference(subsumption_resolution,[],[f2769,f87])).
fof(f2769,plain,(
  ( ! [X21,X19,X22,X20,X18] : (p(s(bool,X21)) | s('type.num.num',X20) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X19),s('type.num.num',X18))),s('type.num.num',X22))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X19))),s('type.num.num',X20))) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f519,f154])).
fof(f2702,plain,(
  ( ! [X10,X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))))))))) ) | $spl22),
  inference(cnf_transformation,[],[f2702_D])).
fof(f2702_D,plain,(
  ( ! [X10,X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))))))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f2701,plain,(
  ( ! [X10,X9] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f2666,f733])).
fof(f2666,plain,(
  ( ! [X10,X9] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.MOD_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X9),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X10),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f618,f733])).
fof(f2700,plain,(
  ( ! [X8] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))))))))) ) | $spl20),
  inference(cnf_transformation,[],[f2700_D])).
fof(f2700_D,plain,(
  ( ! [X8] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))))))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f2697,plain,(
  ( ! [X8] : (s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0')))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1))))) )),
  inference(forward_demodulation,[],[f2665,f482])).
fof(f2665,plain,(
  ( ! [X8] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.MOD_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X8),'const.bool.the_value_0'))))))))) )),
  inference(superposition,[],[f618,f482])).
fof(f2695,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) | $spl16),
  inference(cnf_transformation,[],[f2695_D])).
fof(f2695_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f2693,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f2663,f1829])).
fof(f2663,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))))),
  inference(superposition,[],[f618,f1829])).
fof(f2692,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) | $spl14),
  inference(cnf_transformation,[],[f2692_D])).
fof(f2692_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f2690,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f2662,f1093])).
fof(f2662,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))))),
  inference(superposition,[],[f618,f1093])).
fof(f2689,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | $spl12),
  inference(cnf_transformation,[],[f2689_D])).
fof(f2689_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f2687,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f2661,f880])).
fof(f2661,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),s('type.num.num',sK2(sK1,sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))))),
  inference(superposition,[],[f618,f880])).
fof(f2686,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) | $spl10),
  inference(cnf_transformation,[],[f2686_D])).
fof(f2686_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f2684,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f2660,f763])).
fof(f2660,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))),s('type.num.num',sK2(sK1,sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))))),
  inference(superposition,[],[f618,f763])).
fof(f2679,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK1),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1))))),
  inference(forward_demodulation,[],[f2659,f604])).
fof(f2659,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK1),s('type.num.num',sK1)))) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))),s('type.num.num',sK2('const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))),'const.arithmetic.+_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s('type.num.num',sK2(sK1,'const.fcp.dimindex_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))))))),
  inference(superposition,[],[f618,f604])).
fof(f2653,plain,(
  ( ! [X17,X20,X18,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X20))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18)))))) ) | $spl4),
  inference(cnf_transformation,[],[f2653_D])).
fof(f2653_D,plain,(
  ( ! [X17,X20,X18,X16] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X20))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18)))))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f2654,plain,(
  ( ! [X24,X23,X21,X25,X22] : (p(s(bool,X24)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X25))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X22))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23)))))) )),
  inference(subsumption_resolution,[],[f2611,f87])).
fof(f2611,plain,(
  ( ! [X24,X23,X21,X25,X22] : (p(s(bool,X24)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X25))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X23),s('type.num.num',X22))) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X21),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X23)))))) )),
  inference(superposition,[],[f516,f154])).
fof(f2652,plain,(
  ( ! [X19,X17,X20,X18,X16] : (p(s(bool,X19)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X20))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18)))))) )),
  inference(subsumption_resolution,[],[f2610,f87])).
fof(f2610,plain,(
  ( ! [X19,X17,X20,X18,X16] : (p(s(bool,X19)) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X16),s('type.num.num',X20))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X17))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X16),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X17),s('type.num.num',X18))))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f516,f154])).
fof(f1307,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f1306,f1211])).
fof(f1306,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl2),
  inference(subsumption_resolution,[],[f1272,f1242])).
fof(f1242,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl2),
  inference(unit_resulting_resolution,[],[f1211,f88])).
fof(f1272,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl2),
  inference(backward_demodulation,[],[f1242,f91])).
fof(f1305,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f1271,f78])).
fof(f1271,plain,(
  ~p(s(bool,'T_0')) | $spl2),
  inference(backward_demodulation,[],[f1242,f80])).
fof(f1243,plain,(
  $false | $spl2),
  inference(unit_resulting_resolution,[],[f133,f1211,f88])).
fof(f1214,plain,(
  $false | $spl2),
  inference(unit_resulting_resolution,[],[f80,f1211])).
fof(f1210,plain,(
  ( ! [X15,X18,X16] : (s('type.num.num',X16) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X15),s('type.num.num',X16)))) ) | $spl0),
  inference(cnf_transformation,[],[f1210_D])).
fof(f1210_D,plain,(
  ( ! [X15,X18,X16] : (s('type.num.num',X16) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X15),s('type.num.num',X16)))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f1212,plain,(
  ( ! [X21,X19,X22,X20] : (p(s(bool,X21)) | s('type.num.num',X20) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',X20)))) )),
  inference(subsumption_resolution,[],[f1190,f87])).
fof(f1190,plain,(
  ( ! [X21,X19,X22,X20] : (p(s(bool,X21)) | s('type.num.num',X20) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X22),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X21) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X19),s('type.num.num',X20)))) )),
  inference(superposition,[],[f525,f154])).
fof(f1209,plain,(
  ( ! [X17,X15,X18,X16] : (p(s(bool,X17)) | s('type.num.num',X16) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X15),s('type.num.num',X16)))) )),
  inference(subsumption_resolution,[],[f1189,f87])).
fof(f1189,plain,(
  ( ! [X17,X15,X18,X16] : (p(s(bool,X17)) | s('type.num.num',X16) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X18),s('type.num.num',X15))) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',X15),s('type.num.num',X16))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f525,f154])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 291
% Passive clauses: 1776
% Generated clauses: 34761
% Final active clauses: 143
% Final passive clauses: 1025
% Input formulas: 23
% Initial clauses: 44
% 
% Duplicate literals: 2007
% Trivial inequalities: 321
% Fw subsumption resolutions: 2091
% Fw demodulations: 7886
% Bw demodulations: 357
% Condensations: 2520
% Global subsumptions: 203
% 
% Simple tautologies: 293
% Equational tautologies: 702
% Forward subsumptions: 16531
% Fw demodulations to eq. taut.: 11
% Bw demodulations to eq. taut.: 8
% 
% Unit resulting resolution: 3664
% Forward superposition: 7984
% Backward superposition: 6320
% Self superposition: 236
% Equality factoring: 150
% Equality resolution: 49
% 
% Split clauses: 285
% Split components: 575
% SAT solver clauses: 2734
% SAT solver unit clauses: 270
% SAT solver binary clauses: 1089
% 
% Sat splits: 285
% Sat splitting refutations: 183
% 
% Memory used [KB]: 19829
% Time elapsed: 1.367 s
% ------------------------------
% ------------------------------
% Success in time 2.69 s
