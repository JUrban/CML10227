Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.conSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.conSem
% SZS output start Proof for thm.conSem
fof(f1464,plain,(
  $false),
  inference(subsumption_resolution,[],[f1463,f32])).
fof(f32,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.conSem.datatype_v',aHL_TRUTH)).
fof(f1463,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f31,f39])).
fof(f39,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X7] : ! [X8] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X7,X8)))),
  file('thm.conSem.datatype_v','thm.bool.DATATYPE_TAG_THM')).
fof(f31,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool),happ(s(fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)),happ(s(fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool))),happ(s(fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)))),happ(s(fun(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool))))),happ(s(fun(fun('type.ast.lit','type.conSem.v'),fun(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)))))),sK0),s(fun('type.ast.lit','type.conSem.v'),'const.conSem.Litv_0'))),s(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.Conv_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),'const.conSem.Closure_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),'const.conSem.Recclosure_0'))),s(fun('type.num.num','type.conSem.v'),'const.conSem.Loc_0'))),s(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),'const.conSem.Vectorv_0'))))))),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool),happ(s(fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)),happ(s(fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool))),happ(s(fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)))),happ(s(fun(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool))))),happ(s(fun(fun('type.ast.lit','type.conSem.v'),fun(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)))))),sK0),s(fun('type.ast.lit','type.conSem.v'),'const.conSem.Litv_0'))),s(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.Conv_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),'const.conSem.Closure_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),'const.conSem.Recclosure_0'))),s(fun('type.num.num','type.conSem.v'),'const.conSem.Loc_0'))),s(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),'const.conSem.Vectorv_0'))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f27])).
fof(f27,plain,(
  ? [X0] : ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool),happ(s(fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)),happ(s(fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool))),happ(s(fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)))),happ(s(fun(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool))))),happ(s(fun(fun('type.ast.lit','type.conSem.v'),fun(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)))))),X0),s(fun('type.ast.lit','type.conSem.v'),'const.conSem.Litv_0'))),s(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.Conv_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),'const.conSem.Closure_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),'const.conSem.Recclosure_0'))),s(fun('type.num.num','type.conSem.v'),'const.conSem.Loc_0'))),s(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),'const.conSem.Vectorv_0'))))))),
  inference(ennf_transformation,[],[f15])).
fof(f15,plain,(
  ~! [X0] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool),happ(s(fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)),happ(s(fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool))),happ(s(fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)))),happ(s(fun(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool))))),happ(s(fun(fun('type.ast.lit','type.conSem.v'),fun(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)))))),X0),s(fun('type.ast.lit','type.conSem.v'),'const.conSem.Litv_0'))),s(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.Conv_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),'const.conSem.Closure_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),'const.conSem.Recclosure_0'))),s(fun('type.num.num','type.conSem.v'),'const.conSem.Loc_0'))),s(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),'const.conSem.Vectorv_0'))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool),happ(s(fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)),happ(s(fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool))),happ(s(fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)))),happ(s(fun(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool))))),happ(s(fun(fun('type.ast.lit','type.conSem.v'),fun(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)))))),X6),s(fun('type.ast.lit','type.conSem.v'),'const.conSem.Litv_0'))),s(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.Conv_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),'const.conSem.Closure_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),'const.conSem.Recclosure_0'))),s(fun('type.num.num','type.conSem.v'),'const.conSem.Loc_0'))),s(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),'const.conSem.Vectorv_0'))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool),happ(s(fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)),happ(s(fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool))),happ(s(fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)))),happ(s(fun(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool))))),happ(s(fun(fun('type.ast.lit','type.conSem.v'),fun(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),fun(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),fun(fun('type.num.num','type.conSem.v'),fun(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),bool)))))),X6),s(fun('type.ast.lit','type.conSem.v'),'const.conSem.Litv_0'))),s(fun('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),fun('type.list.list'('type.conSem.v'),'type.conSem.v')),'const.conSem.Conv_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.string.char'),fun('type.conLang.exp','type.conSem.v'))),'const.conSem.Closure_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),fun('type.list.list'('type.string.char'),'type.conSem.v'))),'const.conSem.Recclosure_0'))),s(fun('type.num.num','type.conSem.v'),'const.conSem.Loc_0'))),s(fun('type.list.list'('type.conSem.v'),'type.conSem.v'),'const.conSem.Vectorv_0'))))))),
  file('thm.conSem.datatype_v','thm.conSem.datatype_v')).
% SZS output end Proof for thm.conSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 32
% Passive clauses: 116
% Generated clauses: 1387
% Final active clauses: 30
% Final passive clauses: 63
% Input formulas: 13
% Initial clauses: 13
% 
% Duplicate literals: 149
% Trivial inequalities: 22
% Fw subsumption resolutions: 118
% Fw demodulations: 119
% 
% Simple tautologies: 65
% Equational tautologies: 19
% Forward subsumptions: 749
% 
% Binary resolution: 6
% Forward superposition: 580
% Backward superposition: 238
% Self superposition: 69
% Equality factoring: 48
% Equality resolution: 11
% 
% Split clauses: 26
% Split components: 52
% SAT solver clauses: 47
% SAT solver unit clauses: 7
% SAT solver binary clauses: 19
% 
% Sat splits: 26
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 47
% TWLsolver calls for satisfiability: 19
% 
% Memory used [KB]: 1151
% Time elapsed: 0.024 s
% ------------------------------
% ------------------------------
% Success in time 0.025 s
