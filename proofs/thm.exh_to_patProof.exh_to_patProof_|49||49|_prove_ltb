Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.exh_to_patProof
% (64895)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 137
% Passive clauses: 1461
% Generated clauses: 25761
% Final active clauses: 133
% Final passive clauses: 1091
% Input formulas: 33
% Initial clauses: 34
% 
% Duplicate literals: 1073
% Trivial inequalities: 221
% Fw subsumption resolutions: 2680
% Fw demodulations: 2506
% Bw demodulations: 2
% 
% Simple tautologies: 252
% Equational tautologies: 24
% Forward subsumptions: 16519
% Fw demodulations to eq. taut.: 36
% 
% Binary resolution: 6
% Forward superposition: 10049
% Backward superposition: 8954
% Self superposition: 322
% Equality factoring: 67
% Equality resolution: 17
% 
% Split clauses: 445
% Split components: 902
% SAT solver clauses: 1220
% SAT solver unit clauses: 39
% SAT solver binary clauses: 186
% 
% Sat splits: 445
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1219
% TWLsolver calls for satisfiability: 165
% 
% Memory used [KB]: 24178
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.exh_to_patProof
% (64913)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 79
% Passive clauses: 302
% Generated clauses: 12793
% Final active clauses: 76
% Final passive clauses: 220
% Input formulas: 33
% Initial clauses: 34
% 
% Duplicate literals: 674
% Trivial inequalities: 166
% Fw subsumption resolutions: 869
% Fw demodulations: 757
% Bw demodulations: 2
% Condensations: 1957
% 
% Simple tautologies: 156
% Equational tautologies: 23
% Forward subsumptions: 7386
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 4
% Forward superposition: 4387
% Backward superposition: 3401
% Self superposition: 213
% Equality factoring: 64
% Equality resolution: 15
% 
% Split clauses: 32
% Split components: 64
% SAT solver clauses: 537
% SAT solver unit clauses: 64
% SAT solver binary clauses: 44
% 
% Sat splits: 32
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 537
% TWLsolver calls for satisfiability: 96
% 
% Memory used [KB]: 12920
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.exh_to_patProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.exh_to_patProof
% SZS output start Proof for thm.exh_to_patProof
fof(f17635,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f17578])).
fof(f17578,plain,(
  s('type.patSem.state'(sK0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.exhSem.state'(sK0),sK1))))) != s('type.patSem.state'(sK0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.exhSem.state'(sK0),sK1)))))),
  inference(superposition,[],[f99,f14639])).
fof(f14639,plain,(
  ( ! [X2,X0,X1] : (s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1)))))) )),
  inference(forward_demodulation,[],[f14638,f14592])).
fof(f14592,plain,(
  ( ! [X2,X0,X1] : (s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.exhSem.state'(X0),X2))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X1),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X2))))))),s('type.patSem.state'(X0),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X2))))))),s('type.patSem.state'(X0),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X2))))),s('type.patSem.state'(X0),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X2))))))),s('type.patSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(forward_demodulation,[],[f14591,f111])).
fof(f111,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))),
  inference(flattening,[],[f50])).
fof(f50,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X18] : ! [X7,X13] : s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X18),X7))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X18),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X13),s('type.exhSem.state'(X18),X7)))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||49|_prove_ltb','thm.exhSem.exhSem_85_prove_ltb')).
fof(f14591,plain,(
  ( ! [X2,X0,X1] : (s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.exhSem.state'(X0),X2))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X1),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X2))))))),s('type.patSem.state'(X0),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.exhSem.state'(X0),X2))))))))),s('type.patSem.state'(X0),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X2))))),s('type.patSem.state'(X0),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X2))))))),s('type.patSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(forward_demodulation,[],[f14590,f107])).
fof(f107,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X18] : ! [X7,X13] : s('type.ffi.ffi_state'(X18),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X18),X7))) = s('type.ffi.ffi_state'(X18),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X18),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X13),s('type.exhSem.state'(X18),X7)))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||49|_prove_ltb','thm.exhSem.exhSem_88_prove_ltb')).
fof(f14590,plain,(
  ( ! [X2,X0,X1] : (s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.exhSem.state'(X0),X2))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X1),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X2))))))),s('type.patSem.state'(X0),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.exhSem.state'(X0),X2))))))))),s('type.patSem.state'(X0),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.exhSem.state'(X0),X2))))))),s('type.patSem.state'(X0),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X2))))))),s('type.patSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(forward_demodulation,[],[f14517,f108])).
fof(f108,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X18] : ! [X7,X13] : s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X18),X7))) = s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X18),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X13),s('type.exhSem.state'(X18),X7)))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||49|_prove_ltb','thm.exhSem.exhSem_9|49|_prove_ltb')).
fof(f14517,plain,(
  ( ! [X2,X0,X1] : (s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.exhSem.state'(X0),X2))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X1),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X2))))))),s('type.patSem.state'(X0),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.exhSem.state'(X0),X2))))))))),s('type.patSem.state'(X0),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.exhSem.state'(X0),X2))))))),s('type.patSem.state'(X0),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X1),s('type.exhSem.state'(X0),X2))))))))),s('type.patSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(superposition,[],[f104,f114])).
fof(f114,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))))) = s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))))) = s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))),
  inference(flattening,[],[f56])).
fof(f56,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))))) = s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.exhSem.state'(X0),X1)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X18] : ! [X7,X13] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X13),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X18),X7))))) = s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X18),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X13),s('type.exhSem.state'(X18),X7)))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||49|_prove_ltb','thm.exhSem.exhSem_94_prove_ltb')).
fof(f104,plain,(
  ( ! [X0,X1] : (s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))))),s('type.patSem.state'(X0),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X1))))),s('type.patSem.state'(X0),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(cnf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1] : s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))))),s('type.patSem.state'(X0),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X1))))),s('type.patSem.state'(X0),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.bool.ARB_0')))))))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ! [X0] : ! [X1] : s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))))),s('type.patSem.state'(X0),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X1))))),s('type.patSem.state'(X0),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.bool.ARB_0')))))))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X18] : ! [X7] : s('type.patSem.state'(X18),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X18),X7))) = s('type.patSem.state'(X18),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X18),X7))))),s('type.patSem.state'(X18),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X18),X7))))))),s('type.patSem.state'(X18),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X18),'type.ffi.ffi_state'(X18)),'const.combin.K_1'(s('type.ffi.ffi_state'(X18),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X18),X7))))),s('type.patSem.state'(X18),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X18),X7))))))),s('type.patSem.state'(X18),'const.bool.ARB_0')))))))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||49|_prove_ltb','thm.exh_to_patProof.compile_state_def')).
fof(f14638,plain,(
  ( ! [X2,X0,X1] : (s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X1))))),s('type.patSem.state'(X0),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(forward_demodulation,[],[f14538,f131])).
fof(f131,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(X0,X1),'const.combin.K_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(X0,X1),'const.combin.o_2'(s(fun(X2,X1),X3),s(fun(X0,X2),'const.combin.K_1'(s(X2,X4)))))) )),
  inference(cnf_transformation,[],[f91])).
fof(f91,plain,(
  ! [X0,X1,X2,X3,X4] : s(fun(X0,X1),'const.combin.K_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(X0,X1),'const.combin.o_2'(s(fun(X2,X1),X3),s(fun(X0,X2),'const.combin.K_1'(s(X2,X4)))))),
  inference(flattening,[],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2] : ! [X3,X4] : s(fun(X0,X1),'const.combin.K_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(X0,X1),'const.combin.o_2'(s(fun(X2,X1),X3),s(fun(X0,X2),'const.combin.K_1'(s(X2,X4)))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X15,X16,X17] : ! [X13,X14] : s(fun(X15,X16),'const.combin.K_1'(s(X16,happ(s(fun(X17,X16),X13),s(X17,X14))))) = s(fun(X15,X16),'const.combin.o_2'(s(fun(X17,X16),X13),s(fun(X15,X17),'const.combin.K_1'(s(X17,X14)))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||49|_prove_ltb','thm.combin.K_o_THM|split|1')).
fof(f14538,plain,(
  ( ! [X2,X0,X1] : (s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X2),s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.exhSem.state_clock_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.patSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.semanticPrimitives.store_v'('type.exhSem.v'),'type.semanticPrimitives.store_v'('type.patSem.v')),'const.evalProps.map_sv_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),'const.exhSem.state_refs_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.patSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X0)),'const.combin.K_1'(s('type.ffi.ffi_state'(X0),'const.exhSem.state_ffi_1'(s('type.exhSem.state'(X0),X1))))),s('type.patSem.state'(X0),'const.patSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.patSem.v')),'type.list.list'('type.option.option'('type.patSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.patSem.v')),'const.list.MAP_2'(s(fun('type.option.option'('type.exhSem.v'),'type.option.option'('type.patSem.v')),'const.option.OPTION_MAP_1'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'))),s('type.list.list'('type.option.option'('type.exhSem.v')),'const.exhSem.state_globals_1'(s('type.exhSem.state'(X0),X1))))))),s('type.patSem.state'(X0),'const.bool.ARB_0')))))))))) )),
  inference(superposition,[],[f119,f104])).
fof(f119,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.patSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X3),s(fun('type.num.num','type.num.num'),X2))),s('type.patSem.state'(X0),X1)))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2,X3] : s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.patSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X3),s(fun('type.num.num','type.num.num'),X2))),s('type.patSem.state'(X0),X1)))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X3),s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.patSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X3),s(fun('type.num.num','type.num.num'),X2))),s('type.patSem.state'(X0),X1)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X18] : ! [X7,X20,X13] : s('type.patSem.state'(X18),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X13),s('type.patSem.state'(X18),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X20),s('type.patSem.state'(X18),X7))))) = s('type.patSem.state'(X18),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.o_2'(s(fun('type.num.num','type.num.num'),X13),s(fun('type.num.num','type.num.num'),X20))),s('type.patSem.state'(X18),X7)))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||49|_prove_ltb','thm.patSem.patSem_84_prove_ltb')).
fof(f99,plain,(
  s('type.patSem.state'(sK0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.exhSem.state'(sK0),sK1))))) != s('type.patSem.state'(sK0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.patSem.state'(sK0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK0),sK1)))))),
  inference(cnf_transformation,[],[f96])).
fof(f96,plain,(
  s('type.patSem.state'(sK0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.exhSem.state'(sK0),sK1))))) != s('type.patSem.state'(sK0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.patSem.state'(sK0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK0),sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f94])).
fof(f94,plain,(
  ? [X0,X1,X2] : s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.exhSem.state'(X0),X1))))) != s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1)))))),
  inference(ennf_transformation,[],[f36])).
fof(f36,plain,(
  ~! [X0,X1,X2] : s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.exhSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1)))))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ~! [X0] : ! [X1,X2] : s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.exhSem.state'(X0),X1))))) = s('type.patSem.state'(X0),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s('type.patSem.state'(X6),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X6),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.exhSem.state'(X6),X7))))) = s('type.patSem.state'(X6),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.patSem.state'(X6),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X6),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s('type.patSem.state'(X6),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X6),'const.exhSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.exhSem.state'(X6),X7))))) = s('type.patSem.state'(X6),'const.patSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.patSem.state'(X6),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X6),X7)))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49||49|_prove_ltb','thm.exh_to_patProof.exh_to_patProof_|49||49|_prove_ltb')).
% SZS output end Proof for thm.exh_to_patProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 92
% Passive clauses: 341
% Generated clauses: 17367
% Final active clauses: 84
% Final passive clauses: 229
% Input formulas: 33
% Initial clauses: 34
% 
% Duplicate literals: 914
% Trivial inequalities: 171
% Fw subsumption resolutions: 1137
% Fw demodulations: 1182
% Bw demodulations: 19
% Condensations: 2831
% 
% Simple tautologies: 175
% Equational tautologies: 82
% Forward subsumptions: 10443
% Fw demodulations to eq. taut.: 2
% 
% Unit resulting resolution: 306
% Forward superposition: 5601
% Backward superposition: 4786
% Self superposition: 277
% Equality factoring: 76
% Equality resolution: 15
% 
% Split clauses: 35
% Split components: 81
% SAT solver clauses: 414
% SAT solver unit clauses: 86
% SAT solver binary clauses: 60
% 
% Sat splits: 35
% Sat splitting refutations: 1
% 
% Memory used [KB]: 12409
% Time elapsed: 0.865 s
% ------------------------------
% ------------------------------
% Success in time 2.2 s
