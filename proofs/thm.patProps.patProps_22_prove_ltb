Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.patProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.patProps
% SZS output start Proof for thm.patProps
fof(f8662,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f8658,f195,f334,f3961,f331,f194,f336,f332])).
fof(f332,plain,(
  ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK11)))))))) | $spl1),
  inference(cnf_transformation,[],[f332_D])).
fof(f332_D,plain,(
  ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK11)))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f336,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12)))))))) | $spl4),
  inference(cnf_transformation,[],[f336_D])).
fof(f336_D,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12)))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f194,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12)))))))) | ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK11))))))))),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  s('type.pair.prod'('type.patSem.state'(sK10),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK10),sK11),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),sK13))) = s('type.pair.prod'('type.patSem.state'(sK10),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK15),s('type.patSem.state'(sK10),sK12),s('type.list.list'('type.patLang.exp'),sK14))) & (~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK11)))))))) | (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12)))))))) & s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK11))) != s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13,sK14,sK15])],[f94])).
fof(f94,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X1),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X3))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X5),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),X4))) & (~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X1)))))))) | (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2)))))))) & s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2))))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X1),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X3))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X5),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),X4))) => (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X1)))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2)))))))) => s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2))))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X1),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X3))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X5),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),X4))) => (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X1)))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2)))))))) => s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X6),X7),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X9))) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X11),s('type.patSem.state'(X6),X8),s('type.list.list'('type.patLang.exp'),X10))) => (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.patSem.state_ffi_1'(s('type.patSem.state'(X6),X8))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.patSem.state_ffi_1'(s('type.patSem.state'(X6),X7)))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X6),'const.patSem.state_ffi_1'(s('type.patSem.state'(X6),X8)))))))) => s('type.ffi.ffi_state'(X6),'const.patSem.state_ffi_1'(s('type.patSem.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.patSem.state_ffi_1'(s('type.patSem.state'(X6),X8))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X6),X7),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X9))) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X11),s('type.patSem.state'(X6),X8),s('type.list.list'('type.patLang.exp'),X10))) => (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.patSem.state_ffi_1'(s('type.patSem.state'(X6),X8))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.patSem.state_ffi_1'(s('type.patSem.state'(X6),X7)))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X6),'const.patSem.state_ffi_1'(s('type.patSem.state'(X6),X8)))))))) => s('type.ffi.ffi_state'(X6),'const.patSem.state_ffi_1'(s('type.patSem.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.patSem.state_ffi_1'(s('type.patSem.state'(X6),X8))))))),
  file('thm.patProps.patProps_22_prove_ltb','thm.patProps.patProps_22_prove_ltb')).
fof(f331,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK11)))))))) | $spl0),
  inference(cnf_transformation,[],[f331_D])).
fof(f331_D,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK11)))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f3961,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK11))))))))),
  inference(forward_demodulation,[],[f3959,f269])).
fof(f269,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(flattening,[],[f84])).
fof(f84,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X13,X6] : ! [X14,X15] : s(X6,X14) = s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X13),'const.pair.,_2'(s(X6,X14),s(X13,X15)))))),
  file('thm.patProps.patProps_22_prove_ltb','thm.pair.FST')).
fof(f3959,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),'const.pair.FST_1'(s('type.pair.prod'('type.patSem.state'(sK10),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK10),sK11),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),sK13))))))))))))),
  inference(superposition,[],[f237,f193])).
fof(f193,plain,(
  s('type.pair.prod'('type.patSem.state'(sK10),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK10),sK11),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),sK13))) = s('type.pair.prod'('type.patSem.state'(sK10),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK15),s('type.patSem.state'(sK10),sK12),s('type.list.list'('type.patLang.exp'),sK14)))),
  inference(cnf_transformation,[],[f135])).
fof(f237,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),X3))))))))))))) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1,X2,X3] : p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),X3))))))))))))),
  inference(flattening,[],[f65])).
fof(f65,plain,(
  ! [X0] : ! [X1,X2,X3] : p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),X3))))))))))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X11,X8,X10] : p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.patSem.state_ffi_1'(s('type.patSem.state'(X6),X8))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.patSem.state_ffi_1'(s('type.patSem.state'(X6),'const.pair.FST_1'(s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X11),s('type.patSem.state'(X6),X8),s('type.list.list'('type.patLang.exp'),X10))))))))))))),
  file('thm.patProps.patProps_22_prove_ltb','thm.patProps.evaluate_io_events_mono|split|0')).
fof(f334,plain,(
  s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK11))) != s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12))) | $spl3),
  inference(cnf_transformation,[],[f334_D])).
fof(f334_D,plain,(
  s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK11))) != s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f195,plain,(
  s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK11))) != s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12))) | ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK11))))))))),
  inference(cnf_transformation,[],[f135])).
fof(f8658,plain,(
  $false | ($spl3 | $spl4)),
  inference(subsumption_resolution,[],[f8657,f334])).
fof(f8657,plain,(
  s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK11))) = s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12))) | $spl4),
  inference(forward_demodulation,[],[f8644,f269])).
fof(f8644,plain,(
  s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12))) = s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),'const.pair.FST_1'(s('type.pair.prod'('type.patSem.state'(sK10),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK10),sK11),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),sK13))))))) | $spl4),
  inference(superposition,[],[f4201,f193])).
fof(f4201,plain,(
  ( ! [X0,X1] : (s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),sK12))) = s('type.ffi.ffi_state'(sK10),'const.patSem.state_ffi_1'(s('type.patSem.state'(sK10),'const.pair.FST_1'(s('type.pair.prod'('type.patSem.state'(sK10),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X0),s('type.patSem.state'(sK10),sK12),s('type.list.list'('type.patLang.exp'),X1)))))))) ) | $spl4),
  inference(resolution,[],[f238,f336])).
fof(f238,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2)))))))) | s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2))) = s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),X3)))))))) )),
  inference(cnf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2)))))))) | s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2))) = s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),X3))))))))),
  inference(ennf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2)))))))) => s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2))) = s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),X3))))))))),
  inference(flattening,[],[f67])).
fof(f67,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2)))))))) => s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),X2))) = s('type.ffi.ffi_state'(X0),'const.patSem.state_ffi_1'(s('type.patSem.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),X3))))))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6] : ! [X11,X8,X10] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X6),'const.patSem.state_ffi_1'(s('type.patSem.state'(X6),X8)))))))) => s('type.ffi.ffi_state'(X6),'const.patSem.state_ffi_1'(s('type.patSem.state'(X6),X8))) = s('type.ffi.ffi_state'(X6),'const.patSem.state_ffi_1'(s('type.patSem.state'(X6),'const.pair.FST_1'(s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X11),s('type.patSem.state'(X6),X8),s('type.list.list'('type.patLang.exp'),X10))))))))),
  file('thm.patProps.patProps_22_prove_ltb','thm.patProps.evaluate_io_events_mono|split|1')).
% SZS output end Proof for thm.patProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 463
% Passive clauses: 2737
% Generated clauses: 8439
% Final active clauses: 431
% Final passive clauses: 1958
% Input formulas: 36
% Initial clauses: 135
% 
% Duplicate literals: 231
% Trivial inequalities: 61
% Fw subsumption resolutions: 939
% Fw demodulations: 120
% Bw demodulations: 31
% 
% Simple tautologies: 159
% Equational tautologies: 59
% Forward subsumptions: 3943
% 
% Binary resolution: 3690
% Factoring: 867
% Forward superposition: 838
% Backward superposition: 1341
% Self superposition: 29
% Equality factoring: 26
% Equality resolution: 24
% 
% Split clauses: 265
% Split components: 536
% SAT solver clauses: 467
% SAT solver unit clauses: 11
% SAT solver binary clauses: 80
% SAT solver learnt clauses: 1
% 
% Sat splits: 265
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 464
% TWLsolver calls for satisfiability: 249
% 
% Memory used [KB]: 4349
% Time elapsed: 0.412 s
% ------------------------------
% ------------------------------
% Success in time 0.43 s
