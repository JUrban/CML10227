Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.funBigStepProps
% (59655)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 147
% Passive clauses: 4156
% Generated clauses: 13457
% Final active clauses: 131
% Final passive clauses: 3671
% Input formulas: 36
% Initial clauses: 91
% 
% Duplicate literals: 568
% Trivial inequalities: 245
% Fw subsumption resolutions: 2106
% Fw demodulations: 350
% Bw demodulations: 5
% 
% Simple tautologies: 340
% Equational tautologies: 85
% Forward subsumptions: 4500
% Fw demodulations to eq. taut.: 5
% 
% Binary resolution: 731
% Factoring: 2
% Forward superposition: 4255
% Backward superposition: 4490
% Self superposition: 236
% Equality factoring: 192
% Equality resolution: 40
% 
% Split clauses: 617
% Split components: 1310
% SAT solver clauses: 1327
% SAT solver unit clauses: 40
% SAT solver binary clauses: 382
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 1
% 
% Sat splits: 617
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1296
% TWLsolver calls for satisfiability: 206
% 
% Memory used [KB]: 7547
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.funBigStepProps
% (59683)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit

% Active clauses: 203
% Passive clauses: 1631
% Generated clauses: 8935
% Final active clauses: 136
% Final passive clauses: 1142
% Input formulas: 36
% Initial clauses: 91
% 
% Duplicate literals: 177
% Trivial inequalities: 166
% Fw subsumption resolutions: 479
% Fw demodulations: 630
% Bw demodulations: 139
% Condensations: 260
% Global subsumptions: 9
% 
% Simple tautologies: 99
% Equational tautologies: 29
% Forward subsumptions: 3216
% Fw demodulations to eq. taut.: 15
% Bw demodulations to eq. taut.: 185
% 
% Binary resolution: 617
% Factoring: 3
% Forward superposition: 1883
% Backward superposition: 2540
% Self superposition: 45
% Equality factoring: 34
% Equality resolution: 50
% 
% Split clauses: 93
% Split components: 191
% SAT solver clauses: 2309
% SAT solver unit clauses: 92
% SAT solver binary clauses: 60
% SAT solver learnt clauses: 22
% SAT solver learnt literals: 11
% 
% Sat splits: 93
% Sat splitting refutations: 15
% 
% TWLsolver clauses: 2269
% TWLsolver calls for satisfiability: 525
% 
% Memory used [KB]: 12792
% Time elapsed: 0.716 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.funBigStepProps
% (59725)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 676
% Passive clauses: 8526
% Generated clauses: 149492
% Final active clauses: 237
% Final passive clauses: 1378
% Input formulas: 36
% Initial clauses: 91
% Discarded non-redundant clauses: 3314
% 
% Duplicate literals: 6724
% Trivial inequalities: 1619
% Fw subsumption resolutions: 14250
% Fw demodulations: 21135
% Bw demodulations: 3771
% Condensations: 12698
% Global subsumptions: 1388
% 
% Simple tautologies: 1535
% Equational tautologies: 650
% Forward subsumptions: 77876
% Fw demodulations to eq. taut.: 1048
% Bw demodulations to eq. taut.: 447
% 
% Unit resulting resolution: 4490
% Factoring: 5
% Forward superposition: 33774
% Backward superposition: 42489
% Self superposition: 692
% Equality factoring: 356
% Equality resolution: 151
% 
% Split clauses: 436
% Split components: 880
% SAT solver clauses: 12187
% SAT solver unit clauses: 209
% SAT solver binary clauses: 1766
% 
% Sat splits: 436
% Sat splitting refutations: 1399
% 
% Memory used [KB]: 103878
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.funBigStepProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.funBigStepProps
% SZS output start Proof for thm.funBigStepProps
fof(f2216,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f140,f230,f229,f139,f232,f138,f234,f228,f454,f536,f560,f580,f579,f1809,f1816,f1920,f1928,f1814,f2118,f2126,f2195,f2122,f2120,f2199])).
fof(f2199,plain,(
  $false | ($spl0 | $spl12)),
  inference(subsumption_resolution,[],[f2198,f153])).
fof(f153,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2,X3] : s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0,X1] : ! [X2,X3] : ~s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X7,X6] : ! [X26,X20] : ~s('type.semanticPrimitives.result'(X7,X6),'const.semanticPrimitives.Rval_1'(s(X7,X20))) = s('type.semanticPrimitives.result'(X7,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),X26)))),
  file('thm.funBigStepProps.list_result_eq_Rval','thm.semanticPrimitives.result_distinct')).
fof(f2198,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1)))) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f2160,f228])).
fof(f2160,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK1,sK0),sK3))) = s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1)))) | $spl12),
  inference(superposition,[],[f182,f1814])).
fof(f182,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1,X2] : s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))))),
  inference(flattening,[],[f65])).
fof(f65,plain,(
  ! [X0,X1] : ! [X2] : s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X0),X1),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X7,X6] : ! [X21] : s('type.semanticPrimitives.result'('type.list.list'(X7),X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),X21))) = s('type.semanticPrimitives.result'('type.list.list'(X7),X6),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X7,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),X21)))))),
  file('thm.funBigStepProps.list_result_eq_Rval','thm.funBigStep.list_result_def|split|1')).
fof(f2120,plain,(
  s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))),sK0,sK1)),s('type.list.list'(sK1),'const.list.NIL_0'))) | $spl19),
  inference(cnf_transformation,[],[f2120_D])).
fof(f2120_D,plain,(
  s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))),sK0,sK1)),s('type.list.list'(sK1),'const.list.NIL_0'))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f2122,plain,(
  s('type.semanticPrimitives.result'(sK1,sK0),sK3) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))),sK0,sK1)))) | $spl20),
  inference(cnf_transformation,[],[f2122_D])).
fof(f2122_D,plain,(
  s('type.semanticPrimitives.result'(sK1,sK0),sK3) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))),sK0,sK1)))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f2195,plain,(
  s('type.semanticPrimitives.result'(sK1,sK0),sK3) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))),sK0,sK1)))) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))),sK0,sK1)),s('type.list.list'(sK1),'const.list.NIL_0'))) | ($spl2 | $spl12)),
  inference(forward_demodulation,[],[f2188,f1814])).
fof(f2188,plain,(
  s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))),sK0,sK1)),s('type.list.list'(sK1),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1)))) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))),sK0,sK1)))) | ($spl2 | $spl12)),
  inference(trivial_inequality_removal,[],[f2156])).
fof(f2156,plain,(
  s('type.semanticPrimitives.result'(sK1,sK0),sK3) != s('type.semanticPrimitives.result'(sK1,sK0),sK3) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))),sK0,sK1)),s('type.list.list'(sK1),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1)))) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))),sK0,sK1)))) | ($spl2 | $spl12)),
  inference(superposition,[],[f530,f1814])).
fof(f530,plain,(
  ( ! [X4] : (s('type.semanticPrimitives.result'(sK1,sK0),sK3) != s('type.semanticPrimitives.result'(sK1,sK0),X4) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK5(X4,sK0,sK1)),s('type.list.list'(sK1),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(sK1,sK0),X4) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(X4,sK0,sK1))))) ) | $spl2),
  inference(superposition,[],[f230,f158])).
fof(f158,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK6(X2,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK5(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1,X2] : (s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK5(X2,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK6(X2,X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6])],[f52])).
fof(f52,plain,(
  ! [X0,X1,X2] : (? [X4] : s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X4))) | ? [X3] : s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ! [X0,X1] : ! [X2] : (? [X4] : s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X4))) | ? [X3] : s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X7,X6] : ! [X27] : (? [X20] : s('type.semanticPrimitives.result'(X7,X6),X27) = s('type.semanticPrimitives.result'(X7,X6),'const.semanticPrimitives.Rval_1'(s(X7,X20))) | ? [X21] : s('type.semanticPrimitives.result'(X7,X6),X27) = s('type.semanticPrimitives.result'(X7,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),X21))))),
  file('thm.funBigStepProps.list_result_eq_Rval','thm.semanticPrimitives.result_nchotomy')).
fof(f2126,plain,(
  $false | ($spl0 | $spl15)),
  inference(subsumption_resolution,[],[f2125,f153])).
fof(f2125,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1)))) | ($spl0 | $spl15)),
  inference(forward_demodulation,[],[f2083,f228])).
fof(f2083,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK1,sK0),sK3))) = s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1)))) | ($spl0 | $spl15)),
  inference(superposition,[],[f182,f2065])).
fof(f2065,plain,(
  s('type.semanticPrimitives.result'(sK1,sK0),sK3) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1)))) | ($spl0 | $spl15)),
  inference(subsumption_resolution,[],[f2053,f228])).
fof(f2053,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),sK2))) != s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK1,sK0),sK3))) | s('type.semanticPrimitives.result'(sK1,sK0),sK3) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1)))) | $spl15),
  inference(superposition,[],[f2042,f158])).
fof(f2042,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'(sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),sK2))) != s('type.semanticPrimitives.result'('type.list.list'(sK1),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK1,X0),'const.semanticPrimitives.Rval_1'(s(sK1,sK5(sK3,sK0,sK1))))))) ) | $spl15),
  inference(superposition,[],[f2010,f141])).
fof(f141,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))))) = s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0,X1,X2] : s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))))) = s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0')))))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ! [X0,X1] : ! [X2] : s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))))) = s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X2),s('type.list.list'(X1),'const.list.NIL_0')))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X6,X7] : ! [X10] : s('type.semanticPrimitives.result'('type.list.list'(X7),X6),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X7,X6),'const.semanticPrimitives.Rval_1'(s(X7,X10))))) = s('type.semanticPrimitives.result'('type.list.list'(X7),X6),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X10),s('type.list.list'(X7),'const.list.NIL_0')))))),
  file('thm.funBigStepProps.list_result_eq_Rval','thm.funBigStep.list_result_def|split|0')).
fof(f2010,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'(sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),sK2))) != s('type.semanticPrimitives.result'('type.list.list'(sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK5(sK3,sK0,sK1)),s('type.list.list'(sK1),'const.list.NIL_0')))))) ) | $spl15),
  inference(equality_resolution,[],[f1831])).
fof(f1831,plain,(
  ( ! [X10,X11] : (s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),X10) | s('type.semanticPrimitives.result'('type.list.list'(sK1),X11),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),X10))) != s('type.semanticPrimitives.result'('type.list.list'(sK1),X11),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK5(sK3,sK0,sK1)),s('type.list.list'(sK1),'const.list.NIL_0')))))) ) | $spl15),
  inference(superposition,[],[f1816,f156])).
fof(f156,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,X3) | s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) != s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3)))) )),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1,X2,X3] : ((s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) != s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3))) | s(X1,X2) = s(X1,X3)) & (s(X1,X2) != s(X1,X3) | s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3)))))),
  inference(nnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2,X3] : (s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3))) <=> s(X1,X2) = s(X1,X3))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3))) <=> s(X1,X2) = s(X1,X3))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6,X7] : ! [X20,X26] : (s('type.semanticPrimitives.result'(X7,X6),'const.semanticPrimitives.Rval_1'(s(X7,X20))) = s('type.semanticPrimitives.result'(X7,X6),'const.semanticPrimitives.Rval_1'(s(X7,X26))) <=> s(X7,X20) = s(X7,X26))),
  file('thm.funBigStepProps.list_result_eq_Rval','thm.semanticPrimitives.result_|49||49||split|0')).
fof(f2118,plain,(
  s('type.semanticPrimitives.result'(sK1,sK0),sK3) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))),sK0,sK1)))) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))),sK0,sK1)),s('type.list.list'(sK1),'const.list.NIL_0'))) | ($spl0 | $spl2 | $spl15)),
  inference(forward_demodulation,[],[f2111,f2065])).
fof(f2111,plain,(
  s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))),sK0,sK1)),s('type.list.list'(sK1),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1)))) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))),sK0,sK1)))) | ($spl0 | $spl2 | $spl15)),
  inference(trivial_inequality_removal,[],[f2079])).
fof(f2079,plain,(
  s('type.semanticPrimitives.result'(sK1,sK0),sK3) != s('type.semanticPrimitives.result'(sK1,sK0),sK3) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK5('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))),sK0,sK1)),s('type.list.list'(sK1),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1)))) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))),sK0,sK1)))) | ($spl0 | $spl2 | $spl15)),
  inference(superposition,[],[f530,f2065])).
fof(f1814,plain,(
  s('type.semanticPrimitives.result'(sK1,sK0),sK3) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1)))) | $spl12),
  inference(cnf_transformation,[],[f1814_D])).
fof(f1814_D,plain,(
  s('type.semanticPrimitives.result'(sK1,sK0),sK3) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1)))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f1928,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(sK1,sK0),sK3) != s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rval_1'(s(sK1,X0))) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,X0),s('type.list.list'(sK1),X1)))) ) | $spl16),
  inference(cnf_transformation,[],[f1928_D])).
fof(f1928_D,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(sK1,sK0),sK3) != s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rval_1'(s(sK1,X0))) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,X0),s('type.list.list'(sK1),X1)))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f1920,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(sK1,sK0),sK3) != s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rval_1'(s(sK1,X0))) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,X0),s('type.list.list'(sK1),X1))) | s('type.semanticPrimitives.result'(sK1,sK0),sK3) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1))))) ) | ($spl6 | $spl15)),
  inference(superposition,[],[f1846,f158])).
fof(f1846,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(sK1,X2),'const.semanticPrimitives.Rval_1'(s(sK1,X0))) != s('type.semanticPrimitives.result'(sK1,X2),'const.semanticPrimitives.Rval_1'(s(sK1,sK5(sK3,sK0,sK1)))) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,X0),s('type.list.list'(sK1),X1)))) ) | ($spl6 | $spl15)),
  inference(superposition,[],[f1845,f156])).
fof(f1845,plain,(
  ( ! [X0] : (s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK5(sK3,sK0,sK1)),s('type.list.list'(sK1),X0)))) ) | ($spl6 | $spl15)),
  inference(equality_resolution,[],[f1835])).
fof(f1835,plain,(
  ( ! [X0,X1] : (s(sK1,X0) != s(sK1,sK5(sK3,sK0,sK1)) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,X0),s('type.list.list'(sK1),X1)))) ) | ($spl6 | $spl15)),
  inference(subsumption_resolution,[],[f1827,f310])).
fof(f310,plain,(
  ( ! [X6,X5] : (s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,X5),s('type.list.list'(sK1),X6))) | s('type.list.list'(sK1),'const.list.NIL_0') = s('type.list.list'(sK1),X6)) ) | $spl6),
  inference(superposition,[],[f143,f234])).
fof(f143,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))) )),
  inference(cnf_transformation,[],[f100])).
fof(f100,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & (s(X0,X1) != s(X0,X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f99])).
fof(f99,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & ((s(X0,X1) != s(X0,X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4)) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(nnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1,X2,X3,X4] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) <=> (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ! [X0] : ! [X1,X2,X3,X4] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) <=> (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X7] : ! [X22,X23,X24,X25] : (s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X22),s('type.list.list'(X7),X23))) = s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X24),s('type.list.list'(X7),X25))) <=> (s(X7,X22) = s(X7,X24) & s('type.list.list'(X7),X23) = s('type.list.list'(X7),X25)))),
  file('thm.funBigStepProps.list_result_eq_Rval','thm.list.list_|49||49|')).
fof(f1827,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,X0),s('type.list.list'(sK1),X1))) | s('type.list.list'(sK1),'const.list.NIL_0') != s('type.list.list'(sK1),X1) | s(sK1,X0) != s(sK1,sK5(sK3,sK0,sK1))) ) | $spl15),
  inference(superposition,[],[f1816,f144])).
fof(f144,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4) | s(X0,X1) != s(X0,X3)) )),
  inference(cnf_transformation,[],[f100])).
fof(f1816,plain,(
  s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK5(sK3,sK0,sK1)),s('type.list.list'(sK1),'const.list.NIL_0'))) | $spl15),
  inference(cnf_transformation,[],[f1816_D])).
fof(f1816_D,plain,(
  s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK5(sK3,sK0,sK1)),s('type.list.list'(sK1),'const.list.NIL_0'))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f1809,plain,(
  s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK5(sK3,sK0,sK1)),s('type.list.list'(sK1),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(sK1,sK0),sK3) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK0),sK6(sK3,sK0,sK1)))) | $spl2),
  inference(equality_resolution,[],[f530])).
fof(f579,plain,(
  s('type.list.list'(sK1),'const.list.NIL_0') = s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),'const.list.NIL_0'))) | $spl8),
  inference(cnf_transformation,[],[f579_D])).
fof(f579_D,plain,(
  s('type.list.list'(sK1),'const.list.NIL_0') = s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),'const.list.NIL_0'))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f580,plain,(
  ( ! [X0] : (s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,X0),s('type.list.list'(sK1),sK2)))) ) | $spl10),
  inference(cnf_transformation,[],[f580_D])).
fof(f580_D,plain,(
  ( ! [X0] : (s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,X0),s('type.list.list'(sK1),sK2)))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f560,plain,(
  ( ! [X0] : (s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,X0),s('type.list.list'(sK1),sK2))) | s('type.list.list'(sK1),'const.list.NIL_0') = s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),'const.list.NIL_0')))) ) | $spl6),
  inference(superposition,[],[f310,f234])).
fof(f536,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f535,f234])).
fof(f535,plain,(
  s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),'const.list.NIL_0'))) | ($spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f527])).
fof(f527,plain,(
  s('type.semanticPrimitives.result'(sK1,sK0),sK3) != s('type.semanticPrimitives.result'(sK1,sK0),sK3) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),'const.list.NIL_0'))) | ($spl2 | $spl4)),
  inference(superposition,[],[f230,f232])).
fof(f454,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f423,f229])).
fof(f423,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK1,sK0),sK3))) | ($spl4 | $spl6)),
  inference(superposition,[],[f307,f232])).
fof(f307,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'('type.list.list'(sK1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK1),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK1,X0),'const.semanticPrimitives.Rval_1'(s(sK1,sK4)))))) ) | $spl6),
  inference(superposition,[],[f141,f234])).
fof(f228,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK1,sK0),sK3))) | $spl0),
  inference(cnf_transformation,[],[f228_D])).
fof(f228_D,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK1,sK0),sK3))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f234,plain,(
  s('type.list.list'(sK1),sK2) = s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),'const.list.NIL_0'))) | $spl6),
  inference(cnf_transformation,[],[f234_D])).
fof(f234_D,plain,(
  s('type.list.list'(sK1),sK2) = s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),'const.list.NIL_0'))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f138,plain,(
  s('type.list.list'(sK1),sK2) = s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK1,sK0),sK3)))),
  inference(cnf_transformation,[],[f98])).
fof(f98,plain,(
  (s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK1,sK0),sK3))) | (s('type.list.list'(sK1),sK2) = s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,sK4),s('type.list.list'(sK1),'const.list.NIL_0'))) & s('type.semanticPrimitives.result'(sK1,sK0),sK3) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rval_1'(s(sK1,sK4))))) & (s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),sK2))) != s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK1,sK0),sK3))) | ! [X4] : (s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,X4),s('type.list.list'(sK1),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(sK1,sK0),sK3) != s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rval_1'(s(sK1,X4)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f97])).
fof(f97,plain,(
  ? [X0,X1,X2,X3] : ((s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X1,X0),X3))) | ? [X5] : (s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X5),s('type.list.list'(X1),'const.list.NIL_0'))) & s('type.semanticPrimitives.result'(X1,X0),X3) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X5))))) & (s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X1),X2))) != s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X1,X0),X3))) | ! [X4] : (s('type.list.list'(X1),X2) != s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(X1,X0),X3) != s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X4))))))),
  inference(rectify,[],[f96])).
fof(f96,plain,(
  ? [X0,X1,X2,X3] : ((s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X1,X0),X3))) | ? [X4] : (s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),'const.list.NIL_0'))) & s('type.semanticPrimitives.result'(X1,X0),X3) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X4))))) & (s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X1),X2))) != s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X1,X0),X3))) | ! [X4] : (s('type.list.list'(X1),X2) != s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'(X1,X0),X3) != s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X4))))))),
  inference(nnf_transformation,[],[f82])).
fof(f82,plain,(
  ? [X0,X1,X2,X3] : (s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X1,X0),X3))) <~> ? [X4] : (s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),'const.list.NIL_0'))) & s('type.semanticPrimitives.result'(X1,X0),X3) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X4)))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2,X3] : (s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X1,X0),X3))) <=> ? [X4] : (s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),'const.list.NIL_0'))) & s('type.semanticPrimitives.result'(X1,X0),X3) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X4)))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ~! [X0,X1] : ! [X2,X3] : (s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X1),X2))) = s('type.semanticPrimitives.result'('type.list.list'(X1),X0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X1,X0),X3))) <=> ? [X4] : (s('type.list.list'(X1),X2) = s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),'const.list.NIL_0'))) & s('type.semanticPrimitives.result'(X1,X0),X3) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X4)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (s('type.semanticPrimitives.result'('type.list.list'(X7),X6),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X7),X8))) = s('type.semanticPrimitives.result'('type.list.list'(X7),X6),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X7,X6),X9))) <=> ? [X10] : (s('type.list.list'(X7),X8) = s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X10),s('type.list.list'(X7),'const.list.NIL_0'))) & s('type.semanticPrimitives.result'(X7,X6),X9) = s('type.semanticPrimitives.result'(X7,X6),'const.semanticPrimitives.Rval_1'(s(X7,X10)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (s('type.semanticPrimitives.result'('type.list.list'(X7),X6),'const.semanticPrimitives.Rval_1'(s('type.list.list'(X7),X8))) = s('type.semanticPrimitives.result'('type.list.list'(X7),X6),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(X7,X6),X9))) <=> ? [X10] : (s('type.list.list'(X7),X8) = s('type.list.list'(X7),'const.list.CONS_2'(s(X7,X10),s('type.list.list'(X7),'const.list.NIL_0'))) & s('type.semanticPrimitives.result'(X7,X6),X9) = s('type.semanticPrimitives.result'(X7,X6),'const.semanticPrimitives.Rval_1'(s(X7,X10)))))),
  file('thm.funBigStepProps.list_result_eq_Rval','thm.funBigStepProps.list_result_eq_Rval')).
fof(f232,plain,(
  s('type.semanticPrimitives.result'(sK1,sK0),sK3) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rval_1'(s(sK1,sK4))) | $spl4),
  inference(cnf_transformation,[],[f232_D])).
fof(f232_D,plain,(
  s('type.semanticPrimitives.result'(sK1,sK0),sK3) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rval_1'(s(sK1,sK4))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f139,plain,(
  s('type.semanticPrimitives.result'(sK1,sK0),sK3) = s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rval_1'(s(sK1,sK4))) | s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),sK2))) = s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK1,sK0),sK3)))),
  inference(cnf_transformation,[],[f98])).
fof(f229,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),sK2))) != s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK1,sK0),sK3))) | $spl1),
  inference(cnf_transformation,[],[f229_D])).
fof(f229_D,plain,(
  s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),sK2))) != s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK1,sK0),sK3))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f230,plain,(
  ( ! [X4] : (s('type.semanticPrimitives.result'(sK1,sK0),sK3) != s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rval_1'(s(sK1,X4))) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,X4),s('type.list.list'(sK1),'const.list.NIL_0')))) ) | $spl2),
  inference(cnf_transformation,[],[f230_D])).
fof(f230_D,plain,(
  ( ! [X4] : (s('type.semanticPrimitives.result'(sK1,sK0),sK3) != s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rval_1'(s(sK1,X4))) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,X4),s('type.list.list'(sK1),'const.list.NIL_0')))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f140,plain,(
  ( ! [X4] : (s('type.semanticPrimitives.result'(sK1,sK0),sK3) != s('type.semanticPrimitives.result'(sK1,sK0),'const.semanticPrimitives.Rval_1'(s(sK1,X4))) | s('type.list.list'(sK1),sK2) != s('type.list.list'(sK1),'const.list.CONS_2'(s(sK1,X4),s('type.list.list'(sK1),'const.list.NIL_0'))) | s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.semanticPrimitives.Rval_1'(s('type.list.list'(sK1),sK2))) != s('type.semanticPrimitives.result'('type.list.list'(sK1),sK0),'const.funBigStep.list_result_1'(s('type.semanticPrimitives.result'(sK1,sK0),sK3)))) )),
  inference(cnf_transformation,[],[f98])).
% SZS output end Proof for thm.funBigStepProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 136
% Passive clauses: 1320
% Generated clauses: 1988
% Final active clauses: 123
% Final passive clauses: 1008
% Input formulas: 36
% Initial clauses: 87
% 
% Selected by SInE selection: 34
% SInE iterations: 1
% 
% Duplicate literals: 2
% Trivial inequalities: 24
% Fw subsumption resolutions: 12
% Fw demodulations: 200
% 
% Simple tautologies: 34
% Equational tautologies: 2
% Forward subsumptions: 455
% Fw demodulations to eq. taut.: 7
% 
% Forward superposition: 1511
% Backward superposition: 164
% Equality resolution: 52
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 13
% SAT solver binary clauses: 5
% 
% Sat splits: 8
% Sat splitting refutations: 4
% 
% Memory used [KB]: 2558
% Time elapsed: 0.058 s
% ------------------------------
% ------------------------------
% Success in time 11.799 s
