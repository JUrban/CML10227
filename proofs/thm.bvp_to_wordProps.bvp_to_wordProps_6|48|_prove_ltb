Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f3761,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3760,f223,f409,f407,f405,f403,f401,f898,f422,f421,f3759])).
fof(f3759,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f403,f225])).
fof(f225,plain,(
  ( ! [X5] : (s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  (s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK13))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK14))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK15),s('type.list.list'('type.bvlSem.v'),sK16))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK17))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK18)))) & ! [X6] : s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X6))) & ! [X5] : s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))) & ! [X4] : s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X4))) & ! [X3] : s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X3))) & ! [X1,X2] : s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.bvlSem.v'),X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18])],[f137])).
fof(f137,plain,(
  ? [X0] : ((? [X12] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X12))) | ? [X11] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))) | ? [X9,X10] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.bvlSem.v'),X10))) | ? [X8] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X8))) | ? [X7] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X7)))) & ! [X6] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X6))) & ! [X5] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))) & ! [X4] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X4))) & ! [X3] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X3))) & ! [X1,X2] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.bvlSem.v'),X2))))),
  inference(rectify,[],[f97])).
fof(f97,plain,(
  ? [X0] : ((? [X6] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X6))) | ? [X5] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))) | ? [X3,X4] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X3),s('type.list.list'('type.bvlSem.v'),X4))) | ? [X2] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X2))) | ? [X1] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X1)))) & ! [X12] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X12))) & ! [X11] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))) & ! [X10] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X10))) & ! [X9] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X9))) & ! [X7,X8] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X7),s('type.list.list'('type.bvlSem.v'),X8))))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ? [X0] : ((? [X6] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X6))) | ? [X5] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))) | ? [X3,X4] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X3),s('type.list.list'('type.bvlSem.v'),X4))) | ? [X2] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X2))) | ? [X1] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X1)))) & (! [X12] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X12))) & ! [X11] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))) & ! [X10] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X10))) & ! [X9] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X9))) & ! [X7,X8] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X7),s('type.list.list'('type.bvlSem.v'),X8)))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ((? [X6] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X6))) | ? [X5] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X5))) | ? [X3,X4] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X3),s('type.list.list'('type.bvlSem.v'),X4))) | ? [X2] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X2))) | ? [X1] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X1)))) => (? [X12] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X12))) | ? [X11] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X11))) | ? [X10] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X10))) | ? [X9] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X9))) | ? [X7,X8] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X7),s('type.list.list'('type.bvlSem.v'),X8)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X7))) | ? [X8] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))) | ? [X9,X10] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.bvlSem.v'),X10))) | ? [X11] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X11))) | ? [X12] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X12)))) => (? [X7] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X7))) | ? [X8] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))) | ? [X11] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X11))) | ? [X12] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X12))) | ? [X9,X10] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.bvlSem.v'),X10)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X7))) | ? [X8] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))) | ? [X9,X10] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.bvlSem.v'),X10))) | ? [X11] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X11))) | ? [X12] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X12)))) => (? [X7] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X7))) | ? [X8] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))) | ? [X11] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X11))) | ? [X12] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X12))) | ? [X9,X10] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.bvlSem.v'),X10)))))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_6|48|_prove_ltb','thm.bvp_to_wordProps.bvp_to_wordProps_6|48|_prove_ltb')).
fof(f421,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f401,f224])).
fof(f224,plain,(
  ( ! [X6] : (s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X6)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f422,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f407,f226])).
fof(f226,plain,(
  ( ! [X4] : (s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X4)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f898,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f405,f228])).
fof(f228,plain,(
  ( ! [X2,X1] : (s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X1),s('type.list.list'('type.bvlSem.v'),X2)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f401,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK13))) | $spl0),
  inference(cnf_transformation,[],[f401_D])).
fof(f401_D,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK13))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f403,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK14))) | $spl2),
  inference(cnf_transformation,[],[f403_D])).
fof(f403_D,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK14))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f405,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK15),s('type.list.list'('type.bvlSem.v'),sK16))) | $spl4),
  inference(cnf_transformation,[],[f405_D])).
fof(f405_D,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK15),s('type.list.list'('type.bvlSem.v'),sK16))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f407,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK17))) | $spl6),
  inference(cnf_transformation,[],[f407_D])).
fof(f407_D,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK17))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f409,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK18))) | $spl8),
  inference(cnf_transformation,[],[f409_D])).
fof(f409_D,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK18))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f223,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK18))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK17))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK15),s('type.list.list'('type.bvlSem.v'),sK16))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK14))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK13)))),
  inference(cnf_transformation,[],[f138])).
fof(f3760,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f409,f227])).
fof(f227,plain,(
  ( ! [X3] : (s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f138])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 292
% Passive clauses: 1146
% Generated clauses: 3531
% Final active clauses: 292
% Final passive clauses: 752
% Input formulas: 37
% Initial clauses: 173
% 
% Duplicate literals: 127
% Trivial inequalities: 13
% Fw subsumption resolutions: 232
% 
% Simple tautologies: 124
% Equational tautologies: 20
% Forward subsumptions: 1830
% 
% Binary resolution: 2149
% Factoring: 627
% Forward superposition: 102
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 76
% Split components: 156
% SAT solver clauses: 148
% SAT solver unit clauses: 11
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 76
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 147
% TWLsolver calls for satisfiability: 127
% 
% Memory used [KB]: 1791
% Time elapsed: 0.052 s
% ------------------------------
% ------------------------------
% Success in time 0.051 s
