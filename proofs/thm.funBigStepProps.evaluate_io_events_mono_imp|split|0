Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.funBigStepProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.funBigStepProps
% SZS output start Proof for thm.funBigStepProps
fof(f13069,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f13062,f240,f413,f4911,f410,f239,f415,f411])).
fof(f411,plain,(
  ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK16)))))))) | $spl1),
  inference(cnf_transformation,[],[f411_D])).
fof(f411_D,plain,(
  ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK16)))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f415,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13)))))))) | $spl4),
  inference(cnf_transformation,[],[f415_D])).
fof(f415_D,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13)))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f239,plain,(
  p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13)))))))) | ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK16))))))))),
  inference(cnf_transformation,[],[f160])).
fof(f160,plain,(
  s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK12),sK16),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),sK17))) = s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(sK12),sK13),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK14),s('type.list.list'('type.ast.exp'),sK15))) & (~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK16)))))))) | (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13)))))))) & s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))) != s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK16)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17])],[f115])).
fof(f115,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X5))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X3))) & (~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X4)))))))) | (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1)))))))) & s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X4))))))),
  inference(ennf_transformation,[],[f46])).
fof(f46,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X5))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X3))) => (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X4)))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1)))))))) => s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X4))))))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X5))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X3))) => (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X4)))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1)))))))) => s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X4))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X6),X10),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X11))) = s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X6),X7),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.list.list'('type.ast.exp'),X9))) => (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X7))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X10)))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X7)))))))) => s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X10))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X6),X10),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X11))) = s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X6),X7),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.list.list'('type.ast.exp'),X9))) => (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X7))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X10)))))))) & (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X7)))))))) => s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X7))) = s('type.ffi.ffi_state'(X6),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X6),X10))))))),
  file('thm.funBigStepProps.evaluate_io_events_mono_imp|split|0','thm.funBigStepProps.evaluate_io_events_mono_imp|split|0')).
fof(f410,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK16)))))))) | $spl0),
  inference(cnf_transformation,[],[f410_D])).
fof(f410_D,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK16)))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f4911,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK16))))))))),
  inference(forward_demodulation,[],[f4909,f330])).
fof(f330,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))) )),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(flattening,[],[f103])).
fof(f103,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X22,X6] : ! [X13,X14] : s(X6,X13) = s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X22),'const.pair.,_2'(s(X6,X13),s(X22,X14)))))),
  file('thm.funBigStepProps.evaluate_io_events_mono_imp|split|0','thm.pair.FST')).
fof(f4909,plain,(
  p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK12),sK16),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),sK17))))))))))))),
  inference(superposition,[],[f296,f238])).
fof(f238,plain,(
  s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK12),sK16),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),sK17))) = s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(sK12),sK13),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK14),s('type.list.list'('type.ast.exp'),sK15)))),
  inference(cnf_transformation,[],[f160])).
fof(f296,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X3))))))))))))) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0,X1,X2,X3] : p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X3))))))))))))),
  inference(flattening,[],[f80])).
fof(f80,plain,(
  ! [X0] : ! [X1,X2,X3] : p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X3))))))))))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X17] : ! [X7,X8,X18] : p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X17),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X17),X7))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(X17),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X17),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X17),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X17),X7),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.list.list'('type.ast.exp'),X18))))))))))))),
  file('thm.funBigStepProps.evaluate_io_events_mono_imp|split|0','thm.funBigStepProps.evaluate_io_events_mono|split|0')).
fof(f413,plain,(
  s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))) != s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK16))) | $spl3),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))) != s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK16))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f240,plain,(
  s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))) != s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK16))) | ~p(s(bool,'const.list.isPREFIX_2'(s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))))),s('type.list.list'('type.ffi.io_event'),'const.ffi.ffi_state_io_events_1'(s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK16))))))))),
  inference(cnf_transformation,[],[f160])).
fof(f13062,plain,(
  $false | ($spl3 | $spl4)),
  inference(subsumption_resolution,[],[f13061,f413])).
fof(f13061,plain,(
  s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))) = s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK16))) | $spl4),
  inference(forward_demodulation,[],[f13046,f330])).
fof(f13046,plain,(
  s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))) = s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK12),sK16),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),sK17))))))) | $spl4),
  inference(superposition,[],[f4990,f238])).
fof(f4990,plain,(
  ( ! [X0,X1] : (s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),sK13))) = s('type.ffi.ffi_state'(sK12),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(sK12),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(sK12),sK13),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X1)))))))) ) | $spl4),
  inference(resolution,[],[f297,f415])).
fof(f297,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1)))))))) | s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X3)))))))) )),
  inference(cnf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1)))))))) | s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X3))))))))),
  inference(ennf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0,X1,X2,X3] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1)))))))) => s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X3))))))))),
  inference(flattening,[],[f82])).
fof(f82,plain,(
  ! [X0] : ! [X1,X2,X3] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1)))))))) => s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X0),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X3))))))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X17] : ! [X7,X8,X18] : (p(s(bool,'const.option.IS_SOME_1'(s('type.option.option'('type.ffi.final_event'),'const.ffi.ffi_state_final_event_1'(s('type.ffi.ffi_state'(X17),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X17),X7)))))))) => s('type.ffi.ffi_state'(X17),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X17),X7))) = s('type.ffi.ffi_state'(X17),'const.semanticPrimitives.state_ffi_1'(s('type.semanticPrimitives.state'(X17),'const.pair.FST_1'(s('type.pair.prod'('type.semanticPrimitives.state'(X17),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X17),X7),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.list.list'('type.ast.exp'),X18))))))))),
  file('thm.funBigStepProps.evaluate_io_events_mono_imp|split|0','thm.funBigStepProps.evaluate_io_events_mono|split|1')).
% SZS output end Proof for thm.funBigStepProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 528
% Passive clauses: 6141
% Generated clauses: 12765
% Final active clauses: 526
% Final passive clauses: 5315
% Input formulas: 43
% Initial clauses: 168
% 
% Duplicate literals: 255
% Trivial inequalities: 41
% Fw subsumption resolutions: 1213
% Fw demodulations: 170
% Bw demodulations: 2
% 
% Simple tautologies: 194
% Equational tautologies: 54
% Forward subsumptions: 4461
% 
% Binary resolution: 7041
% Factoring: 934
% Forward superposition: 1329
% Backward superposition: 1443
% Self superposition: 27
% Equality factoring: 26
% Equality resolution: 16
% 
% Split clauses: 319
% Split components: 644
% SAT solver clauses: 544
% SAT solver unit clauses: 9
% SAT solver binary clauses: 105
% SAT solver learnt clauses: 1
% 
% Sat splits: 319
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 543
% TWLsolver calls for satisfiability: 282
% 
% Memory used [KB]: 6652
% Time elapsed: 0.286 s
% ------------------------------
% ------------------------------
% Success in time 0.3 s
