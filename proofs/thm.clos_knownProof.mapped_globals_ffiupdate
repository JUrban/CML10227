Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f8093,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f8059])).
fof(f8059,plain,(
  s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK1),sK3))) != s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK1),sK3)))),
  inference(superposition,[],[f128,f7532])).
fof(f7532,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X3))) = s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X2),s('type.closSem.state'(X1),X3)))))) )),
  inference(forward_demodulation,[],[f7494,f134])).
fof(f134,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X1))) = s(fun('type.num.num',bool),'const.pred_set.GSPEC_1'(s(fun('type.num.num','type.pair.prod'('type.num.num',bool)),'_dst_x1x1_2'(s(fun('type.num.num',fun(bool,'type.pair.prod'('type.num.num',bool))),'const.pair.,_0'),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun(fun('type.closSem.v',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closSem.v',bool)),'_dst_x00x10x01_3'(s(fun('type.option.option'('type.option.option'('type.closSem.v')),fun('type.option.option'('type.option.option'('type.closSem.v')),bool)),'=_0'),s(fun('type.num.num','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.option.option'('type.closSem.v')),'type.option.option'('type.option.option'('type.closSem.v')))),'const.closSem.get_global_0'),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))))),s(fun('type.closSem.v','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x0x1_2'(s(fun('type.option.option'('type.closSem.v'),'type.option.option'('type.option.option'('type.closSem.v'))),'const.option.SOME_0'),s(fun('type.closSem.v','type.option.option'('type.closSem.v')),'const.option.SOME_0')))))))))))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1] : s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X1))) = s(fun('type.num.num',bool),'const.pred_set.GSPEC_1'(s(fun('type.num.num','type.pair.prod'('type.num.num',bool)),'_dst_x1x1_2'(s(fun('type.num.num',fun(bool,'type.pair.prod'('type.num.num',bool))),'const.pair.,_0'),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun(fun('type.closSem.v',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closSem.v',bool)),'_dst_x00x10x01_3'(s(fun('type.option.option'('type.option.option'('type.closSem.v')),fun('type.option.option'('type.option.option'('type.closSem.v')),bool)),'=_0'),s(fun('type.num.num','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.option.option'('type.closSem.v')),'type.option.option'('type.option.option'('type.closSem.v')))),'const.closSem.get_global_0'),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))))),s(fun('type.closSem.v','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x0x1_2'(s(fun('type.option.option'('type.closSem.v'),'type.option.option'('type.option.option'('type.closSem.v'))),'const.option.SOME_0'),s(fun('type.closSem.v','type.option.option'('type.closSem.v')),'const.option.SOME_0')))))))))))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0] : ! [X1] : s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X1))) = s(fun('type.num.num',bool),'const.pred_set.GSPEC_1'(s(fun('type.num.num','type.pair.prod'('type.num.num',bool)),'_dst_x1x1_2'(s(fun('type.num.num',fun(bool,'type.pair.prod'('type.num.num',bool))),'const.pair.,_0'),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun(fun('type.closSem.v',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closSem.v',bool)),'_dst_x00x10x01_3'(s(fun('type.option.option'('type.option.option'('type.closSem.v')),fun('type.option.option'('type.option.option'('type.closSem.v')),bool)),'=_0'),s(fun('type.num.num','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.option.option'('type.closSem.v')),'type.option.option'('type.option.option'('type.closSem.v')))),'const.closSem.get_global_0'),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))))),s(fun('type.closSem.v','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x0x1_2'(s(fun('type.option.option'('type.closSem.v'),'type.option.option'('type.option.option'('type.closSem.v'))),'const.option.SOME_0'),s(fun('type.closSem.v','type.option.option'('type.closSem.v')),'const.option.SOME_0')))))))))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X9] : s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X6),X9))) = s(fun('type.num.num',bool),'const.pred_set.GSPEC_1'(s(fun('type.num.num','type.pair.prod'('type.num.num',bool)),'_dst_x1x1_2'(s(fun('type.num.num',fun(bool,'type.pair.prod'('type.num.num',bool))),'const.pair.,_0'),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun(fun('type.closSem.v',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closSem.v',bool)),'_dst_x00x10x01_3'(s(fun('type.option.option'('type.option.option'('type.closSem.v')),fun('type.option.option'('type.option.option'('type.closSem.v')),bool)),'=_0'),s(fun('type.num.num','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.option.option'('type.closSem.v')),'type.option.option'('type.option.option'('type.closSem.v')))),'const.closSem.get_global_0'),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X6),X9))))),s(fun('type.closSem.v','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x0x1_2'(s(fun('type.option.option'('type.closSem.v'),'type.option.option'('type.option.option'('type.closSem.v'))),'const.option.SOME_0'),s(fun('type.closSem.v','type.option.option'('type.closSem.v')),'const.option.SOME_0')))))))))))),
  file('thm.clos_knownProof.mapped_globals_ffiupdate','thm.clos_knownProof.mapped_globals_def')).
fof(f7494,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X2),s('type.closSem.state'(X1),X3))))) = s(fun('type.num.num',bool),'const.pred_set.GSPEC_1'(s(fun('type.num.num','type.pair.prod'('type.num.num',bool)),'_dst_x1x1_2'(s(fun('type.num.num',fun(bool,'type.pair.prod'('type.num.num',bool))),'const.pair.,_0'),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun(fun('type.closSem.v',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closSem.v',bool)),'_dst_x00x10x01_3'(s(fun('type.option.option'('type.option.option'('type.closSem.v')),fun('type.option.option'('type.option.option'('type.closSem.v')),bool)),'=_0'),s(fun('type.num.num','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.option.option'('type.closSem.v')),'type.option.option'('type.option.option'('type.closSem.v')))),'const.closSem.get_global_0'),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X3))))),s(fun('type.closSem.v','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x0x1_2'(s(fun('type.option.option'('type.closSem.v'),'type.option.option'('type.option.option'('type.closSem.v'))),'const.option.SOME_0'),s(fun('type.closSem.v','type.option.option'('type.closSem.v')),'const.option.SOME_0')))))))))))) )),
  inference(superposition,[],[f134,f161])).
fof(f161,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))) = s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.closSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f99])).
fof(f99,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))) = s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.closSem.state'(X1),X2)))))),
  inference(flattening,[],[f98])).
fof(f98,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X1),X2))) = s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.closSem.state'(X1),X2)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X13,X11] : ! [X9,X12] : s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X11),X9))) = s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X13),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X11),'type.ffi.ffi_state'(X13)),X12),s('type.closSem.state'(X11),X9)))))),
  file('thm.clos_knownProof.mapped_globals_ffiupdate','thm.closSem.closSem_64_prove_ltb')).
fof(f128,plain,(
  s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK1),sK3))) != s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK1),'type.ffi.ffi_state'(sK0)),sK2),s('type.closSem.state'(sK1),sK3)))))),
  inference(cnf_transformation,[],[f121])).
fof(f121,plain,(
  s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK1),sK3))) != s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK1),'type.ffi.ffi_state'(sK0)),sK2),s('type.closSem.state'(sK1),sK3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f119])).
fof(f119,plain,(
  ? [X0,X1,X2,X3] : s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X3))) != s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X2),s('type.closSem.state'(X1),X3)))))),
  inference(ennf_transformation,[],[f45])).
fof(f45,plain,(
  ~! [X0,X1,X2,X3] : s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X3))) = s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X2),s('type.closSem.state'(X1),X3)))))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ~! [X0,X1] : ! [X2,X3] : s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X1),X3))) = s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X2),s('type.closSem.state'(X1),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X7),X9))) = s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X6),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X7),'type.ffi.ffi_state'(X6)),X8),s('type.closSem.state'(X7),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X7),X9))) = s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X6),'const.closSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X7),'type.ffi.ffi_state'(X6)),X8),s('type.closSem.state'(X7),X9)))))),
  file('thm.clos_knownProof.mapped_globals_ffiupdate','thm.clos_knownProof.mapped_globals_ffiupdate')).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 117
% Passive clauses: 1677
% Generated clauses: 7779
% Final active clauses: 82
% Final passive clauses: 1346
% Input formulas: 42
% Initial clauses: 45
% 
% Duplicate literals: 407
% Trivial inequalities: 55
% Fw subsumption resolutions: 395
% Fw demodulations: 844
% Bw demodulations: 24
% 
% Simple tautologies: 65
% Equational tautologies: 21
% Forward subsumptions: 3994
% 
% Binary resolution: 106
% Forward superposition: 3053
% Backward superposition: 2589
% Self superposition: 129
% Equality factoring: 56
% Equality resolution: 10
% 
% Split clauses: 219
% Split components: 447
% SAT solver clauses: 355
% SAT solver unit clauses: 13
% SAT solver binary clauses: 88
% 
% Sat splits: 219
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 353
% TWLsolver calls for satisfiability: 78
% 
% Memory used [KB]: 10874
% Time elapsed: 0.216 s
% ------------------------------
% ------------------------------
% Success in time 0.218 s
