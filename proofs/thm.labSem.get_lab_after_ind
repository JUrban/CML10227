Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.labSem
% (6575)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 191
% Passive clauses: 1479
% Generated clauses: 27912
% Final active clauses: 181
% Final passive clauses: 1057
% Input formulas: 21
% Initial clauses: 51
% 
% Duplicate literals: 1818
% Trivial inequalities: 158
% Fw subsumption resolutions: 4352
% Fw demodulations: 5152
% Bw demodulations: 9
% 
% Simple tautologies: 396
% Equational tautologies: 21
% Forward subsumptions: 12461
% 
% Binary resolution: 671
% Forward superposition: 9463
% Backward superposition: 5841
% Self superposition: 122
% Equality factoring: 36
% Equality resolution: 36
% 
% Split clauses: 1084
% Split components: 2200
% SAT solver clauses: 2187
% SAT solver unit clauses: 9
% SAT solver binary clauses: 79
% 
% Sat splits: 1084
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 2186
% TWLsolver calls for satisfiability: 254
% 
% Memory used [KB]: 13176
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.labSem
% (6640)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 171
% Passive clauses: 513
% Generated clauses: 22208
% Final active clauses: 159
% Final passive clauses: 290
% Input formulas: 21
% Initial clauses: 51
% 
% Duplicate literals: 1380
% Trivial inequalities: 162
% Fw subsumption resolutions: 2295
% Fw demodulations: 4848
% Bw demodulations: 51
% Condensations: 1192
% Global subsumptions: 10
% 
% Simple tautologies: 225
% Equational tautologies: 21
% Forward subsumptions: 10424
% 
% Binary resolution: 403
% Forward superposition: 7184
% Backward superposition: 4347
% Self superposition: 100
% Equality factoring: 38
% Equality resolution: 23
% 
% Split clauses: 82
% Split components: 177
% SAT solver clauses: 921
% SAT solver unit clauses: 80
% SAT solver binary clauses: 30
% SAT solver learnt clauses: 22
% SAT solver learnt literals: 10
% 
% Sat splits: 82
% Sat splitting refutations: 15
% 
% TWLsolver clauses: 879
% TWLsolver calls for satisfiability: 523
% 
% Memory used [KB]: 13432
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.labSem
% (6698)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 979
% Passive clauses: 5351
% Generated clauses: 165357
% Final active clauses: 147
% Final passive clauses: 490
% Input formulas: 21
% Initial clauses: 51
% 
% Duplicate literals: 8942
% Trivial inequalities: 1399
% Fw subsumption resolutions: 16020
% Fw demodulations: 21640
% Bw demodulations: 3965
% Condensations: 16709
% Global subsumptions: 1229
% 
% Simple tautologies: 1702
% Equational tautologies: 1767
% Forward subsumptions: 88924
% Fw demodulations to eq. taut.: 97
% Bw demodulations to eq. taut.: 182
% 
% Unit resulting resolution: 6180
% Forward superposition: 50506
% Backward superposition: 27684
% Self superposition: 693
% Equality factoring: 324
% Equality resolution: 135
% 
% Split clauses: 448
% Split components: 904
% SAT solver clauses: 8758
% SAT solver unit clauses: 170
% SAT solver binary clauses: 742
% 
% Sat splits: 448
% Sat splitting refutations: 1280
% 
% Memory used [KB]: 67163
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.labSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.labSem
% SZS output start Proof for thm.labSem
fof(f5682,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f132,f133,f134,f135,f136,f137,f208,f209,f210,f211,f212,f213,f232,f233,f326,f328,f383,f388,f499,f502,f508,f509,f584,f589,f599,f602,f740,f744,f779,f783,f847,f853,f1686,f1699,f1701,f1707,f1713,f1715,f1719,f1720,f1716,f1721,f1723,f1724,f1722,f1725,f1727,f1728,f1726,f1729,f1731,f1732,f1718,f1730,f1741,f1750,f1757,f1770,f1772,f1780,f1782,f1787,f1792,f1805,f1811,f1823,f1832,f1837,f1844,f1849,f1856,f1864,f1878,f1895,f385,f1965,f1970,f2052,f2053,f2054,f2654,f2682,f2683,f2705,f2721,f2738,f2743,f2754,f2816,f1812,f3035,f3036,f3037,f3038,f3043,f3045,f3047,f3049,f3051,f3053,f3059,f3064,f3075,f3077,f1687,f3079,f3081,f3083,f3085,f381,f497,f500,f3087,f3089,f3091,f3093,f1702,f3095,f3097,f3099,f3101,f3103,f3105,f3107,f2821,f1824,f3132,f3134,f3218,f3221,f3275,f3328,f3335,f3338,f3340,f3344,f3349,f3352,f3356,f3358,f3363,f3366,f3370,f3372,f3376,f3378,f3383,f3386,f3391,f3394,f3397,f3398,f3568,f3575,f3601,f3628,f3704,f3846,f3854,f4527,f4563,f4489,f4572,f4578,f4584,f4589,f4591,f4595,f4601,f4608,f4616,f4624,f4632,f4640,f4643,f4646,f4650,f4713,f4755,f4720,f4784,f1813,f4830,f4862,f4869,f4883,f4890,f4897,f4899,f4901,f4903,f4905,f4906,f4908,f4910,f4912,f4915,f4917,f4919,f4921,f3602,f4923,f4925,f4927,f4929,f4934,f4937,f163,f4989,f5001,f5041,f5097,f5113,f1972,f5383,f5388,f5397,f5404,f5408,f5413,f5416,f5422,f5428,f5432,f5436,f5454,f5458,f5482,f5488,f5492,f5496,f5500,f5503,f176,f5507,f5511,f5513,f5517,f5521,f5525,f5529,f5533,f5536,f5541,f5543,f5545,f5547,f5549,f5551,f4606,f5553,f5555,f5557,f5559,f5561,f5563,f5567,f1708,f5571,f5575,f5579,f5583,f5585,f5589,f5593,f5597,f5599,f5601,f5603,f5605,f5609,f5611,f5613,f5615,f5619,f5621,f167,f165,f5625,f5627,f5631,f5635,f5637,f3603,f5639,f166,f4565,f5651,f5655,f1714,f5657,f5661,f5663,f5667,f5669,f5673,f505,f5675,f174,f172,f5677,f170,f5681,f1865,f168,f164])).
fof(f164,plain,(
  p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl2),
  inference(cnf_transformation,[],[f164_D])).
fof(f164_D,plain,(
  p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f168,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1))))) ) | $spl6),
  inference(cnf_transformation,[],[f168_D])).
fof(f168_D,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f1865,plain,(
  ( ! [X4] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X4))))) ) | $spl42),
  inference(cnf_transformation,[],[f1865_D])).
fof(f1865_D,plain,(
  ( ! [X4] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X4))))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f5681,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5680,f129])).
fof(f129,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.labSem.get_lab_after_ind',aHL_TRUTH)).
fof(f5680,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl1),
  inference(forward_demodulation,[],[f5679,f141])).
fof(f141,plain,(
  ( ! [X15] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X15))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) )),
  inference(resolution,[],[f81,f106])).
fof(f106,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X19] : (s(bool,'T_0') = s(bool,X19) <=> p(s(bool,X19)))),
  file('thm.labSem.get_lab_after_ind','thm.bool.EQ_CLAUSES|split|1')).
fof(f81,plain,(
  ( ! [X12] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X12] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) & ! [X9,X10,X11] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X9))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X9))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X10),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X11))))))) & ! [X4,X5,X6,X7,X8] : ((p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X6)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(sK0)),X7))),s('type.list.list'('type.labLang.sec'(sK0)),X8))))))) | (~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X6)))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X4) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(sK0)),X7))),s('type.list.list'('type.labLang.sec'(sK0)),X8))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X6),s('type.list.list'('type.labLang.line'(sK0)),X7))))),s('type.list.list'('type.labLang.sec'(sK0)),X8))))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK2))),s('type.list.list'('type.labLang.sec'(sK0)),sK3))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f58])).
fof(f58,plain,(
  ? [X0,X1] : (! [X12] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0')))) & ! [X9,X10,X11] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X9))),s('type.list.list'('type.labLang.sec'(X0)),X11)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X9))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X10),s('type.list.list'('type.labLang.line'(X0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X0)),X11))))))) & ! [X4,X5,X6,X7,X8] : ((p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X6)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(X0)),X7))),s('type.list.list'('type.labLang.sec'(X0)),X8))))))) | (~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X6)))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X4) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(X0)),X7))),s('type.list.list'('type.labLang.sec'(X0)),X8))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(X0)),'const.list.CONS_2'(s('type.labLang.line'(X0),X6),s('type.list.list'('type.labLang.line'(X0)),X7))))),s('type.list.list'('type.labLang.sec'(X0)),X8))))))) & ? [X2,X3] : ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),X3)))))),
  inference(rectify,[],[f50])).
fof(f50,plain,(
  ? [X0,X1] : (! [X10] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0')))) & ! [X7,X8,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X7))),s('type.list.list'('type.labLang.sec'(X0)),X9)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X7))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X8),s('type.list.list'('type.labLang.line'(X0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X0)),X9))))))) & ! [X2,X3,X4,X5,X6] : ((p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X4)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),X5))),s('type.list.list'('type.labLang.sec'(X0)),X6))))))) | (~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X4)))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X2) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),X5))),s('type.list.list'('type.labLang.sec'(X0)),X6))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),'const.list.CONS_2'(s('type.labLang.line'(X0),X4),s('type.list.list'('type.labLang.line'(X0)),X5))))),s('type.list.list'('type.labLang.sec'(X0)),X6))))))) & ? [X11,X12] : ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X11))),s('type.list.list'('type.labLang.sec'(X0)),X12)))))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ? [X0,X1] : ((! [X10] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0')))) & ! [X7,X8,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X7))),s('type.list.list'('type.labLang.sec'(X0)),X9)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X7))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X8),s('type.list.list'('type.labLang.line'(X0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X0)),X9))))))) & ! [X2,X3,X4,X5,X6] : (((p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X4)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),X5))),s('type.list.list'('type.labLang.sec'(X0)),X6))))))) | ((~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X4)))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X2)) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),X5))),s('type.list.list'('type.labLang.sec'(X0)),X6)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),'const.list.CONS_2'(s('type.labLang.line'(X0),X4),s('type.list.list'('type.labLang.line'(X0)),X5))))),s('type.list.list'('type.labLang.sec'(X0)),X6)))))))) & ? [X11,X12] : ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X11))),s('type.list.list'('type.labLang.sec'(X0)),X12)))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1] : ((! [X10] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0')))) & ! [X7,X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X7))),s('type.list.list'('type.labLang.sec'(X0)),X9)))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X7))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X8),s('type.list.list'('type.labLang.line'(X0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X0)),X9))))))) & ! [X2,X3,X4,X5,X6] : (((p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X4)))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),X5))),s('type.list.list'('type.labLang.sec'(X0)),X6))))))) & ((~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X4)))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X2)) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),X5))),s('type.list.list'('type.labLang.sec'(X0)),X6)))))))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),'const.list.CONS_2'(s('type.labLang.line'(X0),X4),s('type.list.list'('type.labLang.line'(X0)),X5))))),s('type.list.list'('type.labLang.sec'(X0)),X6)))))))) => ! [X11,X12] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X11))),s('type.list.list'('type.labLang.sec'(X0)),X12)))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1] : ((! [X10] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0')))) & ! [X7,X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X7))),s('type.list.list'('type.labLang.sec'(X0)),X9)))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X7))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X8),s('type.list.list'('type.labLang.line'(X0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X0)),X9))))))) & ! [X2,X3,X4,X5,X6] : (((p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X4)))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),X5))),s('type.list.list'('type.labLang.sec'(X0)),X6))))))) & ((~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X4)))) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),X5))),s('type.list.list'('type.labLang.sec'(X0)),X6)))))))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),'const.list.CONS_2'(s('type.labLang.line'(X0),X4),s('type.list.list'('type.labLang.line'(X0)),X5))))),s('type.list.list'('type.labLang.sec'(X0)),X6)))))))) => ! [X11,X12] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X11))),s('type.list.list'('type.labLang.sec'(X0)),X12)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((! [X8] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X6)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X6)),bool)),X7),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(X6)),'const.list.NIL_0')))) & ! [X8,X9,X10] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X6)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X6)),bool)),X7),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(X6)),X10)))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X6)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X6)),bool)),X7),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(X6)),'const.list.CONS_2'(s('type.labLang.sec'(X6),'const.labLang.Section_2'(s('type.num.num',X9),s('type.list.list'('type.labLang.line'(X6)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X6)),X10))))))) & ! [X8,X9,X11,X12,X10] : (((p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X6),X11)))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X6)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X6)),bool)),X7),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(X6)),'const.list.CONS_2'(s('type.labLang.sec'(X6),'const.labLang.Section_2'(s('type.num.num',X9),s('type.list.list'('type.labLang.line'(X6)),X12))),s('type.list.list'('type.labLang.sec'(X6)),X10))))))) & ((~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X6),X11)))) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X8)) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X6)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X6)),bool)),X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(X6)),'const.list.CONS_2'(s('type.labLang.sec'(X6),'const.labLang.Section_2'(s('type.num.num',X9),s('type.list.list'('type.labLang.line'(X6)),X12))),s('type.list.list'('type.labLang.sec'(X6)),X10)))))))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X6)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X6)),bool)),X7),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(X6)),'const.list.CONS_2'(s('type.labLang.sec'(X6),'const.labLang.Section_2'(s('type.num.num',X9),s('type.list.list'('type.labLang.line'(X6)),'const.list.CONS_2'(s('type.labLang.line'(X6),X11),s('type.list.list'('type.labLang.line'(X6)),X12))))),s('type.list.list'('type.labLang.sec'(X6)),X10)))))))) => ! [X13,X14] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X6)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X6)),bool)),X7),s('type.num.num',X13))),s('type.list.list'('type.labLang.sec'(X6)),X14)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((! [X8] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X6)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X6)),bool)),X7),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(X6)),'const.list.NIL_0')))) & ! [X8,X9,X10] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X6)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X6)),bool)),X7),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(X6)),X10)))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X6)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X6)),bool)),X7),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(X6)),'const.list.CONS_2'(s('type.labLang.sec'(X6),'const.labLang.Section_2'(s('type.num.num',X9),s('type.list.list'('type.labLang.line'(X6)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X6)),X10))))))) & ! [X8,X9,X11,X12,X10] : (((p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X6),X11)))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X6)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X6)),bool)),X7),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(X6)),'const.list.CONS_2'(s('type.labLang.sec'(X6),'const.labLang.Section_2'(s('type.num.num',X9),s('type.list.list'('type.labLang.line'(X6)),X12))),s('type.list.list'('type.labLang.sec'(X6)),X10))))))) & ((~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X6),X11)))) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X8)) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X6)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X6)),bool)),X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(X6)),'const.list.CONS_2'(s('type.labLang.sec'(X6),'const.labLang.Section_2'(s('type.num.num',X9),s('type.list.list'('type.labLang.line'(X6)),X12))),s('type.list.list'('type.labLang.sec'(X6)),X10)))))))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X6)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X6)),bool)),X7),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(X6)),'const.list.CONS_2'(s('type.labLang.sec'(X6),'const.labLang.Section_2'(s('type.num.num',X9),s('type.list.list'('type.labLang.line'(X6)),'const.list.CONS_2'(s('type.labLang.line'(X6),X11),s('type.list.list'('type.labLang.line'(X6)),X12))))),s('type.list.list'('type.labLang.sec'(X6)),X10)))))))) => ! [X13,X14] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X6)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X6)),bool)),X7),s('type.num.num',X13))),s('type.list.list'('type.labLang.sec'(X6)),X14)))))),
  file('thm.labSem.get_lab_after_ind','thm.labSem.get_lab_after_ind')).
fof(f5679,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5678,f124])).
fof(f124,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.labSem.get_lab_after_ind',aHL_FALSITY)).
fof(f5678,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(forward_demodulation,[],[f699,f4964])).
fof(f4964,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))) | $spl1),
  inference(resolution,[],[f162,f98])).
fof(f98,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X0)) & (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0)) | p(s(bool,'F_0'))))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X0)) & (s(bool,'F_0') != s(bool,X0) | (~p(s(bool,X0)) | p(s(bool,'F_0')))))),
  inference(nnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0] : ((~p(s(bool,X0)) | p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X0))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X0))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X19] : ((p(s(bool,X19)) => p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X19))),
  file('thm.labSem.get_lab_after_ind','thm.bool.IMP_F_EQ_F')).
fof(f162,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl1),
  inference(cnf_transformation,[],[f162_D])).
fof(f162_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f699,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f660,f85])).
fof(f85,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X4) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X6),s('type.list.list'('type.labLang.line'(sK0)),X7))))),s('type.list.list'('type.labLang.sec'(sK0)),X8)))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X6))))) )),
  inference(cnf_transformation,[],[f59])).
fof(f660,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f87,f92])).
fof(f92,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(X1,X0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',sK9(X1,X0)),s('type.list.list'('type.labLang.line'(X0)),sK11(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),sK12(X1,X0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(X1,X0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),sK10(X1,X0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK5(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),sK7(X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK4(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK4(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0')))) | (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK5(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),sK7(X1,X0))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK5(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',sK6(X1,X0)),s('type.list.list'('type.labLang.line'(X0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X0)),sK7(X1,X0)))))))) | ((~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),sK10(X1,X0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK8(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',sK9(X1,X0)),s('type.list.list'('type.labLang.line'(X0)),sK11(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),sK12(X1,X0)))))))) & (p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),sK10(X1,X0))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(X1,X0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(X1,X0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',sK9(X1,X0)),s('type.list.list'('type.labLang.line'(X0)),sK11(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),sK12(X1,X0)))))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK8(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',sK9(X1,X0)),s('type.list.list'('type.labLang.line'(X0)),'const.list.CONS_2'(s('type.labLang.line'(X0),sK10(X1,X0)),s('type.list.list'('type.labLang.line'(X0)),sK11(X1,X0)))))),s('type.list.list'('type.labLang.sec'(X0)),sK12(X1,X0)))))))) | ! [X2,X3] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5,sK6,sK7,sK8,sK9,sK10,sK11,sK12])],[f60])).
fof(f60,plain,(
  ! [X0,X1] : (? [X12] : ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0')))) | ? [X9,X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X9))),s('type.list.list'('type.labLang.sec'(X0)),X11)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X9))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X10),s('type.list.list'('type.labLang.line'(X0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X0)),X11))))))) | ? [X4,X5,X6,X7,X8] : ((~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X6)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(X0)),X7))),s('type.list.list'('type.labLang.sec'(X0)),X8))))))) & (p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(X0)),X7))),s('type.list.list'('type.labLang.sec'(X0)),X8))))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(X0)),'const.list.CONS_2'(s('type.labLang.line'(X0),X6),s('type.list.list'('type.labLang.line'(X0)),X7))))),s('type.list.list'('type.labLang.sec'(X0)),X8))))))) | ! [X2,X3] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),X3)))))),
  inference(rectify,[],[f52])).
fof(f52,plain,(
  ! [X0,X1] : (? [X10] : ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0')))) | ? [X7,X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X7))),s('type.list.list'('type.labLang.sec'(X0)),X9)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X7))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X8),s('type.list.list'('type.labLang.line'(X0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X0)),X9))))))) | ? [X2,X3,X4,X5,X6] : ((~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),X5))),s('type.list.list'('type.labLang.sec'(X0)),X6))))))) & (p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X4)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),X5))),s('type.list.list'('type.labLang.sec'(X0)),X6))))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),'const.list.CONS_2'(s('type.labLang.line'(X0),X4),s('type.list.list'('type.labLang.line'(X0)),X5))))),s('type.list.list'('type.labLang.sec'(X0)),X6))))))) | ! [X11,X12] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X11))),s('type.list.list'('type.labLang.sec'(X0)),X12)))))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ! [X0,X1] : ((? [X10] : ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0')))) | ? [X7,X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X7))),s('type.list.list'('type.labLang.sec'(X0)),X9)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X7))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X8),s('type.list.list'('type.labLang.line'(X0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X0)),X9))))))) | ? [X2,X3,X4,X5,X6] : (((~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),X5))),s('type.list.list'('type.labLang.sec'(X0)),X6))))))) & ((p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X4)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),X5))),s('type.list.list'('type.labLang.sec'(X0)),X6)))))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),'const.list.CONS_2'(s('type.labLang.line'(X0),X4),s('type.list.list'('type.labLang.line'(X0)),X5))))),s('type.list.list'('type.labLang.sec'(X0)),X6)))))))) | ! [X11,X12] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X11))),s('type.list.list'('type.labLang.sec'(X0)),X12)))))),
  inference(ennf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0,X1] : ((! [X10] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0')))) & ! [X7,X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X7))),s('type.list.list'('type.labLang.sec'(X0)),X9)))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X7))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X8),s('type.list.list'('type.labLang.line'(X0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X0)),X9))))))) & ! [X2,X3,X4,X5,X6] : (((p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X4)))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),X5))),s('type.list.list'('type.labLang.sec'(X0)),X6))))))) & ((~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X4)))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X2)) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),X5))),s('type.list.list'('type.labLang.sec'(X0)),X6)))))))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),'const.list.CONS_2'(s('type.labLang.line'(X0),X4),s('type.list.list'('type.labLang.line'(X0)),X5))))),s('type.list.list'('type.labLang.sec'(X0)),X6)))))))) => ! [X11,X12] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X11))),s('type.list.list'('type.labLang.sec'(X0)),X12)))))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ! [X0] : ! [X1] : ((! [X10] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0')))) & ! [X7,X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X7))),s('type.list.list'('type.labLang.sec'(X0)),X9)))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X7))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X8),s('type.list.list'('type.labLang.line'(X0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X0)),X9))))))) & ! [X2,X3,X4,X5,X6] : (((p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X4)))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),X5))),s('type.list.list'('type.labLang.sec'(X0)),X6))))))) & ((~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),X4)))) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),X5))),s('type.list.list'('type.labLang.sec'(X0)),X6)))))))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',X3),s('type.list.list'('type.labLang.line'(X0)),'const.list.CONS_2'(s('type.labLang.line'(X0),X4),s('type.list.list'('type.labLang.line'(X0)),X5))))),s('type.list.list'('type.labLang.sec'(X0)),X6)))))))) => ! [X11,X12] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X11))),s('type.list.list'('type.labLang.sec'(X0)),X12)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X15] : ! [X7] : ((! [X8] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X15)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X15)),bool)),X7),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(X15)),'const.list.NIL_0')))) & ! [X8,X9,X10] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X15)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X15)),bool)),X7),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(X15)),X10)))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X15)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X15)),bool)),X7),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(X15)),'const.list.CONS_2'(s('type.labLang.sec'(X15),'const.labLang.Section_2'(s('type.num.num',X9),s('type.list.list'('type.labLang.line'(X15)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X15)),X10))))))) & ! [X8,X9,X11,X12,X10] : (((p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X15),X11)))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X15)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X15)),bool)),X7),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(X15)),'const.list.CONS_2'(s('type.labLang.sec'(X15),'const.labLang.Section_2'(s('type.num.num',X9),s('type.list.list'('type.labLang.line'(X15)),X12))),s('type.list.list'('type.labLang.sec'(X15)),X10))))))) & ((~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X15),X11)))) & ~s('type.num.num','const.num.|48|_0') = s('type.num.num',X8)) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X15)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X15)),bool)),X7),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X8),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(X15)),'const.list.CONS_2'(s('type.labLang.sec'(X15),'const.labLang.Section_2'(s('type.num.num',X9),s('type.list.list'('type.labLang.line'(X15)),X12))),s('type.list.list'('type.labLang.sec'(X15)),X10)))))))) => p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X15)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X15)),bool)),X7),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(X15)),'const.list.CONS_2'(s('type.labLang.sec'(X15),'const.labLang.Section_2'(s('type.num.num',X9),s('type.list.list'('type.labLang.line'(X15)),'const.list.CONS_2'(s('type.labLang.line'(X15),X11),s('type.list.list'('type.labLang.line'(X15)),X12))))),s('type.list.list'('type.labLang.sec'(X15)),X10)))))))) => ! [X13,X14] : p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X15)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X15)),bool)),X7),s('type.num.num',X13))),s('type.list.list'('type.labLang.sec'(X15)),X14)))))),
  file('thm.labSem.get_lab_after_ind','thm.labSem.asm_fetch_aux_ind')).
fof(f87,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(sK0)),X7))),s('type.list.list'('type.labLang.sec'(sK0)),X8)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X6),s('type.list.list'('type.labLang.line'(sK0)),X7))))),s('type.list.list'('type.labLang.sec'(sK0)),X8)))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X6))))) )),
  inference(cnf_transformation,[],[f59])).
fof(f170,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl9),
  inference(cnf_transformation,[],[f170_D])).
fof(f170_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f5677,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X7),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(subsumption_resolution,[],[f5676,f116])).
fof(f116,plain,(
  ( ! [X0] : (p(s(bool,'T_0')) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X0))))),
  inference(flattening,[],[f72])).
fof(f72,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,X0)) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : ((~p(s(bool,X0)) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X19] : ((p(s(bool,X19)) => p(s(bool,X19))) <=> p(s(bool,'T_0')))),
  file('thm.labSem.get_lab_after_ind','thm.bool.IMP_CLAUSES|split|3')).
fof(f5676,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X7),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(forward_demodulation,[],[f702,f141])).
fof(f702,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X7),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f661,f85])).
fof(f661,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X7),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f87,f93])).
fof(f93,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(X1,X0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',sK9(X1,X0)),s('type.list.list'('type.labLang.line'(X0)),sK11(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),sK12(X1,X0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(X1,X0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),sK10(X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK5(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',sK6(X1,X0)),s('type.list.list'('type.labLang.line'(X0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X0)),sK7(X1,X0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK4(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f172,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | $spl10),
  inference(cnf_transformation,[],[f172_D])).
fof(f172_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f174,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | $spl12),
  inference(cnf_transformation,[],[f174_D])).
fof(f174_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f5675,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5674,f124])).
fof(f5674,plain,(
  ( ! [X10,X11] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl1),
  inference(forward_demodulation,[],[f503,f4964])).
fof(f503,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) )),
  inference(subsumption_resolution,[],[f445,f129])).
fof(f445,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) )),
  inference(superposition,[],[f92,f141])).
fof(f505,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(sK0)),X13)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(subsumption_resolution,[],[f446,f116])).
fof(f446,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(sK0)),X13)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(superposition,[],[f93,f141])).
fof(f5673,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl1),
  inference(subsumption_resolution,[],[f5672,f129])).
fof(f5672,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl1),
  inference(forward_demodulation,[],[f5671,f141])).
fof(f5671,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(subsumption_resolution,[],[f5670,f124])).
fof(f5670,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(forward_demodulation,[],[f590,f4964])).
fof(f590,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f546,f124])).
fof(f546,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(superposition,[],[f92,f187])).
fof(f187,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK2))),s('type.list.list'('type.labLang.sec'(sK0)),sK3)))),
  inference(resolution,[],[f89,f98])).
fof(f89,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK2))),s('type.list.list'('type.labLang.sec'(sK0)),sK3))))),
  inference(cnf_transformation,[],[f59])).
fof(f5669,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))),
  inference(subsumption_resolution,[],[f5668,f116])).
fof(f5668,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))),
  inference(forward_demodulation,[],[f593,f141])).
fof(f593,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f547,f124])).
fof(f547,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(superposition,[],[f93,f187])).
fof(f5667,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl1 | $spl15)),
  inference(subsumption_resolution,[],[f5666,f129])).
fof(f5666,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl1 | $spl15)),
  inference(forward_demodulation,[],[f5665,f141])).
fof(f5665,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl15)),
  inference(subsumption_resolution,[],[f5664,f124])).
fof(f5664,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl15)),
  inference(forward_demodulation,[],[f1105,f4964])).
fof(f1105,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl15),
  inference(resolution,[],[f176,f92])).
fof(f5663,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl15),
  inference(subsumption_resolution,[],[f5662,f116])).
fof(f5662,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl15),
  inference(forward_demodulation,[],[f1106,f141])).
fof(f1106,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl15),
  inference(resolution,[],[f176,f93])).
fof(f5661,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl1 | $spl15)),
  inference(subsumption_resolution,[],[f5660,f129])).
fof(f5660,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl1 | $spl15)),
  inference(forward_demodulation,[],[f5659,f141])).
fof(f5659,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl15)),
  inference(subsumption_resolution,[],[f5658,f124])).
fof(f5658,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl15)),
  inference(forward_demodulation,[],[f1397,f4964])).
fof(f1397,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl15),
  inference(subsumption_resolution,[],[f1347,f124])).
fof(f1347,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl15),
  inference(superposition,[],[f92,f1109])).
fof(f1109,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | $spl15),
  inference(resolution,[],[f176,f98])).
fof(f5657,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl15),
  inference(subsumption_resolution,[],[f5656,f116])).
fof(f5656,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl15),
  inference(forward_demodulation,[],[f1400,f141])).
fof(f1400,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl15),
  inference(subsumption_resolution,[],[f1348,f124])).
fof(f1348,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl15),
  inference(superposition,[],[f93,f1109])).
fof(f1714,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22)))))) ) | $spl22),
  inference(cnf_transformation,[],[f1714_D])).
fof(f1714_D,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22)))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f5655,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5654,f129])).
fof(f5654,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl1),
  inference(forward_demodulation,[],[f5653,f141])).
fof(f5653,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5652,f124])).
fof(f5652,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(forward_demodulation,[],[f1613,f4964])).
fof(f1613,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f354,f92])).
fof(f354,plain,(
  ( ! [X17,X15,X16] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X15))),s('type.list.list'('type.labLang.sec'(sK0)),X16)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X15))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X17),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X16)))))) )),
  inference(resolution,[],[f82,f106])).
fof(f82,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X9))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X10),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X9))),s('type.list.list'('type.labLang.sec'(sK0)),X11))))) )),
  inference(cnf_transformation,[],[f59])).
fof(f5651,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(subsumption_resolution,[],[f5650,f116])).
fof(f5650,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(forward_demodulation,[],[f1614,f141])).
fof(f1614,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f354,f93])).
fof(f4565,plain,(
  s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | $spl50),
  inference(cnf_transformation,[],[f4565_D])).
fof(f4565_D,plain,(
  s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f166,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | $spl5),
  inference(cnf_transformation,[],[f166_D])).
fof(f166_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f5639,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),X21)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(subsumption_resolution,[],[f5638,f116])).
fof(f5638,plain,(
  ( ! [X21,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),X21)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(forward_demodulation,[],[f4492,f141])).
fof(f4492,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),X21)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f618,f95])).
fof(f95,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK8(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',sK9(X1,X0)),s('type.list.list'('type.labLang.line'(X0)),'const.list.CONS_2'(s('type.labLang.line'(X0),sK10(X1,X0)),s('type.list.list'('type.labLang.line'(X0)),sK11(X1,X0)))))),s('type.list.list'('type.labLang.sec'(X0)),sK12(X1,X0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK5(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',sK6(X1,X0)),s('type.list.list'('type.labLang.line'(X0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X0)),sK7(X1,X0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK4(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f618,plain,(
  ( ! [X14,X17,X15,X18,X16] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X14))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X15),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X16),s('type.list.list'('type.labLang.line'(sK0)),X17))))),s('type.list.list'('type.labLang.sec'(sK0)),X18)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X14))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X15),s('type.list.list'('type.labLang.line'(sK0)),X17))),s('type.list.list'('type.labLang.sec'(sK0)),X18)))))) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X16)))) )),
  inference(resolution,[],[f84,f98])).
fof(f84,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X6)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X6),s('type.list.list'('type.labLang.line'(sK0)),X7))))),s('type.list.list'('type.labLang.sec'(sK0)),X8)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(sK0)),X7))),s('type.list.list'('type.labLang.sec'(sK0)),X8))))))) )),
  inference(cnf_transformation,[],[f59])).
fof(f3603,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | $spl49),
  inference(cnf_transformation,[],[f3603_D])).
fof(f3603_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) <=> ~$spl49),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl49])])).
fof(f5637,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl13),
  inference(subsumption_resolution,[],[f5636,f116])).
fof(f5636,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl13),
  inference(forward_demodulation,[],[f3597,f141])).
fof(f3597,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl13),
  inference(subsumption_resolution,[],[f3549,f173])).
fof(f173,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | $spl13),
  inference(cnf_transformation,[],[f173_D])).
fof(f173_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f3549,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl13),
  inference(superposition,[],[f173,f93])).
fof(f5635,plain,(
  ( ! [X19,X18] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X18))),s('type.list.list'('type.labLang.sec'(sK0)),X19))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5634,f116])).
fof(f5634,plain,(
  ( ! [X19,X18] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X18))),s('type.list.list'('type.labLang.sec'(sK0)),X19))))) ) | $spl1),
  inference(forward_demodulation,[],[f5633,f141])).
fof(f5633,plain,(
  ( ! [X19,X18] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X18))),s('type.list.list'('type.labLang.sec'(sK0)),X19)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5632,f99])).
fof(f99,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | ~p(s(bool,'F_0'))) )),
  inference(cnf_transformation,[],[f64])).
fof(f5632,plain,(
  ( ! [X19,X18] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X18))),s('type.list.list'('type.labLang.sec'(sK0)),X19)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(forward_demodulation,[],[f4491,f4964])).
fof(f4491,plain,(
  ( ! [X19,X18] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X18))),s('type.list.list'('type.labLang.sec'(sK0)),X19)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f618,f94])).
fof(f94,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK8(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',sK9(X1,X0)),s('type.list.list'('type.labLang.line'(X0)),'const.list.CONS_2'(s('type.labLang.line'(X0),sK10(X1,X0)),s('type.list.list'('type.labLang.line'(X0)),sK11(X1,X0)))))),s('type.list.list'('type.labLang.sec'(X0)),sK12(X1,X0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK5(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),sK7(X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK4(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f5631,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl1 | $spl13)),
  inference(subsumption_resolution,[],[f5630,f116])).
fof(f5630,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl1 | $spl13)),
  inference(forward_demodulation,[],[f5629,f141])).
fof(f5629,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl13)),
  inference(subsumption_resolution,[],[f5628,f124])).
fof(f5628,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl13)),
  inference(forward_demodulation,[],[f3593,f4964])).
fof(f3593,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl13),
  inference(subsumption_resolution,[],[f3548,f173])).
fof(f3548,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl13),
  inference(superposition,[],[f173,f92])).
fof(f5627,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl1),
  inference(subsumption_resolution,[],[f5626,f116])).
fof(f5626,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl1),
  inference(forward_demodulation,[],[f5393,f141])).
fof(f5393,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(subsumption_resolution,[],[f5058,f124])).
fof(f5058,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(superposition,[],[f93,f4964])).
fof(f5625,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl1),
  inference(subsumption_resolution,[],[f5624,f129])).
fof(f5624,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl1),
  inference(forward_demodulation,[],[f5623,f141])).
fof(f5623,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(subsumption_resolution,[],[f5622,f124])).
fof(f5622,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(forward_demodulation,[],[f5398,f4964])).
fof(f5398,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(subsumption_resolution,[],[f5057,f124])).
fof(f5057,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(superposition,[],[f92,f4964])).
fof(f165,plain,(
  ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl3),
  inference(cnf_transformation,[],[f165_D])).
fof(f165_D,plain,(
  ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f167,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | $spl4),
  inference(cnf_transformation,[],[f167_D])).
fof(f167_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f5621,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl1),
  inference(subsumption_resolution,[],[f5620,f116])).
fof(f5620,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl1),
  inference(forward_demodulation,[],[f5101,f141])).
fof(f5101,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(subsumption_resolution,[],[f5056,f124])).
fof(f5056,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(superposition,[],[f91,f4964])).
fof(f91,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK8(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',sK9(X1,X0)),s('type.list.list'('type.labLang.line'(X0)),sK11(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),sK12(X1,X0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),sK10(X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK5(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',sK6(X1,X0)),s('type.list.list'('type.labLang.line'(X0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(X0)),sK7(X1,X0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK4(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f5619,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl1),
  inference(subsumption_resolution,[],[f5618,f116])).
fof(f5618,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl1),
  inference(forward_demodulation,[],[f5617,f141])).
fof(f5617,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(subsumption_resolution,[],[f5616,f124])).
fof(f5616,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(forward_demodulation,[],[f5098,f4964])).
fof(f5098,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(subsumption_resolution,[],[f5055,f124])).
fof(f5055,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(superposition,[],[f90,f4964])).
fof(f90,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(X0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK8(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.CONS_2'(s('type.labLang.sec'(X0),'const.labLang.Section_2'(s('type.num.num',sK9(X1,X0)),s('type.list.list'('type.labLang.line'(X0)),sK11(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),sK12(X1,X0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(X0),sK10(X1,X0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK5(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),sK7(X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(X0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(X0)),bool)),X1),s('type.num.num',sK4(X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f5615,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5614,f129])).
fof(f5614,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl1),
  inference(forward_demodulation,[],[f5409,f141])).
fof(f5409,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5053,f124])).
fof(f5053,plain,(
  ( ! [X4,X3] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(superposition,[],[f92,f4964])).
fof(f5613,plain,(
  ( ! [X2,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X1))),s('type.list.list'('type.labLang.sec'(sK0)),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5612,f116])).
fof(f5612,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X1))),s('type.list.list'('type.labLang.sec'(sK0)),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl1),
  inference(forward_demodulation,[],[f5091,f141])).
fof(f5091,plain,(
  ( ! [X2,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X1))),s('type.list.list'('type.labLang.sec'(sK0)),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5052,f124])).
fof(f5052,plain,(
  ( ! [X2,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X1))),s('type.list.list'('type.labLang.sec'(sK0)),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(superposition,[],[f90,f4964])).
fof(f5611,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl1),
  inference(subsumption_resolution,[],[f5610,f116])).
fof(f5610,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl1),
  inference(forward_demodulation,[],[f4961,f141])).
fof(f4961,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(resolution,[],[f162,f93])).
fof(f5609,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl1),
  inference(subsumption_resolution,[],[f5608,f129])).
fof(f5608,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl1),
  inference(forward_demodulation,[],[f5607,f141])).
fof(f5607,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(subsumption_resolution,[],[f5606,f124])).
fof(f5606,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(forward_demodulation,[],[f4960,f4964])).
fof(f4960,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(resolution,[],[f162,f92])).
fof(f5605,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl1),
  inference(subsumption_resolution,[],[f5604,f116])).
fof(f5604,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl1),
  inference(forward_demodulation,[],[f4959,f141])).
fof(f4959,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(resolution,[],[f162,f91])).
fof(f5603,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl1),
  inference(subsumption_resolution,[],[f5602,f116])).
fof(f5602,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl1),
  inference(forward_demodulation,[],[f4990,f141])).
fof(f4990,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(subsumption_resolution,[],[f4958,f162])).
fof(f4958,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(resolution,[],[f162,f90])).
fof(f5601,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5600,f129])).
fof(f5600,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl1),
  inference(forward_demodulation,[],[f4956,f141])).
fof(f4956,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(resolution,[],[f162,f92])).
fof(f5599,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5598,f116])).
fof(f5598,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl1),
  inference(forward_demodulation,[],[f4955,f141])).
fof(f4955,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(resolution,[],[f162,f90])).
fof(f5597,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl1 | $spl13)),
  inference(subsumption_resolution,[],[f5596,f116])).
fof(f5596,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl1 | $spl13)),
  inference(forward_demodulation,[],[f5595,f141])).
fof(f5595,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl13)),
  inference(subsumption_resolution,[],[f5594,f124])).
fof(f5594,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl13)),
  inference(forward_demodulation,[],[f3532,f4964])).
fof(f3532,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl13),
  inference(resolution,[],[f173,f90])).
fof(f5593,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl1 | $spl13)),
  inference(subsumption_resolution,[],[f5592,f129])).
fof(f5592,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl1 | $spl13)),
  inference(forward_demodulation,[],[f5591,f141])).
fof(f5591,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl13)),
  inference(subsumption_resolution,[],[f5590,f124])).
fof(f5590,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl13)),
  inference(forward_demodulation,[],[f3576,f4964])).
fof(f3576,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl13),
  inference(subsumption_resolution,[],[f3534,f173])).
fof(f3534,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl13),
  inference(resolution,[],[f173,f92])).
fof(f5589,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl1 | $spl13)),
  inference(subsumption_resolution,[],[f5588,f129])).
fof(f5588,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl1 | $spl13)),
  inference(forward_demodulation,[],[f5587,f141])).
fof(f5587,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl13)),
  inference(subsumption_resolution,[],[f5586,f124])).
fof(f5586,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl13)),
  inference(forward_demodulation,[],[f3530,f4964])).
fof(f3530,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl13),
  inference(resolution,[],[f173,f92])).
fof(f5585,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl1 | $spl13)),
  inference(subsumption_resolution,[],[f5584,f124])).
fof(f5584,plain,(
  ( ! [X10,X11] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl1 | $spl13)),
  inference(forward_demodulation,[],[f4604,f4964])).
fof(f4604,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl13),
  inference(subsumption_resolution,[],[f503,f173])).
fof(f5583,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl1 | $spl13)),
  inference(subsumption_resolution,[],[f5582,f129])).
fof(f5582,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl1 | $spl13)),
  inference(forward_demodulation,[],[f5581,f141])).
fof(f5581,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl13)),
  inference(subsumption_resolution,[],[f5580,f124])).
fof(f5580,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl13)),
  inference(forward_demodulation,[],[f4609,f4964])).
fof(f4609,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl13),
  inference(subsumption_resolution,[],[f590,f173])).
fof(f5579,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl1 | $spl13 | $spl15)),
  inference(subsumption_resolution,[],[f5578,f129])).
fof(f5578,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl1 | $spl13 | $spl15)),
  inference(forward_demodulation,[],[f5577,f141])).
fof(f5577,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl13 | $spl15)),
  inference(subsumption_resolution,[],[f5576,f124])).
fof(f5576,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl13 | $spl15)),
  inference(forward_demodulation,[],[f4617,f4964])).
fof(f4617,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl13 | $spl15)),
  inference(subsumption_resolution,[],[f1105,f173])).
fof(f5575,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl1 | $spl13 | $spl15)),
  inference(subsumption_resolution,[],[f5574,f129])).
fof(f5574,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl1 | $spl13 | $spl15)),
  inference(forward_demodulation,[],[f5573,f141])).
fof(f5573,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl13 | $spl15)),
  inference(subsumption_resolution,[],[f5572,f124])).
fof(f5572,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl13 | $spl15)),
  inference(forward_demodulation,[],[f4625,f4964])).
fof(f4625,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl13 | $spl15)),
  inference(subsumption_resolution,[],[f1397,f173])).
fof(f5571,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl1 | $spl13)),
  inference(subsumption_resolution,[],[f5570,f129])).
fof(f5570,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl1 | $spl13)),
  inference(forward_demodulation,[],[f5569,f141])).
fof(f5569,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl13)),
  inference(subsumption_resolution,[],[f5568,f124])).
fof(f5568,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl13)),
  inference(forward_demodulation,[],[f4633,f4964])).
fof(f4633,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl13),
  inference(subsumption_resolution,[],[f1613,f173])).
fof(f1708,plain,(
  ( ! [X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))))) ) | $spl20),
  inference(cnf_transformation,[],[f1708_D])).
fof(f1708_D,plain,(
  ( ! [X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f5567,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5566,f129])).
fof(f5566,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl1),
  inference(forward_demodulation,[],[f5565,f141])).
fof(f5565,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5564,f124])).
fof(f5564,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(forward_demodulation,[],[f1617,f4964])).
fof(f1617,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f354,f92])).
fof(f5563,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl15),
  inference(subsumption_resolution,[],[f5562,f116])).
fof(f5562,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl15),
  inference(forward_demodulation,[],[f1457,f141])).
fof(f1457,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl15),
  inference(subsumption_resolution,[],[f1439,f1059])).
fof(f1059,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X12)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X13),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X12),s('type.list.list'('type.labLang.line'(sK0)),X14))))),s('type.list.list'('type.labLang.sec'(sK0)),X15)))))) )),
  inference(resolution,[],[f275,f106])).
fof(f275,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X0),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X1),s('type.list.list'('type.labLang.line'(sK0)),X2))))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X1))))) )),
  inference(equality_resolution,[],[f85])).
fof(f1439,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl15),
  inference(superposition,[],[f1112,f93])).
fof(f1112,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | $spl15),
  inference(resolution,[],[f176,f105])).
fof(f105,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f67])).
fof(f5561,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl15),
  inference(subsumption_resolution,[],[f5560,f116])).
fof(f5560,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl15),
  inference(forward_demodulation,[],[f1380,f141])).
fof(f1380,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl15),
  inference(subsumption_resolution,[],[f1337,f1057])).
fof(f1057,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X4)))) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),X6))))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))))) )),
  inference(resolution,[],[f275,f101])).
fof(f101,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X19] : (s(bool,'F_0') = s(bool,X19) <=> ~p(s(bool,X19)))),
  file('thm.labSem.get_lab_after_ind','thm.bool.EQ_CLAUSES|split|2')).
fof(f1337,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl15),
  inference(superposition,[],[f1109,f93])).
fof(f5559,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl15),
  inference(subsumption_resolution,[],[f5558,f116])).
fof(f5558,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl15),
  inference(forward_demodulation,[],[f1140,f141])).
fof(f1140,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl15),
  inference(subsumption_resolution,[],[f1120,f275])).
fof(f1120,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl15),
  inference(superposition,[],[f176,f93])).
fof(f5557,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl13),
  inference(subsumption_resolution,[],[f5556,f116])).
fof(f5556,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl13),
  inference(forward_demodulation,[],[f3533,f141])).
fof(f3533,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl13),
  inference(resolution,[],[f173,f91])).
fof(f5555,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl13),
  inference(subsumption_resolution,[],[f5554,f116])).
fof(f5554,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl13),
  inference(forward_demodulation,[],[f3580,f141])).
fof(f3580,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl13),
  inference(subsumption_resolution,[],[f3535,f173])).
fof(f3535,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl13),
  inference(resolution,[],[f173,f93])).
fof(f5553,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl13),
  inference(subsumption_resolution,[],[f5552,f116])).
fof(f5552,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl13),
  inference(forward_demodulation,[],[f3531,f141])).
fof(f3531,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl13),
  inference(resolution,[],[f173,f93])).
fof(f4606,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(sK0)),X13)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl13),
  inference(subsumption_resolution,[],[f505,f173])).
fof(f5551,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl13),
  inference(subsumption_resolution,[],[f5550,f116])).
fof(f5550,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl13),
  inference(forward_demodulation,[],[f4612,f141])).
fof(f4612,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl13),
  inference(subsumption_resolution,[],[f593,f173])).
fof(f5549,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl13 | $spl15)),
  inference(subsumption_resolution,[],[f5548,f116])).
fof(f5548,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl13 | $spl15)),
  inference(forward_demodulation,[],[f4620,f141])).
fof(f4620,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl13 | $spl15)),
  inference(subsumption_resolution,[],[f1106,f173])).
fof(f5547,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl13 | $spl15)),
  inference(subsumption_resolution,[],[f5546,f116])).
fof(f5546,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl13 | $spl15)),
  inference(forward_demodulation,[],[f4628,f141])).
fof(f4628,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl13 | $spl15)),
  inference(subsumption_resolution,[],[f1400,f173])).
fof(f5545,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl13),
  inference(subsumption_resolution,[],[f5544,f116])).
fof(f5544,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl13),
  inference(forward_demodulation,[],[f4636,f141])).
fof(f4636,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl13),
  inference(subsumption_resolution,[],[f1614,f173])).
fof(f5543,plain,(
  ( ! [X37,X35,X36] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(subsumption_resolution,[],[f5542,f116])).
fof(f5542,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(forward_demodulation,[],[f1618,f141])).
fof(f1618,plain,(
  ( ! [X37,X35,X36] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f354,f93])).
fof(f5541,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5540,f129])).
fof(f5540,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f5539,f141])).
fof(f5539,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5538,f124])).
fof(f5538,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f5537,f4964])).
fof(f5537,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl50),
  inference(subsumption_resolution,[],[f4795,f124])).
fof(f4795,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl50),
  inference(superposition,[],[f92,f4565])).
fof(f5536,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl50),
  inference(subsumption_resolution,[],[f5535,f116])).
fof(f5535,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl50),
  inference(forward_demodulation,[],[f5534,f141])).
fof(f5534,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl50),
  inference(subsumption_resolution,[],[f4796,f124])).
fof(f4796,plain,(
  ( ! [X6,X7] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl50),
  inference(superposition,[],[f93,f4565])).
fof(f5533,plain,(
  ( ! [X37,X35,X36] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl50),
  inference(subsumption_resolution,[],[f5532,f116])).
fof(f5532,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl50),
  inference(forward_demodulation,[],[f5531,f141])).
fof(f5531,plain,(
  ( ! [X37,X35,X36] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl50),
  inference(subsumption_resolution,[],[f5530,f124])).
fof(f5530,plain,(
  ( ! [X37,X35,X36] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl50),
  inference(forward_demodulation,[],[f1618,f4565])).
fof(f5529,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5528,f116])).
fof(f5528,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl13 | $spl50)),
  inference(forward_demodulation,[],[f5527,f141])).
fof(f5527,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5526,f124])).
fof(f5526,plain,(
  ( ! [X24,X23,X25] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl13 | $spl50)),
  inference(forward_demodulation,[],[f4636,f4565])).
fof(f5525,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl13 | $spl15 | $spl50)),
  inference(subsumption_resolution,[],[f5524,f116])).
fof(f5524,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl13 | $spl15 | $spl50)),
  inference(forward_demodulation,[],[f5523,f141])).
fof(f5523,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl13 | $spl15 | $spl50)),
  inference(subsumption_resolution,[],[f5522,f124])).
fof(f5522,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl13 | $spl15 | $spl50)),
  inference(forward_demodulation,[],[f4628,f4565])).
fof(f5521,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl13 | $spl15 | $spl50)),
  inference(subsumption_resolution,[],[f5520,f116])).
fof(f5520,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl13 | $spl15 | $spl50)),
  inference(forward_demodulation,[],[f5519,f141])).
fof(f5519,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl13 | $spl15 | $spl50)),
  inference(subsumption_resolution,[],[f5518,f124])).
fof(f5518,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl13 | $spl15 | $spl50)),
  inference(forward_demodulation,[],[f4620,f4565])).
fof(f5517,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5516,f116])).
fof(f5516,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl13 | $spl50)),
  inference(forward_demodulation,[],[f5515,f141])).
fof(f5515,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5514,f124])).
fof(f5514,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl13 | $spl50)),
  inference(forward_demodulation,[],[f4612,f4565])).
fof(f5513,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(sK0)),X13)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5512,f124])).
fof(f5512,plain,(
  ( ! [X12,X13] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(sK0)),X13)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl13 | $spl50)),
  inference(forward_demodulation,[],[f4606,f4565])).
fof(f5511,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5510,f116])).
fof(f5510,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl13 | $spl50)),
  inference(forward_demodulation,[],[f5509,f141])).
fof(f5509,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5508,f124])).
fof(f5508,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl13 | $spl50)),
  inference(forward_demodulation,[],[f3531,f4565])).
fof(f5507,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5506,f116])).
fof(f5506,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl13 | $spl50)),
  inference(forward_demodulation,[],[f5505,f141])).
fof(f5505,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5504,f124])).
fof(f5504,plain,(
  p(s(bool,'F_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl13 | $spl50)),
  inference(forward_demodulation,[],[f3580,f4565])).
fof(f176,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | $spl15),
  inference(cnf_transformation,[],[f176_D])).
fof(f176_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f5503,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl13),
  inference(subsumption_resolution,[],[f5502,f116])).
fof(f5502,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl13),
  inference(forward_demodulation,[],[f3537,f141])).
fof(f3537,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl13),
  inference(resolution,[],[f173,f95])).
fof(f5500,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl15 | $spl50)),
  inference(subsumption_resolution,[],[f5499,f116])).
fof(f5499,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl15 | $spl50)),
  inference(forward_demodulation,[],[f5498,f141])).
fof(f5498,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl15 | $spl50)),
  inference(subsumption_resolution,[],[f5497,f124])).
fof(f5497,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl15 | $spl50)),
  inference(forward_demodulation,[],[f1140,f4565])).
fof(f5496,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl15 | $spl50)),
  inference(subsumption_resolution,[],[f5495,f116])).
fof(f5495,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl15 | $spl50)),
  inference(forward_demodulation,[],[f5494,f141])).
fof(f5494,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl15 | $spl50)),
  inference(subsumption_resolution,[],[f5493,f124])).
fof(f5493,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl15 | $spl50)),
  inference(forward_demodulation,[],[f1380,f4565])).
fof(f5492,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl15 | $spl50)),
  inference(subsumption_resolution,[],[f5491,f116])).
fof(f5491,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl15 | $spl50)),
  inference(forward_demodulation,[],[f5490,f141])).
fof(f5490,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl15 | $spl50)),
  inference(subsumption_resolution,[],[f5489,f124])).
fof(f5489,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl15 | $spl50)),
  inference(forward_demodulation,[],[f1457,f4565])).
fof(f5488,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5487,f129])).
fof(f5487,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f5486,f141])).
fof(f5486,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5485,f124])).
fof(f5485,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f5484,f4964])).
fof(f5484,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl50),
  inference(subsumption_resolution,[],[f5483,f124])).
fof(f5483,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl50),
  inference(forward_demodulation,[],[f1617,f4565])).
fof(f5482,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl1 | $spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5481,f129])).
fof(f5481,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl1 | $spl13 | $spl50)),
  inference(forward_demodulation,[],[f5480,f141])).
fof(f5480,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5479,f124])).
fof(f5479,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl13 | $spl50)),
  inference(forward_demodulation,[],[f5478,f4964])).
fof(f5478,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5477,f124])).
fof(f5477,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl13 | $spl50)),
  inference(forward_demodulation,[],[f4633,f4565])).
fof(f5458,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl1 | $spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5457,f124])).
fof(f5457,plain,(
  ( ! [X10,X11] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl1 | $spl13 | $spl50)),
  inference(forward_demodulation,[],[f5456,f4964])).
fof(f5456,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | ($spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5455,f124])).
fof(f5455,plain,(
  ( ! [X10,X11] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | ($spl13 | $spl50)),
  inference(forward_demodulation,[],[f4604,f4565])).
fof(f5454,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl1 | $spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5453,f129])).
fof(f5453,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl1 | $spl13 | $spl50)),
  inference(forward_demodulation,[],[f5452,f141])).
fof(f5452,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5451,f124])).
fof(f5451,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl13 | $spl50)),
  inference(forward_demodulation,[],[f5450,f4964])).
fof(f5450,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl13 | $spl50)),
  inference(subsumption_resolution,[],[f5449,f124])).
fof(f5449,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl13 | $spl50)),
  inference(forward_demodulation,[],[f3530,f4565])).
fof(f5436,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5435,f129])).
fof(f5435,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f5434,f141])).
fof(f5434,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5433,f124])).
fof(f5433,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f4956,f4565])).
fof(f5432,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5431,f116])).
fof(f5431,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl1),
  inference(forward_demodulation,[],[f4957,f141])).
fof(f4957,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(resolution,[],[f162,f94])).
fof(f5428,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5427,f129])).
fof(f5427,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f5426,f141])).
fof(f5426,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5425,f124])).
fof(f5425,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f5424,f4964])).
fof(f5424,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5423,f124])).
fof(f5423,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f4960,f4565])).
fof(f5422,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5421,f116])).
fof(f5421,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f5420,f141])).
fof(f5420,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5419,f124])).
fof(f5419,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f4961,f4565])).
fof(f5416,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl1),
  inference(subsumption_resolution,[],[f5415,f116])).
fof(f5415,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl1),
  inference(forward_demodulation,[],[f4963,f141])).
fof(f4963,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(resolution,[],[f162,f95])).
fof(f5413,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5412,f129])).
fof(f5412,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f5411,f141])).
fof(f5411,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5410,f124])).
fof(f5410,plain,(
  ( ! [X4,X3] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f5409,f4565])).
fof(f5408,plain,(
  ( ! [X6,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5407,f116])).
fof(f5407,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl1),
  inference(forward_demodulation,[],[f5094,f141])).
fof(f5094,plain,(
  ( ! [X6,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(subsumption_resolution,[],[f5054,f124])).
fof(f5054,plain,(
  ( ! [X6,X5] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl1),
  inference(superposition,[],[f94,f4964])).
fof(f5404,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5403,f129])).
fof(f5403,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f5402,f141])).
fof(f5402,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5401,f124])).
fof(f5401,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f5400,f4964])).
fof(f5400,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5399,f124])).
fof(f5399,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f5398,f4565])).
fof(f5397,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5396,f116])).
fof(f5396,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f5395,f141])).
fof(f5395,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl50)),
  inference(subsumption_resolution,[],[f5394,f124])).
fof(f5394,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl50)),
  inference(forward_demodulation,[],[f5393,f4565])).
fof(f5388,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl1),
  inference(subsumption_resolution,[],[f5387,f116])).
fof(f5387,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl1),
  inference(forward_demodulation,[],[f5110,f141])).
fof(f5110,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(subsumption_resolution,[],[f5060,f124])).
fof(f5060,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl1),
  inference(superposition,[],[f95,f4964])).
fof(f5383,plain,(
  $false | ($spl45 | $spl50)),
  inference(subsumption_resolution,[],[f5382,f129])).
fof(f5382,plain,(
  ~p(s(bool,'T_0')) | ($spl45 | $spl50)),
  inference(forward_demodulation,[],[f1972,f4835])).
fof(f4835,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X14),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),X15))))),s('type.list.list'('type.labLang.sec'(sK0)),X16)))))) ) | $spl50),
  inference(subsumption_resolution,[],[f4799,f124])).
fof(f4799,plain,(
  ( ! [X14,X15,X16] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X14),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),X15))))),s('type.list.list'('type.labLang.sec'(sK0)),X16)))))) ) | $spl50),
  inference(superposition,[],[f1059,f4565])).
fof(f1972,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | $spl45),
  inference(cnf_transformation,[],[f1972_D])).
fof(f1972_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f5113,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl1 | $spl10)),
  inference(subsumption_resolution,[],[f5112,f116])).
fof(f5112,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl1 | $spl10)),
  inference(forward_demodulation,[],[f5111,f141])).
fof(f5111,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl10)),
  inference(forward_demodulation,[],[f5110,f172])).
fof(f5097,plain,(
  ( ! [X6,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6))))) ) | ($spl1 | $spl10)),
  inference(subsumption_resolution,[],[f5096,f116])).
fof(f5096,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6))))) ) | ($spl1 | $spl10)),
  inference(forward_demodulation,[],[f5095,f141])).
fof(f5095,plain,(
  ( ! [X6,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl10)),
  inference(forward_demodulation,[],[f5094,f172])).
fof(f5041,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl10 | $spl13)),
  inference(subsumption_resolution,[],[f5040,f116])).
fof(f5040,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl10 | $spl13)),
  inference(forward_demodulation,[],[f5039,f141])).
fof(f5039,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl10 | $spl13)),
  inference(forward_demodulation,[],[f5008,f172])).
fof(f5008,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl10 | $spl13)),
  inference(resolution,[],[f4654,f95])).
fof(f4654,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ($spl10 | $spl13)),
  inference(backward_demodulation,[],[f172,f173])).
fof(f5001,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl1 | $spl10)),
  inference(subsumption_resolution,[],[f5000,f116])).
fof(f5000,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl1 | $spl10)),
  inference(forward_demodulation,[],[f4999,f141])).
fof(f4999,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl1 | $spl10)),
  inference(forward_demodulation,[],[f4963,f172])).
fof(f4989,plain,(
  ( ! [X4,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5))))) ) | ($spl1 | $spl10)),
  inference(subsumption_resolution,[],[f4988,f116])).
fof(f4988,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5))))) ) | ($spl1 | $spl10)),
  inference(forward_demodulation,[],[f4987,f141])).
fof(f4987,plain,(
  ( ! [X4,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl1 | $spl10)),
  inference(forward_demodulation,[],[f4957,f172])).
fof(f163,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl0),
  inference(cnf_transformation,[],[f163_D])).
fof(f163_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f4937,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ($spl10 | $spl13)),
  inference(subsumption_resolution,[],[f4936,f116])).
fof(f4936,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ($spl10 | $spl13)),
  inference(forward_demodulation,[],[f4935,f141])).
fof(f4935,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl10 | $spl13)),
  inference(forward_demodulation,[],[f3536,f172])).
fof(f3536,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl13),
  inference(resolution,[],[f173,f94])).
fof(f4934,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | ($spl13 | $spl50)),
  inference(subsumption_resolution,[],[f4933,f116])).
fof(f4933,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | ($spl13 | $spl50)),
  inference(forward_demodulation,[],[f4932,f141])).
fof(f4932,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl13 | $spl50)),
  inference(subsumption_resolution,[],[f4931,f124])).
fof(f4931,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl13 | $spl50)),
  inference(forward_demodulation,[],[f3593,f4565])).
fof(f4929,plain,(
  ( ! [X8,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl10),
  inference(subsumption_resolution,[],[f4928,f116])).
fof(f4928,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl10),
  inference(forward_demodulation,[],[f4660,f141])).
fof(f4660,plain,(
  ( ! [X8,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl10),
  inference(superposition,[],[f94,f172])).
fof(f4927,plain,(
  ( ! [X10,X11] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl10),
  inference(subsumption_resolution,[],[f4926,f116])).
fof(f4926,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl10),
  inference(forward_demodulation,[],[f4661,f141])).
fof(f4661,plain,(
  ( ! [X10,X11] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl10),
  inference(superposition,[],[f95,f172])).
fof(f4925,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl13 | $spl50)),
  inference(subsumption_resolution,[],[f4924,f116])).
fof(f4924,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl13 | $spl50)),
  inference(forward_demodulation,[],[f4865,f141])).
fof(f4865,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl13 | $spl50)),
  inference(subsumption_resolution,[],[f4864,f124])).
fof(f4864,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl13 | $spl50)),
  inference(forward_demodulation,[],[f3597,f4565])).
fof(f4923,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl10 | $spl13)),
  inference(subsumption_resolution,[],[f4922,f116])).
fof(f4922,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ($spl10 | $spl13)),
  inference(forward_demodulation,[],[f4870,f141])).
fof(f4870,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl10 | $spl13)),
  inference(forward_demodulation,[],[f3537,f172])).
fof(f3602,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | $spl48),
  inference(cnf_transformation,[],[f3602_D])).
fof(f3602_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f4921,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl10 | $spl15 | $spl50)),
  inference(subsumption_resolution,[],[f4920,f116])).
fof(f4920,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl10 | $spl15 | $spl50)),
  inference(forward_demodulation,[],[f4879,f141])).
fof(f4879,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl10 | $spl15 | $spl50)),
  inference(subsumption_resolution,[],[f4878,f124])).
fof(f4878,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl10 | $spl15 | $spl50)),
  inference(forward_demodulation,[],[f4877,f4565])).
fof(f4877,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl10 | $spl15)),
  inference(forward_demodulation,[],[f1140,f172])).
fof(f4919,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl10 | $spl15 | $spl50)),
  inference(subsumption_resolution,[],[f4918,f116])).
fof(f4918,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl10 | $spl15 | $spl50)),
  inference(forward_demodulation,[],[f4886,f141])).
fof(f4886,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl10 | $spl15 | $spl50)),
  inference(subsumption_resolution,[],[f4885,f124])).
fof(f4885,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl10 | $spl15 | $spl50)),
  inference(forward_demodulation,[],[f4884,f4565])).
fof(f4884,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl10 | $spl15)),
  inference(forward_demodulation,[],[f1380,f172])).
fof(f4917,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl10 | $spl15 | $spl50)),
  inference(subsumption_resolution,[],[f4916,f116])).
fof(f4916,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl10 | $spl15 | $spl50)),
  inference(forward_demodulation,[],[f4893,f141])).
fof(f4893,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl10 | $spl15 | $spl50)),
  inference(subsumption_resolution,[],[f4892,f124])).
fof(f4892,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl10 | $spl15 | $spl50)),
  inference(forward_demodulation,[],[f4891,f4565])).
fof(f4891,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl10 | $spl15)),
  inference(forward_demodulation,[],[f1457,f172])).
fof(f4915,plain,(
  $false | ($spl0 | $spl9)),
  inference(subsumption_resolution,[],[f4914,f129])).
fof(f4914,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl9)),
  inference(forward_demodulation,[],[f4913,f3403])).
fof(f3403,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))) | $spl0),
  inference(resolution,[],[f163,f106])).
fof(f4913,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl9),
  inference(subsumption_resolution,[],[f4850,f124])).
fof(f4850,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl9),
  inference(trivial_inequality_removal,[],[f814])).
fof(f814,plain,(
  s(bool,'F_0') != s(bool,'F_0') | p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl9),
  inference(superposition,[],[f100,f755])).
fof(f755,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))) | $spl9),
  inference(resolution,[],[f709,f98])).
fof(f709,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl9),
  inference(resolution,[],[f170,f82])).
fof(f100,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | ~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f64])).
fof(f4912,plain,(
  $false | ($spl0 | $spl9)),
  inference(subsumption_resolution,[],[f4911,f421])).
fof(f421,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(backward_demodulation,[],[f141,f139])).
fof(f139,plain,(
  ( ! [X13] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X13))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) )),
  inference(resolution,[],[f81,f101])).
fof(f4911,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl0 | $spl9)),
  inference(forward_demodulation,[],[f755,f3403])).
fof(f4910,plain,(
  $false | ($spl0 | $spl9)),
  inference(subsumption_resolution,[],[f4909,f129])).
fof(f4909,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl9)),
  inference(forward_demodulation,[],[f4851,f3403])).
fof(f4851,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl9),
  inference(trivial_inequality_removal,[],[f816])).
fof(f816,plain,(
  s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl9),
  inference(superposition,[],[f101,f755])).
fof(f4908,plain,(
  $false | ($spl0 | $spl9)),
  inference(subsumption_resolution,[],[f4907,f129])).
fof(f4907,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl9)),
  inference(forward_demodulation,[],[f4852,f3403])).
fof(f4852,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl9),
  inference(trivial_inequality_removal,[],[f942])).
fof(f942,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl9),
  inference(superposition,[],[f758,f106])).
fof(f758,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))) | $spl9),
  inference(resolution,[],[f709,f105])).
fof(f4906,plain,(
  $false | ($spl0 | $spl9)),
  inference(subsumption_resolution,[],[f758,f3403])).
fof(f4905,plain,(
  $false | ($spl0 | $spl9)),
  inference(subsumption_resolution,[],[f4904,f129])).
fof(f4904,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl9)),
  inference(forward_demodulation,[],[f4853,f3403])).
fof(f4853,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl9),
  inference(trivial_inequality_removal,[],[f943])).
fof(f943,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl9),
  inference(superposition,[],[f758,f108])).
fof(f108,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X19] : (s(bool,'T_0') = s(bool,X19) <=> p(s(bool,X19)))),
  file('thm.labSem.get_lab_after_ind','thm.bool.EQ_CLAUSES|split|0')).
fof(f4903,plain,(
  $false | ($spl0 | $spl9)),
  inference(subsumption_resolution,[],[f4902,f129])).
fof(f4902,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl9)),
  inference(forward_demodulation,[],[f4854,f3403])).
fof(f4854,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl9),
  inference(trivial_inequality_removal,[],[f819])).
fof(f819,plain,(
  s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl9),
  inference(superposition,[],[f103,f755])).
fof(f103,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X19] : (s(bool,'F_0') = s(bool,X19) <=> ~p(s(bool,X19)))),
  file('thm.labSem.get_lab_after_ind','thm.bool.EQ_CLAUSES|split|3')).
fof(f4901,plain,(
  $false | ($spl0 | $spl9)),
  inference(subsumption_resolution,[],[f4900,f421])).
fof(f4900,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl0 | $spl9)),
  inference(forward_demodulation,[],[f4855,f3403])).
fof(f4855,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))) | $spl9),
  inference(trivial_inequality_removal,[],[f944])).
fof(f944,plain,(
  s(bool,'T_0') != s(bool,'T_0') | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))) | $spl9),
  inference(superposition,[],[f758,f109])).
fof(f109,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.labSem.get_lab_after_ind',aHL_BOOL_CASES)).
fof(f4899,plain,(
  $false | ($spl0 | $spl9)),
  inference(subsumption_resolution,[],[f4898,f129])).
fof(f4898,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl9)),
  inference(forward_demodulation,[],[f4857,f3403])).
fof(f4857,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl9),
  inference(trivial_inequality_removal,[],[f1514])).
fof(f1514,plain,(
  s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl9),
  inference(superposition,[],[f352,f716])).
fof(f716,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) | $spl9),
  inference(resolution,[],[f170,f98])).
fof(f352,plain,(
  ( ! [X10,X11,X9] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X9))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X11),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X10))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X9))),s('type.list.list'('type.labLang.sec'(sK0)),X10))))) )),
  inference(resolution,[],[f82,f101])).
fof(f4897,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3))))) ) | ($spl0 | $spl10 | $spl15 | $spl50)),
  inference(subsumption_resolution,[],[f4896,f129])).
fof(f4896,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3))))) ) | ($spl0 | $spl10 | $spl15 | $spl50)),
  inference(forward_demodulation,[],[f4895,f141])).
fof(f4895,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl0 | $spl10 | $spl15 | $spl50)),
  inference(subsumption_resolution,[],[f4894,f116])).
fof(f4894,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl0 | $spl10 | $spl15 | $spl50)),
  inference(forward_demodulation,[],[f4893,f3399])).
fof(f3399,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X0),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) ) | $spl0),
  inference(resolution,[],[f163,f354])).
fof(f4890,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3))))) ) | ($spl0 | $spl10 | $spl15 | $spl50)),
  inference(subsumption_resolution,[],[f4889,f129])).
fof(f4889,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3))))) ) | ($spl0 | $spl10 | $spl15 | $spl50)),
  inference(forward_demodulation,[],[f4888,f141])).
fof(f4888,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl0 | $spl10 | $spl15 | $spl50)),
  inference(subsumption_resolution,[],[f4887,f116])).
fof(f4887,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl0 | $spl10 | $spl15 | $spl50)),
  inference(forward_demodulation,[],[f4886,f3399])).
fof(f4883,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3))))) ) | ($spl0 | $spl10 | $spl15 | $spl50)),
  inference(subsumption_resolution,[],[f4882,f129])).
fof(f4882,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3))))) ) | ($spl0 | $spl10 | $spl15 | $spl50)),
  inference(forward_demodulation,[],[f4881,f141])).
fof(f4881,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl0 | $spl10 | $spl15 | $spl50)),
  inference(subsumption_resolution,[],[f4880,f116])).
fof(f4880,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl0 | $spl10 | $spl15 | $spl50)),
  inference(forward_demodulation,[],[f4879,f3399])).
fof(f4869,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3))))) ) | ($spl0 | $spl13 | $spl50)),
  inference(subsumption_resolution,[],[f4868,f116])).
fof(f4868,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3))))) ) | ($spl0 | $spl13 | $spl50)),
  inference(forward_demodulation,[],[f4867,f141])).
fof(f4867,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl0 | $spl13 | $spl50)),
  inference(subsumption_resolution,[],[f4866,f116])).
fof(f4866,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl0 | $spl13 | $spl50)),
  inference(forward_demodulation,[],[f4865,f3399])).
fof(f4862,plain,(
  ( ! [X10,X11] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11))))) ) | ($spl0 | $spl10)),
  inference(subsumption_resolution,[],[f4861,f116])).
fof(f4861,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11))))) ) | ($spl0 | $spl10)),
  inference(forward_demodulation,[],[f4860,f141])).
fof(f4860,plain,(
  ( ! [X10,X11] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl0 | $spl10)),
  inference(subsumption_resolution,[],[f4859,f116])).
fof(f4859,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl0 | $spl10)),
  inference(forward_demodulation,[],[f4661,f3399])).
fof(f4830,plain,(
  $false | ($spl8 | $spl13 | $spl42 | $spl50)),
  inference(subsumption_resolution,[],[f4789,f124])).
fof(f4789,plain,(
  p(s(bool,'F_0')) | ($spl8 | $spl13 | $spl42 | $spl50)),
  inference(backward_demodulation,[],[f4565,f3983])).
fof(f3983,plain,(
  p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl13 | $spl42)),
  inference(resolution,[],[f3592,f1865])).
fof(f3592,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f3591,f122])).
fof(f122,plain,(
  ( ! [X0] : (p(s(bool,'T_0')) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f77])).
fof(f77,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')) | p(s(bool,X0))))),
  inference(flattening,[],[f76])).
fof(f76,plain,(
  ! [X0] : (((p(s(bool,'F_0')) & ~p(s(bool,X0))) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | (~p(s(bool,'F_0')) | p(s(bool,X0)))))),
  inference(nnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0] : ((~p(s(bool,'F_0')) | p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(ennf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0] : ((p(s(bool,'F_0')) => p(s(bool,X0))) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X19] : ((p(s(bool,'F_0')) => p(s(bool,X19))) <=> p(s(bool,'T_0')))),
  file('thm.labSem.get_lab_after_ind','thm.bool.IMP_CLAUSES|split|2')).
fof(f3591,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f3590,f141])).
fof(f3590,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f3589,f116])).
fof(f3589,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f3537,f3115])).
fof(f3115,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) | $spl8),
  inference(resolution,[],[f169,f106])).
fof(f169,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl8),
  inference(cnf_transformation,[],[f169_D])).
fof(f169_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f1813,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | $spl38),
  inference(cnf_transformation,[],[f1813_D])).
fof(f1813_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f4784,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7))))) ) | ($spl8 | $spl10 | $spl13 | $spl42)),
  inference(subsumption_resolution,[],[f4783,f129])).
fof(f4783,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7))))) ) | ($spl8 | $spl10 | $spl13 | $spl42)),
  inference(forward_demodulation,[],[f4782,f141])).
fof(f4782,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl10 | $spl13 | $spl42)),
  inference(subsumption_resolution,[],[f4781,f116])).
fof(f4781,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl10 | $spl13 | $spl42)),
  inference(forward_demodulation,[],[f4780,f3115])).
fof(f4780,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl10 | $spl13 | $spl42)),
  inference(forward_demodulation,[],[f4761,f172])).
fof(f4761,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl13 | $spl42)),
  inference(resolution,[],[f3983,f91])).
fof(f4720,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl10)),
  inference(subsumption_resolution,[],[f4719,f116])).
fof(f4719,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl10)),
  inference(forward_demodulation,[],[f4718,f141])).
fof(f4718,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl10)),
  inference(subsumption_resolution,[],[f4717,f116])).
fof(f4717,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl10)),
  inference(forward_demodulation,[],[f4657,f3115])).
fof(f4657,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl10),
  inference(superposition,[],[f91,f172])).
fof(f4755,plain,(
  ( ! [X10,X11] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11))))) ) | ($spl8 | $spl10)),
  inference(subsumption_resolution,[],[f4754,f116])).
fof(f4754,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11))))) ) | ($spl8 | $spl10)),
  inference(forward_demodulation,[],[f4753,f141])).
fof(f4753,plain,(
  ( ! [X10,X11] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl10)),
  inference(subsumption_resolution,[],[f4752,f116])).
fof(f4752,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl10)),
  inference(forward_demodulation,[],[f4661,f3115])).
fof(f4713,plain,(
  $false | ($spl8 | $spl10 | $spl13 | $spl44)),
  inference(subsumption_resolution,[],[f4712,f129])).
fof(f4712,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl10 | $spl13 | $spl44)),
  inference(forward_demodulation,[],[f4653,f3888])).
fof(f3888,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | $spl44),
  inference(resolution,[],[f1971,f106])).
fof(f1971,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | $spl44),
  inference(cnf_transformation,[],[f1971_D])).
fof(f1971_D,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f4653,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ($spl8 | $spl10 | $spl13)),
  inference(backward_demodulation,[],[f172,f3592])).
fof(f4650,plain,(
  ( ! [X37,X35,X36] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl8),
  inference(subsumption_resolution,[],[f4649,f129])).
fof(f4649,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl8),
  inference(forward_demodulation,[],[f4648,f141])).
fof(f4648,plain,(
  ( ! [X37,X35,X36] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl8),
  inference(subsumption_resolution,[],[f4647,f116])).
fof(f4647,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl8),
  inference(forward_demodulation,[],[f1618,f3115])).
fof(f4646,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4645,f129])).
fof(f4645,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f4644,f141])).
fof(f4644,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f3332,f173])).
fof(f3332,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl8),
  inference(subsumption_resolution,[],[f3171,f116])).
fof(f3171,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl8),
  inference(superposition,[],[f93,f3115])).
fof(f4643,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4642,f129])).
fof(f4642,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f4641,f141])).
fof(f4641,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f3110,f173])).
fof(f3110,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl8),
  inference(resolution,[],[f169,f93])).
fof(f4640,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4639,f129])).
fof(f4639,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f4638,f141])).
fof(f4638,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4637,f116])).
fof(f4637,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f4636,f3115])).
fof(f4632,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl13 | $spl15)),
  inference(subsumption_resolution,[],[f4631,f129])).
fof(f4631,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl13 | $spl15)),
  inference(forward_demodulation,[],[f4630,f141])).
fof(f4630,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13 | $spl15)),
  inference(subsumption_resolution,[],[f4629,f116])).
fof(f4629,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13 | $spl15)),
  inference(forward_demodulation,[],[f4628,f3115])).
fof(f4624,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl13 | $spl15)),
  inference(subsumption_resolution,[],[f4623,f129])).
fof(f4623,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl13 | $spl15)),
  inference(forward_demodulation,[],[f4622,f141])).
fof(f4622,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13 | $spl15)),
  inference(subsumption_resolution,[],[f4621,f116])).
fof(f4621,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13 | $spl15)),
  inference(forward_demodulation,[],[f4620,f3115])).
fof(f4616,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4615,f129])).
fof(f4615,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f4614,f141])).
fof(f4614,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4613,f116])).
fof(f4613,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f4612,f3115])).
fof(f4608,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(sK0)),X13)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4607,f129])).
fof(f4607,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(sK0)),X13)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f4606,f3115])).
fof(f4601,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4600,f129])).
fof(f4600,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f4599,f141])).
fof(f4599,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4598,f116])).
fof(f4598,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f3531,f3115])).
fof(f4595,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4594,f129])).
fof(f4594,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f4593,f141])).
fof(f4593,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4592,f116])).
fof(f4592,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f3580,f3115])).
fof(f4591,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f4590,f116])).
fof(f4590,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl0),
  inference(forward_demodulation,[],[f3842,f141])).
fof(f3842,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl0),
  inference(subsumption_resolution,[],[f3796,f116])).
fof(f3796,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl0),
  inference(superposition,[],[f91,f3399])).
fof(f4589,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl0 | $spl13)),
  inference(subsumption_resolution,[],[f4588,f129])).
fof(f4588,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl0 | $spl13)),
  inference(forward_demodulation,[],[f3848,f141])).
fof(f3848,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl0 | $spl13)),
  inference(subsumption_resolution,[],[f3847,f173])).
fof(f3847,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl0),
  inference(subsumption_resolution,[],[f3797,f116])).
fof(f3797,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl0),
  inference(superposition,[],[f93,f3399])).
fof(f4584,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4583,f116])).
fof(f4583,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f4582,f141])).
fof(f4582,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4581,f116])).
fof(f4581,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f3985,f3115])).
fof(f3985,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13)),
  inference(resolution,[],[f3592,f91])).
fof(f4578,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4577,f129])).
fof(f4577,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f4576,f141])).
fof(f4576,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4575,f116])).
fof(f4575,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f4028,f3115])).
fof(f4028,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f3987,f173])).
fof(f3987,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13)),
  inference(resolution,[],[f3592,f93])).
fof(f4572,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4571,f129])).
fof(f4571,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f4570,f141])).
fof(f4570,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4569,f116])).
fof(f4569,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f4038,f3115])).
fof(f4038,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4037,f173])).
fof(f4037,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f4001,f275])).
fof(f4001,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl13)),
  inference(superposition,[],[f3592,f93])).
fof(f4489,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | ($spl8 | $spl13)),
  inference(resolution,[],[f618,f3592])).
fof(f4563,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),X21))))) ) | $spl8),
  inference(subsumption_resolution,[],[f4562,f116])).
fof(f4562,plain,(
  ( ! [X21,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),X21))))) ) | $spl8),
  inference(forward_demodulation,[],[f4561,f141])).
fof(f4561,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),X21)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl8),
  inference(subsumption_resolution,[],[f4560,f116])).
fof(f4560,plain,(
  ( ! [X21,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),X21)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl8),
  inference(forward_demodulation,[],[f4492,f3115])).
fof(f4527,plain,(
  $false | ($spl8 | $spl11 | $spl13)),
  inference(subsumption_resolution,[],[f4526,f421])).
fof(f4526,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl8 | $spl11 | $spl13)),
  inference(forward_demodulation,[],[f4525,f3611])).
fof(f3611,plain,(
  s(bool,'T_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | ($spl8 | $spl11 | $spl13)),
  inference(resolution,[],[f3585,f106])).
fof(f3585,plain,(
  p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl11 | $spl13)),
  inference(subsumption_resolution,[],[f3584,f129])).
fof(f3584,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl11 | $spl13)),
  inference(forward_demodulation,[],[f3583,f141])).
fof(f3583,plain,(
  p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl11 | $spl13)),
  inference(subsumption_resolution,[],[f3582,f116])).
fof(f3582,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl11 | $spl13)),
  inference(forward_demodulation,[],[f3581,f3115])).
fof(f3581,plain,(
  p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl11 | $spl13)),
  inference(subsumption_resolution,[],[f3580,f171])).
fof(f171,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK8(sK1,sK0)) | $spl11),
  inference(cnf_transformation,[],[f171_D])).
fof(f171_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK8(sK1,sK0)) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f4525,plain,(
  s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | ($spl8 | $spl11 | $spl13)),
  inference(subsumption_resolution,[],[f4524,f129])).
fof(f4524,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | ($spl8 | $spl11 | $spl13)),
  inference(forward_demodulation,[],[f4489,f4047])).
fof(f4047,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | ($spl8 | $spl11 | $spl13)),
  inference(resolution,[],[f4023,f106])).
fof(f4023,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ($spl8 | $spl11 | $spl13)),
  inference(subsumption_resolution,[],[f4022,f129])).
fof(f4022,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ($spl8 | $spl11 | $spl13)),
  inference(forward_demodulation,[],[f4021,f141])).
fof(f4021,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl11 | $spl13)),
  inference(subsumption_resolution,[],[f4020,f116])).
fof(f4020,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl11 | $spl13)),
  inference(forward_demodulation,[],[f4019,f3115])).
fof(f4019,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl11 | $spl13)),
  inference(subsumption_resolution,[],[f4018,f116])).
fof(f4018,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl11 | $spl13)),
  inference(forward_demodulation,[],[f3985,f3611])).
fof(f3854,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl0),
  inference(subsumption_resolution,[],[f3853,f116])).
fof(f3853,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl0),
  inference(forward_demodulation,[],[f3852,f141])).
fof(f3852,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl0),
  inference(subsumption_resolution,[],[f3798,f116])).
fof(f3798,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl0),
  inference(superposition,[],[f95,f3399])).
fof(f3846,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | ($spl0 | $spl8 | $spl11 | $spl13)),
  inference(subsumption_resolution,[],[f3845,f129])).
fof(f3845,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | ($spl0 | $spl8 | $spl11 | $spl13)),
  inference(forward_demodulation,[],[f3844,f141])).
fof(f3844,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl0 | $spl8 | $spl11 | $spl13)),
  inference(subsumption_resolution,[],[f3843,f116])).
fof(f3843,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl0 | $spl8 | $spl11 | $spl13)),
  inference(forward_demodulation,[],[f3842,f3611])).
fof(f3704,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | ($spl8 | $spl11 | $spl13)),
  inference(subsumption_resolution,[],[f3703,f129])).
fof(f3703,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | ($spl8 | $spl11 | $spl13)),
  inference(forward_demodulation,[],[f3702,f141])).
fof(f3702,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl11 | $spl13)),
  inference(subsumption_resolution,[],[f3701,f116])).
fof(f3701,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl11 | $spl13)),
  inference(forward_demodulation,[],[f3700,f3115])).
fof(f3700,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl11 | $spl13)),
  inference(subsumption_resolution,[],[f3654,f116])).
fof(f3654,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl11 | $spl13)),
  inference(superposition,[],[f91,f3611])).
fof(f3628,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | ($spl8 | $spl11 | $spl13)),
  inference(subsumption_resolution,[],[f3627,f129])).
fof(f3627,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | ($spl8 | $spl11 | $spl13)),
  inference(forward_demodulation,[],[f3626,f141])).
fof(f3626,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl11 | $spl13)),
  inference(subsumption_resolution,[],[f3625,f116])).
fof(f3625,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl11 | $spl13)),
  inference(forward_demodulation,[],[f3607,f3115])).
fof(f3607,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl11 | $spl13)),
  inference(resolution,[],[f3585,f91])).
fof(f3601,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f3600,f116])).
fof(f3600,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f3599,f141])).
fof(f3599,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f3598,f116])).
fof(f3598,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f3597,f3115])).
fof(f3575,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f3574,f116])).
fof(f3574,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f3573,f141])).
fof(f3573,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13)),
  inference(subsumption_resolution,[],[f3572,f116])).
fof(f3572,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl13)),
  inference(forward_demodulation,[],[f3533,f3115])).
fof(f3568,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl11 | $spl13)),
  inference(subsumption_resolution,[],[f3567,f129])).
fof(f3567,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl11 | $spl13)),
  inference(forward_demodulation,[],[f3566,f141])).
fof(f3566,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl11 | $spl13)),
  inference(subsumption_resolution,[],[f3565,f116])).
fof(f3565,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl11 | $spl13)),
  inference(forward_demodulation,[],[f3564,f3115])).
fof(f3564,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl11 | $spl13)),
  inference(subsumption_resolution,[],[f3531,f171])).
fof(f3398,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl11),
  inference(subsumption_resolution,[],[f503,f171])).
fof(f3397,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(sK0)),X13)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl11)),
  inference(subsumption_resolution,[],[f3396,f129])).
fof(f3396,plain,(
  ( ! [X12,X13] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(sK0)),X13)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl11)),
  inference(forward_demodulation,[],[f3395,f3115])).
fof(f3395,plain,(
  ( ! [X12,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(sK0)),X13)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl11),
  inference(subsumption_resolution,[],[f505,f171])).
fof(f3394,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl11),
  inference(subsumption_resolution,[],[f3393,f129])).
fof(f3393,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl11),
  inference(forward_demodulation,[],[f3392,f141])).
fof(f3392,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl11),
  inference(subsumption_resolution,[],[f590,f171])).
fof(f3391,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl11)),
  inference(subsumption_resolution,[],[f3390,f129])).
fof(f3390,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl11)),
  inference(forward_demodulation,[],[f3389,f141])).
fof(f3389,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl11)),
  inference(subsumption_resolution,[],[f3388,f116])).
fof(f3388,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl11)),
  inference(forward_demodulation,[],[f3387,f3115])).
fof(f3387,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl11),
  inference(subsumption_resolution,[],[f593,f171])).
fof(f3386,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ($spl11 | $spl15)),
  inference(subsumption_resolution,[],[f3385,f129])).
fof(f3385,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ($spl11 | $spl15)),
  inference(forward_demodulation,[],[f3384,f141])).
fof(f3384,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl11 | $spl15)),
  inference(subsumption_resolution,[],[f1105,f171])).
fof(f3383,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f3382,f129])).
fof(f3382,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f3381,f141])).
fof(f3381,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f3380,f116])).
fof(f3380,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f3379,f3115])).
fof(f3379,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl11 | $spl15)),
  inference(subsumption_resolution,[],[f1106,f171])).
fof(f3378,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl15),
  inference(subsumption_resolution,[],[f3377,f129])).
fof(f3377,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl15),
  inference(forward_demodulation,[],[f1137,f141])).
fof(f1137,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl15),
  inference(subsumption_resolution,[],[f1119,f275])).
fof(f1119,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl15),
  inference(superposition,[],[f176,f92])).
fof(f3376,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl15)),
  inference(subsumption_resolution,[],[f3375,f129])).
fof(f3375,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl15)),
  inference(forward_demodulation,[],[f3374,f141])).
fof(f3374,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl15)),
  inference(subsumption_resolution,[],[f3373,f116])).
fof(f3373,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl15)),
  inference(forward_demodulation,[],[f1140,f3115])).
fof(f3372,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl15),
  inference(subsumption_resolution,[],[f3371,f129])).
fof(f3371,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl15),
  inference(forward_demodulation,[],[f1377,f141])).
fof(f1377,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl15),
  inference(subsumption_resolution,[],[f1336,f1057])).
fof(f1336,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl15),
  inference(superposition,[],[f1109,f92])).
fof(f3370,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl15)),
  inference(subsumption_resolution,[],[f3369,f129])).
fof(f3369,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl15)),
  inference(forward_demodulation,[],[f3368,f141])).
fof(f3368,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl15)),
  inference(subsumption_resolution,[],[f3367,f116])).
fof(f3367,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl15)),
  inference(forward_demodulation,[],[f1380,f3115])).
fof(f3366,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ($spl11 | $spl15)),
  inference(subsumption_resolution,[],[f3365,f129])).
fof(f3365,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ($spl11 | $spl15)),
  inference(forward_demodulation,[],[f3364,f141])).
fof(f3364,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl11 | $spl15)),
  inference(subsumption_resolution,[],[f1397,f171])).
fof(f3363,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f3362,f129])).
fof(f3362,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl8 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f3361,f141])).
fof(f3361,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl11 | $spl15)),
  inference(subsumption_resolution,[],[f3360,f116])).
fof(f3360,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl8 | $spl11 | $spl15)),
  inference(forward_demodulation,[],[f3359,f3115])).
fof(f3359,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl11 | $spl15)),
  inference(subsumption_resolution,[],[f1400,f171])).
fof(f3358,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl15),
  inference(subsumption_resolution,[],[f3357,f129])).
fof(f3357,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl15),
  inference(forward_demodulation,[],[f1454,f141])).
fof(f1454,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl15),
  inference(subsumption_resolution,[],[f1438,f1059])).
fof(f1438,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl15),
  inference(superposition,[],[f1112,f92])).
fof(f3356,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl15)),
  inference(subsumption_resolution,[],[f3355,f129])).
fof(f3355,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl15)),
  inference(forward_demodulation,[],[f3354,f141])).
fof(f3354,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl15)),
  inference(subsumption_resolution,[],[f3353,f116])).
fof(f3353,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl15)),
  inference(forward_demodulation,[],[f1457,f3115])).
fof(f3352,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl11),
  inference(subsumption_resolution,[],[f3351,f129])).
fof(f3351,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl11),
  inference(forward_demodulation,[],[f3350,f141])).
fof(f3350,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl11),
  inference(subsumption_resolution,[],[f1613,f171])).
fof(f3349,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl11)),
  inference(subsumption_resolution,[],[f3348,f129])).
fof(f3348,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl11)),
  inference(forward_demodulation,[],[f3347,f141])).
fof(f3347,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl11)),
  inference(subsumption_resolution,[],[f3346,f116])).
fof(f3346,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl11)),
  inference(forward_demodulation,[],[f3345,f3115])).
fof(f3345,plain,(
  ( ! [X24,X23,X25] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X23))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X25))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl11),
  inference(subsumption_resolution,[],[f1614,f171])).
fof(f3344,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl11)),
  inference(subsumption_resolution,[],[f3343,f129])).
fof(f3343,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl11)),
  inference(forward_demodulation,[],[f3342,f141])).
fof(f3342,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl11)),
  inference(subsumption_resolution,[],[f3341,f116])).
fof(f3341,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl11)),
  inference(forward_demodulation,[],[f2747,f3115])).
fof(f2747,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl11),
  inference(trivial_inequality_removal,[],[f2746])).
fof(f2746,plain,(
  ( ! [X2,X3] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl11),
  inference(superposition,[],[f171,f93])).
fof(f3340,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl11),
  inference(subsumption_resolution,[],[f3339,f129])).
fof(f3339,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl11),
  inference(forward_demodulation,[],[f2748,f141])).
fof(f2748,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl11),
  inference(trivial_inequality_removal,[],[f2745])).
fof(f2745,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl11),
  inference(superposition,[],[f171,f92])).
fof(f3338,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl11)),
  inference(subsumption_resolution,[],[f3337,f129])).
fof(f3337,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl11)),
  inference(forward_demodulation,[],[f3336,f141])).
fof(f3336,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl11)),
  inference(subsumption_resolution,[],[f3110,f171])).
fof(f3335,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl11)),
  inference(subsumption_resolution,[],[f3334,f129])).
fof(f3334,plain,(
  ( ! [X4,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl8 | $spl11)),
  inference(forward_demodulation,[],[f3333,f141])).
fof(f3333,plain,(
  ( ! [X4,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(sK0)),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl11)),
  inference(subsumption_resolution,[],[f3332,f171])).
fof(f3328,plain,(
  $false | ($spl8 | $spl40)),
  inference(subsumption_resolution,[],[f3317,f124])).
fof(f3317,plain,(
  p(s(bool,'F_0')) | ($spl8 | $spl40)),
  inference(superposition,[],[f3279,f187])).
fof(f3279,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5))))) ) | ($spl8 | $spl40)),
  inference(subsumption_resolution,[],[f3278,f129])).
fof(f3278,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5))))) ) | ($spl8 | $spl40)),
  inference(forward_demodulation,[],[f3277,f141])).
fof(f3277,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl40)),
  inference(subsumption_resolution,[],[f3276,f116])).
fof(f3276,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl8 | $spl40)),
  inference(forward_demodulation,[],[f3252,f3115])).
fof(f3252,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl40),
  inference(resolution,[],[f1824,f95])).
fof(f3275,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl40),
  inference(subsumption_resolution,[],[f3274,f129])).
fof(f3274,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl40),
  inference(forward_demodulation,[],[f3251,f141])).
fof(f3251,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl40),
  inference(resolution,[],[f1824,f94])).
fof(f3221,plain,(
  ( ! [X6,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl8),
  inference(subsumption_resolution,[],[f3220,f116])).
fof(f3220,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl8),
  inference(forward_demodulation,[],[f3219,f141])).
fof(f3219,plain,(
  ( ! [X6,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl8),
  inference(subsumption_resolution,[],[f3172,f116])).
fof(f3172,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl8),
  inference(superposition,[],[f95,f3115])).
fof(f3218,plain,(
  ( ! [X2,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X1))),s('type.list.list'('type.labLang.sec'(sK0)),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl8),
  inference(subsumption_resolution,[],[f3217,f116])).
fof(f3217,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X1))),s('type.list.list'('type.labLang.sec'(sK0)),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl8),
  inference(forward_demodulation,[],[f3216,f141])).
fof(f3216,plain,(
  ( ! [X2,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X1))),s('type.list.list'('type.labLang.sec'(sK0)),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl8),
  inference(subsumption_resolution,[],[f3170,f116])).
fof(f3170,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X1))),s('type.list.list'('type.labLang.sec'(sK0)),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl8),
  inference(superposition,[],[f91,f3115])).
fof(f3134,plain,(
  ( ! [X6,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl8),
  inference(subsumption_resolution,[],[f3133,f116])).
fof(f3133,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl8),
  inference(forward_demodulation,[],[f3111,f141])).
fof(f3111,plain,(
  ( ! [X6,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl8),
  inference(resolution,[],[f169,f95])).
fof(f3132,plain,(
  ( ! [X2,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X1))),s('type.list.list'('type.labLang.sec'(sK0)),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl8),
  inference(subsumption_resolution,[],[f3131,f116])).
fof(f3131,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X1))),s('type.list.list'('type.labLang.sec'(sK0)),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl8),
  inference(forward_demodulation,[],[f3109,f141])).
fof(f3109,plain,(
  ( ! [X2,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X1))),s('type.list.list'('type.labLang.sec'(sK0)),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl8),
  inference(resolution,[],[f169,f91])).
fof(f1824,plain,(
  ( ! [X4] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl40),
  inference(cnf_transformation,[],[f1824_D])).
fof(f1824_D,plain,(
  ( ! [X4] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f2821,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X0),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl12),
  inference(resolution,[],[f174,f88])).
fof(f88,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(sK0)),X7))),s('type.list.list'('type.labLang.sec'(sK0)),X8)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X6),s('type.list.list'('type.labLang.line'(sK0)),X7))))),s('type.list.list'('type.labLang.sec'(sK0)),X8)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(sK0)),X7))),s('type.list.list'('type.labLang.sec'(sK0)),X8))))))) )),
  inference(cnf_transformation,[],[f59])).
fof(f3107,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X7),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(subsumption_resolution,[],[f3106,f116])).
fof(f3106,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X7),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(forward_demodulation,[],[f3067,f141])).
fof(f3067,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X7),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f884,f86])).
fof(f86,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X4) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X6),s('type.list.list'('type.labLang.line'(sK0)),X7))))),s('type.list.list'('type.labLang.sec'(sK0)),X8)))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X5),s('type.list.list'('type.labLang.line'(sK0)),X7))),s('type.list.list'('type.labLang.sec'(sK0)),X8))))))) )),
  inference(cnf_transformation,[],[f59])).
fof(f884,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X7),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f88,f93])).
fof(f3105,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl15),
  inference(subsumption_resolution,[],[f3104,f116])).
fof(f3104,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl15),
  inference(forward_demodulation,[],[f1103,f141])).
fof(f1103,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl15),
  inference(resolution,[],[f176,f90])).
fof(f3103,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl15),
  inference(subsumption_resolution,[],[f3102,f116])).
fof(f3102,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl15),
  inference(forward_demodulation,[],[f1104,f141])).
fof(f1104,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl15),
  inference(resolution,[],[f176,f91])).
fof(f3101,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl15),
  inference(subsumption_resolution,[],[f3100,f116])).
fof(f3100,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl15),
  inference(forward_demodulation,[],[f1388,f141])).
fof(f1388,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl15),
  inference(subsumption_resolution,[],[f1345,f124])).
fof(f1345,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl15),
  inference(superposition,[],[f90,f1109])).
fof(f3099,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl15),
  inference(subsumption_resolution,[],[f3098,f116])).
fof(f3098,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl15),
  inference(forward_demodulation,[],[f1392,f141])).
fof(f1392,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl15),
  inference(subsumption_resolution,[],[f1346,f124])).
fof(f1346,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl15),
  inference(superposition,[],[f91,f1109])).
fof(f3097,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X14))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X15),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X16))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) )),
  inference(subsumption_resolution,[],[f3096,f116])).
fof(f3096,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X14))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X15),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X16))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) )),
  inference(forward_demodulation,[],[f1611,f141])).
fof(f1611,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X14))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X15),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X16))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f354,f90])).
fof(f3095,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X17))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X18),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X19))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(subsumption_resolution,[],[f3094,f116])).
fof(f3094,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X17))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X18),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X19))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(forward_demodulation,[],[f1612,f141])).
fof(f1612,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X17))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X18),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X19))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f354,f91])).
fof(f1702,plain,(
  ( ! [X41] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X41),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) ) | $spl18),
  inference(cnf_transformation,[],[f1702_D])).
fof(f1702_D,plain,(
  ( ! [X41] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X41),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f3093,plain,(
  ( ! [X39,X38,X40] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X38),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X39))),s('type.list.list'('type.labLang.sec'(sK0)),X40)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) )),
  inference(subsumption_resolution,[],[f3092,f116])).
fof(f3092,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X38),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X39))),s('type.list.list'('type.labLang.sec'(sK0)),X40)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) )),
  inference(forward_demodulation,[],[f1619,f141])).
fof(f1619,plain,(
  ( ! [X39,X38,X40] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X38),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X39))),s('type.list.list'('type.labLang.sec'(sK0)),X40)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f354,f90])).
fof(f3091,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) )),
  inference(subsumption_resolution,[],[f3090,f116])).
fof(f3090,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) )),
  inference(forward_demodulation,[],[f922,f141])).
fof(f922,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f883,f86])).
fof(f883,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f88,f92])).
fof(f3089,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))),
  inference(subsumption_resolution,[],[f3088,f116])).
fof(f3088,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))),
  inference(forward_demodulation,[],[f585,f141])).
fof(f585,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f545,f124])).
fof(f545,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(superposition,[],[f91,f187])).
fof(f3087,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))),
  inference(subsumption_resolution,[],[f3086,f116])).
fof(f3086,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))),
  inference(forward_demodulation,[],[f580,f141])).
fof(f580,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f544,f124])).
fof(f544,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(superposition,[],[f90,f187])).
fof(f500,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(subsumption_resolution,[],[f444,f116])).
fof(f444,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(superposition,[],[f91,f141])).
fof(f497,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) )),
  inference(subsumption_resolution,[],[f443,f116])).
fof(f443,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) )),
  inference(superposition,[],[f90,f141])).
fof(f381,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) )),
  inference(subsumption_resolution,[],[f380,f81])).
fof(f380,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f348,f90])).
fof(f348,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f82,f91])).
fof(f3085,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl42),
  inference(subsumption_resolution,[],[f3084,f129])).
fof(f3084,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl42),
  inference(forward_demodulation,[],[f2952,f141])).
fof(f2952,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl42),
  inference(resolution,[],[f1865,f94])).
fof(f3083,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl42),
  inference(subsumption_resolution,[],[f3082,f116])).
fof(f3082,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl42),
  inference(forward_demodulation,[],[f2953,f141])).
fof(f2953,plain,(
  ( ! [X4,X5] : (p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl42),
  inference(resolution,[],[f1865,f95])).
fof(f3081,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl11),
  inference(subsumption_resolution,[],[f3080,f129])).
fof(f3080,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl11),
  inference(forward_demodulation,[],[f3055,f141])).
fof(f3055,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl11),
  inference(subsumption_resolution,[],[f1617,f171])).
fof(f3079,plain,(
  ( ! [X37,X35,X36] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl11),
  inference(subsumption_resolution,[],[f3078,f116])).
fof(f3078,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl11),
  inference(forward_demodulation,[],[f3060,f141])).
fof(f3060,plain,(
  ( ! [X37,X35,X36] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl11),
  inference(subsumption_resolution,[],[f1618,f171])).
fof(f1687,plain,(
  ( ! [X47] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X47),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))))) ) | $spl16),
  inference(cnf_transformation,[],[f1687_D])).
fof(f1687_D,plain,(
  ( ! [X47] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X47),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f3077,plain,(
  ( ! [X47,X48,X49] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X47),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X48))),s('type.list.list'('type.labLang.sec'(sK0)),X49)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) )),
  inference(subsumption_resolution,[],[f3076,f116])).
fof(f3076,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X47),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X48))),s('type.list.list'('type.labLang.sec'(sK0)),X49)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) )),
  inference(forward_demodulation,[],[f1622,f141])).
fof(f1622,plain,(
  ( ! [X47,X48,X49] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X47),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X48))),s('type.list.list'('type.labLang.sec'(sK0)),X49)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f354,f90])).
fof(f3075,plain,(
  ( ! [X52,X50,X51] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X50),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X51))),s('type.list.list'('type.labLang.sec'(sK0)),X52)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(subsumption_resolution,[],[f3074,f116])).
fof(f3074,plain,(
  ( ! [X52,X50,X51] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X50),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X51))),s('type.list.list'('type.labLang.sec'(sK0)),X52)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(forward_demodulation,[],[f1623,f141])).
fof(f1623,plain,(
  ( ! [X52,X50,X51] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X50),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X51))),s('type.list.list'('type.labLang.sec'(sK0)),X52)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f354,f91])).
fof(f3064,plain,(
  ( ! [X37,X35,X36] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl3 | $spl11)),
  inference(subsumption_resolution,[],[f3063,f116])).
fof(f3063,plain,(
  ( ! [X37,X35,X36] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl3 | $spl11)),
  inference(forward_demodulation,[],[f3062,f141])).
fof(f3062,plain,(
  ( ! [X37,X35,X36] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl11)),
  inference(subsumption_resolution,[],[f3061,f124])).
fof(f3061,plain,(
  ( ! [X37,X35,X36] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X35),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X36))),s('type.list.list'('type.labLang.sec'(sK0)),X37)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl11)),
  inference(forward_demodulation,[],[f3060,f1990])).
fof(f1990,plain,(
  s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | $spl3),
  inference(resolution,[],[f165,f98])).
fof(f3059,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | ($spl3 | $spl11)),
  inference(subsumption_resolution,[],[f3058,f129])).
fof(f3058,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | ($spl3 | $spl11)),
  inference(forward_demodulation,[],[f3057,f141])).
fof(f3057,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl11)),
  inference(subsumption_resolution,[],[f3056,f124])).
fof(f3056,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl11)),
  inference(forward_demodulation,[],[f3055,f1990])).
fof(f3053,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl5),
  inference(subsumption_resolution,[],[f3052,f116])).
fof(f3052,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl5),
  inference(forward_demodulation,[],[f2764,f141])).
fof(f2764,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl5),
  inference(resolution,[],[f166,f94])).
fof(f3051,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl5),
  inference(subsumption_resolution,[],[f3050,f116])).
fof(f3050,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl5),
  inference(forward_demodulation,[],[f2765,f141])).
fof(f2765,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl5),
  inference(resolution,[],[f166,f95])).
fof(f3049,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl5),
  inference(subsumption_resolution,[],[f3048,f116])).
fof(f3048,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl5),
  inference(forward_demodulation,[],[f2910,f141])).
fof(f2910,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl5),
  inference(subsumption_resolution,[],[f2866,f124])).
fof(f2866,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl5),
  inference(superposition,[],[f94,f2766])).
fof(f2766,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | $spl5),
  inference(resolution,[],[f166,f98])).
fof(f3047,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl5),
  inference(subsumption_resolution,[],[f3046,f116])).
fof(f3046,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl5),
  inference(forward_demodulation,[],[f2915,f141])).
fof(f2915,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl5),
  inference(subsumption_resolution,[],[f2867,f124])).
fof(f2867,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl5),
  inference(superposition,[],[f95,f2766])).
fof(f3045,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | ($spl3 | $spl42)),
  inference(subsumption_resolution,[],[f3044,f129])).
fof(f3044,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | ($spl3 | $spl42)),
  inference(forward_demodulation,[],[f2976,f141])).
fof(f2976,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl42)),
  inference(subsumption_resolution,[],[f2975,f124])).
fof(f2975,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl42)),
  inference(forward_demodulation,[],[f2952,f1990])).
fof(f3043,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl3 | $spl42)),
  inference(subsumption_resolution,[],[f3042,f116])).
fof(f3042,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | ($spl3 | $spl42)),
  inference(forward_demodulation,[],[f2982,f141])).
fof(f2982,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl42)),
  inference(subsumption_resolution,[],[f2981,f124])).
fof(f2981,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl42)),
  inference(forward_demodulation,[],[f2953,f1990])).
fof(f3038,plain,(
  $false | ($spl3 | $spl5 | $spl9 | $spl42)),
  inference(subsumption_resolution,[],[f3025,f124])).
fof(f3025,plain,(
  p(s(bool,'F_0')) | ($spl3 | $spl5 | $spl9 | $spl42)),
  inference(superposition,[],[f2980,f2766])).
fof(f2980,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3))))) ) | ($spl3 | $spl9 | $spl42)),
  inference(subsumption_resolution,[],[f2979,f129])).
fof(f2979,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3))))) ) | ($spl3 | $spl9 | $spl42)),
  inference(forward_demodulation,[],[f2978,f141])).
fof(f2978,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl9 | $spl42)),
  inference(subsumption_resolution,[],[f2977,f124])).
fof(f2977,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl9 | $spl42)),
  inference(forward_demodulation,[],[f2976,f755])).
fof(f3037,plain,(
  $false | ($spl3 | $spl9 | $spl42)),
  inference(subsumption_resolution,[],[f3024,f124])).
fof(f3024,plain,(
  p(s(bool,'F_0')) | ($spl3 | $spl9 | $spl42)),
  inference(superposition,[],[f2980,f716])).
fof(f3036,plain,(
  $false | ($spl3 | $spl9 | $spl42)),
  inference(subsumption_resolution,[],[f3023,f124])).
fof(f3023,plain,(
  p(s(bool,'F_0')) | ($spl3 | $spl9 | $spl42)),
  inference(superposition,[],[f2980,f755])).
fof(f3035,plain,(
  $false | ($spl3 | $spl9 | $spl42)),
  inference(subsumption_resolution,[],[f3022,f124])).
fof(f3022,plain,(
  p(s(bool,'F_0')) | ($spl3 | $spl9 | $spl42)),
  inference(superposition,[],[f2980,f187])).
fof(f1812,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | $spl39),
  inference(cnf_transformation,[],[f1812_D])).
fof(f1812_D,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) <=> ~$spl39),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl39])])).
fof(f2816,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | ($spl3 | $spl5 | $spl9)),
  inference(subsumption_resolution,[],[f2815,f116])).
fof(f2815,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | ($spl3 | $spl5 | $spl9)),
  inference(forward_demodulation,[],[f2814,f141])).
fof(f2814,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl5 | $spl9)),
  inference(subsumption_resolution,[],[f2813,f124])).
fof(f2813,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl5 | $spl9)),
  inference(forward_demodulation,[],[f2812,f755])).
fof(f2812,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl5)),
  inference(subsumption_resolution,[],[f2811,f124])).
fof(f2811,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl5)),
  inference(forward_demodulation,[],[f2776,f1990])).
fof(f2776,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl5),
  inference(superposition,[],[f166,f92])).
fof(f2754,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | ($spl3 | $spl9 | $spl11)),
  inference(subsumption_resolution,[],[f2753,f129])).
fof(f2753,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | ($spl3 | $spl9 | $spl11)),
  inference(forward_demodulation,[],[f2752,f141])).
fof(f2752,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl9 | $spl11)),
  inference(subsumption_resolution,[],[f2751,f124])).
fof(f2751,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl9 | $spl11)),
  inference(forward_demodulation,[],[f2750,f755])).
fof(f2750,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl11)),
  inference(subsumption_resolution,[],[f2749,f124])).
fof(f2749,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl11)),
  inference(forward_demodulation,[],[f2748,f1990])).
fof(f2743,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl3 | $spl9)),
  inference(subsumption_resolution,[],[f2742,f129])).
fof(f2742,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl3 | $spl9)),
  inference(forward_demodulation,[],[f2741,f141])).
fof(f2741,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl9)),
  inference(subsumption_resolution,[],[f2740,f124])).
fof(f2740,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl9)),
  inference(forward_demodulation,[],[f1986,f755])).
fof(f1986,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl3),
  inference(resolution,[],[f165,f92])).
fof(f2738,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl3 | $spl9)),
  inference(subsumption_resolution,[],[f2737,f129])).
fof(f2737,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0))) ) | ($spl3 | $spl9)),
  inference(forward_demodulation,[],[f2736,f141])).
fof(f2736,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl9)),
  inference(subsumption_resolution,[],[f2735,f124])).
fof(f2735,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl9)),
  inference(forward_demodulation,[],[f2734,f755])).
fof(f2734,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl3),
  inference(subsumption_resolution,[],[f2091,f124])).
fof(f2091,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl3),
  inference(superposition,[],[f92,f1990])).
fof(f2721,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6))))) ) | ($spl3 | $spl9)),
  inference(subsumption_resolution,[],[f2720,f116])).
fof(f2720,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6))))) ) | ($spl3 | $spl9)),
  inference(forward_demodulation,[],[f2719,f141])).
fof(f2719,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl9)),
  inference(subsumption_resolution,[],[f2718,f124])).
fof(f2718,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl9)),
  inference(forward_demodulation,[],[f2717,f755])).
fof(f2717,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl3),
  inference(subsumption_resolution,[],[f2716,f124])).
fof(f2716,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl3),
  inference(forward_demodulation,[],[f922,f1990])).
fof(f2705,plain,(
  $false | ($spl3 | $spl45)),
  inference(subsumption_resolution,[],[f2704,f129])).
fof(f2704,plain,(
  ~p(s(bool,'T_0')) | ($spl3 | $spl45)),
  inference(forward_demodulation,[],[f1972,f1988])).
fof(f1988,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X4),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),X5))))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))))) ) | $spl3),
  inference(resolution,[],[f165,f1059])).
fof(f2683,plain,(
  ( ! [X4] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl46),
  inference(cnf_transformation,[],[f2683_D])).
fof(f2683_D,plain,(
  ( ! [X4] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f2682,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6))))) ) | ($spl3 | $spl9 | $spl10)),
  inference(subsumption_resolution,[],[f2681,f116])).
fof(f2681,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6))))) ) | ($spl3 | $spl9 | $spl10)),
  inference(forward_demodulation,[],[f2680,f141])).
fof(f2680,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl9 | $spl10)),
  inference(subsumption_resolution,[],[f2679,f124])).
fof(f2679,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl9 | $spl10)),
  inference(forward_demodulation,[],[f2678,f755])).
fof(f2678,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl10)),
  inference(subsumption_resolution,[],[f2677,f124])).
fof(f2677,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl3 | $spl10)),
  inference(forward_demodulation,[],[f2676,f1990])).
fof(f2676,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl10),
  inference(forward_demodulation,[],[f2675,f172])).
fof(f2675,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl10),
  inference(forward_demodulation,[],[f922,f172])).
fof(f2654,plain,(
  $false | ($spl10 | $spl40 | $spl45)),
  inference(subsumption_resolution,[],[f1972,f2059])).
fof(f2059,plain,(
  ( ! [X4] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | ($spl10 | $spl40)),
  inference(forward_demodulation,[],[f1824,f172])).
fof(f2054,plain,(
  $false | ($spl6 | $spl9)),
  inference(subsumption_resolution,[],[f2042,f124])).
fof(f2042,plain,(
  p(s(bool,'F_0')) | ($spl6 | $spl9)),
  inference(superposition,[],[f168,f716])).
fof(f2053,plain,(
  $false | ($spl6 | $spl9)),
  inference(subsumption_resolution,[],[f2041,f124])).
fof(f2041,plain,(
  p(s(bool,'F_0')) | ($spl6 | $spl9)),
  inference(superposition,[],[f168,f755])).
fof(f2052,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f2040,f124])).
fof(f2040,plain,(
  p(s(bool,'F_0')) | $spl6),
  inference(superposition,[],[f168,f187])).
fof(f1970,plain,(
  ( ! [X8,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9))))) ) | ($spl9 | $spl10)),
  inference(subsumption_resolution,[],[f1969,f116])).
fof(f1969,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9))))) ) | ($spl9 | $spl10)),
  inference(forward_demodulation,[],[f1968,f141])).
fof(f1968,plain,(
  ( ! [X8,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl9 | $spl10)),
  inference(subsumption_resolution,[],[f1967,f124])).
fof(f1967,plain,(
  ( ! [X8,X9] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl9 | $spl10)),
  inference(forward_demodulation,[],[f1932,f755])).
fof(f1932,plain,(
  ( ! [X8,X9] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl10),
  inference(superposition,[],[f94,f172])).
fof(f1965,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl9 | $spl10)),
  inference(subsumption_resolution,[],[f1964,f116])).
fof(f1964,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl9 | $spl10)),
  inference(forward_demodulation,[],[f1963,f141])).
fof(f1963,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl9 | $spl10)),
  inference(subsumption_resolution,[],[f1962,f124])).
fof(f1962,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl9 | $spl10)),
  inference(forward_demodulation,[],[f1928,f755])).
fof(f1928,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl10),
  inference(superposition,[],[f90,f172])).
fof(f385,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) )),
  inference(subsumption_resolution,[],[f384,f81])).
fof(f384,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f349,f92])).
fof(f349,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f82,f93])).
fof(f1895,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl9),
  inference(subsumption_resolution,[],[f1894,f124])).
fof(f1894,plain,(
  ( ! [X10,X11] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl9),
  inference(forward_demodulation,[],[f503,f755])).
fof(f1878,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl9),
  inference(subsumption_resolution,[],[f1877,f129])).
fof(f1877,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl9),
  inference(forward_demodulation,[],[f1876,f141])).
fof(f1876,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(subsumption_resolution,[],[f1875,f124])).
fof(f1875,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(forward_demodulation,[],[f590,f755])).
fof(f1864,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl9),
  inference(subsumption_resolution,[],[f1863,f129])).
fof(f1863,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl9),
  inference(forward_demodulation,[],[f1862,f141])).
fof(f1862,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(subsumption_resolution,[],[f1861,f124])).
fof(f1861,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X4)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(forward_demodulation,[],[f699,f755])).
fof(f1856,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl9),
  inference(subsumption_resolution,[],[f1855,f129])).
fof(f1855,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl9),
  inference(forward_demodulation,[],[f1854,f141])).
fof(f1854,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(subsumption_resolution,[],[f1853,f124])).
fof(f1853,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(forward_demodulation,[],[f712,f755])).
fof(f712,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(resolution,[],[f170,f92])).
fof(f1849,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl9),
  inference(subsumption_resolution,[],[f1848,f129])).
fof(f1848,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl9),
  inference(forward_demodulation,[],[f747,f141])).
fof(f747,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(resolution,[],[f709,f92])).
fof(f1844,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl9),
  inference(subsumption_resolution,[],[f1843,f129])).
fof(f1843,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl9),
  inference(forward_demodulation,[],[f789,f141])).
fof(f789,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(subsumption_resolution,[],[f751,f709])).
fof(f751,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(resolution,[],[f709,f92])).
fof(f1837,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl9),
  inference(subsumption_resolution,[],[f1836,f129])).
fof(f1836,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl9),
  inference(forward_demodulation,[],[f848,f141])).
fof(f848,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(subsumption_resolution,[],[f805,f124])).
fof(f805,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(superposition,[],[f92,f755])).
fof(f1832,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl9),
  inference(subsumption_resolution,[],[f1831,f129])).
fof(f1831,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl9),
  inference(forward_demodulation,[],[f1830,f141])).
fof(f1830,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(subsumption_resolution,[],[f1829,f124])).
fof(f1829,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(forward_demodulation,[],[f861,f755])).
fof(f861,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(subsumption_resolution,[],[f809,f124])).
fof(f809,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(superposition,[],[f92,f755])).
fof(f1823,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl4 | $spl9)),
  inference(subsumption_resolution,[],[f1822,f129])).
fof(f1822,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl4 | $spl9)),
  inference(forward_demodulation,[],[f1821,f141])).
fof(f1821,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl4 | $spl9)),
  inference(subsumption_resolution,[],[f1820,f124])).
fof(f1820,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl4 | $spl9)),
  inference(forward_demodulation,[],[f1819,f755])).
fof(f1819,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl4),
  inference(subsumption_resolution,[],[f1818,f116])).
fof(f1818,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X4),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X5))),s('type.list.list'('type.labLang.sec'(sK0)),X6)))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl4),
  inference(forward_demodulation,[],[f922,f955])).
fof(f955,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | $spl4),
  inference(resolution,[],[f167,f106])).
fof(f1811,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl4 | $spl9)),
  inference(subsumption_resolution,[],[f1810,f129])).
fof(f1810,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl4 | $spl9)),
  inference(forward_demodulation,[],[f1809,f141])).
fof(f1809,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl4 | $spl9)),
  inference(subsumption_resolution,[],[f1808,f124])).
fof(f1808,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl4 | $spl9)),
  inference(forward_demodulation,[],[f961,f755])).
fof(f961,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl4),
  inference(superposition,[],[f167,f92])).
fof(f1805,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl9),
  inference(subsumption_resolution,[],[f1804,f129])).
fof(f1804,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | $spl9),
  inference(forward_demodulation,[],[f1803,f141])).
fof(f1803,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(subsumption_resolution,[],[f1802,f124])).
fof(f1802,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(forward_demodulation,[],[f1029,f755])).
fof(f1029,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(subsumption_resolution,[],[f993,f124])).
fof(f993,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(superposition,[],[f92,f716])).
fof(f1792,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl9 | $spl15)),
  inference(subsumption_resolution,[],[f1791,f129])).
fof(f1791,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl9 | $spl15)),
  inference(forward_demodulation,[],[f1790,f141])).
fof(f1790,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl9 | $spl15)),
  inference(subsumption_resolution,[],[f1789,f124])).
fof(f1789,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl9 | $spl15)),
  inference(forward_demodulation,[],[f1105,f755])).
fof(f1787,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl9 | $spl15)),
  inference(subsumption_resolution,[],[f1786,f129])).
fof(f1786,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl9 | $spl15)),
  inference(forward_demodulation,[],[f1785,f141])).
fof(f1785,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl9 | $spl15)),
  inference(subsumption_resolution,[],[f1784,f124])).
fof(f1784,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl9 | $spl15)),
  inference(forward_demodulation,[],[f1137,f755])).
fof(f1782,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | $spl37),
  inference(cnf_transformation,[],[f1782_D])).
fof(f1782_D,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f1780,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl4 | $spl9)),
  inference(subsumption_resolution,[],[f1779,f129])).
fof(f1779,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl4 | $spl9)),
  inference(forward_demodulation,[],[f1778,f141])).
fof(f1778,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl4 | $spl9)),
  inference(subsumption_resolution,[],[f1777,f124])).
fof(f1777,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl4 | $spl9)),
  inference(forward_demodulation,[],[f1147,f755])).
fof(f1147,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl4),
  inference(superposition,[],[f953,f92])).
fof(f953,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | $spl4),
  inference(resolution,[],[f167,f101])).
fof(f1772,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | $spl34),
  inference(cnf_transformation,[],[f1772_D])).
fof(f1772_D,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f1770,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl4 | $spl9)),
  inference(subsumption_resolution,[],[f1769,f129])).
fof(f1769,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl4 | $spl9)),
  inference(forward_demodulation,[],[f1768,f141])).
fof(f1768,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl4 | $spl9)),
  inference(subsumption_resolution,[],[f1767,f124])).
fof(f1767,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl4 | $spl9)),
  inference(forward_demodulation,[],[f1173,f755])).
fof(f1173,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl4),
  inference(superposition,[],[f955,f92])).
fof(f1757,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl9 | $spl15)),
  inference(subsumption_resolution,[],[f1756,f129])).
fof(f1756,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl9 | $spl15)),
  inference(forward_demodulation,[],[f1755,f141])).
fof(f1755,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl9 | $spl15)),
  inference(subsumption_resolution,[],[f1754,f124])).
fof(f1754,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl9 | $spl15)),
  inference(forward_demodulation,[],[f1377,f755])).
fof(f1750,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl9 | $spl15)),
  inference(subsumption_resolution,[],[f1749,f129])).
fof(f1749,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ($spl9 | $spl15)),
  inference(forward_demodulation,[],[f1748,f141])).
fof(f1748,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl9 | $spl15)),
  inference(subsumption_resolution,[],[f1747,f124])).
fof(f1747,plain,(
  p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl9 | $spl15)),
  inference(forward_demodulation,[],[f1397,f755])).
fof(f1741,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl9 | $spl15)),
  inference(subsumption_resolution,[],[f1740,f129])).
fof(f1740,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | ($spl9 | $spl15)),
  inference(forward_demodulation,[],[f1739,f141])).
fof(f1739,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl9 | $spl15)),
  inference(subsumption_resolution,[],[f1738,f124])).
fof(f1738,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl9 | $spl15)),
  inference(forward_demodulation,[],[f1454,f755])).
fof(f1730,plain,(
  ( ! [X20,X18] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X18))),s('type.list.list'('type.labLang.sec'(sK0)),X20))))) ) | $spl32),
  inference(cnf_transformation,[],[f1730_D])).
fof(f1730_D,plain,(
  ( ! [X20,X18] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X18))),s('type.list.list'('type.labLang.sec'(sK0)),X20))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f1718,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl27),
  inference(cnf_transformation,[],[f1718_D])).
fof(f1718_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f1732,plain,(
  ( ! [X14,X12] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(sK0)),X14))))) )),
  inference(subsumption_resolution,[],[f1519,f82])).
fof(f1519,plain,(
  ( ! [X14,X12,X13] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(sK0)),X14)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X12))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X13),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X14))))))) )),
  inference(superposition,[],[f352,f106])).
fof(f1731,plain,(
  ( ! [X17,X15] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X15))),s('type.list.list'('type.labLang.sec'(sK0)),X17))))) )),
  inference(subsumption_resolution,[],[f1520,f82])).
fof(f1520,plain,(
  ( ! [X17,X15,X16] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X15))),s('type.list.list'('type.labLang.sec'(sK0)),X17)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X15))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X16),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X17))))))) )),
  inference(superposition,[],[f352,f108])).
fof(f1729,plain,(
  ( ! [X20,X18] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X18))),s('type.list.list'('type.labLang.sec'(sK0)),X20))))) )),
  inference(subsumption_resolution,[],[f1521,f352])).
fof(f1521,plain,(
  ( ! [X19,X20,X18] : (s(bool,'T_0') != s(bool,'F_0') | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X18))),s('type.list.list'('type.labLang.sec'(sK0)),X20)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X18))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X19),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X20)))))) )),
  inference(superposition,[],[f352,f109])).
fof(f1726,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X28),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X27),s('type.list.list'('type.labLang.line'(sK0)),X29))))),s('type.list.list'('type.labLang.sec'(sK0)),X30)))))) ) | $spl30),
  inference(cnf_transformation,[],[f1726_D])).
fof(f1726_D,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X28),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X27),s('type.list.list'('type.labLang.line'(sK0)),X29))))),s('type.list.list'('type.labLang.sec'(sK0)),X30)))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f1728,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X20),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X19),s('type.list.list'('type.labLang.line'(sK0)),X21))))),s('type.list.list'('type.labLang.sec'(sK0)),X22)))))) )),
  inference(subsumption_resolution,[],[f1536,f1057])).
fof(f1536,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X20),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X19),s('type.list.list'('type.labLang.line'(sK0)),X21))))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X19))))) )),
  inference(superposition,[],[f1276,f106])).
fof(f1276,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'F_0') != s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X25))) | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X25),s('type.list.list'('type.labLang.line'(sK0)),X26))))),s('type.list.list'('type.labLang.sec'(sK0)),X27)))))) )),
  inference(resolution,[],[f1057,f101])).
fof(f1727,plain,(
  ( ! [X26,X24,X23,X25] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X23),s('type.list.list'('type.labLang.line'(sK0)),X25))))),s('type.list.list'('type.labLang.sec'(sK0)),X26)))))) )),
  inference(subsumption_resolution,[],[f1537,f1057])).
fof(f1537,plain,(
  ( ! [X26,X24,X23,X25] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X23),s('type.list.list'('type.labLang.line'(sK0)),X25))))),s('type.list.list'('type.labLang.sec'(sK0)),X26))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X23))))) )),
  inference(superposition,[],[f1276,f108])).
fof(f1725,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X28),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X27),s('type.list.list'('type.labLang.line'(sK0)),X29))))),s('type.list.list'('type.labLang.sec'(sK0)),X30)))))) )),
  inference(subsumption_resolution,[],[f1538,f1276])).
fof(f1538,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X28),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X27),s('type.list.list'('type.labLang.line'(sK0)),X29))))),s('type.list.list'('type.labLang.sec'(sK0)),X30))))) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X27)))) )),
  inference(superposition,[],[f1276,f109])).
fof(f1722,plain,(
  ( ! [X25] : (s(bool,'T_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X25)))) ) | $spl28),
  inference(cnf_transformation,[],[f1722_D])).
fof(f1722_D,plain,(
  ( ! [X25] : (s(bool,'T_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X25)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f1724,plain,(
  ( ! [X17] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X17)))) )),
  inference(subsumption_resolution,[],[f1558,f1563])).
fof(f1563,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X12),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X13),s('type.list.list'('type.labLang.line'(sK0)),X14))))),s('type.list.list'('type.labLang.sec'(sK0)),X15)))))) | s(bool,'T_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X13)))) )),
  inference(trivial_inequality_removal,[],[f1557])).
fof(f1557,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X13))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X12),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X13),s('type.list.list'('type.labLang.line'(sK0)),X14))))),s('type.list.list'('type.labLang.sec'(sK0)),X15))))))) )),
  inference(superposition,[],[f1278,f104])).
fof(f104,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f66])).
fof(f1278,plain,(
  ( ! [X35,X33,X34,X32] : (s(bool,'F_0') != s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X33),s('type.list.list'('type.labLang.line'(sK0)),X34))))),s('type.list.list'('type.labLang.sec'(sK0)),X35))))) | s(bool,'T_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X33)))) )),
  inference(resolution,[],[f1057,f106])).
fof(f1558,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X17))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X16),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X17),s('type.list.list'('type.labLang.line'(sK0)),X18))))),s('type.list.list'('type.labLang.sec'(sK0)),X19))))))) )),
  inference(superposition,[],[f1278,f106])).
fof(f1723,plain,(
  ( ! [X21] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X21)))) )),
  inference(subsumption_resolution,[],[f1559,f1563])).
fof(f1559,plain,(
  ( ! [X23,X21,X22,X20] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X21))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X20),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X21),s('type.list.list'('type.labLang.line'(sK0)),X22))))),s('type.list.list'('type.labLang.sec'(sK0)),X23))))))) )),
  inference(superposition,[],[f1278,f108])).
fof(f1721,plain,(
  ( ! [X25] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X25)))) )),
  inference(subsumption_resolution,[],[f1560,f1278])).
fof(f1560,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X25))) | s(bool,'F_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X25),s('type.list.list'('type.labLang.line'(sK0)),X26))))),s('type.list.list'('type.labLang.sec'(sK0)),X27)))))) )),
  inference(superposition,[],[f1278,f109])).
fof(f1716,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X28),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X27),s('type.list.list'('type.labLang.line'(sK0)),X29))))),s('type.list.list'('type.labLang.sec'(sK0)),X30)))))) ) | $spl24),
  inference(cnf_transformation,[],[f1716_D])).
fof(f1716_D,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X28),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X27),s('type.list.list'('type.labLang.line'(sK0)),X29))))),s('type.list.list'('type.labLang.sec'(sK0)),X30)))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f1720,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X20),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X19),s('type.list.list'('type.labLang.line'(sK0)),X21))))),s('type.list.list'('type.labLang.sec'(sK0)),X22)))))) )),
  inference(subsumption_resolution,[],[f1599,f1059])).
fof(f1599,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X20),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X19),s('type.list.list'('type.labLang.line'(sK0)),X21))))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X19))))) )),
  inference(superposition,[],[f1314,f106])).
fof(f1314,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'F_0') != s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X25))) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X25),s('type.list.list'('type.labLang.line'(sK0)),X26))))),s('type.list.list'('type.labLang.sec'(sK0)),X27)))))) )),
  inference(resolution,[],[f1059,f101])).
fof(f1719,plain,(
  ( ! [X26,X24,X23,X25] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X23),s('type.list.list'('type.labLang.line'(sK0)),X25))))),s('type.list.list'('type.labLang.sec'(sK0)),X26)))))) )),
  inference(subsumption_resolution,[],[f1600,f1059])).
fof(f1600,plain,(
  ( ! [X26,X24,X23,X25] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X24),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X23),s('type.list.list'('type.labLang.line'(sK0)),X25))))),s('type.list.list'('type.labLang.sec'(sK0)),X26))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X23))))) )),
  inference(superposition,[],[f1314,f108])).
fof(f1715,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X28),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X27),s('type.list.list'('type.labLang.line'(sK0)),X29))))),s('type.list.list'('type.labLang.sec'(sK0)),X30)))))) )),
  inference(subsumption_resolution,[],[f1601,f1314])).
fof(f1601,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X28),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),X27),s('type.list.list'('type.labLang.line'(sK0)),X29))))),s('type.list.list'('type.labLang.sec'(sK0)),X30))))) | s(bool,'F_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),X27)))) )),
  inference(superposition,[],[f1314,f109])).
fof(f1713,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl9),
  inference(subsumption_resolution,[],[f1712,f129])).
fof(f1712,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl9),
  inference(forward_demodulation,[],[f1711,f141])).
fof(f1711,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(subsumption_resolution,[],[f1710,f124])).
fof(f1710,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X20))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X21),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),X22))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(forward_demodulation,[],[f1613,f755])).
fof(f1707,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl9),
  inference(subsumption_resolution,[],[f1706,f129])).
fof(f1706,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl9),
  inference(forward_demodulation,[],[f1705,f141])).
fof(f1705,plain,(
  ( ! [X33,X34,X32] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(subsumption_resolution,[],[f1704,f124])).
fof(f1704,plain,(
  ( ! [X33,X34,X32] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X32),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X33))),s('type.list.list'('type.labLang.sec'(sK0)),X34)))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(forward_demodulation,[],[f1617,f755])).
fof(f1701,plain,(
  ( ! [X43,X41,X42] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X41),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X42))),s('type.list.list'('type.labLang.sec'(sK0)),X43)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) )),
  inference(subsumption_resolution,[],[f1700,f129])).
fof(f1700,plain,(
  ( ! [X43,X41,X42] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X41),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X42))),s('type.list.list'('type.labLang.sec'(sK0)),X43)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) )),
  inference(forward_demodulation,[],[f1620,f141])).
fof(f1620,plain,(
  ( ! [X43,X41,X42] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X41),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X42))),s('type.list.list'('type.labLang.sec'(sK0)),X43)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f354,f92])).
fof(f1699,plain,(
  ( ! [X47,X48,X49] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X47),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X48))),s('type.list.list'('type.labLang.sec'(sK0)),X49)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl9),
  inference(subsumption_resolution,[],[f1698,f116])).
fof(f1698,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X47),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X48))),s('type.list.list'('type.labLang.sec'(sK0)),X49)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))))) ) | $spl9),
  inference(forward_demodulation,[],[f1697,f141])).
fof(f1697,plain,(
  ( ! [X47,X48,X49] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X47),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X48))),s('type.list.list'('type.labLang.sec'(sK0)),X49)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(subsumption_resolution,[],[f1696,f124])).
fof(f1696,plain,(
  ( ! [X47,X48,X49] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X47),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X48))),s('type.list.list'('type.labLang.sec'(sK0)),X49)))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(forward_demodulation,[],[f1622,f755])).
fof(f1686,plain,(
  ( ! [X47,X48,X49] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X47),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X48))),s('type.list.list'('type.labLang.sec'(sK0)),X49))))) ) | ($spl2 | $spl9)),
  inference(subsumption_resolution,[],[f1685,f129])).
fof(f1685,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X47),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X48))),s('type.list.list'('type.labLang.sec'(sK0)),X49))))) ) | ($spl2 | $spl9)),
  inference(forward_demodulation,[],[f1684,f141])).
fof(f1684,plain,(
  ( ! [X47,X48,X49] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X47),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X48))),s('type.list.list'('type.labLang.sec'(sK0)),X49)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl2 | $spl9)),
  inference(subsumption_resolution,[],[f1683,f124])).
fof(f1683,plain,(
  ( ! [X47,X48,X49] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X47),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X48))),s('type.list.list'('type.labLang.sec'(sK0)),X49)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl2 | $spl9)),
  inference(forward_demodulation,[],[f1682,f755])).
fof(f1682,plain,(
  ( ! [X47,X48,X49] : (s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X47),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X48))),s('type.list.list'('type.labLang.sec'(sK0)),X49)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl2),
  inference(subsumption_resolution,[],[f1681,f116])).
fof(f1681,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',X47),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X48))),s('type.list.list'('type.labLang.sec'(sK0)),X49)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl2),
  inference(forward_demodulation,[],[f1622,f220])).
fof(f220,plain,(
  s(bool,'T_0') = s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0)))) | $spl2),
  inference(resolution,[],[f164,f106])).
fof(f853,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl9),
  inference(subsumption_resolution,[],[f852,f116])).
fof(f852,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl9),
  inference(forward_demodulation,[],[f851,f141])).
fof(f851,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(subsumption_resolution,[],[f806,f124])).
fof(f806,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(superposition,[],[f94,f755])).
fof(f847,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | ($spl2 | $spl9)),
  inference(subsumption_resolution,[],[f846,f129])).
fof(f846,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | ($spl2 | $spl9)),
  inference(forward_demodulation,[],[f845,f141])).
fof(f845,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl2 | $spl9)),
  inference(subsumption_resolution,[],[f844,f116])).
fof(f844,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl2 | $spl9)),
  inference(forward_demodulation,[],[f843,f220])).
fof(f843,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(subsumption_resolution,[],[f804,f124])).
fof(f804,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(superposition,[],[f90,f755])).
fof(f783,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl9),
  inference(subsumption_resolution,[],[f782,f116])).
fof(f782,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl9),
  inference(forward_demodulation,[],[f748,f141])).
fof(f748,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(resolution,[],[f709,f94])).
fof(f779,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | ($spl2 | $spl9)),
  inference(subsumption_resolution,[],[f778,f129])).
fof(f778,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | ($spl2 | $spl9)),
  inference(forward_demodulation,[],[f777,f141])).
fof(f777,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl2 | $spl9)),
  inference(subsumption_resolution,[],[f776,f116])).
fof(f776,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | ($spl2 | $spl9)),
  inference(forward_demodulation,[],[f746,f220])).
fof(f746,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl9),
  inference(resolution,[],[f709,f90])).
fof(f744,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl9),
  inference(subsumption_resolution,[],[f743,f116])).
fof(f743,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl9),
  inference(forward_demodulation,[],[f714,f141])).
fof(f714,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(resolution,[],[f170,f94])).
fof(f740,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ($spl2 | $spl9)),
  inference(subsumption_resolution,[],[f739,f129])).
fof(f739,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ($spl2 | $spl9)),
  inference(forward_demodulation,[],[f738,f141])).
fof(f738,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl2 | $spl9)),
  inference(subsumption_resolution,[],[f737,f116])).
fof(f737,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | ($spl2 | $spl9)),
  inference(forward_demodulation,[],[f710,f220])).
fof(f710,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl9),
  inference(resolution,[],[f170,f90])).
fof(f602,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))),
  inference(subsumption_resolution,[],[f601,f116])).
fof(f601,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))),
  inference(forward_demodulation,[],[f600,f141])).
fof(f600,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f549,f124])).
fof(f549,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(superposition,[],[f95,f187])).
fof(f599,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))),
  inference(subsumption_resolution,[],[f598,f116])).
fof(f598,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))),
  inference(forward_demodulation,[],[f597,f141])).
fof(f597,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(subsumption_resolution,[],[f548,f124])).
fof(f548,plain,(
  p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(superposition,[],[f94,f187])).
fof(f589,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl2),
  inference(subsumption_resolution,[],[f588,f116])).
fof(f588,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | $spl2),
  inference(forward_demodulation,[],[f587,f141])).
fof(f587,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl2),
  inference(subsumption_resolution,[],[f586,f116])).
fof(f586,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl2),
  inference(forward_demodulation,[],[f585,f220])).
fof(f584,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl2),
  inference(subsumption_resolution,[],[f583,f129])).
fof(f583,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | $spl2),
  inference(forward_demodulation,[],[f582,f141])).
fof(f582,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl2),
  inference(subsumption_resolution,[],[f581,f116])).
fof(f581,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0')))) | $spl2),
  inference(forward_demodulation,[],[f580,f220])).
fof(f509,plain,(
  ( ! [X17,X16] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X16))),s('type.list.list'('type.labLang.sec'(sK0)),X17)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(subsumption_resolution,[],[f448,f116])).
fof(f448,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X16))),s('type.list.list'('type.labLang.sec'(sK0)),X17)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(superposition,[],[f95,f141])).
fof(f508,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X14))),s('type.list.list'('type.labLang.sec'(sK0)),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) )),
  inference(subsumption_resolution,[],[f447,f116])).
fof(f447,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X14))),s('type.list.list'('type.labLang.sec'(sK0)),X15)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) )),
  inference(superposition,[],[f94,f141])).
fof(f502,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl2),
  inference(subsumption_resolution,[],[f501,f116])).
fof(f501,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl2),
  inference(forward_demodulation,[],[f500,f220])).
fof(f499,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl2),
  inference(subsumption_resolution,[],[f498,f129])).
fof(f498,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl2),
  inference(forward_demodulation,[],[f497,f220])).
fof(f388,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) )),
  inference(subsumption_resolution,[],[f387,f81])).
fof(f387,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(subsumption_resolution,[],[f350,f94])).
fof(f350,plain,(
  ( ! [X4,X5] : (~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) )),
  inference(resolution,[],[f82,f95])).
fof(f383,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl2),
  inference(subsumption_resolution,[],[f382,f129])).
fof(f382,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0)))))))) ) | $spl2),
  inference(forward_demodulation,[],[f381,f220])).
fof(f328,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl2),
  inference(subsumption_resolution,[],[f327,f81])).
fof(f327,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl2),
  inference(subsumption_resolution,[],[f287,f116])).
fof(f287,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl2),
  inference(superposition,[],[f91,f220])).
fof(f326,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl2),
  inference(subsumption_resolution,[],[f325,f81])).
fof(f325,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl2),
  inference(subsumption_resolution,[],[f286,f116])).
fof(f286,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl2),
  inference(superposition,[],[f90,f220])).
fof(f233,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) ) | $spl2),
  inference(subsumption_resolution,[],[f216,f81])).
fof(f216,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl2),
  inference(resolution,[],[f164,f91])).
fof(f232,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) ) | $spl2),
  inference(subsumption_resolution,[],[f215,f81])).
fof(f215,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))) ) | $spl2),
  inference(resolution,[],[f164,f90])).
fof(f213,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))),
  inference(subsumption_resolution,[],[f186,f81])).
fof(f186,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(resolution,[],[f89,f95])).
fof(f212,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))),
  inference(subsumption_resolution,[],[f185,f81])).
fof(f185,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(resolution,[],[f89,f94])).
fof(f211,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))),
  inference(subsumption_resolution,[],[f184,f81])).
fof(f184,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(resolution,[],[f89,f93])).
fof(f210,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))),
  inference(subsumption_resolution,[],[f183,f81])).
fof(f183,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(resolution,[],[f89,f92])).
fof(f209,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))),
  inference(subsumption_resolution,[],[f182,f81])).
fof(f182,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(resolution,[],[f89,f91])).
fof(f208,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))),
  inference(subsumption_resolution,[],[f181,f81])).
fof(f181,plain,(
  p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK4(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.NIL_0'))))),
  inference(resolution,[],[f89,f90])).
fof(f137,plain,(
  ( ! [X10,X11] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(sK0)),X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(resolution,[],[f81,f95])).
fof(f136,plain,(
  ( ! [X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X8))),s('type.list.list'('type.labLang.sec'(sK0)),X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.CONS_2'(s('type.labLang.line'(sK0),sK10(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) )),
  inference(resolution,[],[f81,f94])).
fof(f135,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X6))),s('type.list.list'('type.labLang.sec'(sK0)),X7)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(resolution,[],[f81,f93])).
fof(f134,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK0)),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num','const.arithmetic.-_2'(s('type.num.num',sK8(sK1,sK0)),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK8(sK1,sK0)) | p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) )),
  inference(resolution,[],[f81,f92])).
fof(f133,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X2))),s('type.list.list'('type.labLang.sec'(sK0)),X3)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK6(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),'const.list.NIL_0'))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))))) )),
  inference(resolution,[],[f81,f91])).
fof(f132,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',X0))),s('type.list.list'('type.labLang.sec'(sK0)),X1)))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK8(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),'const.list.CONS_2'(s('type.labLang.sec'(sK0),'const.labLang.Section_2'(s('type.num.num',sK9(sK1,sK0)),s('type.list.list'('type.labLang.line'(sK0)),sK11(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK12(sK1,sK0))))))) | ~p(s(bool,'const.lab_to_target.is_Label_1'(s('type.labLang.line'(sK0),sK10(sK1,sK0))))) | p(s(bool,happ(s(fun('type.list.list'('type.labLang.sec'(sK0)),bool),happ(s(fun('type.num.num',fun('type.list.list'('type.labLang.sec'(sK0)),bool)),sK1),s('type.num.num',sK5(sK1,sK0)))),s('type.list.list'('type.labLang.sec'(sK0)),sK7(sK1,sK0)))))) )),
  inference(resolution,[],[f81,f90])).
% SZS output end Proof for thm.labSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 150
% Passive clauses: 900
% Generated clauses: 6095
% Final active clauses: 84
% Final passive clauses: 349
% Input formulas: 21
% Initial clauses: 51
% 
% Selected by SInE selection: 21
% SInE iterations: 1
% 
% Duplicate literals: 64
% Trivial inequalities: 188
% Fw subsumption resolutions: 1379
% Fw demodulations: 1043
% Bw demodulations: 34
% 
% Simple tautologies: 139
% Forward subsumptions: 2233
% 
% Binary resolution: 524
% Forward superposition: 1372
% Backward superposition: 902
% Equality resolution: 2
% 
% Split clauses: 253
% Split components: 734
% SAT solver clauses: 277
% SAT solver unit clauses: 1
% SAT solver binary clauses: 31
% 
% Sat splits: 253
% Sat splitting refutations: 23
% 
% Memory used [KB]: 3965
% Time elapsed: 0.241 s
% ------------------------------
% ------------------------------
% Success in time 12.001 s
