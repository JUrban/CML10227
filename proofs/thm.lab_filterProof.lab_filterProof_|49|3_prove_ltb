Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.lab_filterProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.lab_filterProof
% SZS output start Proof for thm.lab_filterProof
fof(f10124,plain,(
  $false),
  inference(subsumption_resolution,[],[f10123,f258])).
fof(f258,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.lab_filterProof.all_skips_3'(s('type.num.num',X1),s('type.list.list'('type.labLang.sec'(X0)),X2),s('type.num.num',sK16(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0,X1,X2] : (s('type.option.option'('type.labLang.line'(X0)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK16(X2,X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),X2))) = s('type.option.option'('type.labLang.line'(X0)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.lab_filterProof.adjust_pc_2'(s('type.num.num',X1),s('type.list.list'('type.labLang.sec'(X0)),X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.lab_filter.filter_skip_1'(s('type.list.list'('type.labLang.sec'(X0)),X2))))) & p(s(bool,'const.lab_filterProof.all_skips_3'(s('type.num.num',X1),s('type.list.list'('type.labLang.sec'(X0)),X2),s('type.num.num',sK16(X2,X1,X0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16])],[f74])).
fof(f74,plain,(
  ! [X0,X1,X2] : ? [X3] : (s('type.option.option'('type.labLang.line'(X0)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(X0)),X2))) = s('type.option.option'('type.labLang.line'(X0)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.lab_filterProof.adjust_pc_2'(s('type.num.num',X1),s('type.list.list'('type.labLang.sec'(X0)),X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.lab_filter.filter_skip_1'(s('type.list.list'('type.labLang.sec'(X0)),X2))))) & p(s(bool,'const.lab_filterProof.all_skips_3'(s('type.num.num',X1),s('type.list.list'('type.labLang.sec'(X0)),X2),s('type.num.num',X3)))))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0] : ! [X1,X2] : ? [X3] : (s('type.option.option'('type.labLang.line'(X0)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X3))),s('type.list.list'('type.labLang.sec'(X0)),X2))) = s('type.option.option'('type.labLang.line'(X0)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.lab_filterProof.adjust_pc_2'(s('type.num.num',X1),s('type.list.list'('type.labLang.sec'(X0)),X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.lab_filter.filter_skip_1'(s('type.list.list'('type.labLang.sec'(X0)),X2))))) & p(s(bool,'const.lab_filterProof.all_skips_3'(s('type.num.num',X1),s('type.list.list'('type.labLang.sec'(X0)),X2),s('type.num.num',X3)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X8,X9] : ? [X10] : (s('type.option.option'('type.labLang.line'(X6)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(X6)),X9))) = s('type.option.option'('type.labLang.line'(X6)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.lab_filterProof.adjust_pc_2'(s('type.num.num',X8),s('type.list.list'('type.labLang.sec'(X6)),X9))),s('type.list.list'('type.labLang.sec'(X6)),'const.lab_filter.filter_skip_1'(s('type.list.list'('type.labLang.sec'(X6)),X9))))) & p(s(bool,'const.lab_filterProof.all_skips_3'(s('type.num.num',X8),s('type.list.list'('type.labLang.sec'(X6)),X9),s('type.num.num',X10)))))),
  file('thm.lab_filterProof.lab_filterProof_|49|3_prove_ltb','thm.lab_filterProof.lab_filterProof_7_prove_ltb')).
fof(f10123,plain,(
  ~p(s(bool,'const.lab_filterProof.all_skips_3'(s('type.num.num',sK14),s('type.list.list'('type.labLang.sec'(sK12)),sK15),s('type.num.num',sK16(sK15,sK14,sK12)))))),
  inference(trivial_inequality_removal,[],[f10121])).
fof(f10121,plain,(
  s('type.option.option'('type.labLang.line'(sK12)),sK13) != s('type.option.option'('type.labLang.line'(sK12)),sK13) | ~p(s(bool,'const.lab_filterProof.all_skips_3'(s('type.num.num',sK14),s('type.list.list'('type.labLang.sec'(sK12)),sK15),s('type.num.num',sK16(sK15,sK14,sK12)))))),
  inference(superposition,[],[f212,f4289])).
fof(f4289,plain,(
  s('type.option.option'('type.labLang.line'(sK12)),sK13) = s('type.option.option'('type.labLang.line'(sK12)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK14),s('type.num.num',sK16(sK15,sK14,sK12)))),s('type.list.list'('type.labLang.sec'(sK12)),sK15)))),
  inference(superposition,[],[f257,f211])).
fof(f211,plain,(
  s('type.option.option'('type.labLang.line'(sK12)),sK13) = s('type.option.option'('type.labLang.line'(sK12)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.lab_filterProof.adjust_pc_2'(s('type.num.num',sK14),s('type.list.list'('type.labLang.sec'(sK12)),sK15))),s('type.list.list'('type.labLang.sec'(sK12)),'const.lab_filter.filter_skip_1'(s('type.list.list'('type.labLang.sec'(sK12)),sK15)))))),
  inference(cnf_transformation,[],[f145])).
fof(f145,plain,(
  s('type.option.option'('type.labLang.line'(sK12)),sK13) = s('type.option.option'('type.labLang.line'(sK12)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.lab_filterProof.adjust_pc_2'(s('type.num.num',sK14),s('type.list.list'('type.labLang.sec'(sK12)),sK15))),s('type.list.list'('type.labLang.sec'(sK12)),'const.lab_filter.filter_skip_1'(s('type.list.list'('type.labLang.sec'(sK12)),sK15))))) & ! [X4] : (s('type.option.option'('type.labLang.line'(sK12)),sK13) != s('type.option.option'('type.labLang.line'(sK12)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK14),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK12)),sK15))) | ~p(s(bool,'const.lab_filterProof.all_skips_3'(s('type.num.num',sK14),s('type.list.list'('type.labLang.sec'(sK12)),sK15),s('type.num.num',X4)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15])],[f99])).
fof(f99,plain,(
  ? [X0,X1,X2,X3] : (s('type.option.option'('type.labLang.line'(X0)),X1) = s('type.option.option'('type.labLang.line'(X0)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.lab_filterProof.adjust_pc_2'(s('type.num.num',X2),s('type.list.list'('type.labLang.sec'(X0)),X3))),s('type.list.list'('type.labLang.sec'(X0)),'const.lab_filter.filter_skip_1'(s('type.list.list'('type.labLang.sec'(X0)),X3))))) & ! [X4] : (s('type.option.option'('type.labLang.line'(X0)),X1) != s('type.option.option'('type.labLang.line'(X0)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(X0)),X3))) | ~p(s(bool,'const.lab_filterProof.all_skips_3'(s('type.num.num',X2),s('type.list.list'('type.labLang.sec'(X0)),X3),s('type.num.num',X4))))))),
  inference(ennf_transformation,[],[f41])).
fof(f41,plain,(
  ~! [X0,X1,X2,X3] : (s('type.option.option'('type.labLang.line'(X0)),X1) = s('type.option.option'('type.labLang.line'(X0)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.lab_filterProof.adjust_pc_2'(s('type.num.num',X2),s('type.list.list'('type.labLang.sec'(X0)),X3))),s('type.list.list'('type.labLang.sec'(X0)),'const.lab_filter.filter_skip_1'(s('type.list.list'('type.labLang.sec'(X0)),X3))))) => ? [X4] : (s('type.option.option'('type.labLang.line'(X0)),X1) = s('type.option.option'('type.labLang.line'(X0)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(X0)),X3))) & p(s(bool,'const.lab_filterProof.all_skips_3'(s('type.num.num',X2),s('type.list.list'('type.labLang.sec'(X0)),X3),s('type.num.num',X4))))))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ~! [X0] : ! [X1,X2,X3] : (s('type.option.option'('type.labLang.line'(X0)),X1) = s('type.option.option'('type.labLang.line'(X0)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.lab_filterProof.adjust_pc_2'(s('type.num.num',X2),s('type.list.list'('type.labLang.sec'(X0)),X3))),s('type.list.list'('type.labLang.sec'(X0)),'const.lab_filter.filter_skip_1'(s('type.list.list'('type.labLang.sec'(X0)),X3))))) => ? [X4] : (s('type.option.option'('type.labLang.line'(X0)),X1) = s('type.option.option'('type.labLang.line'(X0)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X2),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(X0)),X3))) & p(s(bool,'const.lab_filterProof.all_skips_3'(s('type.num.num',X2),s('type.list.list'('type.labLang.sec'(X0)),X3),s('type.num.num',X4))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : (s('type.option.option'('type.labLang.line'(X6)),X7) = s('type.option.option'('type.labLang.line'(X6)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.lab_filterProof.adjust_pc_2'(s('type.num.num',X8),s('type.list.list'('type.labLang.sec'(X6)),X9))),s('type.list.list'('type.labLang.sec'(X6)),'const.lab_filter.filter_skip_1'(s('type.list.list'('type.labLang.sec'(X6)),X9))))) => ? [X10] : (s('type.option.option'('type.labLang.line'(X6)),X7) = s('type.option.option'('type.labLang.line'(X6)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(X6)),X9))) & p(s(bool,'const.lab_filterProof.all_skips_3'(s('type.num.num',X8),s('type.list.list'('type.labLang.sec'(X6)),X9),s('type.num.num',X10))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : (s('type.option.option'('type.labLang.line'(X6)),X7) = s('type.option.option'('type.labLang.line'(X6)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.lab_filterProof.adjust_pc_2'(s('type.num.num',X8),s('type.list.list'('type.labLang.sec'(X6)),X9))),s('type.list.list'('type.labLang.sec'(X6)),'const.lab_filter.filter_skip_1'(s('type.list.list'('type.labLang.sec'(X6)),X9))))) => ? [X10] : (s('type.option.option'('type.labLang.line'(X6)),X7) = s('type.option.option'('type.labLang.line'(X6)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X8),s('type.num.num',X10))),s('type.list.list'('type.labLang.sec'(X6)),X9))) & p(s(bool,'const.lab_filterProof.all_skips_3'(s('type.num.num',X8),s('type.list.list'('type.labLang.sec'(X6)),X9),s('type.num.num',X10))))))),
  file('thm.lab_filterProof.lab_filterProof_|49|3_prove_ltb','thm.lab_filterProof.lab_filterProof_|49|3_prove_ltb')).
fof(f257,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.labLang.line'(X0)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',sK16(X2,X1,X0)))),s('type.list.list'('type.labLang.sec'(X0)),X2))) = s('type.option.option'('type.labLang.line'(X0)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.lab_filterProof.adjust_pc_2'(s('type.num.num',X1),s('type.list.list'('type.labLang.sec'(X0)),X2))),s('type.list.list'('type.labLang.sec'(X0)),'const.lab_filter.filter_skip_1'(s('type.list.list'('type.labLang.sec'(X0)),X2)))))) )),
  inference(cnf_transformation,[],[f164])).
fof(f212,plain,(
  ( ! [X4] : (s('type.option.option'('type.labLang.line'(sK12)),sK13) != s('type.option.option'('type.labLang.line'(sK12)),'const.labSem.asm_fetch_aux_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK14),s('type.num.num',X4))),s('type.list.list'('type.labLang.sec'(sK12)),sK15))) | ~p(s(bool,'const.lab_filterProof.all_skips_3'(s('type.num.num',sK14),s('type.list.list'('type.labLang.sec'(sK12)),sK15),s('type.num.num',X4))))) )),
  inference(cnf_transformation,[],[f145])).
% SZS output end Proof for thm.lab_filterProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 504
% Passive clauses: 4122
% Generated clauses: 9925
% Final active clauses: 454
% Final passive clauses: 3266
% Input formulas: 38
% Initial clauses: 156
% 
% Duplicate literals: 243
% Trivial inequalities: 73
% Fw subsumption resolutions: 887
% Fw demodulations: 47
% Bw demodulations: 49
% 
% Simple tautologies: 180
% Equational tautologies: 62
% Forward subsumptions: 4185
% 
% Binary resolution: 5455
% Factoring: 942
% Forward superposition: 868
% Backward superposition: 1000
% Self superposition: 24
% Equality factoring: 26
% Equality resolution: 32
% 
% Split clauses: 212
% Split components: 425
% SAT solver clauses: 433
% SAT solver unit clauses: 14
% SAT solver binary clauses: 95
% 
% Sat splits: 212
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 431
% TWLsolver calls for satisfiability: 261
% 
% Memory used [KB]: 4221
% Time elapsed: 0.270 s
% ------------------------------
% ------------------------------
% Success in time 0.27 s
