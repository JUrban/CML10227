Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.BinaryRandomAccessLists
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.BinaryRandomAccessLists
% SZS output start Proof for thm.BinaryRandomAccessLists
fof(f4741,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4740,f224,f404,f402,f400,f4507,f4739])).
fof(f4739,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f404,f226])).
fof(f226,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) != s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',X4),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,X5),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK12),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(sK12),X6))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),X7)))))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) = s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',sK14),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,sK15),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.NIL_0'))))) | s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) = s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',sK16),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,sK17),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK12),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),sK18))))))) | s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) = s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',sK19),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,sK20),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK12),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(sK12),sK21))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),sK22)))))))) & ! [X8,X9,X10] : s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) != s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',X8),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,X9),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK12),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),X10))))))) & ! [X4,X5,X6,X7] : s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) != s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',X4),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,X5),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK12),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(sK12),X6))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),X7))))))) & ! [X2,X3] : s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) != s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,X3),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.NIL_0')))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22])],[f138])).
fof(f138,plain,(
  ? [X0,X1] : ((? [X18,X19] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X18),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X19),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))))) | ? [X15,X16,X17] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X15),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X16),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X17))))))) | ? [X11,X12,X13,X14] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X12),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X13))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X14)))))))) & ! [X8,X9,X10] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) != s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X8),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X9),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X10))))))) & ! [X4,X5,X6,X7] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) != s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X4),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X5),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X6))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X7))))))) & ! [X2,X3] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) != s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1] : ((? [X9,X10] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X9),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X10),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))))) | ? [X6,X7,X8] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X6),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X7),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X8))))))) | ? [X2,X3,X4,X5] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X4))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X5)))))))) & ! [X17,X18,X19] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) != s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X17),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X18),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X19))))))) & ! [X13,X14,X15,X16] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) != s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X13),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X14),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X15))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X16))))))) & ! [X11,X12] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) != s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X12),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ? [X0,X1] : ((? [X9,X10] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X9),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X10),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))))) | ? [X6,X7,X8] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X6),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X7),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X8))))))) | ? [X2,X3,X4,X5] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X4))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X5)))))))) & (! [X17,X18,X19] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) != s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X17),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X18),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X19))))))) & ! [X13,X14,X15,X16] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) != s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X13),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X14),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X15))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X16))))))) & ! [X11,X12] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) != s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X12),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0')))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((? [X9,X10] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X9),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X10),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))))) | ? [X6,X7,X8] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X6),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X7),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X8))))))) | ? [X2,X3,X4,X5] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X4))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X5)))))))) => (? [X17,X18,X19] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X17),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X18),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X19))))))) | ? [X13,X14,X15,X16] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X13),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X14),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X15))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X16))))))) | ? [X11,X12] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X12),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0')))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((? [X9,X10] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X9),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X10),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0'))))) | ? [X6,X7,X8] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X6),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X7),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X8))))))) | ? [X2,X3,X4,X5] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X3),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X4))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X5)))))))) => (? [X17,X18,X19] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X17),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X18),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X19))))))) | ? [X13,X14,X15,X16] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X13),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X14),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X0),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X0),X15))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),X16))))))) | ? [X11,X12] : s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),X1) = s('type.pair.prod'('type.num.num','type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0)))),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'(X0,'type.list.list'('type.BinaryRandomAccessLists.digit'(X0))),'const.pair.,_2'(s(X0,X12),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X0)),'const.list.NIL_0')))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((? [X8,X9] : s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),X7) = s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),'const.pair.,_2'(s('type.num.num',X8),s('type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s(X6,X9),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.NIL_0'))))) | ? [X10,X11,X12] : s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),X7) = s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),'const.pair.,_2'(s('type.num.num',X10),s('type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s(X6,X11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),X12))))))) | ? [X10,X11,X13,X12] : s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),X7) = s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),'const.pair.,_2'(s('type.num.num',X10),s('type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s(X6,X11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X6),X13))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),X12)))))))) => (? [X10,X11,X12] : s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),X7) = s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),'const.pair.,_2'(s('type.num.num',X10),s('type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s(X6,X11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),X12))))))) | ? [X10,X11,X13,X12] : s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),X7) = s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),'const.pair.,_2'(s('type.num.num',X10),s('type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s(X6,X11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X6),X13))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),X12))))))) | ? [X8,X9] : s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),X7) = s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),'const.pair.,_2'(s('type.num.num',X8),s('type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s(X6,X9),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.NIL_0')))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((? [X8,X9] : s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),X7) = s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),'const.pair.,_2'(s('type.num.num',X8),s('type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s(X6,X9),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.NIL_0'))))) | ? [X10,X11,X12] : s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),X7) = s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),'const.pair.,_2'(s('type.num.num',X10),s('type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s(X6,X11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),X12))))))) | ? [X10,X11,X13,X12] : s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),X7) = s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),'const.pair.,_2'(s('type.num.num',X10),s('type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s(X6,X11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X6),X13))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),X12)))))))) => (? [X10,X11,X12] : s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),X7) = s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),'const.pair.,_2'(s('type.num.num',X10),s('type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s(X6,X11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),X12))))))) | ? [X10,X11,X13,X12] : s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),X7) = s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),'const.pair.,_2'(s('type.num.num',X10),s('type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s(X6,X11),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(X6),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(X6),X13))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),X12))))))) | ? [X8,X9] : s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),X7) = s('type.pair.prod'('type.num.num','type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6)))),'const.pair.,_2'(s('type.num.num',X8),s('type.pair.prod'(X6,'type.list.list'('type.BinaryRandomAccessLists.digit'(X6))),'const.pair.,_2'(s(X6,X9),s('type.list.list'('type.BinaryRandomAccessLists.digit'(X6)),'const.list.NIL_0')))))))),
  file('thm.BinaryRandomAccessLists.BinaryRandomAccessLists_|49||49|5_prove_ltb','thm.BinaryRandomAccessLists.BinaryRandomAccessLists_|49||49|5_prove_ltb')).
fof(f4507,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f400,f227])).
fof(f227,plain,(
  ( ! [X2,X3] : (s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) != s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,X3),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f139])).
fof(f400,plain,(
  s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) = s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',sK14),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,sK15),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.NIL_0'))))) | $spl0),
  inference(cnf_transformation,[],[f400_D])).
fof(f400_D,plain,(
  s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) = s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',sK14),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,sK15),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.NIL_0'))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f402,plain,(
  s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) = s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',sK16),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,sK17),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK12),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),sK18))))))) | $spl2),
  inference(cnf_transformation,[],[f402_D])).
fof(f402_D,plain,(
  s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) = s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',sK16),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,sK17),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK12),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),sK18))))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f404,plain,(
  s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) = s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',sK19),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,sK20),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK12),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(sK12),sK21))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),sK22))))))) | $spl4),
  inference(cnf_transformation,[],[f404_D])).
fof(f404_D,plain,(
  s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) = s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',sK19),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,sK20),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK12),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(sK12),sK21))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),sK22))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f224,plain,(
  s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) = s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',sK19),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,sK20),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK12),'const.BinaryRandomAccessLists.One_1'(s('type.BinaryRandomAccessLists.tree'(sK12),sK21))),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),sK22))))))) | s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) = s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',sK16),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,sK17),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK12),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),sK18))))))) | s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) = s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',sK14),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,sK15),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.NIL_0')))))),
  inference(cnf_transformation,[],[f139])).
fof(f4740,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f402,f225])).
fof(f225,plain,(
  ( ! [X10,X8,X9] : (s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),sK13) != s('type.pair.prod'('type.num.num','type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)))),'const.pair.,_2'(s('type.num.num',X8),s('type.pair.prod'(sK12,'type.list.list'('type.BinaryRandomAccessLists.digit'(sK12))),'const.pair.,_2'(s(sK12,X9),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),'const.list.CONS_2'(s('type.BinaryRandomAccessLists.digit'(sK12),'const.BinaryRandomAccessLists.Zero_0'),s('type.list.list'('type.BinaryRandomAccessLists.digit'(sK12)),X10)))))))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.BinaryRandomAccessLists
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 372
% Passive clauses: 1548
% Generated clauses: 4510
% Final active clauses: 372
% Final passive clauses: 994
% Input formulas: 37
% Initial clauses: 171
% 
% Duplicate literals: 153
% Trivial inequalities: 25
% Fw subsumption resolutions: 293
% 
% Simple tautologies: 145
% Equational tautologies: 30
% Forward subsumptions: 2318
% 
% Binary resolution: 2810
% Factoring: 772
% Forward superposition: 166
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 14
% 
% Split clauses: 101
% Split components: 204
% SAT solver clauses: 190
% SAT solver unit clauses: 9
% SAT solver binary clauses: 41
% SAT solver learnt clauses: 1
% 
% Sat splits: 101
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 189
% TWLsolver calls for satisfiability: 161
% 
% Memory used [KB]: 2430
% Time elapsed: 0.110 s
% ------------------------------
% ------------------------------
% Success in time 0.098 s
