Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f12695,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f12685,f12663,f6851,f6108,f6862])).
fof(f6862,plain,(
  s('type.wordSem.word_loc'(sK0),sK9(sK3,'type.wordSem.word_loc'(sK0))) = s('type.wordSem.word_loc'(sK0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK0),sK4(sK9(sK3,'type.wordSem.word_loc'(sK0)),sK0)))) | $spl146),
  inference(cnf_transformation,[],[f6862_D])).
fof(f6862_D,plain,(
  s('type.wordSem.word_loc'(sK0),sK9(sK3,'type.wordSem.word_loc'(sK0))) = s('type.wordSem.word_loc'(sK0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK0),sK4(sK9(sK3,'type.wordSem.word_loc'(sK0)),sK0)))) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f6108,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool)),sK1),s('type.bvp_to_word.config',X0))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),sK3))))) ) | $spl138),
  inference(cnf_transformation,[],[f6108_D])).
fof(f6108_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool)),sK1),s('type.bvp_to_word.config',X0))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),sK3))))) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f6851,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool)),sK1),s('type.bvp_to_word.config',X0))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),sK3)))) | s('type.wordSem.word_loc'(sK0),sK9(sK3,'type.wordSem.word_loc'(sK0))) = s('type.wordSem.word_loc'(sK0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK0),sK4(sK9(sK3,'type.wordSem.word_loc'(sK0)),sK0))))) )),
  inference(superposition,[],[f1025,f6096])).
fof(f6096,plain,(
  s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),sK3) = s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK0),sK9(sK3,'type.wordSem.word_loc'(sK0)))))),
  inference(subsumption_resolution,[],[f6085,f75])).
fof(f75,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bvp_to_wordProps.word_addr_ind',aHL_FALSITY)).
fof(f6085,plain,(
  p(s(bool,'F_0')) | s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),sK3) = s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK0),sK9(sK3,'type.wordSem.word_loc'(sK0)))))),
  inference(superposition,[],[f701,f338])).
fof(f338,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool)),sK1),s('type.bvp_to_word.config',sK2))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),sK3)))),
  inference(resolution,[],[f72,f83])).
fof(f83,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X15] : (s(bool,'F_0') = s(bool,X15) <=> ~p(s(bool,X15)))),
  file('thm.bvp_to_wordProps.word_addr_ind','thm.bool.EQ_CLAUSES|split|2')).
fof(f72,plain,(
  ~p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool)),sK1),s('type.bvp_to_word.config',sK2))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),sK3))))),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X9,X10,X11] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool)),sK1),s('type.bvp_to_word.config',X9))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK0),'const.wordSem.Loc_2'(s('type.num.num',X10),s('type.num.num',X11)))))))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool)),sK1),s('type.bvp_to_word.config',X7))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK0),X8)))))))) & ! [X4,X5,X6] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool)),sK1),s('type.bvp_to_word.config',X4))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),'const.copying_gc.Pointer_2'(s('type.num.num',X5),s('type.wordSem.word_loc'(sK0),X6)))))) & ~p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool)),sK1),s('type.bvp_to_word.config',sK2))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),sK3))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f55])).
fof(f55,plain,(
  ? [X0,X1] : (! [X9,X10,X11] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X9))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X10),s('type.num.num',X11)))))))) & ! [X7,X8] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X7))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X8)))))))) & ! [X4,X5,X6] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X4))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Pointer_2'(s('type.num.num',X5),s('type.wordSem.word_loc'(X0),X6)))))) & ? [X2,X3] : ~p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X2))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),X3)))))),
  inference(rectify,[],[f50])).
fof(f50,plain,(
  ? [X0,X1] : (! [X7,X8,X9] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X7))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X8),s('type.num.num',X9)))))))) & ! [X5,X6] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X5))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X6)))))))) & ! [X2,X3,X4] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X2))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Pointer_2'(s('type.num.num',X3),s('type.wordSem.word_loc'(X0),X4)))))) & ? [X10,X11] : ~p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X10))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),X11)))))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ? [X0,X1] : ((! [X7,X8,X9] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X7))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X8),s('type.num.num',X9)))))))) & ! [X5,X6] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X5))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X6)))))))) & ! [X2,X3,X4] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X2))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Pointer_2'(s('type.num.num',X3),s('type.wordSem.word_loc'(X0),X4))))))) & ? [X10,X11] : ~p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X10))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),X11)))))),
  inference(ennf_transformation,[],[f22])).
fof(f22,plain,(
  ~! [X0,X1] : ((! [X7,X8,X9] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X7))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X8),s('type.num.num',X9)))))))) & ! [X5,X6] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X5))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X6)))))))) & ! [X2,X3,X4] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X2))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Pointer_2'(s('type.num.num',X3),s('type.wordSem.word_loc'(X0),X4))))))) => ! [X10,X11] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X10))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),X11)))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ~! [X0] : ! [X1] : ((! [X7,X8,X9] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X7))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X8),s('type.num.num',X9)))))))) & ! [X5,X6] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X5))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X6)))))))) & ! [X2,X3,X4] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X2))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),'const.copying_gc.Pointer_2'(s('type.num.num',X3),s('type.wordSem.word_loc'(X0),X4))))))) => ! [X10,X11] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),bool)),X1),s('type.bvp_to_word.config',X10))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X0)),X11)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((! [X8,X9,X10] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),bool)),X7),s('type.bvp_to_word.config',X8))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X6),'const.wordSem.Loc_2'(s('type.num.num',X9),s('type.num.num',X10)))))))) & ! [X8,X11] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),bool)),X7),s('type.bvp_to_word.config',X8))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X6),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X6),X11)))))))) & ! [X8,X12,X13] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),bool)),X7),s('type.bvp_to_word.config',X8))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Pointer_2'(s('type.num.num',X12),s('type.wordSem.word_loc'(X6),X13))))))) => ! [X11,X14] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),bool)),X7),s('type.bvp_to_word.config',X11))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),X14)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((! [X8,X9,X10] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),bool)),X7),s('type.bvp_to_word.config',X8))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X6),'const.wordSem.Loc_2'(s('type.num.num',X9),s('type.num.num',X10)))))))) & ! [X8,X11] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),bool)),X7),s('type.bvp_to_word.config',X8))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(X6),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X6),X11)))))))) & ! [X8,X12,X13] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),bool)),X7),s('type.bvp_to_word.config',X8))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),'const.copying_gc.Pointer_2'(s('type.num.num',X12),s('type.wordSem.word_loc'(X6),X13))))))) => ! [X11,X14] : p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),bool)),X7),s('type.bvp_to_word.config',X11))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(X6)),X14)))))),
  file('thm.bvp_to_wordProps.word_addr_ind','thm.bvp_to_wordProps.word_addr_ind')).
fof(f701,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool)),sK1),s('type.bvp_to_word.config',X1))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),X0)))) | s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),X0) = s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK0),sK9(X0,'type.wordSem.word_loc'(sK0)))))) )),
  inference(superposition,[],[f71,f88])).
fof(f88,plain,(
  ( ! [X0,X1] : (s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',sK7(X1,X0)),s(X0,sK8(X1,X0)))) | s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,sK9(X1,X0))))) )),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1] : (s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',sK7(X1,X0)),s(X0,sK8(X1,X0)))) | s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,sK9(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7,sK8,sK9])],[f36])).
fof(f36,plain,(
  ! [X0,X1] : (? [X3,X4] : s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X3),s(X0,X4))) | ? [X2] : s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X2))))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ! [X0] : ! [X1] : (? [X3,X4] : s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Pointer_2'(s('type.num.num',X3),s(X0,X4))) | ? [X2] : s('type.copying_gc.heap_address'(X0),X1) = s('type.copying_gc.heap_address'(X0),'const.copying_gc.Data_1'(s(X0,X2))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6] : ! [X17] : (? [X12,X16] : s('type.copying_gc.heap_address'(X6),X17) = s('type.copying_gc.heap_address'(X6),'const.copying_gc.Pointer_2'(s('type.num.num',X12),s(X6,X16))) | ? [X16] : s('type.copying_gc.heap_address'(X6),X17) = s('type.copying_gc.heap_address'(X6),'const.copying_gc.Data_1'(s(X6,X16))))),
  file('thm.bvp_to_wordProps.word_addr_ind','thm.copying_gc.heap_address_nchotomy')).
fof(f71,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool)),sK1),s('type.bvp_to_word.config',X4))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),'const.copying_gc.Pointer_2'(s('type.num.num',X5),s('type.wordSem.word_loc'(sK0),X6))))))) )),
  inference(cnf_transformation,[],[f56])).
fof(f1025,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool)),sK1),s('type.bvp_to_word.config',X1))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK0),X0)))))) | s('type.wordSem.word_loc'(sK0),X0) = s('type.wordSem.word_loc'(sK0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK0),sK4(X0,sK0))))) )),
  inference(superposition,[],[f69,f87])).
fof(f87,plain,(
  ( ! [X0,X1] : (s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',sK5(X1,X0)),s('type.num.num',sK6(X1,X0)))) | s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),sK4(X1,X0))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1] : (s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),sK4(X1,X0)))) | s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',sK5(X1,X0)),s('type.num.num',sK6(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5,sK6])],[f34])).
fof(f34,plain,(
  ! [X0,X1] : (? [X4] : s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X4))) | ? [X2,X3] : s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X2),s('type.num.num',X3))))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0] : ! [X1] : (? [X4] : s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X0),X4))) | ? [X2,X3] : s('type.wordSem.word_loc'(X0),X1) = s('type.wordSem.word_loc'(X0),'const.wordSem.Loc_2'(s('type.num.num',X2),s('type.num.num',X3))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : ! [X26] : (? [X27] : s('type.wordSem.word_loc'(X6),X26) = s('type.wordSem.word_loc'(X6),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X6),X27))) | ? [X12,X28] : s('type.wordSem.word_loc'(X6),X26) = s('type.wordSem.word_loc'(X6),'const.wordSem.Loc_2'(s('type.num.num',X12),s('type.num.num',X28))))),
  file('thm.bvp_to_wordProps.word_addr_ind','thm.wordSem.word_loc_nchotomy')).
fof(f69,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool)),sK1),s('type.bvp_to_word.config',X9))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK0),'const.wordSem.Loc_2'(s('type.num.num',X10),s('type.num.num',X11))))))))) )),
  inference(cnf_transformation,[],[f56])).
fof(f12663,plain,(
  $false | $spl138),
  inference(subsumption_resolution,[],[f12654,f75])).
fof(f12654,plain,(
  p(s(bool,'F_0')) | $spl138),
  inference(superposition,[],[f6108,f338])).
fof(f12685,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool)),sK1),s('type.bvp_to_word.config',X0))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),sK3))))) ) | $spl146),
  inference(forward_demodulation,[],[f12672,f6096])).
fof(f12672,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool)),sK1),s('type.bvp_to_word.config',X0))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK0),sK9(sK3,'type.wordSem.word_loc'(sK0))))))))) ) | $spl146),
  inference(superposition,[],[f70,f6862])).
fof(f70,plain,(
  ( ! [X8,X7] : (p(s(bool,happ(s(fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool),happ(s(fun('type.bvp_to_word.config',fun('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),bool)),sK1),s('type.bvp_to_word.config',X7))),s('type.copying_gc.heap_address'('type.wordSem.word_loc'(sK0)),'const.copying_gc.Data_1'(s('type.wordSem.word_loc'(sK0),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK0),X8))))))))) )),
  inference(cnf_transformation,[],[f56])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 136
% Passive clauses: 1601
% Generated clauses: 12466
% Final active clauses: 126
% Final passive clauses: 1316
% Input formulas: 19
% Initial clauses: 29
% 
% Duplicate literals: 857
% Trivial inequalities: 90
% Fw subsumption resolutions: 1565
% Fw demodulations: 1800
% Bw demodulations: 8
% 
% Simple tautologies: 243
% Equational tautologies: 19
% Forward subsumptions: 5659
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 239
% Forward superposition: 4738
% Backward superposition: 2880
% Self superposition: 92
% Equality factoring: 32
% Equality resolution: 23
% 
% Split clauses: 394
% Split components: 793
% SAT solver clauses: 771
% SAT solver unit clauses: 13
% SAT solver binary clauses: 107
% SAT solver learnt clauses: 1
% 
% Sat splits: 394
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 769
% TWLsolver calls for satisfiability: 156
% 
% Memory used [KB]: 9210
% Time elapsed: 0.428 s
% ------------------------------
% ------------------------------
% Success in time 0.44 s
