Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.inferProps
% (21378)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 55
% Passive clauses: 1102
% Generated clauses: 8639
% Final active clauses: 51
% Final passive clauses: 971
% Input formulas: 8
% Initial clauses: 24
% 
% Duplicate literals: 702
% Trivial inequalities: 118
% Fw subsumption resolutions: 1301
% Bw demodulations: 2
% 
% Simple tautologies: 212
% Equational tautologies: 111
% Forward subsumptions: 3359
% 
% Binary resolution: 61
% Forward superposition: 3343
% Backward superposition: 2293
% Self superposition: 361
% Equality factoring: 328
% Equality resolution: 11
% 
% Split clauses: 618
% Split components: 1245
% SAT solver clauses: 1531
% SAT solver unit clauses: 253
% SAT solver binary clauses: 487
% 
% Sat splits: 618
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1527
% TWLsolver calls for satisfiability: 53
% 
% Memory used [KB]: 4477
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.inferProps
% (21403)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 176
% Passive clauses: 692
% Generated clauses: 10887
% Final active clauses: 94
% Final passive clauses: 272
% Input formulas: 8
% Initial clauses: 24
% 
% Duplicate literals: 933
% Trivial inequalities: 107
% Fw subsumption resolutions: 648
% Fw demodulations: 310
% Bw demodulations: 266
% Condensations: 1344
% 
% Simple tautologies: 144
% Equational tautologies: 48
% Forward subsumptions: 4570
% Bw demodulations to eq. taut.: 24
% 
% Binary resolution: 107
% Forward superposition: 2835
% Backward superposition: 3098
% Self superposition: 246
% Equality factoring: 141
% Equality resolution: 4
% 
% Split clauses: 195
% Split components: 395
% SAT solver clauses: 1065
% SAT solver unit clauses: 23
% SAT solver binary clauses: 27
% SAT solver learnt clauses: 11
% SAT solver learnt literals: 39
% 
% Sat splits: 195
% Sat splitting refutations: 21
% 
% TWLsolver clauses: 1054
% TWLsolver calls for satisfiability: 435
% 
% Memory used [KB]: 10618
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.inferProps
% (21424)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 417
% Passive clauses: 3056
% Generated clauses: 132574
% Final active clauses: 134
% Final passive clauses: 628
% Input formulas: 8
% Initial clauses: 24
% 
% Duplicate literals: 10847
% Trivial inequalities: 1363
% Fw subsumption resolutions: 14635
% Fw demodulations: 7691
% Bw demodulations: 1567
% Condensations: 24463
% Global subsumptions: 145
% 
% Simple tautologies: 1654
% Equational tautologies: 1422
% Forward subsumptions: 65650
% Fw demodulations to eq. taut.: 10
% Bw demodulations to eq. taut.: 72
% 
% Unit resulting resolution: 3126
% Forward superposition: 32375
% Backward superposition: 30892
% Self superposition: 1043
% Equality factoring: 693
% Equality resolution: 70
% 
% Split clauses: 527
% Split components: 1062
% SAT solver clauses: 4430
% SAT solver unit clauses: 14
% SAT solver binary clauses: 133
% 
% Sat splits: 527
% Sat splitting refutations: 173
% 
% Memory used [KB]: 56416
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.inferProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.inferProps
% SZS output start Proof for thm.inferProps
fof(f1008,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f47,f46,f60,f45,f59,f44,f64,f62,f43,f65,f42,f66,f41,f67,f40,f68,f69,f70,f71,f72,f260,f216,f261,f215,f262,f263,f264,f265,f266,f304,f306,f339,f341,f305,f354,f358,f355,f359,f373,f395,f76,f401,f402,f356,f421,f396,f433,f436,f437,f78,f516,f529,f532,f530,f555,f613,f535,f513,f484,f434,f74,f617,f619,f620,f621,f660,f727,f744,f764,f765,f751,f767,f732,f770,f745,f716,f773,f426,f477,f618,f523,f779,f614,f782,f495,f783,f494,f784,f58,f786,f615,f788,f616,f346,f77,f790,f360,f57,f892,f1007])).
fof(f1007,plain,(
  $false | ($spl0 | $spl2 | $spl6)),
  inference(equality_resolution,[],[f1006])).
fof(f1006,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,sK18))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,X0)))) ) | ($spl0 | $spl2 | $spl6)),
  inference(subsumption_resolution,[],[f1005,f56])).
fof(f56,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f50])).
fof(f50,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f16])).
fof(f16,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f15])).
fof(f15,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X13] : (s(X6,X13) = s(X6,X13) <=> p(s(bool,'T_0')))),
  file('thm.inferProps.inferProps_|49|27_prove_ltb','thm.bool.REFL_CLAUSE')).
fof(f1005,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,sK18))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,X0)))) ) | ($spl0 | $spl2 | $spl6)),
  inference(forward_demodulation,[],[f994,f858])).
fof(f858,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK1(X0,sK17,sK16,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK17)))))) ) | ($spl0 | $spl6)),
  inference(resolution,[],[f857,f556])).
fof(f556,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f53,f52])).
fof(f52,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.inferProps.inferProps_|49|27_prove_ltb',aHL_BOOL_CASES)).
fof(f53,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f17])).
fof(f17,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.inferProps.inferProps_|49|27_prove_ltb',aHL_FALSITY)).
fof(f857,plain,(
  ( ! [X18] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK1(X18,sK17,sK16,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK17))))))) ) | ($spl0 | $spl6)),
  inference(resolution,[],[f802,f57])).
fof(f802,plain,(
  ( ! [X4,X5] : (~sP0(X5) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK1(X4,sK17,sK16,X5)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK17))))))) ) | $spl6),
  inference(resolution,[],[f62,f33])).
fof(f33,plain,(
  ( ! [X0,X17,X18,X16] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK1(X18,X17,X16,X0)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : ((~sP0(X0) | (! [X16,X17,X18] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) | (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(X0,X18))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK1(X18,X17,X16,X0)))),s(X0,sK2(X18,X17,X16,X0)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK1(X18,X17,X16,X0)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17)))))))) & ! [X11,X12,X13] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) | (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(X0,X13))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X13,X12,X11,X0)))),s(X0,sK4(X13,X12,X11,X0)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X13,X12,X11,X0)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X12)))))))))) & ((p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(X0)))),s('type.ast.t',sK5(X0))))) & ! [X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(X0)),s(X0,sK7(X0)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X0,X10))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(X0))))))))) | (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(X0)))),s('type.list.list'('type.ast.t'),sK8(X0))))) & ! [X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(X0)),s(X0,sK10(X0)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(X0,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(X0))))))))) | sP0(X0)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8,sK9,sK10])],[f24])).
fof(f24,plain,(
  ! [X0] : ((~sP0(X0) | (! [X16,X17,X18] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) | ? [X19,X20] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(X0,X18))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(X0,X20))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17)))))))) & ! [X11,X12,X13] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) | ? [X14,X15] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(X0,X13))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(X0,X15))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X12)))))))))) & (? [X6,X7,X8] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X6)))) & ! [X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X6),s(X0,X8))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X0,X10))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X7)))))))) | ? [X1,X2,X3] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X2))),s('type.list.list'('type.ast.t'),X1)))) & ! [X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(X0,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X2)))))))) | sP0(X0)))),
  inference(rectify,[],[f23])).
fof(f23,plain,(
  ! [X0] : ((~sP0(X0) | (! [X6,X7,X8] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X6)))) | ? [X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X6),s(X0,X8))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X0,X10))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X7)))))))) & ! [X1,X2,X3] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X2))),s('type.list.list'('type.ast.t'),X1)))) | ? [X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(X0,X5))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X2)))))))))) & (? [X6,X7,X8] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X6)))) & ! [X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X6),s(X0,X8))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X0,X10))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X7)))))))) | ? [X1,X2,X3] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X2))),s('type.list.list'('type.ast.t'),X1)))) & ! [X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(X0,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X2)))))))) | sP0(X0)))),
  inference(flattening,[],[f22])).
fof(f22,plain,(
  ! [X0] : ((~sP0(X0) | (! [X6,X7,X8] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X6)))) | ? [X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X6),s(X0,X8))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X0,X10))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X7)))))))) & ! [X1,X2,X3] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X2))),s('type.list.list'('type.ast.t'),X1)))) | ? [X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(X0,X5))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X2)))))))))) & ((? [X6,X7,X8] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X6)))) & ! [X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X6),s(X0,X8))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X0,X10))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X7)))))))) | ? [X1,X2,X3] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X2))),s('type.list.list'('type.ast.t'),X1)))) & ! [X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(X0,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))))))))) | sP0(X0)))),
  inference(nnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0] : (sP0(X0) <=> (! [X6,X7,X8] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X6)))) | ? [X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X6),s(X0,X8))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X0,X10))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X7)))))))) & ! [X1,X2,X3] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X2))),s('type.list.list'('type.ast.t'),X1)))) | ? [X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(X0,X5))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f994,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,sK18))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,X0))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK1(X0,sK17,sK16,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK17))))))) ) | ($spl0 | $spl2 | $spl6)),
  inference(superposition,[],[f59,f993])).
fof(f993,plain,(
  ( ! [X18] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,X18))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK1(X18,sK17,sK16,sK11)))),s(sK11,sK2(X18,sK17,sK16,sK11))))) ) | ($spl0 | $spl6)),
  inference(resolution,[],[f801,f57])).
fof(f801,plain,(
  ( ! [X2,X3] : (~sP0(X2) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X2),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(X2,X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X2),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK1(X3,sK17,sK16,X2)))),s(X2,sK2(X3,sK17,sK16,X2))))) ) | $spl6),
  inference(resolution,[],[f62,f32])).
fof(f32,plain,(
  ( ! [X0,X17,X18,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(X0,X18))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK1(X18,X17,X16,X0)))),s(X0,sK2(X18,X17,X16,X0)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f25])).
fof(f892,plain,(
  $false | ($spl2 | $spl6 | $spl14 | $spl16)),
  inference(equality_resolution,[],[f877])).
fof(f877,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,sK18))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,X1)))) ) | ($spl2 | $spl6 | $spl14 | $spl16)),
  inference(subsumption_resolution,[],[f866,f800])).
fof(f800,plain,(
  ( ! [X1] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X1,sK17,sK16)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK17))))))) ) | ($spl6 | $spl14)),
  inference(resolution,[],[f62,f67])).
fof(f866,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,sK18))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,X1))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X1,sK17,sK16)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK17))))))) ) | ($spl2 | $spl6 | $spl16)),
  inference(superposition,[],[f59,f799])).
fof(f799,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,X0))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X0,sK17,sK16)))),s(sK11,sK13(X0,sK17,sK16))))) ) | ($spl6 | $spl16)),
  inference(resolution,[],[f62,f68])).
fof(f57,plain,(
  sP0(sK11) | $spl0),
  inference(cnf_transformation,[],[f57_D])).
fof(f57_D,plain,(
  sP0(sK11) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f360,plain,(
  ( ! [X6] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X6))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X6,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) | $spl34),
  inference(cnf_transformation,[],[f360_D])).
fof(f360_D,plain,(
  ( ! [X6] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X6))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X6,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f790,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X2))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X2,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) | ($spl8 | $spl12 | $spl38)),
  inference(subsumption_resolution,[],[f789,f53])).
fof(f789,plain,(
  ( ! [X2] : (p(s(bool,'F_0')) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X2))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X2,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) | ($spl8 | $spl12 | $spl38)),
  inference(forward_demodulation,[],[f344,f433])).
fof(f344,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X2))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X2,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11)))))) ) | ($spl8 | $spl12)),
  inference(superposition,[],[f38,f258])).
fof(f258,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X0))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X0,sK20,sK19)))),s(sK11,sK15(X0,sK20,sK19))))) ) | ($spl8 | $spl12)),
  inference(subsumption_resolution,[],[f255,f56])).
fof(f255,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X0))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X0,sK20,sK19)))),s(sK11,sK15(X0,sK20,sK19))))) ) | ($spl8 | $spl12)),
  inference(superposition,[],[f66,f89])).
fof(f89,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK20))),s('type.list.list'('type.ast.t'),sK19))) | $spl8),
  inference(subsumption_resolution,[],[f88,f53])).
fof(f88,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK20))),s('type.list.list'('type.ast.t'),sK19))) | $spl8),
  inference(superposition,[],[f64,f52])).
fof(f38,plain,(
  ( ! [X4,X0,X5] : (sP0(X0) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(X0))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(X0)),s(X0,sK10(X0)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(X0,X5))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(X0)))),s('type.ast.t',sK5(X0)))))) )),
  inference(cnf_transformation,[],[f25])).
fof(f77,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X0))),s(sK11,X1))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X0))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))))))) ) | $spl22),
  inference(cnf_transformation,[],[f77_D])).
fof(f77_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X0))),s(sK11,X1))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X0))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f346,plain,(
  ( ! [X6,X8,X7] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X6))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X6,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X7))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X7))),s(sK11,X8)))) ) | ($spl8 | $spl12)),
  inference(superposition,[],[f39,f258])).
fof(f39,plain,(
  ( ! [X4,X0,X10,X5,X9] : (sP0(X0) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(X0))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(X0)),s(X0,sK10(X0)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(X0,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(X0))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(X0)),s(X0,sK7(X0)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X0,X10)))) )),
  inference(cnf_transformation,[],[f25])).
fof(f616,plain,(
  ( ! [X8,X7,X9] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X9),s(sK11,X7))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.ast.t',X9))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X7,X8,X9)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) | $spl50),
  inference(cnf_transformation,[],[f616_D])).
fof(f616_D,plain,(
  ( ! [X8,X7,X9] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X9),s(sK11,X7))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.ast.t',X9))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X7,X8,X9)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f788,plain,(
  ( ! [X8,X7,X9] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X9),s(sK11,X7))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X7,X8,X9)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.ast.t',X9)))) ) | ($spl16 | $spl38)),
  inference(subsumption_resolution,[],[f787,f53])).
fof(f787,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,'F_0')) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X9),s(sK11,X7))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X7,X8,X9)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.ast.t',X9)))) ) | ($spl16 | $spl38)),
  inference(forward_demodulation,[],[f424,f433])).
fof(f424,plain,(
  ( ! [X8,X7,X9] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X9),s(sK11,X7))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X7,X8,X9)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.ast.t',X9)))) ) | $spl16),
  inference(superposition,[],[f38,f177])).
fof(f177,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X1),s(sK11,X2))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X2,X0,X1)))),s(sK11,sK13(X2,X0,X1)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X1)))) ) | $spl16),
  inference(subsumption_resolution,[],[f175,f56])).
fof(f175,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X1),s(sK11,X2))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X2,X0,X1)))),s(sK11,sK13(X2,X0,X1)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X0))),s('type.ast.t',X1)))) ) | $spl16),
  inference(superposition,[],[f68,f52])).
fof(f615,plain,(
  ( ! [X2,X3] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X2,sK9(sK11),sK8(sK11))))),s(sK11,X3)))) ) | $spl48),
  inference(cnf_transformation,[],[f615_D])).
fof(f615_D,plain,(
  ( ! [X2,X3] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X2,sK9(sK11),sK8(sK11))))),s(sK11,X3)))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f786,plain,(
  ( ! [X0,X1] : (sP0(sK11) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X0,sK9(sK11),sK8(sK11))))),s(sK11,X1)))) ) | ($spl10 | $spl20 | $spl38)),
  inference(subsumption_resolution,[],[f785,f53])).
fof(f785,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | sP0(sK11) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X0,sK9(sK11),sK8(sK11))))),s(sK11,X1)))) ) | ($spl10 | $spl20 | $spl38)),
  inference(forward_demodulation,[],[f476,f433])).
fof(f476,plain,(
  ( ! [X0,X1] : (sP0(sK11) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X0,sK9(sK11),sK8(sK11))))),s(sK11,X1))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11)))))) ) | ($spl10 | $spl20)),
  inference(resolution,[],[f413,f38])).
fof(f413,plain,(
  ( ! [X1] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X1,sK9(sK11),sK8(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) | ($spl10 | $spl20)),
  inference(resolution,[],[f76,f65])).
fof(f58,plain,(
  ~sP0(sK11) | $spl1),
  inference(cnf_transformation,[],[f58_D])).
fof(f58_D,plain,(
  ~sP0(sK11) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f784,plain,(
  ( ! [X6,X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X6),s(sK11,X4))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X5))),s('type.list.list'('type.ast.t'),X6)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X4,X5,X6,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) | $spl56),
  inference(cnf_transformation,[],[f784_D])).
fof(f784_D,plain,(
  ( ! [X6,X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X6),s(sK11,X4))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X5))),s('type.list.list'('type.ast.t'),X6)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X4,X5,X6,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f494,plain,(
  ( ! [X6,X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X6),s(sK11,X4))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X4,X5,X6,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X5))),s('type.list.list'('type.ast.t'),X6)))) | ~sP0(sK11)) ) | $spl24),
  inference(superposition,[],[f78,f34])).
fof(f34,plain,(
  ( ! [X0,X12,X13,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(X0,X13))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X13,X12,X11,X0)))),s(X0,sK4(X13,X12,X11,X0)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f25])).
fof(f783,plain,(
  ( ! [X8,X7,X9] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X9),s(sK11,X7))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.ast.t',X9)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK1(X7,X8,X9,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) | $spl54),
  inference(cnf_transformation,[],[f783_D])).
fof(f783_D,plain,(
  ( ! [X8,X7,X9] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X9),s(sK11,X7))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.ast.t',X9)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK1(X7,X8,X9,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f495,plain,(
  ( ! [X8,X7,X9] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X9),s(sK11,X7))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK1(X7,X8,X9,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.ast.t',X9)))) | ~sP0(sK11)) ) | $spl24),
  inference(superposition,[],[f78,f32])).
fof(f782,plain,(
  ( ! [X2,X3] : (sP0(sK11) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X2,sK9(sK11),sK8(sK11))))),s(sK11,X3)))) ) | ($spl10 | $spl20 | $spl38)),
  inference(subsumption_resolution,[],[f781,f53])).
fof(f781,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | sP0(sK11) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X2,sK9(sK11),sK8(sK11))))),s(sK11,X3)))) ) | ($spl10 | $spl20 | $spl38)),
  inference(forward_demodulation,[],[f512,f433])).
fof(f512,plain,(
  ( ! [X2,X3] : (sP0(sK11) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X2,sK9(sK11),sK8(sK11))))),s(sK11,X3))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11)))))) ) | ($spl10 | $spl20)),
  inference(subsumption_resolution,[],[f504,f56])).
fof(f504,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | sP0(sK11) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X2,sK9(sK11),sK8(sK11))))),s(sK11,X3))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11)))))) ) | ($spl10 | $spl20)),
  inference(superposition,[],[f38,f487])).
fof(f487,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X1,sK9(sK11),sK8(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) ) | ($spl10 | $spl20)),
  inference(subsumption_resolution,[],[f483,f53])).
fof(f483,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X1,sK9(sK11),sK8(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) ) | ($spl10 | $spl20)),
  inference(superposition,[],[f413,f52])).
fof(f614,plain,(
  ( ! [X12,X13,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X13),s(sK11,X11))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X13))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X11,X12,X13)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) | $spl46),
  inference(cnf_transformation,[],[f614_D])).
fof(f614_D,plain,(
  ( ! [X12,X13,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X13),s(sK11,X11))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X13))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X11,X12,X13)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f779,plain,(
  ( ! [X12,X13,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X13),s(sK11,X11))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X11,X12,X13)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X13)))) ) | ($spl12 | $spl38)),
  inference(subsumption_resolution,[],[f778,f53])).
fof(f778,plain,(
  ( ! [X12,X13,X11] : (p(s(bool,'F_0')) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X13),s(sK11,X11))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X11,X12,X13)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X13)))) ) | ($spl12 | $spl38)),
  inference(forward_demodulation,[],[f521,f433])).
fof(f521,plain,(
  ( ! [X12,X13,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X13),s(sK11,X11))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X11,X12,X13)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11))))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X13)))) ) | $spl12),
  inference(superposition,[],[f38,f259])).
fof(f259,plain,(
  ( ! [X2,X3,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X2),s(sK11,X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X3,X1,X2)))),s(sK11,sK15(X3,X1,X2)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),X2)))) ) | $spl12),
  inference(subsumption_resolution,[],[f256,f56])).
fof(f256,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X2),s(sK11,X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X3,X1,X2)))),s(sK11,sK15(X3,X1,X2)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),X2)))) ) | $spl12),
  inference(superposition,[],[f66,f52])).
fof(f523,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X21),s(sK11,X19))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X19,X20,X21)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X22))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X22))),s(sK11,X23))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X20))),s('type.list.list'('type.ast.t'),X21)))) ) | $spl12),
  inference(superposition,[],[f39,f259])).
fof(f618,plain,(
  ( ! [X6,X4,X7,X5] : (sP0(sK11) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X4,sK9(sK11),sK8(sK11))))),s(sK11,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X6))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X6))),s(sK11,X7)))) ) | ($spl10 | $spl20)),
  inference(subsumption_resolution,[],[f505,f56])).
fof(f505,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'T_0')) | sP0(sK11) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X4,sK9(sK11),sK8(sK11))))),s(sK11,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X6))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X6))),s(sK11,X7)))) ) | ($spl10 | $spl20)),
  inference(superposition,[],[f39,f487])).
fof(f477,plain,(
  ( ! [X4,X2,X5,X3] : (sP0(sK11) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X2,sK9(sK11),sK8(sK11))))),s(sK11,X3))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(sK11,X5)))) ) | ($spl10 | $spl20)),
  inference(resolution,[],[f413,f39])).
fof(f426,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X17),s(sK11,X15))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X15,X16,X17)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X18))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X18))),s(sK11,X19))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X16))),s('type.ast.t',X17)))) ) | $spl16),
  inference(superposition,[],[f39,f177])).
fof(f773,plain,(
  ( ! [X6,X8,X7] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X8),s(sK11,X6))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X6,X7,X8)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X8)))) ) | ($spl16 | $spl38)),
  inference(subsumption_resolution,[],[f772,f53])).
fof(f772,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,'F_0')) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X8),s(sK11,X6))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X6,X7,X8)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X8)))) ) | ($spl16 | $spl38)),
  inference(forward_demodulation,[],[f714,f433])).
fof(f714,plain,(
  ( ! [X6,X8,X7] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X8),s(sK11,X6))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X6,X7,X8)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X8)))) ) | $spl16),
  inference(superposition,[],[f38,f177])).
fof(f716,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(sK11,X14))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X14,X15,X16)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X17))),s(sK11,X18))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X15))),s('type.ast.t',X16)))) ) | $spl16),
  inference(superposition,[],[f39,f177])).
fof(f745,plain,(
  ( ! [X7] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X7))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X7,sK6(sK11),sK5(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) | $spl52),
  inference(cnf_transformation,[],[f745_D])).
fof(f745_D,plain,(
  ( ! [X7] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X7))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X7,sK6(sK11),sK5(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f770,plain,(
  ( ! [X3] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X3,sK6(sK11),sK5(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) | ($spl16 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f769,f53])).
fof(f769,plain,(
  ( ! [X3] : (p(s(bool,'F_0')) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X3,sK6(sK11),sK5(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) | ($spl16 | $spl18 | $spl38)),
  inference(forward_demodulation,[],[f730,f433])).
fof(f730,plain,(
  ( ! [X3] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X3,sK6(sK11),sK5(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11)))))) ) | ($spl16 | $spl18)),
  inference(superposition,[],[f38,f267])).
fof(f267,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X0))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X0,sK6(sK11),sK5(sK11))))),s(sK11,sK13(X0,sK6(sK11),sK5(sK11)))))) ) | ($spl16 | $spl18)),
  inference(resolution,[],[f74,f68])).
fof(f732,plain,(
  ( ! [X8,X7,X9] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X7))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X7,sK6(sK11),sK5(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X8))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X8))),s(sK11,X9)))) ) | ($spl16 | $spl18)),
  inference(superposition,[],[f39,f267])).
fof(f767,plain,(
  ( ! [X10,X8,X9] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X10),s(sK11,X8))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X8,X9,X10)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X9))),s('type.list.list'('type.ast.t'),X10)))) ) | ($spl12 | $spl38)),
  inference(subsumption_resolution,[],[f766,f53])).
fof(f766,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,'F_0')) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X10),s(sK11,X8))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X8,X9,X10)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X9))),s('type.list.list'('type.ast.t'),X10)))) ) | ($spl12 | $spl38)),
  inference(forward_demodulation,[],[f749,f433])).
fof(f749,plain,(
  ( ! [X10,X8,X9] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X10),s(sK11,X8))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X8,X9,X10)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11))))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X9))),s('type.list.list'('type.ast.t'),X10)))) ) | $spl12),
  inference(superposition,[],[f38,f259])).
fof(f751,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X18),s(sK11,X16))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X16,X17,X18)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(sK11,X20))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.list.list'('type.ast.t'),X18)))) ) | $spl12),
  inference(superposition,[],[f39,f259])).
fof(f765,plain,(
  $false | ($spl12 | $spl20 | $spl45 | $spl48)),
  inference(equality_resolution,[],[f758])).
fof(f758,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11))))) ) | ($spl12 | $spl20 | $spl45 | $spl48)),
  inference(subsumption_resolution,[],[f757,f531])).
fof(f531,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl45),
  inference(cnf_transformation,[],[f531_D])).
fof(f531_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl45),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl45])])).
fof(f757,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'F_0') | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11))))) ) | ($spl12 | $spl20 | $spl48)),
  inference(forward_demodulation,[],[f746,f420])).
fof(f420,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11)))) | $spl20),
  inference(subsumption_resolution,[],[f419,f53])).
fof(f419,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11)))) | $spl20),
  inference(superposition,[],[f76,f52])).
fof(f746,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11))))) ) | ($spl12 | $spl48)),
  inference(superposition,[],[f615,f259])).
fof(f764,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X18),s(sK11,X16))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X16,X17,X18)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(sK11,X20))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.list.list'('type.ast.t'),X18)))) ) | ($spl1 | $spl12)),
  inference(subsumption_resolution,[],[f751,f58])).
fof(f744,plain,(
  ( ! [X8,X7,X9] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X7))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X7,sK6(sK11),sK5(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X8))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X8))),s(sK11,X9)))) ) | ($spl1 | $spl16 | $spl18)),
  inference(subsumption_resolution,[],[f732,f58])).
fof(f727,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(sK11,X14))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X14,X15,X16)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X17))),s(sK11,X18))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X15))),s('type.ast.t',X16)))) ) | ($spl1 | $spl16)),
  inference(subsumption_resolution,[],[f716,f58])).
fof(f660,plain,(
  $false | ($spl16 | $spl18 | $spl30)),
  inference(equality_resolution,[],[f381])).
fof(f381,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X0))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11))))) ) | ($spl16 | $spl18 | $spl30)),
  inference(superposition,[],[f305,f267])).
fof(f621,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X17),s(sK11,X15))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X15,X16,X17)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X18))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X18))),s(sK11,X19))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X16))),s('type.ast.t',X17)))) ) | ($spl1 | $spl16)),
  inference(subsumption_resolution,[],[f426,f58])).
fof(f620,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X2,sK9(sK11),sK8(sK11))))),s(sK11,X3))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(sK11,X5)))) ) | ($spl1 | $spl10 | $spl20)),
  inference(subsumption_resolution,[],[f477,f58])).
fof(f619,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X4,sK9(sK11),sK8(sK11))))),s(sK11,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X6))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X6))),s(sK11,X7)))) ) | ($spl1 | $spl10 | $spl20)),
  inference(subsumption_resolution,[],[f618,f58])).
fof(f617,plain,(
  ( ! [X23,X21,X19,X22,X20] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X21),s(sK11,X19))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X19,X20,X21)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X22))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X22))),s(sK11,X23))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X20))),s('type.list.list'('type.ast.t'),X21)))) ) | ($spl1 | $spl12)),
  inference(subsumption_resolution,[],[f523,f58])).
fof(f74,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11))))) | $spl18),
  inference(cnf_transformation,[],[f74_D])).
fof(f74_D,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11))))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f434,plain,(
  ( ! [X8,X7,X9] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X9),s(sK11,X7))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X7,X8,X9)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.ast.t',X9)))) ) | ($spl1 | $spl16)),
  inference(subsumption_resolution,[],[f424,f58])).
fof(f484,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X0,sK9(sK11),sK8(sK11))))),s(sK11,X1))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11)))))) ) | ($spl1 | $spl10 | $spl20)),
  inference(subsumption_resolution,[],[f476,f58])).
fof(f513,plain,(
  ( ! [X2,X3] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X2,sK9(sK11),sK8(sK11))))),s(sK11,X3))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11)))))) ) | ($spl1 | $spl10 | $spl20)),
  inference(subsumption_resolution,[],[f512,f58])).
fof(f535,plain,(
  ( ! [X12,X13,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X13),s(sK11,X11))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X11,X12,X13)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11))))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X13)))) ) | ($spl1 | $spl12)),
  inference(subsumption_resolution,[],[f521,f58])).
fof(f613,plain,(
  $false | $spl42),
  inference(equality_resolution,[],[f530])).
fof(f555,plain,(
  $false | $spl44),
  inference(subsumption_resolution,[],[f538,f55])).
fof(f55,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.inferProps.inferProps_|49|27_prove_ltb','thm.bool.TRUTH')).
fof(f538,plain,(
  ~p(s(bool,'T_0')) | $spl44),
  inference(backward_demodulation,[],[f532,f53])).
fof(f530,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11))))) ) | $spl42),
  inference(cnf_transformation,[],[f530_D])).
fof(f530_D,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11))))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f532,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl44),
  inference(cnf_transformation,[],[f532_D])).
fof(f532_D,plain,(
  s(bool,'T_0') = s(bool,'F_0') <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f529,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'F_0') | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11))))) ) | ($spl1 | $spl10 | $spl12 | $spl19 | $spl20)),
  inference(forward_demodulation,[],[f517,f420])).
fof(f517,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | s(bool,'F_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11))))) ) | ($spl1 | $spl10 | $spl12 | $spl19 | $spl20)),
  inference(superposition,[],[f486,f259])).
fof(f486,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X0,sK9(sK11),sK8(sK11))))),s(sK11,X1)))) ) | ($spl1 | $spl10 | $spl19 | $spl20)),
  inference(subsumption_resolution,[],[f485,f53])).
fof(f485,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X0,sK9(sK11),sK8(sK11))))),s(sK11,X1)))) ) | ($spl1 | $spl10 | $spl19 | $spl20)),
  inference(forward_demodulation,[],[f484,f411])).
fof(f411,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11)))) | $spl19),
  inference(subsumption_resolution,[],[f407,f56])).
fof(f407,plain,(
  ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11)))) | $spl19),
  inference(superposition,[],[f73,f52])).
fof(f73,plain,(
  ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11))))) | $spl19),
  inference(cnf_transformation,[],[f73_D])).
fof(f73_D,plain,(
  ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11))))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f516,plain,(
  $false | $spl36),
  inference(equality_resolution,[],[f396])).
fof(f78,plain,(
  ( ! [X2,X3] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))),s(sK11,X3))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) | $spl24),
  inference(cnf_transformation,[],[f78_D])).
fof(f78_D,plain,(
  ( ! [X2,X3] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))),s(sK11,X3))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f437,plain,(
  ( ! [X12,X10,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X12),s(sK11,X10))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.ast.t',X12))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X10,X11,X12)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))))))) ) | $spl40),
  inference(cnf_transformation,[],[f437_D])).
fof(f437_D,plain,(
  ( ! [X12,X10,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X12),s(sK11,X10))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.ast.t',X12))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X10,X11,X12)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f436,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X12),s(sK11,X10))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X13))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X13))),s(sK11,X14))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X10,X11,X12)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.ast.t',X12)))) ) | ($spl1 | $spl16)),
  inference(subsumption_resolution,[],[f425,f58])).
fof(f425,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X12),s(sK11,X10))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X13))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X13))),s(sK11,X14))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X10,X11,X12)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X11))),s('type.ast.t',X12)))) ) | $spl16),
  inference(superposition,[],[f39,f177])).
fof(f433,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11)))) | $spl38),
  inference(cnf_transformation,[],[f433_D])).
fof(f433_D,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11)))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f396,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X2))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11))))) ) | $spl36),
  inference(cnf_transformation,[],[f396_D])).
fof(f396_D,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X2))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11))))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f421,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X0))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11))))) ) | ($spl16 | $spl30)),
  inference(superposition,[],[f305,f177])).
fof(f356,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X2))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X2,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11)))))) ) | ($spl1 | $spl8 | $spl12)),
  inference(subsumption_resolution,[],[f344,f58])).
fof(f402,plain,(
  $false | ($spl14 | $spl16 | $spl18 | $spl22)),
  inference(equality_resolution,[],[f393])).
fof(f393,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11))))) ) | ($spl14 | $spl16 | $spl18 | $spl22)),
  inference(subsumption_resolution,[],[f392,f56])).
fof(f392,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11))))) ) | ($spl14 | $spl16 | $spl18 | $spl22)),
  inference(forward_demodulation,[],[f382,f307])).
fof(f307,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X1,sK6(sK11),sK5(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) ) | ($spl14 | $spl18)),
  inference(subsumption_resolution,[],[f303,f53])).
fof(f303,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X1,sK6(sK11),sK5(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) ) | ($spl14 | $spl18)),
  inference(superposition,[],[f268,f52])).
fof(f268,plain,(
  ( ! [X1] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X1,sK6(sK11),sK5(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))))))) ) | ($spl14 | $spl18)),
  inference(resolution,[],[f74,f67])).
fof(f382,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X1,sK6(sK11),sK5(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))))))) ) | ($spl16 | $spl18 | $spl22)),
  inference(superposition,[],[f77,f267])).
fof(f401,plain,(
  ( ! [X6,X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X4))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X5))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X5))),s(sK11,X6)))) ) | ($spl1 | $spl14 | $spl16 | $spl18)),
  inference(subsumption_resolution,[],[f400,f56])).
fof(f400,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X4))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X5))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X5))),s(sK11,X6)))) ) | ($spl1 | $spl14 | $spl16 | $spl18)),
  inference(forward_demodulation,[],[f399,f307])).
fof(f399,plain,(
  ( ! [X6,X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X4))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X5))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X5))),s(sK11,X6))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X4,sK6(sK11),sK5(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))))))) ) | ($spl1 | $spl16 | $spl18)),
  inference(subsumption_resolution,[],[f385,f58])).
fof(f385,plain,(
  ( ! [X6,X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X4))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X5))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X5))),s(sK11,X6))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X4,sK6(sK11),sK5(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))))))) ) | ($spl16 | $spl18)),
  inference(superposition,[],[f39,f267])).
fof(f76,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11))))) | $spl20),
  inference(cnf_transformation,[],[f76_D])).
fof(f76_D,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11))))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f395,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X2))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11)))))) ) | ($spl1 | $spl14 | $spl16 | $spl18)),
  inference(subsumption_resolution,[],[f394,f58])).
fof(f394,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X2))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | sP0(sK11) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11)))))) ) | ($spl14 | $spl16 | $spl18)),
  inference(subsumption_resolution,[],[f383,f116])).
fof(f116,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X0,sK6(X1),sK5(X1))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(X1))))))) | sP0(X1) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(X1)))),s('type.list.list'('type.ast.t'),sK8(X1)))))) ) | $spl14),
  inference(resolution,[],[f67,f36])).
fof(f36,plain,(
  ( ! [X0] : (sP0(X0) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(X0)))),s('type.list.list'('type.ast.t'),sK8(X0))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(X0)))),s('type.ast.t',sK5(X0)))))) )),
  inference(cnf_transformation,[],[f25])).
fof(f383,plain,(
  ( ! [X2] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,X2))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | sP0(sK11) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X2,sK6(sK11),sK5(sK11))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))))))) ) | ($spl16 | $spl18)),
  inference(superposition,[],[f37,f267])).
fof(f37,plain,(
  ( ! [X0,X10,X9] : (sP0(X0) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(X0)))),s('type.list.list'('type.ast.t'),sK8(X0))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(X0))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(X0)),s(X0,sK7(X0)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X0,X10)))) )),
  inference(cnf_transformation,[],[f25])).
fof(f373,plain,(
  $false | ($spl4 | $spl8 | $spl10 | $spl12)),
  inference(equality_resolution,[],[f353])).
fof(f353,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X0)))) ) | ($spl4 | $spl8 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f352,f56])).
fof(f352,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X0)))) ) | ($spl4 | $spl8 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f342,f151])).
fof(f151,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X1,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20)))))) ) | ($spl8 | $spl10)),
  inference(subsumption_resolution,[],[f150,f53])).
fof(f150,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X1,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20)))))) ) | ($spl8 | $spl10)),
  inference(superposition,[],[f143,f52])).
fof(f143,plain,(
  ( ! [X0] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X0,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20))))))) ) | ($spl8 | $spl10)),
  inference(subsumption_resolution,[],[f140,f56])).
fof(f140,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X0,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20))))))) ) | ($spl8 | $spl10)),
  inference(superposition,[],[f65,f89])).
fof(f342,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X0))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X0,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20))))))) ) | ($spl4 | $spl8 | $spl12)),
  inference(superposition,[],[f60,f258])).
fof(f359,plain,(
  ( ! [X6,X8,X7] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X6))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X6,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X7))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X7))),s(sK11,X8)))) ) | ($spl1 | $spl8 | $spl12)),
  inference(subsumption_resolution,[],[f346,f58])).
fof(f355,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X1,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))))))) ) | $spl32),
  inference(cnf_transformation,[],[f355_D])).
fof(f355_D,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X1,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f358,plain,(
  ( ! [X4,X5,X3] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(sK11,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X3,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))))))) ) | ($spl1 | $spl8 | $spl12)),
  inference(subsumption_resolution,[],[f345,f58])).
fof(f345,plain,(
  ( ! [X4,X5,X3] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(sK11,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X3,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))))))) ) | ($spl8 | $spl12)),
  inference(superposition,[],[f39,f258])).
fof(f354,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X1,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))))))) ) | ($spl1 | $spl8 | $spl12)),
  inference(subsumption_resolution,[],[f343,f58])).
fof(f343,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X1))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) | sP0(sK11) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X1,sK20,sK19)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))))))) ) | ($spl8 | $spl12)),
  inference(superposition,[],[f37,f258])).
fof(f305,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X0,sK6(sK11),sK5(sK11))))),s(sK11,X1)))) ) | $spl30),
  inference(cnf_transformation,[],[f305_D])).
fof(f305_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X0,sK6(sK11),sK5(sK11))))),s(sK11,X1)))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f341,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(sK11,X5))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X3,sK6(sK11),sK5(sK11))))),s(sK11,X6)))) ) | ($spl1 | $spl14 | $spl18)),
  inference(subsumption_resolution,[],[f340,f58])).
fof(f340,plain,(
  ( ! [X6,X4,X5,X3] : (sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(sK11,X5))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X3,sK6(sK11),sK5(sK11))))),s(sK11,X6)))) ) | ($spl14 | $spl18)),
  inference(subsumption_resolution,[],[f331,f56])).
fof(f331,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(sK11,X5))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X3,sK6(sK11),sK5(sK11))))),s(sK11,X6)))) ) | ($spl14 | $spl18)),
  inference(superposition,[],[f39,f307])).
fof(f339,plain,(
  ( ! [X2,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X1,sK6(sK11),sK5(sK11))))),s(sK11,X2)))) ) | ($spl1 | $spl14 | $spl18)),
  inference(subsumption_resolution,[],[f338,f58])).
fof(f338,plain,(
  ( ! [X2,X1] : (sP0(sK11) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X1,sK6(sK11),sK5(sK11))))),s(sK11,X2)))) ) | ($spl14 | $spl18)),
  inference(subsumption_resolution,[],[f330,f56])).
fof(f330,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | sP0(sK11) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X1,sK6(sK11),sK5(sK11))))),s(sK11,X2)))) ) | ($spl14 | $spl18)),
  inference(superposition,[],[f37,f307])).
fof(f306,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))),s(sK11,X3))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X4,sK6(sK11),sK5(sK11))))),s(sK11,X5)))) ) | ($spl1 | $spl14 | $spl18)),
  inference(subsumption_resolution,[],[f297,f58])).
fof(f297,plain,(
  ( ! [X4,X2,X5,X3] : (sP0(sK11) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))),s(sK11,X3))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X4,sK6(sK11),sK5(sK11))))),s(sK11,X5)))) ) | ($spl14 | $spl18)),
  inference(resolution,[],[f268,f39])).
fof(f304,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X0,sK6(sK11),sK5(sK11))))),s(sK11,X1)))) ) | ($spl1 | $spl14 | $spl18)),
  inference(subsumption_resolution,[],[f296,f58])).
fof(f296,plain,(
  ( ! [X0,X1] : (sP0(sK11) | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X0,sK6(sK11),sK5(sK11))))),s(sK11,X1)))) ) | ($spl14 | $spl18)),
  inference(resolution,[],[f268,f37])).
fof(f266,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(sK11,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X6))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X6))),s(sK11,X7)))) ) | $spl1),
  inference(resolution,[],[f58,f39])).
fof(f265,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))),s(sK11,X3))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11)))))) ) | $spl1),
  inference(resolution,[],[f58,f38])).
fof(f264,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X0))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X0))),s(sK11,X1)))) ) | $spl1),
  inference(resolution,[],[f58,f37])).
fof(f263,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11))))) | $spl1),
  inference(resolution,[],[f58,f36])).
fof(f262,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X2),s(sK11,X0))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),X2)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X0,X1,X2,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20))))))) ) | $spl28),
  inference(cnf_transformation,[],[f262_D])).
fof(f262_D,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X2),s(sK11,X0))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),X2)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X0,X1,X2,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20))))))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f215,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X2),s(sK11,X0))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X0,X1,X2,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20)))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X1))),s('type.list.list'('type.ast.t'),X2)))) | ~sP0(sK11)) ) | $spl4),
  inference(superposition,[],[f60,f34])).
fof(f261,plain,(
  ( ! [X4,X5,X3] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X5),s(sK11,X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X4))),s('type.ast.t',X5)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK1(X3,X4,X5,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20))))))) ) | $spl26),
  inference(cnf_transformation,[],[f261_D])).
fof(f261_D,plain,(
  ( ! [X4,X5,X3] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X5),s(sK11,X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X4))),s('type.ast.t',X5)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK1(X3,X4,X5,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20))))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f216,plain,(
  ( ! [X4,X5,X3] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X5),s(sK11,X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK1(X3,X4,X5,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X4))),s('type.ast.t',X5)))) | ~sP0(sK11)) ) | $spl4),
  inference(superposition,[],[f60,f32])).
fof(f260,plain,(
  $false | ($spl0 | $spl4 | $spl8)),
  inference(equality_resolution,[],[f250])).
fof(f250,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X0)))) ) | ($spl0 | $spl4 | $spl8)),
  inference(subsumption_resolution,[],[f249,f56])).
fof(f249,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X0)))) ) | ($spl0 | $spl4 | $spl8)),
  inference(forward_demodulation,[],[f239,f115])).
fof(f115,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X1,sK20,sK19,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20)))))) ) | ($spl0 | $spl8)),
  inference(subsumption_resolution,[],[f114,f53])).
fof(f114,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X1,sK20,sK19,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20)))))) ) | ($spl0 | $spl8)),
  inference(superposition,[],[f108,f52])).
fof(f108,plain,(
  ( ! [X16] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X16,sK20,sK19,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20))))))) ) | ($spl0 | $spl8)),
  inference(resolution,[],[f84,f57])).
fof(f84,plain,(
  ( ! [X2,X3] : (~sP0(X3) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X2,sK20,sK19,X3)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20))))))) ) | $spl8),
  inference(resolution,[],[f64,f35])).
fof(f35,plain,(
  ( ! [X0,X12,X13,X11] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X13,X12,X11,X0)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X12)))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f25])).
fof(f239,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X0))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X0,sK20,sK19,sK11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20))))))) ) | ($spl0 | $spl4 | $spl8)),
  inference(superposition,[],[f60,f238])).
fof(f238,plain,(
  ( ! [X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,X16))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X16,sK20,sK19,sK11)))),s(sK11,sK4(X16,sK20,sK19,sK11))))) ) | ($spl0 | $spl8)),
  inference(resolution,[],[f83,f57])).
fof(f83,plain,(
  ( ! [X0,X1] : (~sP0(X0) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(X0,X1))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK3(X1,sK20,sK19,X0)))),s(X0,sK4(X1,sK20,sK19,X0))))) ) | $spl8),
  inference(resolution,[],[f64,f34])).
fof(f72,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(sK11,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X6))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X6))),s(sK11,X7)))) ) | $spl1),
  inference(resolution,[],[f58,f39])).
fof(f71,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK8(sK11)),s(sK11,sK10(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))),s(sK11,X3))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11)))))) ) | $spl1),
  inference(resolution,[],[f58,f38])).
fof(f70,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X0))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11))))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK5(sK11)),s(sK11,sK7(sK11)))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X0))),s(sK11,X1)))) ) | $spl1),
  inference(resolution,[],[f58,f37])).
fof(f69,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK9(sK11)))),s('type.list.list'('type.ast.t'),sK8(sK11))))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK6(sK11)))),s('type.ast.t',sK5(sK11))))) | $spl1),
  inference(resolution,[],[f58,f36])).
fof(f68,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(sK11,X18))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X18,X17,X16)))),s(sK11,sK13(X18,X17,X16))))) ) | $spl16),
  inference(cnf_transformation,[],[f68_D])).
fof(f68_D,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(sK11,X18))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X18,X17,X16)))),s(sK11,sK13(X18,X17,X16))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f40,plain,(
  ( ! [X17,X18,X16] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(sK11,X18))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X18,X17,X16)))),s(sK11,sK13(X18,X17,X16)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) | sP0(sK11)) )),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  (sP0(sK11) | (! [X16,X17,X18] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) | (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(sK11,X18))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X18,X17,X16)))),s(sK11,sK13(X18,X17,X16)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X18,X17,X16)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17)))))))) & ! [X11,X12,X13] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) | (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(sK11,X13))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X13,X12,X11)))),s(sK11,sK15(X13,X12,X11)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X13,X12,X11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X12)))))))))) & (~sP0(sK11) | (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK17))),s('type.ast.t',sK16)))) & ! [X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,sK18))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(sK11,X10))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK17)))))))) | (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK20))),s('type.list.list'('type.ast.t'),sK19)))) & ! [X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(sK11,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11,sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21])],[f28])).
fof(f28,plain,(
  ? [X0] : ((sP0(X0) | (! [X16,X17,X18] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) | ? [X19,X20] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(X0,X18))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(X0,X20))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17)))))))) & ! [X11,X12,X13] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) | ? [X14,X15] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(X0,X13))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(X0,X15))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X12)))))))))) & (~sP0(X0) | ? [X6,X7,X8] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X6)))) & ! [X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X6),s(X0,X8))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X0,X10))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X7)))))))) | ? [X1,X2,X3] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X2))),s('type.list.list'('type.ast.t'),X1)))) & ! [X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X3))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(X0,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))))))))))),
  inference(rectify,[],[f27])).
fof(f27,plain,(
  ? [X0] : ((sP0(X0) | (! [X16,X17,X18] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) | ? [X19,X20] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(X0,X18))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(X0,X20))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17)))))))) & ! [X11,X12,X13] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) | ? [X14,X15] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(X0,X13))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(X0,X15))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X12)))))))))) & (~sP0(X0) | ? [X16,X17,X18] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) & ! [X19,X20] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(X0,X18))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(X0,X20))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17)))))))) | ? [X11,X12,X13] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) & ! [X14,X15] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(X0,X13))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(X0,X15))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X12))))))))))),
  inference(flattening,[],[f26])).
fof(f26,plain,(
  ? [X0] : ((sP0(X0) | (! [X16,X17,X18] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) | ? [X19,X20] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(X0,X18))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(X0,X20))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17)))))))) & ! [X11,X12,X13] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) | ? [X14,X15] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(X0,X13))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(X0,X15))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X12)))))))))) & (~sP0(X0) | (? [X16,X17,X18] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) & ! [X19,X20] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(X0,X18))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(X0,X20))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17)))))))) | ? [X11,X12,X13] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) & ! [X14,X15] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(X0,X13))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(X0,X15))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X12)))))))))))),
  inference(nnf_transformation,[],[f21])).
fof(f21,plain,(
  ? [X0] : (sP0(X0) <~> (! [X16,X17,X18] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) | ? [X19,X20] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(X0,X18))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(X0,X20))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17)))))))) & ! [X11,X12,X13] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) | ? [X14,X15] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(X0,X13))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(X0,X15))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X12))))))))))),
  inference(definition_folding,[],[f18,f20])).
fof(f18,plain,(
  ? [X0] : ((! [X6,X7,X8] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X6)))) | ? [X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X6),s(X0,X8))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X0,X10))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X7)))))))) & ! [X1,X2,X3] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X2))),s('type.list.list'('type.ast.t'),X1)))) | ? [X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(X0,X5))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))))))))) <~> (! [X16,X17,X18] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) | ? [X19,X20] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(X0,X18))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(X0,X20))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17)))))))) & ! [X11,X12,X13] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) | ? [X14,X15] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(X0,X13))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(X0,X15))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X12))))))))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ~! [X0] : ((! [X6,X7,X8] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X7))),s('type.ast.t',X6)))) => ? [X9,X10] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X6),s(X0,X8))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(X0,X10))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X7)))))))) & ! [X1,X2,X3] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X2))),s('type.list.list'('type.ast.t'),X1)))) => ? [X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X1),s(X0,X3))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(X0,X5))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X2))))))))) <=> (! [X16,X17,X18] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) => ? [X19,X20] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.t_to_freevars_2'(s('type.ast.t',X16),s(X0,X18))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(X0,X20))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X19))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17)))))))) & ! [X11,X12,X13] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) => ? [X14,X15] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(X0,X13))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X0),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(X0,X15))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X14))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X12))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((! [X7,X8,X9] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.ast.t',X7)))) => ? [X10,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.infer.t_to_freevars_2'(s('type.ast.t',X7),s(X6,X9))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X10))),s(X6,X11))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X10))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X8)))))))) & ! [X12,X8,X9] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.list.list'('type.ast.t'),X12)))) => ? [X10,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X12),s(X6,X9))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X10))),s(X6,X11))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X10))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X8))))))))) <=> (! [X7,X8,X9] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.ast.t',X7)))) => ? [X10,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.infer.t_to_freevars_2'(s('type.ast.t',X7),s(X6,X9))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X10))),s(X6,X11))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X10))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X8)))))))) & ! [X12,X8,X9] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.list.list'('type.ast.t'),X12)))) => ? [X10,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X12),s(X6,X9))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X10))),s(X6,X11))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X10))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X8))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((! [X7,X8,X9] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.ast.t',X7)))) => ? [X10,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.infer.t_to_freevars_2'(s('type.ast.t',X7),s(X6,X9))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X10))),s(X6,X11))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X10))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X8)))))))) & ! [X12,X8,X9] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.list.list'('type.ast.t'),X12)))) => ? [X10,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X12),s(X6,X9))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X10))),s(X6,X11))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X10))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X8))))))))) <=> (! [X7,X8,X9] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.ast.t',X7)))) => ? [X10,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.infer.t_to_freevars_2'(s('type.ast.t',X7),s(X6,X9))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X10))),s(X6,X11))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X10))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X8)))))))) & ! [X12,X8,X9] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X8))),s('type.list.list'('type.ast.t'),X12)))) => ? [X10,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X12),s(X6,X9))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),X6),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X10))),s(X6,X11))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X10))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X8))))))))))),
  file('thm.inferProps.inferProps_|49|27_prove_ltb','thm.inferProps.inferProps_|49|27_prove_ltb')).
fof(f67,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X18,X17,X16)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17))))))) ) | $spl14),
  inference(cnf_transformation,[],[f67_D])).
fof(f67_D,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X18,X17,X16)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17))))))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f41,plain,(
  ( ! [X17,X18,X16] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK12(X18,X17,X16)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X17)))))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X17))),s('type.ast.t',X16)))) | sP0(sK11)) )),
  inference(cnf_transformation,[],[f29])).
fof(f66,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(sK11,X13))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X13,X12,X11)))),s(sK11,sK15(X13,X12,X11))))) ) | $spl12),
  inference(cnf_transformation,[],[f66_D])).
fof(f66_D,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(sK11,X13))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X13,X12,X11)))),s(sK11,sK15(X13,X12,X11))))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f42,plain,(
  ( ! [X12,X13,X11] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),X11),s(sK11,X13))) = s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X13,X12,X11)))),s(sK11,sK15(X13,X12,X11)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) | sP0(sK11)) )),
  inference(cnf_transformation,[],[f29])).
fof(f65,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X13,X12,X11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X12))))))) ) | $spl10),
  inference(cnf_transformation,[],[f65_D])).
fof(f65_D,plain,(
  ( ! [X12,X13,X11] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) | p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X13,X12,X11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X12))))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f43,plain,(
  ( ! [X12,X13,X11] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK14(X13,X12,X11)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X12)))))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),X12))),s('type.list.list'('type.ast.t'),X11)))) | sP0(sK11)) )),
  inference(cnf_transformation,[],[f29])).
fof(f62,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK17))),s('type.ast.t',sK16)))) | $spl6),
  inference(cnf_transformation,[],[f62_D])).
fof(f62_D,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK17))),s('type.ast.t',sK16)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f64,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK20))),s('type.list.list'('type.ast.t'),sK19)))) | $spl8),
  inference(cnf_transformation,[],[f64_D])).
fof(f64_D,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK20))),s('type.list.list'('type.ast.t'),sK19)))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f44,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK20))),s('type.list.list'('type.ast.t'),sK19)))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK17))),s('type.ast.t',sK16)))) | ~sP0(sK11)),
  inference(cnf_transformation,[],[f29])).
fof(f59,plain,(
  ( ! [X10,X9] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,sK18))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(sK11,X10))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK17))))))) ) | $spl2),
  inference(cnf_transformation,[],[f59_D])).
fof(f59_D,plain,(
  ( ! [X10,X9] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,sK18))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(sK11,X10))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK17))))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f45,plain,(
  ( ! [X10,X9] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK20))),s('type.list.list'('type.ast.t'),sK19)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK17)))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,sK18))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(sK11,X10))) | ~sP0(sK11)) )),
  inference(cnf_transformation,[],[f29])).
fof(f60,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(sK11,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20))))))) ) | $spl4),
  inference(cnf_transformation,[],[f60_D])).
fof(f60_D,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(sK11,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20))))))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f46,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20)))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(sK11,X5))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),sK17))),s('type.ast.t',sK16)))) | ~sP0(sK11)) )),
  inference(cnf_transformation,[],[f29])).
fof(f47,plain,(
  ( ! [X4,X10,X5,X9] : (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK20)))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.ts_to_freevars_2'(s('type.list.list'('type.ast.t'),sK19),s(sK11,sK21))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X4))),s(sK11,X5))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),sK17)))))) | s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.infer.t_to_freevars_2'(s('type.ast.t',sK16),s(sK11,sK18))) != s('type.pair.prod'('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),sK11),'const.pair.,_2'(s('type.infer.exc'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),'const.infer.Success_1'(s('type.list.list'('type.list.list'('type.string.char')),X9))),s(sK11,X10))) | ~sP0(sK11)) )),
  inference(cnf_transformation,[],[f29])).
% SZS output end Proof for thm.inferProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 113
% Passive clauses: 416
% Generated clauses: 1006
% Final active clauses: 60
% Final passive clauses: 187
% Input formulas: 8
% Initial clauses: 24
% 
% Selected by SInE selection: 8
% SInE iterations: 1
% 
% Duplicate literals: 10
% Trivial inequalities: 1
% Fw subsumption resolutions: 124
% Fw demodulations: 44
% Bw demodulations: 19
% 
% Simple tautologies: 2
% Equational tautologies: 4
% Forward subsumptions: 352
% 
% Binary resolution: 149
% Forward superposition: 277
% Backward superposition: 282
% Equality resolution: 9
% 
% Split clauses: 60
% Split components: 132
% SAT solver clauses: 71
% SAT solver unit clauses: 3
% SAT solver binary clauses: 4
% 
% Sat splits: 60
% Sat splitting refutations: 10
% 
% Memory used [KB]: 2558
% Time elapsed: 0.054 s
% ------------------------------
% ------------------------------
% Success in time 11.841 s
