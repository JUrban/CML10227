Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.modProps
% (65132)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 158
% Passive clauses: 2326
% Generated clauses: 21659
% Final active clauses: 156
% Final passive clauses: 2028
% Input formulas: 21
% Initial clauses: 34
% 
% Duplicate literals: 816
% Trivial inequalities: 741
% Fw subsumption resolutions: 2169
% Fw demodulations: 5401
% Bw demodulations: 2
% 
% Simple tautologies: 290
% Equational tautologies: 24
% Forward subsumptions: 8856
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 188
% Forward superposition: 7172
% Backward superposition: 4852
% Self superposition: 116
% Equality factoring: 57
% Equality resolution: 22
% 
% Split clauses: 317
% Split components: 645
% SAT solver clauses: 889
% SAT solver unit clauses: 19
% SAT solver binary clauses: 233
% 
% Sat splits: 317
% 
% TWLsolver clauses: 889
% TWLsolver calls for satisfiability: 147
% 
% Memory used [KB]: 13304
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.modProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modProps
% SZS output start Proof for thm.modProps
fof(f2273,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f2272,f1705,f1708,f76,f112,f101,f124])).
fof(f124,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X2))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),sK5(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),sK6(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),sK7(X3,X2,X1,X0)),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),sK8(X3,X2,X1,X0))))))))) ) | $spl20),
  inference(cnf_transformation,[],[f124_D])).
fof(f124_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X2))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),sK5(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),sK6(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),sK7(X3,X2,X1,X0)),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),sK8(X3,X2,X1,X0))))))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f101,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X2))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),sK5(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),sK6(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),sK7(X3,X2,X1,X0)),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),sK8(X3,X2,X1,X0))))))))) )),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X2))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),sK5(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),sK6(X3,X2,X1,X0)),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),sK7(X3,X2,X1,X0)),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),sK8(X3,X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6,sK7,sK8])],[f43])).
fof(f43,plain,(
  ! [X0,X1,X2,X3] : ? [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X2))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ! [X0] : ! [X1,X2,X3] : ? [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X2))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X10,X9,X20] : ? [X21,X11,X12,X13] : s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X20),s('type.modSem.state'(X6),X10),s('type.list.list'('type.modLang.dec'),X9))) = s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X6),X21),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X11),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X12),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X13)))))))),
  file('thm.modProps.modProps_27_prove_ltb','thm.modProps.modProps_|49||48|_prove_ltb')).
fof(f112,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK2),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.dec'),sK3))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))) ) | $spl0),
  inference(cnf_transformation,[],[f112_D])).
fof(f112_D,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK2),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.dec'),sK3))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f76,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK2),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.dec'),sK3))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK2),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.dec'),sK3))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f54])).
fof(f54,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X2),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X3))) != s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X2),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X3))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1,X2,X3] : ? [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X2),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X3))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : ? [X10,X11,X12,X13] : s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X8),s('type.modSem.state'(X6),X7),s('type.list.list'('type.modLang.dec'),X9))) = s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X6),X10),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X11),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X12),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X13)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : ? [X10,X11,X12,X13] : s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X8),s('type.modSem.state'(X6),X7),s('type.list.list'('type.modLang.dec'),X9))) = s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X6),X10),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X11),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X12),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X13)))))))),
  file('thm.modProps.modProps_27_prove_ltb','thm.modProps.modProps_27_prove_ltb')).
fof(f1708,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK2),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.dec'),sK3))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X0),s('type.modSem.state'(sK0),X2),s('type.list.list'('type.modLang.dec'),X1)))) ) | $spl338),
  inference(cnf_transformation,[],[f1708_D])).
fof(f1708_D,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK2),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.dec'),sK3))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X0),s('type.modSem.state'(sK0),X2),s('type.list.list'('type.modLang.dec'),X1)))) ) <=> ~$spl338),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl338])])).
fof(f1705,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK2),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.dec'),sK3))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X0),s('type.modSem.state'(sK0),X2),s('type.list.list'('type.modLang.dec'),X1)))) ) | ($spl0 | $spl20)),
  inference(superposition,[],[f112,f124])).
fof(f2272,plain,(
  $false | $spl338),
  inference(equality_resolution,[],[f1708])).
% SZS output end Proof for thm.modProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 50
% Passive clauses: 216
% Generated clauses: 2173
% Final active clauses: 45
% Final passive clauses: 150
% Input formulas: 21
% Initial clauses: 34
% 
% Duplicate literals: 178
% Trivial inequalities: 35
% Fw subsumption resolutions: 132
% Fw demodulations: 99
% Bw demodulations: 20
% Condensations: 238
% 
% Simple tautologies: 112
% Equational tautologies: 18
% Forward subsumptions: 801
% 
% Binary resolution: 25
% Forward superposition: 583
% Backward superposition: 510
% Self superposition: 52
% Equality factoring: 40
% Equality resolution: 11
% 
% Split clauses: 11
% Split components: 22
% SAT solver clauses: 368
% SAT solver unit clauses: 37
% SAT solver binary clauses: 35
% SAT solver learnt clauses: 1
% 
% Sat splits: 11
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 367
% TWLsolver calls for satisfiability: 124
% 
% Memory used [KB]: 3709
% Time elapsed: 0.099 s
% ------------------------------
% ------------------------------
% Success in time 0.73 s
