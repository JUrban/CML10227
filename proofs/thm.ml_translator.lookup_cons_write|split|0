Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.ml_translator
% (100684)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 49
% Passive clauses: 1378
% Generated clauses: 8662
% Final active clauses: 47
% Final passive clauses: 1247
% Input formulas: 27
% Initial clauses: 40
% 
% Duplicate literals: 620
% Trivial inequalities: 109
% Fw subsumption resolutions: 1009
% Fw demodulations: 6
% 
% Simple tautologies: 219
% Equational tautologies: 131
% Forward subsumptions: 2988
% 
% Binary resolution: 33
% Forward superposition: 3078
% Backward superposition: 2848
% Self superposition: 461
% Equality factoring: 406
% Equality resolution: 11
% 
% Split clauses: 403
% Split components: 810
% SAT solver clauses: 1360
% SAT solver unit clauses: 312
% SAT solver binary clauses: 451
% 
% Sat splits: 403
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1356
% TWLsolver calls for satisfiability: 46
% 
% Memory used [KB]: 4349
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.ml_translator
% (100699)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 60
% Passive clauses: 141
% Generated clauses: 6221
% Final active clauses: 57
% Final passive clauses: 75
% Input formulas: 27
% Initial clauses: 40
% 
% Duplicate literals: 1140
% Trivial inequalities: 63
% Fw subsumption resolutions: 222
% Fw demodulations: 11
% Bw demodulations: 5
% Condensations: 1668
% Global subsumptions: 4
% 
% Simple tautologies: 135
% Equational tautologies: 79
% Forward subsumptions: 1911
% 
% Binary resolution: 41
% Forward superposition: 1252
% Backward superposition: 1439
% Self superposition: 271
% Equality factoring: 222
% Equality resolution: 5
% 
% Split clauses: 47
% Split components: 94
% SAT solver clauses: 403
% SAT solver unit clauses: 54
% SAT solver binary clauses: 72
% SAT solver learnt clauses: 8
% 
% Sat splits: 47
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 387
% TWLsolver calls for satisfiability: 110
% 
% Memory used [KB]: 5756
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.ml_translator
% (100722)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 87
% Passive clauses: 521
% Generated clauses: 24784
% Final active clauses: 45
% Final passive clauses: 68
% Input formulas: 27
% Initial clauses: 40
% Discarded non-redundant clauses: 87
% 
% Duplicate literals: 2890
% Trivial inequalities: 226
% Fw subsumption resolutions: 1067
% Fw demodulations: 372
% Bw demodulations: 215
% Condensations: 5177
% Global subsumptions: 6
% 
% Simple tautologies: 359
% Equational tautologies: 1601
% Forward subsumptions: 12673
% Bw demodulations to eq. taut.: 16
% 
% Unit resulting resolution: 3238
% Forward superposition: 5966
% Backward superposition: 4174
% Self superposition: 464
% Equality factoring: 408
% Equality resolution: 15
% 
% Split clauses: 82
% Split components: 165
% SAT solver clauses: 742
% SAT solver unit clauses: 36
% SAT solver binary clauses: 80
% 
% Sat splits: 82
% Sat splitting refutations: 49
% 
% Memory used [KB]: 9594
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.ml_translator
% Refutation not found, incomplete strategy
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation not found, incomplete strategy

% Active clauses: 19
% Passive clauses: 1
% Generated clauses: 1
% Final active clauses: 19
% Input formulas: 27
% Initial clauses: 30
% 
% Selected by SInE selection: 22
% SInE iterations: 1
% 
% Duplicate literals: 1
% Trivial inequalities: 1
% 
% Simple tautologies: 9
% Equational tautologies: 2
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 767
% Time elapsed: 0.003 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 6
lrs+1002_2:3_br=off:fde=unused:gs=on:gsaa=from_current:gsem=on:gsssp=full:nwc=1:sas=minisat:stl=30:sac=on:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none:sp=reverse_arity:urr=on_4 on thm.ml_translator
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.ml_translator
% SZS output start Proof for thm.ml_translator
fof(f10340,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f10334])).
fof(f10334,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),sK3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK2))) != s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),sK3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK2)))),
  inference(superposition,[],[f88,f2503])).
fof(f2503,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),X6),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))) = s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),X6),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.v',X4),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5)))))) )),
  inference(superposition,[],[f1131,f123])).
fof(f123,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.environment'(X0),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),X1),s(X0,X2),s('type.semanticPrimitives.environment'(X0),X3))) = s('type.semanticPrimitives.environment'(X0),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0)),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),X0),'const.pair.,_2'(s('type.list.list'('type.string.char'),X1),s(X0,X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0)),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'(X0),X3))))))),s('type.semanticPrimitives.environment'(X0),X3)))) )),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0,X1,X2,X3] : s('type.semanticPrimitives.environment'(X0),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),X1),s(X0,X2),s('type.semanticPrimitives.environment'(X0),X3))) = s('type.semanticPrimitives.environment'(X0),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0)),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),X0),'const.pair.,_2'(s('type.list.list'('type.string.char'),X1),s(X0,X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0)),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'(X0),X3))))))),s('type.semanticPrimitives.environment'(X0),X3)))),
  inference(flattening,[],[f59])).
fof(f59,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.semanticPrimitives.environment'(X0),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),X1),s(X0,X2),s('type.semanticPrimitives.environment'(X0),X3))) = s('type.semanticPrimitives.environment'(X0),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0)),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),X0),'const.pair.,_2'(s('type.list.list'('type.string.char'),X1),s(X0,X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0)),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'(X0),X3))))))),s('type.semanticPrimitives.environment'(X0),X3)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X11] : ! [X9,X16,X8] : s('type.semanticPrimitives.environment'(X11),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),X9),s(X11,X16),s('type.semanticPrimitives.environment'(X11),X8))) = s('type.semanticPrimitives.environment'(X11),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X11)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X11))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X11)),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),X11),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s(X11,X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X11)),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'(X11),X8))))))),s('type.semanticPrimitives.environment'(X11),X8)))),
  file('thm.ml_translator.lookup_cons_write|split|0','thm.ml_translator.write_def')).
fof(f1131,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1))) = s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1)))))) )),
  inference(forward_demodulation,[],[f1130,f124])).
fof(f124,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1))) = s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),X0))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1)))))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1] : s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1))) = s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),X0))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X9,X8] : s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))) = s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),X9))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8)))))),
  file('thm.ml_translator.lookup_cons_write|split|0','thm.ml_translator.lookup_cons_def')).
fof(f1130,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),X2),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),X2))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1)))))) )),
  inference(superposition,[],[f124,f118])).
fof(f118,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'(X0),X2))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'(X0),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0))),X1),s('type.semanticPrimitives.environment'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'(X0),X2))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'(X0),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0))),X1),s('type.semanticPrimitives.environment'(X0),X2)))))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0] : ! [X1,X2] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'(X0),X2))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'(X0),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X0))),X1),s('type.semanticPrimitives.environment'(X0),X2)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X19] : ! [X20,X21] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'(X19),X21))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'(X19),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X19)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),X19))),X20),s('type.semanticPrimitives.environment'(X19),X21)))))),
  file('thm.ml_translator.lookup_cons_write|split|0','thm.semanticPrimitives.semanticPrimitives_34_prove_ltb')).
fof(f88,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),sK3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK2))) != s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),sK3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),sK0),s('type.semanticPrimitives.v',sK1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK2)))))),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),sK3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK2))) != s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),sK3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),sK0),s('type.semanticPrimitives.v',sK1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f67])).
fof(f67,plain,(
  ? [X0,X1,X2,X3] : s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2))) != s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),X0),s('type.semanticPrimitives.v',X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2)))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ~! [X0,X1,X2,X3] : s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2))) = s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),X0),s('type.semanticPrimitives.v',X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))) = s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),X6),s('type.semanticPrimitives.v',X7),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))) = s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),X6),s('type.semanticPrimitives.v',X7),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8)))))),
  file('thm.ml_translator.lookup_cons_write|split|0','thm.ml_translator.lookup_cons_write|split|0')).
% SZS output end Proof for thm.ml_translator
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 107
% Passive clauses: 812
% Generated clauses: 10377
% Final active clauses: 87
% Final passive clauses: 505
% Input formulas: 27
% Initial clauses: 40
% 
% Duplicate literals: 424
% Trivial inequalities: 375
% Fw subsumption resolutions: 1463
% Fw demodulations: 140
% Bw demodulations: 147
% Global subsumptions: 2
% 
% Simple tautologies: 484
% Equational tautologies: 202
% Forward subsumptions: 6447
% Fw demodulations to eq. taut.: 5
% 
% Unit resulting resolution: 423
% Factoring: 1
% Forward superposition: 3506
% Backward superposition: 3483
% Self superposition: 115
% Equality factoring: 94
% Equality resolution: 12
% 
% Split clauses: 22
% Split components: 45
% SAT solver clauses: 855
% SAT solver unit clauses: 83
% SAT solver binary clauses: 39
% 
% Sat splits: 22
% Sat splitting refutations: 17
% 
% Memory used [KB]: 13560
% Time elapsed: 0.673 s
% ------------------------------
% ------------------------------
% Success in time 12.44 s
