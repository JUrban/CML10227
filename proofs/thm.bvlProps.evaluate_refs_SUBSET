Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvlProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvlProps
% SZS output start Proof for thm.bvlProps
fof(f659,plain,(
  $false),
  inference(subsumption_resolution,[],[f658,f80])).
fof(f80,plain,(
  ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))))))),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bvlSem.state'(sK0),sK2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK5),s('type.bvlSem.state'(sK0),sK3))))))) & ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5])],[f47])).
fof(f47,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))) & ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2)))))))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))) => p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2)))))))))),
  inference(flattening,[],[f22])).
fof(f22,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X4),s('type.bvlSem.state'(X0),X2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X5),s('type.bvlSem.state'(X0),X3))))))) => p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X2)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bvlSem.state'(X6),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X11),s('type.bvlSem.state'(X6),X9))))))) => p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X9))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X8)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),X10),s('type.bvlSem.state'(X6),X8))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X11),s('type.bvlSem.state'(X6),X9))))))) => p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X9))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X8)))))))))),
  file('thm.bvlProps.evaluate_refs_SUBSET','thm.bvlProps.evaluate_refs_SUBSET')).
fof(f658,plain,(
  p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK2))))))))),
  inference(forward_demodulation,[],[f652,f111])).
fof(f111,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))) )),
  inference(cnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0,X1,X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(flattening,[],[f41])).
fof(f41,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X3) = s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6,X19] : ! [X12,X13] : s(X19,X13) = s(X19,'const.pair.SND_1'(s('type.pair.prod'(X6,X19),'const.pair.,_2'(s(X6,X12),s(X19,X13)))))),
  file('thm.bvlProps.evaluate_refs_SUBSET','thm.pair.SND')).
fof(f652,plain,(
  p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),sK3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(sK0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bvlSem.state'(sK0),sK2))))))))))))),
  inference(superposition,[],[f110,f79])).
fof(f79,plain,(
  s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),sK4),s('type.bvlSem.state'(sK0),sK2))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),sK1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(sK0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),sK5),s('type.bvlSem.state'(sK0),sK3)))))))),
  inference(cnf_transformation,[],[f58])).
fof(f110,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bvlSem.state'(X0),X3))))))))))))))))) )),
  inference(cnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1,X2,X3] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bvlSem.state'(X0),X3))))))))))))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ! [X0] : ! [X1,X2,X3] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),X3))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X0),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X1),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X2),s('type.bvlSem.state'(X0),X3))))))))))))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X7,X11,X9] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),X9))))),s(fun('type.num.num',bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(X6),'const.pair.SND_1'(s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),X7),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),X11),s('type.bvlSem.state'(X6),X9))))))))))))))))),
  file('thm.bvlProps.evaluate_refs_SUBSET','thm.bvlProps.bvlProps_5|48|_prove_ltb')).
% SZS output end Proof for thm.bvlProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 29
% Passive clauses: 121
% Generated clauses: 559
% Final active clauses: 25
% Final passive clauses: 70
% Input formulas: 20
% Initial clauses: 48
% 
% Duplicate literals: 51
% Trivial inequalities: 16
% Fw subsumption resolutions: 49
% Fw demodulations: 12
% 
% Simple tautologies: 55
% Equational tautologies: 15
% Forward subsumptions: 208
% 
% Binary resolution: 37
% Forward superposition: 129
% Backward superposition: 143
% Self superposition: 26
% Equality factoring: 26
% Equality resolution: 7
% 
% Split clauses: 26
% Split components: 54
% SAT solver clauses: 47
% SAT solver unit clauses: 7
% SAT solver binary clauses: 22
% 
% Sat splits: 26
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 47
% TWLsolver calls for satisfiability: 21
% 
% Memory used [KB]: 1023
% Time elapsed: 0.029 s
% ------------------------------
% ------------------------------
% Success in time 0.031 s
