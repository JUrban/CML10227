Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bviProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bviProps
% SZS output start Proof for thm.bviProps
fof(f8041,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f8031,f7562,f114,f160,f115,f162,f158,f7857,f116,f163,f161,f159])).
fof(f159,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK2),s('type.bviSem.state'(sK0),sK1))))) | $spl1),
  inference(cnf_transformation,[],[f159_D])).
fof(f159_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK2),s('type.bviSem.state'(sK0),sK1))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f161,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1))) | $spl3),
  inference(cnf_transformation,[],[f161_D])).
fof(f161_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f163,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) | $spl5),
  inference(cnf_transformation,[],[f163_D])).
fof(f163_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f116,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK2),s('type.bviSem.state'(sK0),sK1)))))),
  inference(cnf_transformation,[],[f108])).
fof(f108,plain,(
  (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK2),s('type.bviSem.state'(sK0),sK1))))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK2),s('type.bviSem.state'(sK0),sK1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',sK2))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f107])).
fof(f107,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X2),s('type.bviSem.state'(X0),X1))))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X2))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X2),s('type.bviSem.state'(X0),X1))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X2)))),
  inference(flattening,[],[f106])).
fof(f106,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X2),s('type.bviSem.state'(X0),X1))))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X2))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X2),s('type.bviSem.state'(X0),X1))))) | (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X2))))),
  inference(nnf_transformation,[],[f104])).
fof(f104,plain,(
  ? [X0,X1,X2] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X2),s('type.bviSem.state'(X0),X1))))) <~> (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X2),s('type.bviSem.state'(X0),X1))))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X2),s('type.bviSem.state'(X0),X1))))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X2)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),'const.bviProps.inc_clock_2'(s('type.num.num',X8),s('type.bviSem.state'(X6),X7))))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),X7))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X8)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),'const.bviProps.inc_clock_2'(s('type.num.num',X8),s('type.bviSem.state'(X6),X7))))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X6),X7))) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X8)))),
  file('thm.bviProps.inc_clock_eq_|48|','thm.bviProps.inc_clock_eq_|48|')).
fof(f7857,plain,(
  $false | ($spl0 | $spl3 | $spl4)),
  inference(subsumption_resolution,[],[f7856,f161])).
fof(f7856,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f7855,f670])).
fof(f670,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | $spl4),
  inference(equality_resolution,[],[f658])).
fof(f658,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X0)))) ) | $spl4),
  inference(forward_demodulation,[],[f657,f162])).
fof(f657,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',X0)))) ) | $spl4),
  inference(trivial_inequality_removal,[],[f649])).
fof(f649,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK2),s('type.num.num',X0)))) ) | $spl4),
  inference(superposition,[],[f146,f162])).
fof(f146,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f111])).
fof(f111,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(flattening,[],[f110])).
fof(f110,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1))) & ((s('type.num.num','const.num.|48|_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num',X1)) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X0) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9,X10] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X10))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X9) & s('type.num.num','const.num.|48|_0') = s('type.num.num',X10)))),
  file('thm.bviProps.inc_clock_eq_|48|','thm.arithmetic.ADD_EQ_|48|')).
fof(f7855,plain,(
  s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl0 | $spl4)),
  inference(trivial_inequality_removal,[],[f7769])).
fof(f7769,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl0 | $spl4)),
  inference(superposition,[],[f7166,f7576])).
fof(f7576,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1))),s('type.num.num','const.num.|48|_0'))) | ($spl0 | $spl4)),
  inference(superposition,[],[f7575,f7301])).
fof(f7301,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))),s('type.num.num',X2))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X2),s('type.bviSem.state'(X0),X1)))))) )),
  inference(forward_demodulation,[],[f7243,f243])).
fof(f243,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X2) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(forward_demodulation,[],[f148,f147])).
fof(f147,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(flattening,[],[f87])).
fof(f87,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X16,X6] : ! [X12,X17] : s(X6,X12) = s(X6,'const.combin.K_2'(s(X6,X12),s(X16,X17)))),
  file('thm.bviProps.inc_clock_eq_|48|','thm.combin.K_THM')).
fof(f148,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(flattening,[],[f89])).
fof(f89,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X6,X16] : ! [X18,X19] : s(X6,'const.combin.K_2'(s(X6,X18),s(X16,X19))) = s(X6,happ(s(fun(X16,X6),'const.combin.K_1'(s(X6,X18))),s(X16,X19)))),
  file('thm.bviProps.inc_clock_eq_|48|','ARITY_1_2_const.combin.K')).
fof(f7243,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X2),s('type.bviSem.state'(X0),X1))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))),s('type.num.num',X2))))),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1)))))) )),
  inference(superposition,[],[f134,f140])).
fof(f140,plain,(
  ( ! [X2,X0,X1] : (s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X1),s('type.bviSem.state'(X0),X2))) = s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bviSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0,X1,X2] : s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X1),s('type.bviSem.state'(X0),X2))) = s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bviSem.state'(X0),X2)))),
  inference(flattening,[],[f78])).
fof(f78,plain,(
  ! [X0] : ! [X1,X2] : s('type.bviSem.state'(X0),'const.bviProps.inc_clock_2'(s('type.num.num',X1),s('type.bviSem.state'(X0),X2))) = s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bviSem.state'(X0),X2)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X13] : ! [X10,X7] : s('type.bviSem.state'(X13),'const.bviProps.inc_clock_2'(s('type.num.num',X10),s('type.bviSem.state'(X13),X7))) = s('type.bviSem.state'(X13),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X13),X7))),s('type.num.num',X10))))),s('type.bviSem.state'(X13),X7)))),
  file('thm.bviProps.inc_clock_eq_|48|','thm.bviProps.inc_clock_def')).
fof(f134,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bviSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bviSem.state'(X0),X1)))))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),X1))))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X0),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bviSem.state'(X0),X1)))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X13] : ! [X7,X14] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X14),s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X13),X7))))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(X13),'const.bviSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X14),s('type.bviSem.state'(X13),X7)))))),
  file('thm.bviProps.inc_clock_eq_|48|','thm.bviSem.bviSem_39_prove_ltb')).
fof(f7575,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bviSem.state'(sK0),sK1))))) | ($spl0 | $spl4)),
  inference(forward_demodulation,[],[f158,f162])).
fof(f7166,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0'))) | s('type.num.num',X0) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(superposition,[],[f691,f670])).
fof(f691,plain,(
  ( ! [X14,X13] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num',X14))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X13),s('type.num.num',X14))) | s('type.num.num',X13) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0')))) ) | $spl4),
  inference(superposition,[],[f155,f670])).
fof(f155,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2)))))),
  inference(nnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X2))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X2))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X9,X10,X11] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X11))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X10),s('type.num.num',X11))) <=> s('type.num.num',X9) = s('type.num.num',X10))),
  file('thm.bviProps.inc_clock_eq_|48|','thm.arithmetic.EQ_MONO_ADD_EQ')).
fof(f158,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK2),s('type.bviSem.state'(sK0),sK1))))) | $spl0),
  inference(cnf_transformation,[],[f158_D])).
fof(f158_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK2),s('type.bviSem.state'(sK0),sK1))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f162,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | $spl4),
  inference(cnf_transformation,[],[f162_D])).
fof(f162_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f115,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK2),s('type.bviSem.state'(sK0),sK1)))))),
  inference(cnf_transformation,[],[f108])).
fof(f160,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1))) | $spl2),
  inference(cnf_transformation,[],[f160_D])).
fof(f160_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f114,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num',sK2),s('type.bviSem.state'(sK0),sK1)))))),
  inference(cnf_transformation,[],[f108])).
fof(f7562,plain,(
  $false | ($spl1 | $spl2 | $spl4)),
  inference(subsumption_resolution,[],[f7561,f670])).
fof(f7561,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.num.|48|_0'))) | ($spl1 | $spl2 | $spl4)),
  inference(forward_demodulation,[],[f7496,f160])).
fof(f7496,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1))),s('type.num.num','const.num.|48|_0'))) | ($spl1 | $spl4)),
  inference(superposition,[],[f199,f7301])).
fof(f199,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),'const.bviProps.inc_clock_2'(s('type.num.num','const.num.|48|_0'),s('type.bviSem.state'(sK0),sK1))))) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f159,f162])).
fof(f8031,plain,(
  $false | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f8028,f163])).
fof(f8028,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | $spl0),
  inference(trivial_inequality_removal,[],[f7955])).
fof(f7955,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.num.num','const.num.|48|_0') = s('type.num.num',sK2) | $spl0),
  inference(superposition,[],[f145,f7879])).
fof(f7879,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(sK0),sK1))),s('type.num.num',sK2))) | $spl0),
  inference(superposition,[],[f158,f7301])).
fof(f145,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f111])).
% SZS output end Proof for thm.bviProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 97
% Passive clauses: 631
% Generated clauses: 7826
% Final active clauses: 83
% Final passive clauses: 414
% Input formulas: 37
% Initial clauses: 43
% 
% Duplicate literals: 304
% Trivial inequalities: 132
% Fw subsumption resolutions: 625
% Fw demodulations: 698
% 
% Simple tautologies: 97
% Equational tautologies: 21
% Forward subsumptions: 5186
% 
% Binary resolution: 4
% Forward superposition: 3157
% Backward superposition: 2608
% Self superposition: 148
% Equality factoring: 47
% Equality resolution: 16
% 
% Split clauses: 81
% Split components: 163
% SAT solver clauses: 214
% SAT solver unit clauses: 31
% SAT solver binary clauses: 70
% SAT solver learnt clauses: 3
% SAT solver learnt literals: 2
% 
% Sat splits: 81
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 211
% TWLsolver calls for satisfiability: 57
% 
% Memory used [KB]: 6780
% Time elapsed: 0.210 s
% ------------------------------
% ------------------------------
% Success in time 0.212 s
