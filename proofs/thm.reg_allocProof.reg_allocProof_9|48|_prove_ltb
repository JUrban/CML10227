Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.reg_allocProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.reg_allocProof
% SZS output start Proof for thm.reg_allocProof
fof(f1217,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1209,f93,f143,f91,f147,f683,f144,f685,f148])).
fof(f148,plain,(
  $false | ($spl1 | $spl2)),
  inference(resolution,[],[f144,f143])).
fof(f685,plain,(
  s(bool,'F_0') = s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) | $spl16),
  inference(cnf_transformation,[],[f685_D])).
fof(f685_D,plain,(
  s(bool,'F_0') = s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f144,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl2),
  inference(cnf_transformation,[],[f144_D])).
fof(f144_D,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f683,plain,(
  ( ! [X15] : (p(s(bool,X15)) | s(bool,'F_0') = s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))) )),
  inference(subsumption_resolution,[],[f679,f95])).
fof(f95,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X8] : (s(bool,'T_0') = s(bool,X8) <=> p(s(bool,X8)))),
  file('thm.reg_allocProof.reg_allocProof_9|48|_prove_ltb','thm.bool.EQ_CLAUSES|split|1')).
fof(f679,plain,(
  ( ! [X15] : (p(s(bool,X15)) | s(bool,'F_0') = s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f100,f354])).
fof(f354,plain,(
  ( ! [X20] : (s(bool,X20) = s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(trivial_inequality_removal,[],[f320])).
fof(f320,plain,(
  ( ! [X20] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X20) = s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f157,f158])).
fof(f158,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f94,f94])).
fof(f94,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.reg_allocProof.reg_allocProof_9|48|_prove_ltb',aHL_BOOL_CASES)).
fof(f157,plain,(
  s(bool,'T_0') != s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0)))),
  inference(resolution,[],[f90,f95])).
fof(f90,plain,(
  ~p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))))),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ~p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),sK0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f50])).
fof(f50,plain,(
  ? [X0] : ~p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))))),
  inference(ennf_transformation,[],[f25])).
fof(f25,plain,(
  ~! [X0] : p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X6),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X6))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X6),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X6))))),
  file('thm.reg_allocProof.reg_allocProof_9|48|_prove_ltb','thm.reg_allocProof.reg_allocProof_9|48|_prove_ltb')).
fof(f100,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X8] : (s(bool,'F_0') = s(bool,X8) <=> ~p(s(bool,X8)))),
  file('thm.reg_allocProof.reg_allocProof_9|48|_prove_ltb','thm.bool.EQ_CLAUSES|split|3')).
fof(f147,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f147_D])).
fof(f147_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f91,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.reg_allocProof.reg_allocProof_9|48|_prove_ltb',aHL_TRUTH)).
fof(f143,plain,(
  ~p(s(bool,'F_0')) | $spl1),
  inference(cnf_transformation,[],[f143_D])).
fof(f143_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f93,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.reg_allocProof.reg_allocProof_9|48|_prove_ltb',aHL_FALSITY)).
fof(f1209,plain,(
  $false | ($spl1 | $spl6 | $spl16)),
  inference(subsumption_resolution,[],[f1200,f143])).
fof(f1200,plain,(
  p(s(bool,'F_0')) | ($spl6 | $spl16)),
  inference(superposition,[],[f1139,f685])).
fof(f1139,plain,(
  ( ! [X0] : (p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))))) ) | $spl6),
  inference(subsumption_resolution,[],[f1138,f147])).
fof(f1138,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))))) ) | $spl6),
  inference(forward_demodulation,[],[f1137,f180])).
fof(f180,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X1)))) )),
  inference(resolution,[],[f133,f96])).
fof(f96,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f59])).
fof(f133,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X1))))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X1))))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ! [X0] : ! [X1] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X0,bool),X1),s(fun(X0,bool),X1))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X7] : ! [X10] : p(s(bool,'const.pred_set.SUBSET_2'(s(fun(X7,bool),X10),s(fun(X7,bool),X10))))),
  file('thm.reg_allocProof.reg_allocProof_9|48|_prove_ltb','thm.pred_set.SUBSET_REFL')).
fof(f1137,plain,(
  ( ! [X0] : (p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))))))) ) | $spl6),
  inference(duplicate_literal_removal,[],[f1126])).
fof(f1126,plain,(
  ( ! [X0] : (p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))))) | p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))))) ) | $spl6),
  inference(resolution,[],[f139,f868])).
fof(f868,plain,(
  ( ! [X0] : (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK1(X0,X0)),s('type.num.num',sK2(X0,X0)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))))) ) | $spl6),
  inference(subsumption_resolution,[],[f861,f147])).
fof(f861,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK1(X0,X0)),s('type.num.num',sK2(X0,X0)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))))) )),
  inference(superposition,[],[f138,f180])).
fof(f138,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))) | p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK1(X1,X0)),s('type.num.num',sK2(X1,X0)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))) )),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))) & ! [X4,X5] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X4),s('type.num.num',X5),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X4),s('type.num.num',X5),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))) & (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))) | (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK1(X1,X0)),s('type.num.num',sK2(X1,X0)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) & ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK1(X1,X0)),s('type.num.num',sK2(X1,X0)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))) | p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2])],[f87])).
fof(f87,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))) & ! [X4,X5] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X4),s('type.num.num',X5),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X4),s('type.num.num',X5),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))) & (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))) | ? [X2,X3] : (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) & ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))) | p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))),
  inference(rectify,[],[f86])).
fof(f86,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))) & ! [X2,X3] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))) & (~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))) | ? [X2,X3] : (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) & ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))) | p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))),
  inference(flattening,[],[f85])).
fof(f85,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))) & ! [X2,X3] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))) & ((~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))) | ? [X2,X3] : (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) & ~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))) | p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))),
  inference(nnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1] : (p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) <=> (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))) & ! [X2,X3] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) | p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))))),
  inference(ennf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0,X1] : (p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) <=> (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))) & ! [X2,X3] : (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0)))) => p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X2),s('type.num.num',X3),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6,X11] : (p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X6),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X11)))) <=> (p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X6))),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X11)))))) & ! [X9,X12] : (p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X9),s('type.num.num',X12),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X6)))) => p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',X9),s('type.num.num',X12),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X11)))))))),
  file('thm.reg_allocProof.reg_allocProof_9|48|_prove_ltb','thm.reg_allocProof.is_subgraph_def')).
fof(f139,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.reg_alloc.lookup_g_3'(s('type.num.num',sK1(X1,X0)),s('type.num.num',sK2(X1,X0)),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | p(s(bool,'const.reg_allocProof.is_subgraph_2'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0),s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X0))),s(fun('type.num.num',bool),'const.sptree.domain_1'(s('type.sptree.spt'('type.sptree.spt'('type.one.one')),X1))))))) )),
  inference(cnf_transformation,[],[f88])).
% SZS output end Proof for thm.reg_allocProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 47
% Passive clauses: 152
% Generated clauses: 1092
% Final active clauses: 34
% Final passive clauses: 71
% Input formulas: 23
% Initial clauses: 51
% 
% Duplicate literals: 101
% Trivial inequalities: 34
% Fw subsumption resolutions: 117
% Fw demodulations: 24
% Bw demodulations: 10
% 
% Simple tautologies: 83
% Equational tautologies: 18
% Forward subsumptions: 509
% 
% Binary resolution: 46
% Forward superposition: 355
% Backward superposition: 259
% Self superposition: 28
% Equality factoring: 30
% Equality resolution: 9
% 
% Split clauses: 51
% Split components: 109
% SAT solver clauses: 86
% SAT solver unit clauses: 6
% SAT solver binary clauses: 33
% SAT solver learnt clauses: 1
% 
% Sat splits: 51
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 80
% TWLsolver calls for satisfiability: 21
% 
% Memory used [KB]: 1151
% Time elapsed: 0.030 s
% ------------------------------
% ------------------------------
% Success in time 0.029 s
