Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f1103,plain,(
  $false),
  inference(subsumption_resolution,[],[f1102,f165])).
fof(f165,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),sK10))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK11)))),
  inference(cnf_transformation,[],[f118])).
fof(f118,plain,(
  s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK11),s('type.sptree.spt'('type.clos_known.val_approx'),sK9))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK10),s('type.list.list'('type.clos_known.val_approx'),sK7),s('type.sptree.spt'('type.clos_known.val_approx'),sK8))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),sK10))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK11)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7,sK8,sK9,sK10,sK11])],[f83])).
fof(f83,plain,(
  ? [X0,X1,X2,X3,X4] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X3))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4))))),
  inference(ennf_transformation,[],[f35])).
fof(f35,plain,(
  ~! [X0,X1,X2,X3,X4] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X2))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X3),s('type.list.list'('type.clos_known.val_approx'),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X3))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X9),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X8))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X9),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.sptree.spt'('type.clos_known.val_approx'),X7))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10))))),
  file('thm.clos_knownProof.known_LENGTH_EQ_E','thm.clos_knownProof.known_LENGTH_EQ_E')).
fof(f1102,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),sK10))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK11)))),
  inference(forward_demodulation,[],[f1096,f227])).
fof(f227,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(flattening,[],[f74])).
fof(f74,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.pair.FST_1'(s('type.pair.prod'(X1,X0),'const.pair.,_2'(s(X1,X2),s(X0,X3)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X12,X13] : ! [X14,X15] : s(X13,X14) = s(X13,'const.pair.FST_1'(s('type.pair.prod'(X13,X12),'const.pair.,_2'(s(X13,X14),s(X12,X15)))))),
  file('thm.clos_knownProof.known_LENGTH_EQ_E','thm.pair.FST')).
fof(f1096,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),sK10))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK11),s('type.sptree.spt'('type.clos_known.val_approx'),sK9)))))))),
  inference(superposition,[],[f229,f164])).
fof(f164,plain,(
  s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),sK11),s('type.sptree.spt'('type.clos_known.val_approx'),sK9))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),sK10),s('type.list.list'('type.clos_known.val_approx'),sK7),s('type.sptree.spt'('type.clos_known.val_approx'),sK8)))),
  inference(cnf_transformation,[],[f118])).
fof(f229,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X0))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X0),s('type.list.list'('type.clos_known.val_approx'),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2)))))))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X0))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X0),s('type.list.list'('type.clos_known.val_approx'),X1),s('type.sptree.spt'('type.clos_known.val_approx'),X2)))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X9,X6,X8] : s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closLang.exp'),X9))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'const.pair.FST_1'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),X9),s('type.list.list'('type.clos_known.val_approx'),X6),s('type.sptree.spt'('type.clos_known.val_approx'),X8)))))))),
  file('thm.clos_knownProof.known_LENGTH_EQ_E','thm.clos_knownProof.known_LENGTH')).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 134
% Passive clauses: 337
% Generated clauses: 933
% Final active clauses: 134
% Final passive clauses: 167
% Input formulas: 33
% Initial clauses: 106
% 
% Duplicate literals: 29
% Trivial inequalities: 1
% Fw subsumption resolutions: 38
% Fw demodulations: 39
% 
% Simple tautologies: 84
% Equational tautologies: 11
% Forward subsumptions: 376
% 
% Binary resolution: 519
% Factoring: 8
% Forward superposition: 77
% Backward superposition: 94
% Self superposition: 5
% Equality factoring: 2
% Equality resolution: 2
% 
% Split clauses: 34
% Split components: 69
% SAT solver clauses: 51
% SAT solver unit clauses: 4
% SAT solver binary clauses: 25
% 
% Sat splits: 34
% 
% TWLsolver clauses: 51
% TWLsolver calls for satisfiability: 33
% 
% Memory used [KB]: 1151
% Time elapsed: 0.062 s
% ------------------------------
% ------------------------------
% Success in time 0.078 s
