Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.modSem
% (20785)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 120
% Passive clauses: 916
% Generated clauses: 16454
% Final active clauses: 110
% Final passive clauses: 634
% Input formulas: 44
% Initial clauses: 56
% 
% Duplicate literals: 657
% Trivial inequalities: 166
% Fw subsumption resolutions: 1596
% Fw demodulations: 1407
% 
% Simple tautologies: 174
% Equational tautologies: 31
% Forward subsumptions: 10354
% 
% Binary resolution: 4
% Forward superposition: 6362
% Backward superposition: 5783
% Self superposition: 246
% Equality factoring: 73
% Equality resolution: 22
% 
% Split clauses: 199
% Split components: 403
% SAT solver clauses: 570
% SAT solver unit clauses: 43
% SAT solver binary clauses: 140
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 1
% 
% Sat splits: 199
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 569
% TWLsolver calls for satisfiability: 118
% 
% Memory used [KB]: 13816
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.modSem
% (20816)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 100
% Passive clauses: 312
% Generated clauses: 15524
% Final active clauses: 100
% Final passive clauses: 210
% Input formulas: 44
% Initial clauses: 56
% 
% Duplicate literals: 764
% Trivial inequalities: 183
% Fw subsumption resolutions: 987
% Fw demodulations: 897
% Bw demodulations: 1
% Condensations: 2524
% 
% Simple tautologies: 172
% Equational tautologies: 31
% Forward subsumptions: 8648
% 
% Binary resolution: 3
% Forward superposition: 5566
% Backward superposition: 4497
% Self superposition: 237
% Equality factoring: 78
% Equality resolution: 22
% 
% Split clauses: 39
% Split components: 83
% SAT solver clauses: 566
% SAT solver unit clauses: 90
% SAT solver binary clauses: 48
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 1
% 
% Sat splits: 39
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 565
% TWLsolver calls for satisfiability: 329
% 
% Memory used [KB]: 15095
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.modSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modSem
% SZS output start Proof for thm.modSem
fof(f20435,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f143,f206,f204,f202,f200,f198,f196,f194,f142,f205,f141,f203,f140,f201,f139,f199,f138,f197,f137,f195,f193,f214,f243,f246,f244,f690,f691,f840,f692,f841,f839,f938,f942,f1164,f1165,f1172,f3009,f3011,f7857,f7858,f7859,f7860,f7861,f7873,f7862,f7876,f7863,f7878,f7864,f7875,f7879,f7865,f7880,f7881,f7870,f7882,f7883,f7884,f7872,f7877,f7922,f7924,f7925,f7926,f7928,f7930,f7931,f7932,f7933,f7934,f7937,f7940,f8019,f8021,f8022,f8023,f8252,f8253,f8254,f8261,f8263,f8265,f8270,f8280,f8285,f8287,f8288,f8295,f8297,f8299,f8303,f8304,f8307,f8312,f8314,f8316,f8320,f8654,f8666,f8655,f8656,f8657,f8658,f8667,f8659,f8670,f8671,f8660,f8672,f8661,f8669,f8673,f8662,f8674,f8664,f8721,f8722,f8723,f8725,f8726,f8727,f8728,f8729,f8732,f8735,f8811,f8812,f8813,f9311,f9312,f9331,f9333,f9335,f9346,f9364,f9374,f9376,f9377,f9393,f9395,f9401,f9402,f9414,f9416,f9418,f9424,f12297,f12343,f12381,f13261,f13320,f13358,f13412,f13977,f14053,f14135,f14195,f15369,f15337,f15451,f15484,f15520,f15308,f15532,f15534,f15536,f15538,f15290,f15281,f15543,f15280,f15545,f15546,f15549,f15278,f15267,f15405,f15569,f15570,f15264,f15370,f15261,f15760,f15762,f15843,f15844,f15209,f15846,f15207,f15848,f15849,f15851,f15853,f15854,f15206,f15205,f15856,f15858,f15859,f15861,f15862,f15154,f15542,f15913,f15911,f15452,f15893,f15941,f15857,f15855,f15850,f15847,f15852,f15842,f15943,f15775,f15243,f15946,f15945,f14682,f15947,f14681,f15761,f15948,f16195,f16196,f16203,f16204,f16456,f16531,f16601,f16890,f16965,f17035,f17539,f17614,f17684,f18264,f18340,f18411,f18472,f18473,f18651,f18726,f18743,f19102,f19177,f19194,f19471,f19486,f3010,f19429,f19487,f19412,f7869,f19500,f19745,f19825,f19842,f20128,f20217,f20358,f20431,f20432,f20433,f20434])).
fof(f20434,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f196,f20108])).
fof(f20108,plain,(
  s('type.num.num',sK2) = s('type.num.num',sK8) | $spl0),
  inference(forward_demodulation,[],[f20107,f207])).
fof(f207,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,X2) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(forward_demodulation,[],[f185,f184])).
fof(f184,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(flattening,[],[f111])).
fof(f111,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.combin.K_2'(s(X1,X2),s(X0,X3)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X20,X21] : ! [X22,X23] : s(X21,X22) = s(X21,'const.combin.K_2'(s(X21,X22),s(X20,X23)))),
  file('thm.modSem.state_literal_|49||49|','thm.combin.K_THM')).
fof(f185,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))) )),
  inference(cnf_transformation,[],[f114])).
fof(f114,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(flattening,[],[f113])).
fof(f113,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X0,'const.combin.K_2'(s(X0,X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),'const.combin.K_1'(s(X0,X2))),s(X1,X3)))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X21,X20] : ! [X28,X29] : s(X21,'const.combin.K_2'(s(X21,X28),s(X20,X29))) = s(X21,happ(s(fun(X20,X21),'const.combin.K_1'(s(X21,X28))),s(X20,X29)))),
  file('thm.modSem.state_literal_|49||49|','ARITY_1_2_const.combin.K')).
fof(f20107,plain,(
  s('type.num.num',sK8) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20106,f207])).
fof(f20106,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20105,f159])).
fof(f159,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X2),s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X6] : ! [X24,X25] : s('type.num.num',happ(s(fun('type.num.num','type.num.num'),X25),s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X24))))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_93_prove_ltb')).
fof(f20105,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20037,f159])).
fof(f20037,plain,(
  s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f193,f177])).
fof(f177,plain,(
  ( ! [X2,X0,X1] : (s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0,X1,X2] : ((s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))) & (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))) | s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2)))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ! [X0,X1,X2] : ((s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))) & ((s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))) | s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2)))),
  inference(nnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0,X1,X2] : (s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2) <=> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))))),
  inference(flattening,[],[f109])).
fof(f109,plain,(
  ! [X0] : ! [X1,X2] : (s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2) <=> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X6] : ! [X26,X27] : (s('type.modSem.state'(X6),X26) = s('type.modSem.state'(X6),X27) <=> (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X26))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X27))) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X26))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X27))) & s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X26))) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X27))) & s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X26))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X27))) & s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X26))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X27))) & s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X26))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X27)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.state_component_equality')).
fof(f20433,plain,(
  $false | $spl0),
  inference(global_subsumption,[],[f143,f142,f141,f140,f139,f138,f137,f144,f146,f147,f148,f149,f150,f151,f152,f153,f154,f155,f156,f157,f158,f159,f160,f161,f162,f163,f164,f165,f166,f167,f168,f169,f170,f171,f172,f173,f174,f175,f176,f183,f182,f181,f180,f179,f178,f177,f184,f207,f186,f187,f188,f189,f190,f191,f192,f232,f235,f243,f334,f335,f347,f357,f358,f401,f690,f691,f692,f751,f2044,f1649,f1650,f1651,f1669,f1689,f1700,f1701,f1890,f1878,f2175,f2099,f2100,f2101,f2311,f2312,f2460,f2482,f2736,f2928,f3185,f3198,f3199,f4086,f4087,f4113,f4114,f4360,f4429,f4606,f4894,f4928,f4921,f6426,f6427,f6807,f7484,f7485,f7827,f7828,f7832,f7833,f9813,f9814,f9815,f9816,f9817,f9818,f9819,f10139,f10140,f10141,f10142,f10143,f10144,f10145,f10877,f10878,f10879,f10880,f10881,f10882,f10883,f11529,f11530,f11531,f11532,f11533,f11534,f11535,f11764,f11765,f11766,f11767,f11768,f11769,f11770,f145,f7831,f4203,f2711,f7846,f7845,f7844,f7843,f7840,f7839,f7856,f7855,f7853,f7852,f7838,f7826,f6882,f6881,f5896,f5895,f5503,f5152,f5151,f4461,f4460,f4386,f4297,f4296,f4207,f3420,f3419,f2991,f2777,f2708,f1816,f1815,f1814,f727,f709,f620,f612,f611,f404,f300,f299,f265,f234,f193,f20108,f20109,f20148,f20149,f20165,f20166,f20178,f20179,f20193,f20194,f20357,f20216,f20127])).
fof(f20127,plain,(
  s('type.ffi.ffi_state'(sK1),sK4) = s('type.ffi.ffi_state'(sK1),sK10) | $spl0),
  inference(forward_demodulation,[],[f20126,f9819])).
fof(f20126,plain,(
  s('type.ffi.ffi_state'(sK1),sK10) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20125,f9819])).
fof(f20125,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20124,f191])).
fof(f20124,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20123,f191])).
fof(f20123,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20122,f9813])).
fof(f20122,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20121,f9813])).
fof(f20121,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20120,f191])).
fof(f20120,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20119,f191])).
fof(f20119,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20118,f9814])).
fof(f20118,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20117,f9814])).
fof(f20117,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20116,f191])).
fof(f20116,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20115,f191])).
fof(f20115,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20114,f9815])).
fof(f20114,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20113,f9815])).
fof(f20113,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20112,f157])).
fof(f20112,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20111,f157])).
fof(f20111,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20110,f147])).
fof(f20110,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20036,f147])).
fof(f20036,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f193,f179])).
fof(f20216,plain,(
  s('type.ffi.ffi_state'(sK1),sK4) = s('type.ffi.ffi_state'(sK1),sK10) | $spl0),
  inference(forward_demodulation,[],[f20215,f9819])).
fof(f20215,plain,(
  s('type.ffi.ffi_state'(sK1),sK10) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20214,f9819])).
fof(f20214,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20213,f191])).
fof(f20213,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20212,f191])).
fof(f20212,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20211,f9813])).
fof(f20211,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20210,f9813])).
fof(f20210,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20209,f191])).
fof(f20209,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20208,f191])).
fof(f20208,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20207,f9814])).
fof(f20207,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20206,f9814])).
fof(f20206,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20205,f191])).
fof(f20205,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20204,f191])).
fof(f20204,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20203,f9815])).
fof(f20203,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20202,f9815])).
fof(f20202,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20201,f157])).
fof(f20201,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20200,f157])).
fof(f20200,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20199,f147])).
fof(f20199,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20030,f147])).
fof(f20030,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f193,f179])).
fof(f20357,plain,(
  s('type.ffi.ffi_state'(sK1),sK4) = s('type.ffi.ffi_state'(sK1),sK10) | $spl0),
  inference(forward_demodulation,[],[f20356,f9819])).
fof(f20356,plain,(
  s('type.ffi.ffi_state'(sK1),sK10) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20355,f9819])).
fof(f20355,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20354,f191])).
fof(f20354,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20353,f191])).
fof(f20353,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20352,f9813])).
fof(f20352,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20351,f9813])).
fof(f20351,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20350,f191])).
fof(f20350,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20349,f191])).
fof(f20349,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20348,f9814])).
fof(f20348,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20347,f9814])).
fof(f20347,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20346,f191])).
fof(f20346,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20345,f191])).
fof(f20345,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20344,f9815])).
fof(f20344,plain,(
  s('type.ffi.ffi_state'(sK1),happ(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.ffi.ffi_state'(sK0),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20343,f9815])).
fof(f20343,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20342,f157])).
fof(f20342,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20341,f157])).
fof(f20341,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20043,f147])).
fof(f20043,plain,(
  s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.ffi.ffi_state'(sK1),'const.modSem.state_ffi_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(superposition,[],[f147,f193])).
fof(f20194,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(backward_demodulation,[],[f20193,f20179])).
fof(f20193,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK6) = s(fun('type.list.list'('type.string.char'),bool),sK12) | $spl0),
  inference(forward_demodulation,[],[f20192,f11770])).
fof(f20192,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK12) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20191,f11770])).
fof(f20191,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20190,f176])).
fof(f20190,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20189,f176])).
fof(f20189,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20188,f11764])).
fof(f20188,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20187,f11764])).
fof(f20187,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20186,f170])).
fof(f20186,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20185,f170])).
fof(f20185,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20184,f190])).
fof(f20184,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20183,f190])).
fof(f20183,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20182,f169])).
fof(f20182,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20181,f169])).
fof(f20181,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20180,f158])).
fof(f20180,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20032,f158])).
fof(f20032,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f193,f181])).
fof(f20179,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(backward_demodulation,[],[f20178,f20166])).
fof(f20178,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | $spl0),
  inference(forward_demodulation,[],[f20177,f10145])).
fof(f20177,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK13) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20176,f10145])).
fof(f20176,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20175,f168])).
fof(f20175,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20174,f168])).
fof(f20174,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20173,f166])).
fof(f20173,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20172,f166])).
fof(f20172,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20171,f188])).
fof(f20171,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20170,f188])).
fof(f20170,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20169,f165])).
fof(f20169,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20168,f165])).
fof(f20168,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20167,f148])).
fof(f20167,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20033,f148])).
fof(f20033,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f193,f182])).
fof(f20166,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(backward_demodulation,[],[f20165,f20149])).
fof(f20165,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | $spl0),
  inference(forward_demodulation,[],[f20164,f11535])).
fof(f20164,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20163,f11535])).
fof(f20163,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20162,f175])).
fof(f20162,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20161,f175])).
fof(f20161,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20160,f11529])).
fof(f20160,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20159,f11529])).
fof(f20159,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20158,f175])).
fof(f20158,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20157,f175])).
fof(f20157,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20156,f11530])).
fof(f20156,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20155,f11530])).
fof(f20155,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20154,f187])).
fof(f20154,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20153,f187])).
fof(f20153,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20152,f164])).
fof(f20152,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20151,f164])).
fof(f20151,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20150,f153])).
fof(f20150,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20034,f153])).
fof(f20034,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f193,f180])).
fof(f20149,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(backward_demodulation,[],[f20148,f20109])).
fof(f20148,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) | $spl0),
  inference(forward_demodulation,[],[f20147,f10883])).
fof(f20147,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20146,f10883])).
fof(f20146,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20145,f174])).
fof(f20145,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20144,f174])).
fof(f20144,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | $spl0),
  inference(forward_demodulation,[],[f20143,f10877])).
fof(f20143,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20142,f10877])).
fof(f20142,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20141,f174])).
fof(f20141,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20140,f174])).
fof(f20140,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | $spl0),
  inference(forward_demodulation,[],[f20139,f10878])).
fof(f20139,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20138,f10878])).
fof(f20138,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20137,f174])).
fof(f20137,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20136,f174])).
fof(f20136,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | $spl0),
  inference(forward_demodulation,[],[f20135,f10879])).
fof(f20135,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20134,f10879])).
fof(f20134,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20133,f174])).
fof(f20133,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20132,f174])).
fof(f20132,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20131,f10880])).
fof(f20131,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20130,f10880])).
fof(f20130,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20129,f152])).
fof(f20129,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(forward_demodulation,[],[f20035,f152])).
fof(f20035,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | $spl0),
  inference(unit_resulting_resolution,[],[f193,f178])).
fof(f20109,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(backward_demodulation,[],[f20108,f193])).
fof(f234,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X2),s(X3,X4))) | s(bool,'F_0') = s(bool,X2)) )),
  inference(superposition,[],[f146,f184])).
fof(f265,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') = s(bool,happ(s(fun(X4,bool),'const.combin.K_1'(s(bool,X5))),s(X4,X6))) | s(bool,'F_0') = s(bool,X5)) )),
  inference(superposition,[],[f207,f146])).
fof(f299,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X11),s(X14,X15))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X11),s(X12,X13)))) )),
  inference(superposition,[],[f234,f184])).
fof(f300,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X17),s(X19,X20))) | s(bool,'F_0') = s(bool,happ(s(fun(X16,bool),'const.combin.K_1'(s(bool,X17))),s(X16,X18)))) )),
  inference(superposition,[],[f234,f207])).
fof(f404,plain,(
  ( ! [X10,X11,X9] : (s(bool,X9) = s(bool,'const.combin.K_2'(s(bool,X10),s(bool,X9))) | s(bool,'F_0') = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f234,f232])).
fof(f611,plain,(
  ( ! [X43,X41,X44,X42,X40] : (s(bool,'T_0') = s(bool,happ(s(fun(X43,bool),'const.combin.K_1'(s(bool,X40))),s(X43,X44))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X40),s(X41,X42)))) )),
  inference(superposition,[],[f265,f184])).
fof(f612,plain,(
  ( ! [X47,X45,X48,X46,X49] : (s(bool,'T_0') = s(bool,happ(s(fun(X48,bool),'const.combin.K_1'(s(bool,X46))),s(X48,X49))) | s(bool,'F_0') = s(bool,happ(s(fun(X45,bool),'const.combin.K_1'(s(bool,X46))),s(X45,X47)))) )),
  inference(superposition,[],[f265,f207])).
fof(f620,plain,(
  ( ! [X26,X24,X25] : (s(bool,X24) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X25))),s(bool,X24))) | s(bool,'F_0') = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f265,f232])).
fof(f709,plain,(
  ( ! [X39,X41,X38,X42,X40] : (s(bool,X38) = s(bool,'const.combin.K_2'(s(bool,X39),s(bool,X38))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X39),s(X40,X41))) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f299,f232])).
fof(f727,plain,(
  ( ! [X39,X36,X40] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X36),s(X39,X40))) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f299,f184])).
fof(f1814,plain,(
  ( ! [X88,X87,X85,X89,X86] : (s(bool,X85) = s(bool,'const.combin.K_2'(s(bool,X86),s(bool,X85))) | s(bool,'F_0') = s(bool,X86) | s(bool,X85) = s(bool,X87) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X87),s(X88,X89)))) )),
  inference(superposition,[],[f234,f334])).
fof(f1815,plain,(
  ( ! [X94,X92,X90,X93,X91] : (s(bool,X90) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X91))),s(bool,X90))) | s(bool,'F_0') = s(bool,X91) | s(bool,X90) = s(bool,X92) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X92),s(X93,X94)))) )),
  inference(superposition,[],[f265,f334])).
fof(f1816,plain,(
  ( ! [X101,X99,X97,X95,X100,X98,X96] : (s(bool,X95) = s(bool,'const.combin.K_2'(s(bool,X96),s(bool,X95))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X96),s(X97,X98))) | s(bool,X95) = s(bool,X99) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X99),s(X100,X101)))) )),
  inference(superposition,[],[f299,f334])).
fof(f2708,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(condensation,[],[f2707])).
fof(f2707,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X2,X3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f2461])).
fof(f2461,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X2,X3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f357,f146])).
fof(f2777,plain,(
  ( ! [X111,X114,X112,X115,X113] : (s(bool,X112) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X114,X115))) | s(bool,'T_0') = s(bool,happ(s(fun(X111,bool),'const.combin.K_1'(s(bool,X112))),s(X111,X113)))) )),
  inference(superposition,[],[f2708,f207])).
fof(f2991,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X3,X4)))) )),
  inference(condensation,[],[f2990])).
fof(f2990,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X26) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X27,X28))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X26),s(X29,X30)))) )),
  inference(duplicate_literal_removal,[],[f2763])).
fof(f2763,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X26) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X27,X28))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X26),s(X29,X30)))) )),
  inference(superposition,[],[f2708,f334])).
fof(f3419,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X80) = s(bool,'const.combin.K_2'(s(bool,X81),s(bool,X80))) | s(bool,X81) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X82,X83))) | s(bool,X80) = s(bool,X84) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X84),s(X85,X86)))) )),
  inference(superposition,[],[f2991,f334])).
fof(f3420,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,X88) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X89,X90))) | s(bool,X87) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f2991,f232])).
fof(f4207,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f4065])).
fof(f4065,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f1878,f146])).
fof(f4296,plain,(
  ( ! [X158,X161,X159,X157,X162,X160] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X157),s(X160,X161))) | s(bool,X162) = s(bool,'const.combin.K_2'(s(bool,X157),s(X158,X159))) | s(bool,'T_0') = s(bool,X162)) )),
  inference(superposition,[],[f4207,f184])).
fof(f4297,plain,(
  ( ! [X167,X165,X163,X166,X164,X168] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X164),s(X166,X167))) | s(bool,X168) = s(bool,happ(s(fun(X163,bool),'const.combin.K_1'(s(bool,X164))),s(X163,X165))) | s(bool,'T_0') = s(bool,X168)) )),
  inference(superposition,[],[f4207,f207])).
fof(f4386,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X3),s(X4,X5))) | s(bool,X0) = s(bool,X3)) )),
  inference(condensation,[],[f4385])).
fof(f4385,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X66),s(X67,X68))) | s(bool,'T_0') = s(bool,X69) | s(bool,X66) = s(bool,X70) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X70),s(X71,X72)))) )),
  inference(duplicate_literal_removal,[],[f4282])).
fof(f4282,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X66),s(X67,X68))) | s(bool,'T_0') = s(bool,X69) | s(bool,'T_0') = s(bool,X69) | s(bool,X66) = s(bool,X70) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X70),s(X71,X72)))) )),
  inference(superposition,[],[f4207,f334])).
fof(f4460,plain,(
  ( ! [X101,X99,X102,X100] : (s(bool,'F_0') != s(bool,X99) | s(bool,X102) = s(bool,'const.combin.K_2'(s(bool,X99),s(X100,X101))) | s(bool,'T_0') = s(bool,X102)) )),
  inference(superposition,[],[f4360,f184])).
fof(f4461,plain,(
  ( ! [X103,X105,X106,X104] : (s(bool,'F_0') != s(bool,X104) | s(bool,X106) = s(bool,happ(s(fun(X103,bool),'const.combin.K_1'(s(bool,X104))),s(X103,X105))) | s(bool,'T_0') = s(bool,X106)) )),
  inference(superposition,[],[f4360,f207])).
fof(f5151,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X80) = s(bool,'const.combin.K_2'(s(bool,X81),s(bool,X80))) | s(bool,'F_0') = s(bool,happ(s(fun(X82,bool),'const.combin.K_1'(s(bool,X81))),s(X82,X83))) | s(bool,X80) = s(bool,X84) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X84),s(X85,X86)))) )),
  inference(superposition,[],[f300,f334])).
fof(f5152,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,'F_0') = s(bool,happ(s(fun(X89,bool),'const.combin.K_1'(s(bool,X88))),s(X89,X90))) | s(bool,X87) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f300,f232])).
fof(f5503,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X1,bool),'const.combin.K_1'(s(bool,X0))),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(condensation,[],[f5502])).
fof(f5502,plain,(
  ( ! [X12,X15,X11,X16] : (s(bool,'F_0') = s(bool,happ(s(fun(X15,bool),'const.combin.K_1'(s(bool,X11))),s(X15,X16))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f5111,f2736])).
fof(f5111,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X12),s(X13,X14))) | s(bool,'F_0') = s(bool,happ(s(fun(X15,bool),'const.combin.K_1'(s(bool,X11))),s(X15,X16))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f300,f232])).
fof(f5895,plain,(
  ( ! [X80,X85,X83,X81,X86,X84,X82] : (s(bool,X80) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X81))),s(bool,X80))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X81),s(X82,X83))) | s(bool,X80) = s(bool,X84) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X84),s(X85,X86)))) )),
  inference(superposition,[],[f611,f334])).
fof(f5896,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,X87) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X88))),s(bool,X87))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X88),s(X89,X90))) | s(bool,X87) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) )),
  inference(superposition,[],[f611,f232])).
fof(f6881,plain,(
  ( ! [X94,X92,X90,X88,X93,X91,X89] : (s(bool,X88) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X89))),s(bool,X88))) | s(bool,X89) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X90,X91))) | s(bool,X88) = s(bool,X92) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X92),s(X93,X94)))) )),
  inference(superposition,[],[f2777,f334])).
fof(f6882,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s(bool,X95) = s(bool,happ(s(fun(bool,bool),'const.combin.K_1'(s(bool,X96))),s(bool,X95))) | s(bool,X96) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X97,X98))) | s(bool,X95) = s(bool,X99) | s(bool,'T_0') = s(bool,X99)) )),
  inference(superposition,[],[f2777,f232])).
fof(f7826,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK14(X0,X1,X2,bool))) )),
  inference(superposition,[],[f192,f146])).
fof(f7838,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK14(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK14(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f192,f146])).
fof(f7852,plain,(
  ( ! [X54,X50,X48,X53,X49] : (s(X50,f(s(bool,'F_0'))) != s(X50,g(s(bool,'F_0'))) | s(fun(bool,X50),X48) = s(fun(bool,X50),X49) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),'const.combin.K_1'(s(bool,sK14(X48,X49,X50,bool)))),s(X53,X54)))) )),
  inference(forward_demodulation,[],[f7836,f184])).
fof(f7836,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s(X50,f(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X51,X52))))) != s(X50,g(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X51,X52))))) | s(fun(bool,X50),X48) = s(fun(bool,X50),X49) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),'const.combin.K_1'(s(bool,sK14(X48,X49,X50,bool)))),s(X53,X54)))) )),
  inference(superposition,[],[f192,f2777])).
fof(f7853,plain,(
  ( ! [X61,X57,X60,X56,X55] : (s(X57,f(s(bool,'F_0'))) != s(X57,g(s(bool,'F_0'))) | s(fun(bool,X57),X55) = s(fun(bool,X57),X56) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,sK14(X55,X56,X57,bool)),s(X60,X61)))) )),
  inference(forward_demodulation,[],[f7837,f184])).
fof(f7837,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s(X57,f(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X58,X59))))) != s(X57,g(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X58,X59))))) | s(fun(bool,X57),X55) = s(fun(bool,X57),X56) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,sK14(X55,X56,X57,bool)),s(X60,X61)))) )),
  inference(superposition,[],[f192,f2991])).
fof(f7855,plain,(
  ( ! [X54,X50,X48,X53,X49] : (s(bool,'F_0') != s(bool,f(s(X48,sK14(X49,X50,bool,X48)))) | s(fun(X48,bool),X49) = s(fun(X48,bool),X50) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),'const.combin.K_1'(s(bool,g(s(X48,sK14(X49,X50,bool,X48)))))),s(X53,X54)))) )),
  inference(forward_demodulation,[],[f7848,f184])).
fof(f7848,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X51,X52))) != s(bool,f(s(X48,sK14(X49,X50,bool,X48)))) | s(fun(X48,bool),X49) = s(fun(X48,bool),X50) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),'const.combin.K_1'(s(bool,g(s(X48,sK14(X49,X50,bool,X48)))))),s(X53,X54)))) )),
  inference(superposition,[],[f192,f2777])).
fof(f7856,plain,(
  ( ! [X61,X57,X60,X56,X55] : (s(bool,'F_0') != s(bool,f(s(X55,sK14(X56,X57,bool,X55)))) | s(fun(X55,bool),X56) = s(fun(X55,bool),X57) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s(X55,sK14(X56,X57,bool,X55)))),s(X60,X61)))) )),
  inference(forward_demodulation,[],[f7849,f184])).
fof(f7849,plain,(
  ( ! [X61,X59,X57,X60,X58,X56,X55] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X58,X59))) != s(bool,f(s(X55,sK14(X56,X57,bool,X55)))) | s(fun(X55,bool),X56) = s(fun(X55,bool),X57) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s(X55,sK14(X56,X57,bool,X55)))),s(X60,X61)))) )),
  inference(superposition,[],[f192,f2991])).
fof(f7839,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(X3,sK14(X4,X5,bool,X3)))) | s(fun(X3,bool),X4) = s(fun(X3,bool),X5) | s(bool,X6) = s(bool,g(s(X3,sK14(X4,X5,bool,X3)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f192,f232])).
fof(f7840,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X10) != s(bool,f(s(X7,sK14(X8,X9,bool,X7)))) | s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,g(s(X7,sK14(X8,X9,bool,X7))))) )),
  inference(superposition,[],[f192,f232])).
fof(f7843,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,X22) != s(bool,f(s(X19,sK14(X20,X21,bool,X19)))) | s(fun(X19,bool),X20) = s(fun(X19,bool),X21) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s(X19,sK14(X20,X21,bool,X19)))),s(X23,X24)))) )),
  inference(superposition,[],[f192,f334])).
fof(f7844,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X28) != s(bool,f(s(X25,sK14(X26,X27,bool,X25)))) | s(fun(X25,bool),X26) = s(fun(X25,bool),X27) | s(bool,'T_0') = s(bool,g(s(X25,sK14(X26,X27,bool,X25)))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X28),s(X29,X30)))) )),
  inference(superposition,[],[f192,f334])).
fof(f7845,plain,(
  ( ! [X35,X33,X31,X36,X34,X32] : (s(bool,'T_0') != s(bool,f(s(X31,sK14(X32,X33,bool,X31)))) | s(fun(X31,bool),X32) = s(fun(X31,bool),X33) | s(bool,X34) = s(bool,g(s(X31,sK14(X32,X33,bool,X31)))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X34),s(X35,X36)))) )),
  inference(superposition,[],[f192,f334])).
fof(f7846,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(bool,'const.combin.K_2'(s(bool,X40),s(X41,X42))) != s(bool,f(s(X37,sK14(X38,X39,bool,X37)))) | s(fun(X37,bool),X38) = s(fun(X37,bool),X39) | s(bool,'T_0') = s(bool,X40) | s(bool,'T_0') = s(bool,g(s(X37,sK14(X38,X39,bool,X37))))) )),
  inference(superposition,[],[f192,f357])).
fof(f2711,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.combin.K_2'(s(bool,X0),s(X4,X5))) = s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f2710])).
fof(f2710,plain,(
  ( ! [X47,X45,X50,X48,X46,X51,X49] : (s(bool,'const.combin.K_2'(s(bool,X46),s(X47,X48))) = s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X46)) )),
  inference(duplicate_literal_removal,[],[f2451])).
fof(f2451,plain,(
  ( ! [X47,X45,X50,X48,X46,X51,X49] : (s(bool,'const.combin.K_2'(s(bool,X46),s(X47,X48))) = s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f357,f357])).
fof(f4203,plain,(
  ( ! [X47,X45,X50,X48,X46,X51,X49] : (s(bool,'const.combin.K_2'(s(bool,X46),s(X47,X48))) != s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))) | s(bool,X45) = s(bool,X49) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X46)) )),
  inference(duplicate_literal_removal,[],[f4073])).
fof(f4073,plain,(
  ( ! [X47,X45,X50,X48,X46,X51,X49] : (s(bool,'const.combin.K_2'(s(bool,X46),s(X47,X48))) != s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))) | s(bool,X45) = s(bool,X49) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,X45)) )),
  inference(superposition,[],[f1878,f357])).
fof(f7831,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(X21,f(s(bool,X22))) != s(X21,g(s(bool,X22))) | s(fun(bool,X21),X19) = s(fun(bool,X21),X20) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,sK14(X19,X20,X21,bool)),s(X23,X24)))) )),
  inference(superposition,[],[f192,f334])).
fof(f145,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f48])).
fof(f48,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.modSem.state_literal_|49||49|',aHL_FALSITY)).
fof(f11770,plain,(
  ( ! [X4,X5,X3] : (s(fun('type.list.list'('type.string.char'),bool),X3) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X4),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X3))),s('type.modSem.state'(X4),X5)))))) )),
  inference(superposition,[],[f176,f207])).
fof(f11769,plain,(
  ( ! [X24,X23,X21,X22] : (s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X24),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X21),X23))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X21),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X24),s('type.modSem.state'(X21),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X22),s('type.modSem.state'(X21),X23)))))))) )),
  inference(superposition,[],[f176,f158])).
fof(f11768,plain,(
  ( ! [X19,X17,X20,X18] : (s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X20),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X17),X19))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X17),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X20),s('type.modSem.state'(X17),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X18),s('type.modSem.state'(X17),X19)))))))) )),
  inference(superposition,[],[f176,f169])).
fof(f11767,plain,(
  ( ! [X14,X12,X15,X13,X16] : (s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X16),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X13),X15))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X12),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X16),s('type.modSem.state'(X12),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X13),'type.ffi.ffi_state'(X12)),X14),s('type.modSem.state'(X13),X15)))))))) )),
  inference(superposition,[],[f176,f190])).
fof(f11766,plain,(
  ( ! [X10,X8,X11,X9] : (s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X11),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X8),X10))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X8),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X11),s('type.modSem.state'(X8),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X9),s('type.modSem.state'(X8),X10)))))))) )),
  inference(superposition,[],[f176,f170])).
fof(f11765,plain,(
  ( ! [X6,X4,X7,X5] : (s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X4),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X7),s('type.modSem.state'(X4),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X5),s('type.modSem.state'(X4),X6))))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X7),s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X5),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X4),X6)))))))) )),
  inference(superposition,[],[f176,f176])).
fof(f11764,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X3),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X3),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X1),s('type.modSem.state'(X0),X2)))))))) )),
  inference(superposition,[],[f176,f172])).
fof(f11535,plain,(
  ( ! [X4,X5,X3] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),X3) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X4),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X3))),s('type.modSem.state'(X4),X5)))))) )),
  inference(superposition,[],[f175,f207])).
fof(f11534,plain,(
  ( ! [X24,X23,X21,X22] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X24),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X21),X23))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X21),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X24),s('type.modSem.state'(X21),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X22),s('type.modSem.state'(X21),X23)))))))) )),
  inference(superposition,[],[f175,f153])).
fof(f11533,plain,(
  ( ! [X19,X17,X20,X18] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X20),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X17),X19))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X17),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X20),s('type.modSem.state'(X17),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X18),s('type.modSem.state'(X17),X19)))))))) )),
  inference(superposition,[],[f175,f164])).
fof(f11532,plain,(
  ( ! [X14,X12,X15,X13,X16] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X16),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X13),X15))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X12),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X16),s('type.modSem.state'(X12),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X13),'type.ffi.ffi_state'(X12)),X14),s('type.modSem.state'(X13),X15)))))))) )),
  inference(superposition,[],[f175,f187])).
fof(f11531,plain,(
  ( ! [X10,X8,X11,X9] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X8),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X11),s('type.modSem.state'(X8),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X9),s('type.modSem.state'(X8),X10))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X11),s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X9),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X8),X10)))))))) )),
  inference(superposition,[],[f175,f175])).
fof(f11530,plain,(
  ( ! [X6,X4,X7,X5] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X7),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X4),X6))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X4),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X7),s('type.modSem.state'(X4),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X5),s('type.modSem.state'(X4),X6)))))))) )),
  inference(superposition,[],[f175,f171])).
fof(f11529,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X3),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X3),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X1),s('type.modSem.state'(X0),X2)))))))) )),
  inference(superposition,[],[f175,f161])).
fof(f10883,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X4),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3))),s('type.modSem.state'(X4),X5)))))) )),
  inference(superposition,[],[f174,f207])).
fof(f10882,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X24),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X21),X23))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X21),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X24),s('type.modSem.state'(X21),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X22),s('type.modSem.state'(X21),X23)))))))) )),
  inference(superposition,[],[f174,f152])).
fof(f10881,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X17),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X20),s('type.modSem.state'(X17),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X18),s('type.modSem.state'(X17),X19))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X20),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X18),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X17),X19)))))))) )),
  inference(superposition,[],[f174,f174])).
fof(f10880,plain,(
  ( ! [X14,X12,X15,X13,X16] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X16),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X13),X15))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X12),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X16),s('type.modSem.state'(X12),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X13),'type.ffi.ffi_state'(X12)),X14),s('type.modSem.state'(X13),X15)))))))) )),
  inference(superposition,[],[f174,f189])).
fof(f10879,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X11),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X8),X10))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X8),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X11),s('type.modSem.state'(X8),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X9),s('type.modSem.state'(X8),X10)))))))) )),
  inference(superposition,[],[f174,f163])).
fof(f10878,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X7),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X4),X6))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X4),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X7),s('type.modSem.state'(X4),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X5),s('type.modSem.state'(X4),X6)))))))) )),
  inference(superposition,[],[f174,f167])).
fof(f10877,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X3),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X3),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X1),s('type.modSem.state'(X0),X2)))))))) )),
  inference(superposition,[],[f174,f160])).
fof(f10145,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'('type.option.option'('type.modSem.v')),X3) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X4),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X3))),s('type.modSem.state'(X4),X5)))))) )),
  inference(superposition,[],[f173,f207])).
fof(f10144,plain,(
  ( ! [X24,X23,X21,X22] : (s('type.list.list'('type.option.option'('type.modSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X24),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X21),X23))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X21),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X24),s('type.modSem.state'(X21),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X22),s('type.modSem.state'(X21),X23)))))))) )),
  inference(superposition,[],[f173,f148])).
fof(f10143,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.list.list'('type.option.option'('type.modSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X20),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X17),X19))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X17),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X20),s('type.modSem.state'(X17),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X18),s('type.modSem.state'(X17),X19)))))))) )),
  inference(superposition,[],[f173,f165])).
fof(f10142,plain,(
  ( ! [X14,X12,X15,X13,X16] : (s('type.list.list'('type.option.option'('type.modSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X16),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X13),X15))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X12),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X16),s('type.modSem.state'(X12),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X13),'type.ffi.ffi_state'(X12)),X14),s('type.modSem.state'(X13),X15)))))))) )),
  inference(superposition,[],[f173,f188])).
fof(f10141,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.list.list'('type.option.option'('type.modSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X11),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X8),X10))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X8),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X11),s('type.modSem.state'(X8),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X9),s('type.modSem.state'(X8),X10)))))))) )),
  inference(superposition,[],[f173,f166])).
fof(f10140,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.list.list'('type.option.option'('type.modSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X7),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X4),X6))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X4),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X7),s('type.modSem.state'(X4),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X5),s('type.modSem.state'(X4),X6)))))))) )),
  inference(superposition,[],[f173,f168])).
fof(f10139,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X3),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X1),s('type.modSem.state'(X0),X2))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X3),s('type.list.list'('type.option.option'('type.modSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X1),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))))))) )),
  inference(superposition,[],[f173,f173])).
fof(f9819,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.ffi.ffi_state'(X4),X6) = s('type.ffi.ffi_state'(X4),'const.modSem.state_ffi_1'(s('type.modSem.state'(X4),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X5),'type.ffi.ffi_state'(X4)),'const.combin.K_1'(s('type.ffi.ffi_state'(X4),X6))),s('type.modSem.state'(X5),X7)))))) )),
  inference(superposition,[],[f191,f207])).
fof(f9818,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s('type.ffi.ffi_state'(X29),happ(s(fun('type.ffi.ffi_state'(X26),'type.ffi.ffi_state'(X29)),X30),s('type.ffi.ffi_state'(X26),'const.modSem.state_ffi_1'(s('type.modSem.state'(X26),X28))))) = s('type.ffi.ffi_state'(X29),'const.modSem.state_ffi_1'(s('type.modSem.state'(X29),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X26),'type.ffi.ffi_state'(X29)),X30),s('type.modSem.state'(X26),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X27),s('type.modSem.state'(X26),X28)))))))) )),
  inference(superposition,[],[f191,f147])).
fof(f9817,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s('type.ffi.ffi_state'(X24),happ(s(fun('type.ffi.ffi_state'(X21),'type.ffi.ffi_state'(X24)),X25),s('type.ffi.ffi_state'(X21),'const.modSem.state_ffi_1'(s('type.modSem.state'(X21),X23))))) = s('type.ffi.ffi_state'(X24),'const.modSem.state_ffi_1'(s('type.modSem.state'(X24),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X21),'type.ffi.ffi_state'(X24)),X25),s('type.modSem.state'(X21),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X22),s('type.modSem.state'(X21),X23)))))))) )),
  inference(superposition,[],[f191,f157])).
fof(f9816,plain,(
  ( ! [X19,X17,X15,X20,X18,X16] : (s('type.ffi.ffi_state'(X19),'const.modSem.state_ffi_1'(s('type.modSem.state'(X19),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X15),'type.ffi.ffi_state'(X19)),X20),s('type.modSem.state'(X15),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X16),'type.ffi.ffi_state'(X15)),X17),s('type.modSem.state'(X16),X18))))))) = s('type.ffi.ffi_state'(X19),happ(s(fun('type.ffi.ffi_state'(X15),'type.ffi.ffi_state'(X19)),X20),s('type.ffi.ffi_state'(X15),happ(s(fun('type.ffi.ffi_state'(X16),'type.ffi.ffi_state'(X15)),X17),s('type.ffi.ffi_state'(X16),'const.modSem.state_ffi_1'(s('type.modSem.state'(X16),X18)))))))) )),
  inference(superposition,[],[f191,f191])).
fof(f9815,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.ffi.ffi_state'(X13),happ(s(fun('type.ffi.ffi_state'(X10),'type.ffi.ffi_state'(X13)),X14),s('type.ffi.ffi_state'(X10),'const.modSem.state_ffi_1'(s('type.modSem.state'(X10),X12))))) = s('type.ffi.ffi_state'(X13),'const.modSem.state_ffi_1'(s('type.modSem.state'(X13),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X10),'type.ffi.ffi_state'(X13)),X14),s('type.modSem.state'(X10),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X11),s('type.modSem.state'(X10),X12)))))))) )),
  inference(superposition,[],[f191,f156])).
fof(f9814,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.ffi.ffi_state'(X8),happ(s(fun('type.ffi.ffi_state'(X5),'type.ffi.ffi_state'(X8)),X9),s('type.ffi.ffi_state'(X5),'const.modSem.state_ffi_1'(s('type.modSem.state'(X5),X7))))) = s('type.ffi.ffi_state'(X8),'const.modSem.state_ffi_1'(s('type.modSem.state'(X8),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X5),'type.ffi.ffi_state'(X8)),X9),s('type.modSem.state'(X5),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X6),s('type.modSem.state'(X5),X7)))))))) )),
  inference(superposition,[],[f191,f162])).
fof(f9813,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X3),happ(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X3)),X4),s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))))) = s('type.ffi.ffi_state'(X3),'const.modSem.state_ffi_1'(s('type.modSem.state'(X3),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X3)),X4),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X1),s('type.modSem.state'(X0),X2)))))))) )),
  inference(superposition,[],[f191,f155])).
fof(f7833,plain,(
  ( ! [X35,X33,X31,X36,X34,X32] : (s(X33,f(s(bool,'T_0'))) != s(X33,g(s(bool,'T_0'))) | s(fun(bool,X33),X31) = s(fun(bool,X33),X32) | s(bool,X34) = s(bool,sK14(X31,X32,X33,bool)) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X34),s(X35,X36)))) )),
  inference(superposition,[],[f192,f334])).
fof(f7832,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(X27,f(s(bool,X28))) != s(X27,g(s(bool,X28))) | s(fun(bool,X27),X25) = s(fun(bool,X27),X26) | s(bool,'T_0') = s(bool,sK14(X25,X26,X27,bool)) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X28),s(X29,X30)))) )),
  inference(superposition,[],[f192,f334])).
fof(f7828,plain,(
  ( ! [X10,X8,X7,X9] : (s(X9,f(s(bool,X10))) != s(X9,g(s(bool,X10))) | s(fun(bool,X9),X7) = s(fun(bool,X9),X8) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,sK14(X7,X8,X9,bool))) )),
  inference(superposition,[],[f192,f232])).
fof(f7827,plain,(
  ( ! [X6,X4,X5,X3] : (s(X5,f(s(bool,'T_0'))) != s(X5,g(s(bool,'T_0'))) | s(fun(bool,X5),X3) = s(fun(bool,X5),X4) | s(bool,X6) = s(bool,sK14(X3,X4,X5,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f192,f232])).
fof(f7485,plain,(
  ( ! [X99,X97,X95,X98,X96] : (s(bool,X95) != s(bool,'const.combin.K_2'(s(bool,X96),s(bool,X95))) | s(bool,'T_0') = s(bool,happ(s(fun(X97,bool),'const.combin.K_1'(s(bool,X96))),s(X97,X98))) | s(bool,X95) = s(bool,X99) | s(bool,'T_0') = s(bool,X99)) )),
  inference(superposition,[],[f3185,f232])).
fof(f7484,plain,(
  ( ! [X94,X92,X90,X88,X93,X91,X89] : (s(bool,X88) != s(bool,'const.combin.K_2'(s(bool,X89),s(bool,X88))) | s(bool,'T_0') = s(bool,happ(s(fun(X90,bool),'const.combin.K_1'(s(bool,X89))),s(X90,X91))) | s(bool,X88) = s(bool,X92) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X92),s(X93,X94)))) )),
  inference(superposition,[],[f3185,f334])).
fof(f6807,plain,(
  ( ! [X6,X4,X2,X7,X5,X3] : (s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,happ(s(fun(X4,bool),'const.combin.K_1'(s(bool,X3))),s(X4,X5))) | s(bool,'T_0') = s(bool,happ(s(fun(X6,bool),'const.combin.K_1'(s(bool,X2))),s(X6,X7)))) )),
  inference(superposition,[],[f2777,f2777])).
fof(f6427,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (s(bool,X10) != s(bool,'const.combin.K_2'(s(bool,X9),s(X11,X12))) | s(bool,'T_0') = s(bool,happ(s(fun(X13,bool),'const.combin.K_1'(s(bool,X10))),s(X13,X14))) | s(bool,X9) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f2099,f232])).
fof(f6426,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(bool,X1) != s(bool,'const.combin.K_2'(s(bool,X0),s(X2,X3))) | s(bool,'T_0') = s(bool,happ(s(fun(X4,bool),'const.combin.K_1'(s(bool,X1))),s(X4,X5))) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X6),s(X7,X8)))) )),
  inference(superposition,[],[f2099,f334])).
fof(f4921,plain,(
  ( ! [X140,X138,X141,X139,X137] : (s(bool,X138) != s(bool,X140) | s(bool,X141) = s(bool,happ(s(fun(X137,bool),'const.combin.K_1'(s(bool,X138))),s(X137,X139))) | s(bool,'T_0') = s(bool,X141) | s(bool,'T_0') = s(bool,X140)) )),
  inference(superposition,[],[f4429,f207])).
fof(f4928,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X2),s(X3,X4)))) )),
  inference(condensation,[],[f4927])).
fof(f4927,plain,(
  ( ! [X59,X57,X60,X58,X56,X55] : (s(bool,X55) != s(bool,X56) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X56) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X58),s(X59,X60)))) )),
  inference(duplicate_literal_removal,[],[f4906])).
fof(f4906,plain,(
  ( ! [X59,X57,X60,X58,X56,X55] : (s(bool,X55) != s(bool,X56) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,X56) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X58),s(X59,X60)))) )),
  inference(superposition,[],[f4429,f334])).
fof(f4894,plain,(
  ( ! [X134,X132,X136,X135,X133] : (s(bool,X133) != s(bool,X135) | s(bool,X135) = s(bool,X136) | s(bool,'T_0') = s(bool,X136) | s(bool,'T_0') = s(bool,happ(s(fun(X132,bool),'const.combin.K_1'(s(bool,X133))),s(X132,X134)))) )),
  inference(superposition,[],[f4429,f207])).
fof(f4606,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,'const.combin.K_2'(s(bool,X1),s(X3,X4))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f4460,f146])).
fof(f4429,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f4360,f146])).
fof(f4360,plain,(
  ( ! [X112,X115] : (s(bool,'F_0') != s(bool,X112) | s(bool,X112) = s(bool,X115) | s(bool,'T_0') = s(bool,X115)) )),
  inference(superposition,[],[f4207,f184])).
fof(f4114,plain,(
  ( ! [X167,X165,X163,X166,X164,X168] : (s(bool,X166) != s(bool,'const.combin.K_2'(s(bool,X164),s(X167,X168))) | s(bool,X166) = s(bool,happ(s(fun(X163,bool),'const.combin.K_1'(s(bool,X164))),s(X163,X165))) | s(bool,'T_0') = s(bool,X166)) )),
  inference(superposition,[],[f1878,f207])).
fof(f4113,plain,(
  ( ! [X158,X161,X159,X157,X162,X160] : (s(bool,X160) != s(bool,'const.combin.K_2'(s(bool,X157),s(X161,X162))) | s(bool,X160) = s(bool,'const.combin.K_2'(s(bool,X157),s(X158,X159))) | s(bool,'T_0') = s(bool,X160)) )),
  inference(superposition,[],[f1878,f184])).
fof(f4087,plain,(
  ( ! [X158,X163,X161,X159,X162,X160] : (s(bool,X159) != s(bool,'const.combin.K_2'(s(bool,X161),s(X162,X163))) | s(bool,X161) = s(bool,happ(s(fun(X158,bool),'const.combin.K_1'(s(bool,X159))),s(X158,X160))) | s(bool,'T_0') = s(bool,happ(s(fun(X158,bool),'const.combin.K_1'(s(bool,X159))),s(X158,X160)))) )),
  inference(superposition,[],[f1878,f207])).
fof(f4086,plain,(
  ( ! [X156,X154,X152,X157,X155,X153] : (s(bool,X152) != s(bool,'const.combin.K_2'(s(bool,X155),s(X156,X157))) | s(bool,X155) = s(bool,'const.combin.K_2'(s(bool,X152),s(X153,X154))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X152),s(X153,X154)))) )),
  inference(superposition,[],[f1878,f184])).
fof(f3199,plain,(
  ( ! [X54,X55,X53] : (s(bool,X53) != s(bool,'const.combin.K_2'(s(bool,X54),s(bool,X53))) | s(bool,'T_0') = s(bool,X54) | s(bool,X53) = s(bool,X55) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f2736,f232])).
fof(f3198,plain,(
  ( ! [X52,X50,X48,X51,X49] : (s(bool,X48) != s(bool,'const.combin.K_2'(s(bool,X49),s(bool,X48))) | s(bool,'T_0') = s(bool,X49) | s(bool,X48) = s(bool,X50) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X50),s(X51,X52)))) )),
  inference(superposition,[],[f2736,f334])).
fof(f3185,plain,(
  ( ! [X111,X114,X112,X115,X113] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X112),s(X114,X115))) | s(bool,'T_0') = s(bool,happ(s(fun(X111,bool),'const.combin.K_1'(s(bool,X112))),s(X111,X113)))) )),
  inference(superposition,[],[f2736,f207])).
fof(f2928,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X1,X2))) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X1,X2)))) )),
  inference(equality_factoring,[],[f2708])).
fof(f2736,plain,(
  ( ! [X4,X0,X3] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(forward_demodulation,[],[f2656,f184])).
fof(f2656,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X1,X2))) != s(bool,'const.combin.K_2'(s(bool,X0),s(X3,X4)))) )),
  inference(condensation,[],[f2655])).
fof(f2655,plain,(
  ( ! [X99,X97,X95,X100,X98,X96] : (s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X99,X100))) != s(bool,'const.combin.K_2'(s(bool,X96),s(X97,X98))) | s(bool,'T_0') = s(bool,X95) | s(bool,'T_0') = s(bool,X96)) )),
  inference(duplicate_literal_removal,[],[f2550])).
fof(f2550,plain,(
  ( ! [X99,X97,X95,X100,X98,X96] : (s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X99,X100))) != s(bool,'const.combin.K_2'(s(bool,X96),s(X97,X98))) | s(bool,'T_0') = s(bool,X95) | s(bool,'T_0') = s(bool,X96) | s(bool,'T_0') = s(bool,X95)) )),
  inference(superposition,[],[f1890,f357])).
fof(f2482,plain,(
  ( ! [X127,X125,X123,X126,X124,X122] : (s(bool,X125) = s(bool,'const.combin.K_2'(s(bool,X123),s(X126,X127))) | s(bool,'T_0') = s(bool,happ(s(fun(X122,bool),'const.combin.K_1'(s(bool,X123))),s(X122,X124))) | s(bool,'T_0') = s(bool,X125)) )),
  inference(superposition,[],[f357,f207])).
fof(f2460,plain,(
  ( ! [X127,X125,X123,X126,X124,X122] : (s(bool,X123) = s(bool,'const.combin.K_2'(s(bool,X125),s(X126,X127))) | s(bool,'T_0') = s(bool,X125) | s(bool,'T_0') = s(bool,happ(s(fun(X122,bool),'const.combin.K_1'(s(bool,X123))),s(X122,X124)))) )),
  inference(superposition,[],[f357,f207])).
fof(f2312,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (s(bool,X10) != s(bool,'const.combin.K_2'(s(bool,X9),s(X11,X12))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X13,X14))) | s(bool,X9) = s(bool,X15) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f2175,f232])).
fof(f2311,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(bool,X1) != s(bool,'const.combin.K_2'(s(bool,X0),s(X2,X3))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X1),s(X4,X5))) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X6),s(X7,X8)))) )),
  inference(superposition,[],[f2175,f334])).
fof(f2101,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s(bool,X8) != s(bool,'const.combin.K_2'(s(bool,X7),s(X9,X10))) | s(bool,'T_0') = s(bool,X8) | s(bool,X7) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f1890,f232])).
fof(f2100,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X1) != s(bool,'const.combin.K_2'(s(bool,X0),s(X2,X3))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X4),s(X5,X6)))) )),
  inference(superposition,[],[f1890,f334])).
fof(f2099,plain,(
  ( ! [X92,X90,X93,X91,X89] : (s(bool,X90) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X92,X93))) | s(bool,'T_0') = s(bool,happ(s(fun(X89,bool),'const.combin.K_1'(s(bool,X90))),s(X89,X91)))) )),
  inference(superposition,[],[f1890,f207])).
fof(f2175,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X3,X4))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2)))) )),
  inference(condensation,[],[f2174])).
fof(f2174,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X26) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X27,X28))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X26),s(X29,X30)))) )),
  inference(duplicate_literal_removal,[],[f2087])).
fof(f2087,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X26) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X27,X28))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X26),s(X29,X30)))) )),
  inference(superposition,[],[f1890,f334])).
fof(f1878,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,'const.combin.K_2'(s(bool,X1),s(X2,X3))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f334])).
fof(f1890,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X1,X2))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f1872])).
fof(f1872,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X1,X2))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f334])).
fof(f1701,plain,(
  ( ! [X57,X58,X56,X55] : (s(bool,X55) = s(bool,'const.combin.K_2'(s(bool,X56),s(bool,X55))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f334,f232])).
fof(f1700,plain,(
  ( ! [X54,X52,X50,X53,X51,X49] : (s(bool,X49) = s(bool,'const.combin.K_2'(s(bool,X50),s(bool,X49))) | s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X51) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X52),s(X53,X54)))) )),
  inference(superposition,[],[f334,f334])).
fof(f1689,plain,(
  ( ! [X118,X116,X114,X117,X115,X113] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X114),s(X116,X117))) | s(bool,X118) = s(bool,happ(s(fun(X113,bool),'const.combin.K_1'(s(bool,X114))),s(X113,X115))) | s(bool,'T_0') = s(bool,X118)) )),
  inference(superposition,[],[f334,f207])).
fof(f1669,plain,(
  ( ! [X70,X74,X72,X71,X75,X73] : (s(bool,'T_0') = s(bool,X71) | s(bool,X73) = s(bool,happ(s(fun(X70,bool),'const.combin.K_1'(s(bool,X71))),s(X70,X72))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X73),s(X74,X75)))) )),
  inference(superposition,[],[f334,f207])).
fof(f1651,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (s(bool,X8) = s(bool,X9) | s(bool,X9) = s(bool,X10) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X11,X12))) | s(bool,X8) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f334,f232])).
fof(f1650,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X2),s(X3,X4))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X5),s(X6,X7)))) )),
  inference(superposition,[],[f334,f334])).
fof(f1649,plain,(
  ( ! [X103,X107,X105,X102,X106,X104] : (s(bool,X103) = s(bool,X105) | s(bool,'T_0') = s(bool,happ(s(fun(X102,bool),'const.combin.K_1'(s(bool,X103))),s(X102,X104))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X105),s(X106,X107)))) )),
  inference(superposition,[],[f334,f207])).
fof(f2044,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X3),s(X4,X5)))) )),
  inference(condensation,[],[f2043])).
fof(f2043,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X38),s(X40,X41))) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X42),s(X43,X44)))) )),
  inference(duplicate_literal_removal,[],[f1617])).
fof(f1617,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,X39) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X38),s(X40,X41))) | s(bool,X38) = s(bool,X42) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X42),s(X43,X44)))) )),
  inference(superposition,[],[f334,f334])).
fof(f751,plain,(
  ( ! [X50,X48,X51,X49] : (s(bool,X48) = s(bool,'const.combin.K_2'(s(bool,X49),s(bool,X48))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X49),s(X50,X51))) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f299,f146])).
fof(f401,plain,(
  ( ! [X2,X1] : (p(s(bool,X1)) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f144,f232])).
fof(f358,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,'T_0') = s(bool,X22) | s(bool,X24) = s(bool,happ(s(fun(X21,bool),'const.combin.K_1'(s(bool,X22))),s(X21,X23))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f232,f207])).
fof(f357,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,X20) = s(bool,'const.combin.K_2'(s(bool,X17),s(X18,X19))) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f232,f184])).
fof(f347,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f232,f232])).
fof(f335,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,X29) = s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,happ(s(fun(X28,bool),'const.combin.K_1'(s(bool,X29))),s(X28,X30)))) )),
  inference(superposition,[],[f232,f207])).
fof(f334,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X24) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X24),s(X25,X26)))) )),
  inference(superposition,[],[f232,f184])).
fof(f235,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f145,f146])).
fof(f232,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f146,f146])).
fof(f192,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK14(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK14(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f136])).
fof(f136,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK14(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK14(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK14])],[f130])).
fof(f130,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f127])).
fof(f127,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.modSem.state_literal_|49||49|',aHL_EXT)).
fof(f191,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2))))) = s('type.ffi.ffi_state'(X0),happ(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.ffi.ffi_state'(X1),'const.modSem.state_ffi_1'(s('type.modSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0,X1,X2,X3] : s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2))))) = s('type.ffi.ffi_state'(X0),happ(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.ffi.ffi_state'(X1),'const.modSem.state_ffi_1'(s('type.modSem.state'(X1),X2)))))),
  inference(flattening,[],[f125])).
fof(f125,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2))))) = s('type.ffi.ffi_state'(X0),happ(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.ffi.ffi_state'(X1),'const.modSem.state_ffi_1'(s('type.modSem.state'(X1),X2)))))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X7,X6] : ! [X24,X25] : s('type.ffi.ffi_state'(X7),'const.modSem.state_ffi_1'(s('type.modSem.state'(X7),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X25),s('type.modSem.state'(X6),X24))))) = s('type.ffi.ffi_state'(X7),happ(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X25),s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_95_prove_ltb')).
fof(f190,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X1),X2))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f124])).
fof(f124,plain,(
  ! [X0,X1,X2,X3] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X1),X2))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2)))))),
  inference(flattening,[],[f123])).
fof(f123,plain,(
  ! [X0,X1] : ! [X2,X3] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X1),X2))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2)))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X7,X6] : ! [X24,X25] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X24))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X7),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_85_prove_ltb')).
fof(f189,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X1),X2))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f122])).
fof(f122,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X1),X2))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2)))))),
  inference(flattening,[],[f121])).
fof(f121,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X1),X2))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2)))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X7,X6] : ! [X24,X25] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X24))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X7),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_69_prove_ltb')).
fof(f188,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X1),X2))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f120])).
fof(f120,plain,(
  ! [X0,X1,X2,X3] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X1),X2))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2)))))),
  inference(flattening,[],[f119])).
fof(f119,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X1),X2))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2)))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X7,X6] : ! [X24,X25] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X24))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X7),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_9|48|_prove_ltb')).
fof(f187,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X1),X2))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f118])).
fof(f118,plain,(
  ! [X0,X1,X2,X3] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X1),X2))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2)))))),
  inference(flattening,[],[f117])).
fof(f117,plain,(
  ! [X0,X1] : ! [X2,X3] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X1),X2))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X7,X6] : ! [X24,X25] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X24))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X7),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_8|48|_prove_ltb')).
fof(f186,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X1),X2))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2)))))) )),
  inference(cnf_transformation,[],[f116])).
fof(f116,plain,(
  ! [X0,X1,X2,X3] : s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X1),X2))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2)))))),
  inference(flattening,[],[f115])).
fof(f115,plain,(
  ! [X0,X1] : ! [X2,X3] : s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X1),X2))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X1),'type.ffi.ffi_state'(X0)),X3),s('type.modSem.state'(X1),X2)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X7,X6] : ! [X24,X25] : s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X24))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X7),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_64_prove_ltb')).
fof(f178,plain,(
  ( ! [X2,X0,X1] : (s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f135])).
fof(f179,plain,(
  ( ! [X2,X0,X1] : (s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f135])).
fof(f180,plain,(
  ( ! [X2,X0,X1] : (s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f135])).
fof(f181,plain,(
  ( ! [X2,X0,X1] : (s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f135])).
fof(f182,plain,(
  ( ! [X2,X0,X1] : (s('type.modSem.state'(X0),X1) != s('type.modSem.state'(X0),X2) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f135])).
fof(f183,plain,(
  ( ! [X2,X0,X1] : (s('type.modSem.state'(X0),X1) = s('type.modSem.state'(X0),X2) | s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X2))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X2))) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X2))) | s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) != s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f135])).
fof(f176,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f108])).
fof(f108,plain,(
  ! [X0,X1,X2] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f107])).
fof(f107,plain,(
  ! [X0] : ! [X1,X2] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X6] : ! [X24,X25] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X25),s('type.modSem.state'(X6),X24))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X25),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_97_prove_ltb')).
fof(f175,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0,X1,X2] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f105])).
fof(f105,plain,(
  ! [X0] : ! [X1,X2] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X6] : ! [X24,X25] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X25),s('type.modSem.state'(X6),X24))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X25),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_96_prove_ltb')).
fof(f174,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f103])).
fof(f103,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X6] : ! [X24,X25] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X25),s('type.modSem.state'(X6),X24))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X25),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_94_prove_ltb')).
fof(f173,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1))))) = s('type.list.list'('type.option.option'('type.modSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f102])).
fof(f102,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1))))) = s('type.list.list'('type.option.option'('type.modSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f101])).
fof(f101,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1))))) = s('type.list.list'('type.option.option'('type.modSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X6] : ! [X24,X25] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X25),s('type.modSem.state'(X6),X24))))) = s('type.list.list'('type.option.option'('type.modSem.v')),happ(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X25),s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_98_prove_ltb')).
fof(f172,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f100])).
fof(f100,plain,(
  ! [X0,X1,X2] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f99])).
fof(f99,plain,(
  ! [X0] : ! [X1,X2] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6] : ! [X24,X25] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X24))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_87_prove_ltb')).
fof(f171,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0,X1,X2] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ! [X0] : ! [X1,X2] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6] : ! [X24,X25] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X24))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_8|49|_prove_ltb')).
fof(f170,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0,X1,X2] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f95])).
fof(f95,plain,(
  ! [X0] : ! [X1,X2] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X6] : ! [X24,X25] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X24))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_86_prove_ltb')).
fof(f169,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0,X1,X2] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f93])).
fof(f93,plain,(
  ! [X0] : ! [X1,X2] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6] : ! [X24,X25] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X24))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_84_prove_ltb')).
fof(f168,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f91])).
fof(f91,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X6] : ! [X24,X25] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X24))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_92_prove_ltb')).
fof(f167,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f89])).
fof(f89,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : ! [X24,X25] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X24))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_7|49|_prove_ltb')).
fof(f166,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f87])).
fof(f87,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X6] : ! [X24,X25] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X24))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_9|49|_prove_ltb')).
fof(f165,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f85])).
fof(f85,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X24,X25] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X24))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_89_prove_ltb')).
fof(f164,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0,X1,X2] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f83])).
fof(f83,plain,(
  ! [X0] : ! [X1,X2] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X24,X25] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X24))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_79_prove_ltb')).
fof(f163,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f81])).
fof(f81,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X24,X25] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X24))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_7|48|_prove_ltb')).
fof(f162,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f79])).
fof(f79,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6] : ! [X24,X25] : s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X24))) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_76_prove_ltb')).
fof(f161,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1,X2] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f77])).
fof(f77,plain,(
  ! [X0] : ! [X1,X2] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6] : ! [X24,X25] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X24))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_82_prove_ltb')).
fof(f160,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : ! [X24,X25] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X24))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_72_prove_ltb')).
fof(f158,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ! [X0] : ! [X1,X2] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6] : ! [X24,X25] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X24))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_83_prove_ltb')).
fof(f157,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f69])).
fof(f69,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X6] : ! [X24,X25] : s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X24))) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_74_prove_ltb')).
fof(f156,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f67])).
fof(f67,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X6] : ! [X24,X25] : s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X24))) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_75_prove_ltb')).
fof(f155,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f65])).
fof(f65,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6] : ! [X24,X25] : s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X24))) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_77_prove_ltb')).
fof(f154,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X24,X25] : s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X24))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_66_prove_ltb')).
fof(f153,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0,X1,X2] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f61])).
fof(f61,plain,(
  ! [X0] : ! [X1,X2] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X24,X25] : s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),X24))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_78_prove_ltb')).
fof(f152,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f60])).
fof(f60,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f59])).
fof(f59,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6] : ! [X24,X25] : s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),X24))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_68_prove_ltb')).
fof(f151,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f57])).
fof(f57,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X24,X25] : s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X24))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_67_prove_ltb')).
fof(f150,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f55])).
fof(f55,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X24,X25] : s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X24))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_65_prove_ltb')).
fof(f149,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f53])).
fof(f53,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X24,X25] : s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X24))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_63_prove_ltb')).
fof(f148,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f52])).
fof(f52,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6] : ! [X24,X25] : s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X24))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_88_prove_ltb')).
fof(f147,plain,(
  ( ! [X2,X0,X1] : (s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2] : s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0] : ! [X1,X2] : s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.modSem.state_ffi_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : ! [X24,X25] : s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),X24))) = s('type.ffi.ffi_state'(X6),'const.modSem.state_ffi_1'(s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X25),s('type.modSem.state'(X6),X24)))))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.modSem_73_prove_ltb')).
fof(f146,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.modSem.state_literal_|49||49|',aHL_BOOL_CASES)).
fof(f144,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.modSem.state_literal_|49||49|',aHL_TRUTH)).
fof(f20432,plain,(
  $false | $spl0),
  inference(global_subsumption,[],[f143,f142,f141,f140,f139,f138,f137,f144,f146,f147,f148,f149,f150,f151,f152,f153,f154,f155,f156,f157,f158,f159,f160,f161,f162,f163,f164,f165,f166,f167,f168,f169,f170,f171,f172,f173,f174,f175,f176,f183,f182,f181,f180,f179,f178,f177,f184,f207,f186,f187,f188,f189,f190,f191,f192,f232,f235,f243,f334,f335,f347,f357,f358,f401,f690,f691,f692,f751,f2044,f1649,f1650,f1651,f1669,f1689,f1700,f1701,f1890,f1878,f2175,f2099,f2100,f2101,f2311,f2312,f2460,f2482,f2736,f2928,f3185,f3198,f3199,f4086,f4087,f4113,f4114,f4360,f4429,f4606,f4894,f4928,f4921,f6426,f6427,f6807,f7484,f7485,f7827,f7828,f7832,f7833,f9813,f9814,f9815,f9816,f9817,f9818,f9819,f10139,f10140,f10141,f10142,f10143,f10144,f10145,f10877,f10878,f10879,f10880,f10881,f10882,f10883,f11529,f11530,f11531,f11532,f11533,f11534,f11535,f11764,f11765,f11766,f11767,f11768,f11769,f11770,f145,f7831,f4203,f2711,f7846,f7845,f7844,f7843,f7840,f7839,f7856,f7855,f7853,f7852,f7838,f7826,f6882,f6881,f5896,f5895,f5503,f5152,f5151,f4461,f4460,f4386,f4297,f4296,f4207,f3420,f3419,f2991,f2777,f2708,f1816,f1815,f1814,f727,f709,f620,f612,f611,f404,f300,f299,f265,f234,f193,f20108,f20109,f20148,f20149,f20165,f20166,f20178,f20179,f20193,f20194,f20357,f20216])).
fof(f20431,plain,(
  $false | $spl0),
  inference(global_subsumption,[],[f143,f142,f141,f140,f139,f138,f137,f144,f146,f147,f148,f149,f150,f151,f152,f153,f154,f155,f156,f157,f158,f159,f160,f161,f162,f163,f164,f165,f166,f167,f168,f169,f170,f171,f172,f173,f174,f175,f176,f183,f182,f181,f180,f179,f178,f177,f184,f207,f186,f187,f188,f189,f190,f191,f192,f232,f235,f243,f334,f335,f347,f357,f358,f401,f690,f691,f692,f751,f2044,f1649,f1650,f1651,f1669,f1689,f1700,f1701,f1890,f1878,f2175,f2099,f2100,f2101,f2311,f2312,f2460,f2482,f2736,f2928,f3185,f3198,f3199,f4086,f4087,f4113,f4114,f4360,f4429,f4606,f4894,f4928,f4921,f6426,f6427,f6807,f7484,f7485,f7827,f7828,f7832,f7833,f9813,f9814,f9815,f9816,f9817,f9818,f9819,f10139,f10140,f10141,f10142,f10143,f10144,f10145,f10877,f10878,f10879,f10880,f10881,f10882,f10883,f11529,f11530,f11531,f11532,f11533,f11534,f11535,f11764,f11765,f11766,f11767,f11768,f11769,f11770,f145,f7831,f4203,f2711,f7846,f7845,f7844,f7843,f7840,f7839,f7856,f7855,f7853,f7852,f7838,f7826,f6882,f6881,f5896,f5895,f5503,f5152,f5151,f4461,f4460,f4386,f4297,f4296,f4207,f3420,f3419,f2991,f2777,f2708,f1816,f1815,f1814,f727,f709,f620,f612,f611,f404,f300,f299,f265,f234,f193,f20108,f20109,f20148,f20149,f20165,f20166,f20178,f20179,f20193,f20194,f20357])).
fof(f20358,plain,(
  $false | ($spl0 | $spl7)),
  inference(subsumption_resolution,[],[f20357,f200])).
fof(f20217,plain,(
  $false | ($spl0 | $spl7)),
  inference(subsumption_resolution,[],[f20216,f200])).
fof(f20128,plain,(
  $false | ($spl0 | $spl7)),
  inference(subsumption_resolution,[],[f20127,f200])).
fof(f19842,plain,(
  $false | ($spl0 | $spl6 | $spl11)),
  inference(subsumption_resolution,[],[f19841,f204])).
fof(f19841,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK6) = s(fun('type.list.list'('type.string.char'),bool),sK12) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19840,f11770])).
fof(f19840,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK12) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19839,f11770])).
fof(f19839,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19838,f176])).
fof(f19838,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19837,f176])).
fof(f19837,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19836,f11764])).
fof(f19836,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19835,f11764])).
fof(f19835,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19834,f170])).
fof(f19834,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19833,f170])).
fof(f19833,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19832,f190])).
fof(f19832,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19831,f190])).
fof(f19831,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19830,f169])).
fof(f19830,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19829,f169])).
fof(f19829,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19596,f158])).
fof(f19596,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(superposition,[],[f158,f14196])).
fof(f14196,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f193,f199])).
fof(f19825,plain,(
  $false | ($spl0 | $spl6 | $spl11)),
  inference(subsumption_resolution,[],[f19824,f204])).
fof(f19824,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK6) = s(fun('type.list.list'('type.string.char'),bool),sK12) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19823,f11770])).
fof(f19823,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK12) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19822,f11770])).
fof(f19822,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19821,f176])).
fof(f19821,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19820,f176])).
fof(f19820,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19819,f11764])).
fof(f19819,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19818,f11764])).
fof(f19818,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19817,f170])).
fof(f19817,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19816,f170])).
fof(f19816,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19815,f190])).
fof(f19815,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19814,f190])).
fof(f19814,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19813,f169])).
fof(f19813,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19812,f169])).
fof(f19812,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19811,f158])).
fof(f19811,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19583,f158])).
fof(f19583,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(unit_resulting_resolution,[],[f14196,f181])).
fof(f19745,plain,(
  $false | ($spl0 | $spl6 | $spl11)),
  inference(subsumption_resolution,[],[f19744,f204])).
fof(f19744,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK6) = s(fun('type.list.list'('type.string.char'),bool),sK12) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19743,f11770])).
fof(f19743,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK12) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19742,f11770])).
fof(f19742,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19741,f176])).
fof(f19741,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19740,f176])).
fof(f19740,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19739,f11764])).
fof(f19739,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19738,f11764])).
fof(f19738,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19737,f170])).
fof(f19737,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19736,f170])).
fof(f19736,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19735,f190])).
fof(f19735,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19734,f190])).
fof(f19734,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19733,f169])).
fof(f19733,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19732,f169])).
fof(f19732,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19731,f158])).
fof(f19731,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f19589,f158])).
fof(f19589,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6)),
  inference(unit_resulting_resolution,[],[f14196,f181])).
fof(f19500,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl110),
  inference(cnf_transformation,[],[f19500_D])).
fof(f19500_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f7869,plain,(
  s(bool,'T_0') != s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl29),
  inference(cnf_transformation,[],[f7869_D])).
fof(f7869_D,plain,(
  s(bool,'T_0') != s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f19412,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X0) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl32),
  inference(equality_factoring,[],[f7873])).
fof(f19487,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2)))) ) | $spl108),
  inference(cnf_transformation,[],[f19487_D])).
fof(f19487_D,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2)))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f19429,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2))) | s(bool,'T_0') != s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | ($spl17 | $spl26 | $spl32)),
  inference(condensation,[],[f19350])).
fof(f19350,plain,(
  ( ! [X103,X101,X99,X102,X100] : (s(bool,'T_0') != s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X99),s(X102,X103))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X99),s(X100,X101)))) ) | ($spl17 | $spl26 | $spl32)),
  inference(superposition,[],[f3158,f7873])).
fof(f3158,plain,(
  ( ! [X26,X24,X23,X25,X22] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X22),s(X23,X24))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X22),s(X25,X26)))) ) | ($spl17 | $spl26)),
  inference(subsumption_resolution,[],[f3074,f246])).
fof(f3074,plain,(
  ( ! [X26,X24,X23,X25,X22] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X22),s(X23,X24))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X22),s(X25,X26)))) ) | $spl26),
  inference(superposition,[],[f3011,f334])).
fof(f3010,plain,(
  ( ! [X96] : (s(bool,'T_0') = s(bool,X96)) ) | $spl24),
  inference(cnf_transformation,[],[f3010_D])).
fof(f3010_D,plain,(
  ( ! [X96] : (s(bool,'T_0') = s(bool,X96)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f19486,plain,(
  ( ! [X96] : (s(bool,'T_0') != s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X96)) ) | $spl32),
  inference(subsumption_resolution,[],[f19349,f2736])).
fof(f19349,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') != s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X96) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X96),s(X97,X98)))) ) | $spl32),
  inference(superposition,[],[f2736,f7873])).
fof(f19471,plain,(
  ( ! [X47] : (s(bool,'T_0') != s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X47)) ) | ($spl17 | $spl32)),
  inference(subsumption_resolution,[],[f19336,f2736])).
fof(f19336,plain,(
  ( ! [X47,X48,X49] : (s(bool,'T_0') != s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X47),s(X48,X49))) | s(bool,'T_0') = s(bool,X47)) ) | ($spl17 | $spl32)),
  inference(superposition,[],[f2071,f7873])).
fof(f2071,plain,(
  ( ! [X80,X78,X79] : (s(bool,'T_0') != s(bool,X78) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X78),s(X79,X80)))) ) | $spl17),
  inference(subsumption_resolution,[],[f1780,f246])).
fof(f1780,plain,(
  ( ! [X80,X78,X79] : (s(bool,'T_0') != s(bool,X78) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X78),s(X79,X80)))) ) | $spl17),
  inference(superposition,[],[f246,f334])).
fof(f19194,plain,(
  $false | ($spl0 | $spl6 | $spl11 | $spl54 | $spl58)),
  inference(subsumption_resolution,[],[f19193,f204])).
fof(f19193,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK6) = s(fun('type.list.list'('type.string.char'),bool),sK12) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19192,f11770])).
fof(f19192,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK12) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19191,f11770])).
fof(f19191,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19190,f176])).
fof(f19190,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19189,f176])).
fof(f19189,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19188,f11764])).
fof(f19188,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19187,f11764])).
fof(f19187,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19186,f170])).
fof(f19186,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19185,f170])).
fof(f19185,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19184,f190])).
fof(f19184,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19183,f190])).
fof(f19183,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19182,f169])).
fof(f19182,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19181,f169])).
fof(f19181,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f18959,f158])).
fof(f18959,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(superposition,[],[f158,f18932])).
fof(f18932,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(backward_demodulation,[],[f18931,f14196])).
fof(f18931,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | ($spl54 | $spl58)),
  inference(subsumption_resolution,[],[f18876,f8668])).
fof(f8668,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl54),
  inference(cnf_transformation,[],[f8668_D])).
fof(f8668_D,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f18876,plain,(
  s(bool,'T_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | $spl58),
  inference(superposition,[],[f192,f17823])).
fof(f17823,plain,(
  s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl58),
  inference(unit_resulting_resolution,[],[f8671,f2736])).
fof(f19177,plain,(
  $false | ($spl0 | $spl6 | $spl11 | $spl54 | $spl58)),
  inference(subsumption_resolution,[],[f19176,f204])).
fof(f19176,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK6) = s(fun('type.list.list'('type.string.char'),bool),sK12) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19175,f11770])).
fof(f19175,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK12) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19174,f11770])).
fof(f19174,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19173,f176])).
fof(f19173,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19172,f176])).
fof(f19172,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19171,f11764])).
fof(f19171,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19170,f11764])).
fof(f19170,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19169,f170])).
fof(f19169,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19168,f170])).
fof(f19168,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19167,f190])).
fof(f19167,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19166,f190])).
fof(f19166,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19165,f169])).
fof(f19165,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19164,f169])).
fof(f19164,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19163,f158])).
fof(f19163,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f18946,f158])).
fof(f18946,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(unit_resulting_resolution,[],[f18932,f181])).
fof(f19102,plain,(
  $false | ($spl0 | $spl6 | $spl11 | $spl54 | $spl58)),
  inference(subsumption_resolution,[],[f19101,f204])).
fof(f19101,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK6) = s(fun('type.list.list'('type.string.char'),bool),sK12) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19100,f11770])).
fof(f19100,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK12) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19099,f11770])).
fof(f19099,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19098,f176])).
fof(f19098,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19097,f176])).
fof(f19097,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19096,f11764])).
fof(f19096,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19095,f11764])).
fof(f19095,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19094,f170])).
fof(f19094,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19093,f170])).
fof(f19093,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19092,f190])).
fof(f19092,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19091,f190])).
fof(f19091,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19090,f169])).
fof(f19090,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19089,f169])).
fof(f19089,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f19088,f158])).
fof(f19088,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(forward_demodulation,[],[f18952,f158])).
fof(f18952,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl54 | $spl58)),
  inference(unit_resulting_resolution,[],[f18932,f181])).
fof(f18743,plain,(
  $false | ($spl0 | $spl6 | $spl11 | $spl34 | $spl38)),
  inference(subsumption_resolution,[],[f18742,f204])).
fof(f18742,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK6) = s(fun('type.list.list'('type.string.char'),bool),sK12) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18741,f11770])).
fof(f18741,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK12) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18740,f11770])).
fof(f18740,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18739,f176])).
fof(f18739,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18738,f176])).
fof(f18738,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18737,f11764])).
fof(f18737,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18736,f11764])).
fof(f18736,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18735,f170])).
fof(f18735,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18734,f170])).
fof(f18734,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18733,f190])).
fof(f18733,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18732,f190])).
fof(f18732,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18731,f169])).
fof(f18731,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18730,f169])).
fof(f18730,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18508,f158])).
fof(f18508,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(superposition,[],[f158,f18475])).
fof(f18475,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f14196,f18474])).
fof(f18474,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | ($spl34 | $spl38)),
  inference(subsumption_resolution,[],[f17766,f7874])).
fof(f7874,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl34),
  inference(cnf_transformation,[],[f7874_D])).
fof(f7874_D,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f17766,plain,(
  s(bool,'T_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | $spl38),
  inference(superposition,[],[f192,f17100])).
fof(f17100,plain,(
  s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl38),
  inference(unit_resulting_resolution,[],[f7877,f2736])).
fof(f18726,plain,(
  $false | ($spl0 | $spl6 | $spl11 | $spl34 | $spl38)),
  inference(subsumption_resolution,[],[f18725,f204])).
fof(f18725,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK6) = s(fun('type.list.list'('type.string.char'),bool),sK12) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18724,f11770])).
fof(f18724,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK12) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18723,f11770])).
fof(f18723,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18722,f176])).
fof(f18722,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18721,f176])).
fof(f18721,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18720,f11764])).
fof(f18720,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18719,f11764])).
fof(f18719,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18718,f170])).
fof(f18718,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18717,f170])).
fof(f18717,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18716,f190])).
fof(f18716,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18715,f190])).
fof(f18715,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18714,f169])).
fof(f18714,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18713,f169])).
fof(f18713,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18712,f158])).
fof(f18712,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18495,f158])).
fof(f18495,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(unit_resulting_resolution,[],[f18475,f181])).
fof(f18651,plain,(
  $false | ($spl0 | $spl6 | $spl11 | $spl34 | $spl38)),
  inference(subsumption_resolution,[],[f18650,f204])).
fof(f18650,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK6) = s(fun('type.list.list'('type.string.char'),bool),sK12) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18649,f11770])).
fof(f18649,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK12) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18648,f11770])).
fof(f18648,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18647,f176])).
fof(f18647,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18646,f176])).
fof(f18646,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18645,f11764])).
fof(f18645,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18644,f11764])).
fof(f18644,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18643,f170])).
fof(f18643,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18642,f170])).
fof(f18642,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18641,f190])).
fof(f18641,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18640,f190])).
fof(f18640,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18639,f169])).
fof(f18639,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18638,f169])).
fof(f18638,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18637,f158])).
fof(f18637,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(forward_demodulation,[],[f18501,f158])).
fof(f18501,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl34 | $spl38)),
  inference(unit_resulting_resolution,[],[f18475,f181])).
fof(f18473,plain,(
  $false | ($spl0 | $spl6 | $spl8 | $spl11)),
  inference(subsumption_resolution,[],[f204,f18278])).
fof(f18278,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK6) = s(fun('type.list.list'('type.string.char'),bool),sK12) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18277,f11770])).
fof(f18277,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK12) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18276,f11770])).
fof(f18276,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18275,f176])).
fof(f18275,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18274,f176])).
fof(f18274,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18273,f11764])).
fof(f18273,plain,(
  s(fun('type.list.list'('type.string.char'),bool),happ(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18272,f11764])).
fof(f18272,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18271,f170])).
fof(f18271,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18270,f170])).
fof(f18270,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18269,f190])).
fof(f18269,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18268,f190])).
fof(f18268,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18267,f169])).
fof(f18267,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18266,f169])).
fof(f18266,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18265,f158])).
fof(f18265,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18129,f158])).
fof(f18129,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(unit_resulting_resolution,[],[f17733,f181])).
fof(f17733,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f14196,f201])).
fof(f18472,plain,(
  $false | ($spl0 | $spl3 | $spl6 | $spl8)),
  inference(subsumption_resolution,[],[f196,f18205])).
fof(f18205,plain,(
  s('type.num.num',sK2) = s('type.num.num',sK8) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18204,f207])).
fof(f18204,plain,(
  s('type.num.num',sK8) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18203,f207])).
fof(f18203,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18202,f159])).
fof(f18202,plain,(
  s('type.num.num',happ(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18134,f159])).
fof(f18134,plain,(
  s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(unit_resulting_resolution,[],[f17733,f177])).
fof(f18411,plain,(
  $false | ($spl0 | $spl6 | $spl8 | $spl13)),
  inference(subsumption_resolution,[],[f18410,f206])).
fof(f18410,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18409,f10145])).
fof(f18409,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK13) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18408,f10145])).
fof(f18408,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18407,f168])).
fof(f18407,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18406,f168])).
fof(f18406,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18405,f166])).
fof(f18405,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18404,f166])).
fof(f18404,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18403,f188])).
fof(f18403,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18402,f188])).
fof(f18402,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18401,f165])).
fof(f18401,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18400,f165])).
fof(f18400,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18139,f148])).
fof(f18139,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(superposition,[],[f148,f17733])).
fof(f18340,plain,(
  $false | ($spl0 | $spl6 | $spl8 | $spl13)),
  inference(subsumption_resolution,[],[f18339,f206])).
fof(f18339,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18338,f10145])).
fof(f18338,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK13) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18337,f10145])).
fof(f18337,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18336,f168])).
fof(f18336,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18335,f168])).
fof(f18335,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18334,f166])).
fof(f18334,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18333,f166])).
fof(f18333,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18332,f188])).
fof(f18332,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18331,f188])).
fof(f18331,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18330,f165])).
fof(f18330,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18329,f165])).
fof(f18329,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18328,f148])).
fof(f18328,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18124,f148])).
fof(f18124,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(unit_resulting_resolution,[],[f17733,f182])).
fof(f18264,plain,(
  $false | ($spl0 | $spl6 | $spl8 | $spl13)),
  inference(subsumption_resolution,[],[f18263,f206])).
fof(f18263,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18262,f10145])).
fof(f18262,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK13) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18261,f10145])).
fof(f18261,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18260,f168])).
fof(f18260,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18259,f168])).
fof(f18259,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18258,f166])).
fof(f18258,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18257,f166])).
fof(f18257,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18256,f188])).
fof(f18256,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18255,f188])).
fof(f18255,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18254,f165])).
fof(f18254,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18253,f165])).
fof(f18253,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18252,f148])).
fof(f18252,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f18130,f148])).
fof(f18130,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl6 | $spl8)),
  inference(unit_resulting_resolution,[],[f17733,f182])).
fof(f17684,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl8 | $spl13)),
  inference(subsumption_resolution,[],[f17683,f206])).
fof(f17683,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17682,f10145])).
fof(f17682,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK13) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17681,f10145])).
fof(f17681,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17680,f168])).
fof(f17680,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17679,f168])).
fof(f17679,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17678,f166])).
fof(f17678,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17677,f166])).
fof(f17677,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17676,f188])).
fof(f17676,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17675,f188])).
fof(f17675,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17674,f165])).
fof(f17674,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17673,f165])).
fof(f17673,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17416,f148])).
fof(f17416,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(superposition,[],[f148,f17084])).
fof(f17084,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(backward_demodulation,[],[f201,f14197])).
fof(f14197,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6)),
  inference(forward_demodulation,[],[f14196,f195])).
fof(f17614,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl8 | $spl13)),
  inference(subsumption_resolution,[],[f17613,f206])).
fof(f17613,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17612,f10145])).
fof(f17612,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK13) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17611,f10145])).
fof(f17611,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17610,f168])).
fof(f17610,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17609,f168])).
fof(f17609,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17608,f166])).
fof(f17608,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17607,f166])).
fof(f17607,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17606,f188])).
fof(f17606,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17605,f188])).
fof(f17605,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17604,f165])).
fof(f17604,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17603,f165])).
fof(f17603,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17602,f148])).
fof(f17602,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17401,f148])).
fof(f17401,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(unit_resulting_resolution,[],[f17084,f182])).
fof(f17539,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl8 | $spl13)),
  inference(subsumption_resolution,[],[f17538,f206])).
fof(f17538,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17537,f10145])).
fof(f17537,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK13) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17536,f10145])).
fof(f17536,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17535,f168])).
fof(f17535,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17534,f168])).
fof(f17534,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17533,f166])).
fof(f17533,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17532,f166])).
fof(f17532,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17531,f188])).
fof(f17531,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17530,f188])).
fof(f17530,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17529,f165])).
fof(f17529,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17528,f165])).
fof(f17528,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17527,f148])).
fof(f17527,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(forward_demodulation,[],[f17407,f148])).
fof(f17407,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8)),
  inference(unit_resulting_resolution,[],[f17084,f182])).
fof(f17035,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl13 | $spl28 | $spl34)),
  inference(subsumption_resolution,[],[f17034,f206])).
fof(f17034,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f17033,f10145])).
fof(f17033,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK13) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f17032,f10145])).
fof(f17032,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f17031,f168])).
fof(f17031,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f17030,f168])).
fof(f17030,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f17029,f166])).
fof(f17029,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f17028,f166])).
fof(f17028,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f17027,f188])).
fof(f17027,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f17026,f188])).
fof(f17026,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f17025,f165])).
fof(f17025,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f17024,f165])).
fof(f17024,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16767,f148])).
fof(f16767,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(superposition,[],[f148,f16651])).
fof(f16651,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f14197,f16650])).
fof(f16650,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | ($spl28 | $spl34)),
  inference(subsumption_resolution,[],[f8072,f7874])).
fof(f8072,plain,(
  s(bool,'T_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | $spl28),
  inference(superposition,[],[f192,f7870])).
fof(f16965,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl13 | $spl28 | $spl34)),
  inference(subsumption_resolution,[],[f16964,f206])).
fof(f16964,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16963,f10145])).
fof(f16963,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK13) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16962,f10145])).
fof(f16962,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16961,f168])).
fof(f16961,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16960,f168])).
fof(f16960,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16959,f166])).
fof(f16959,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16958,f166])).
fof(f16958,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16957,f188])).
fof(f16957,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16956,f188])).
fof(f16956,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16955,f165])).
fof(f16955,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16954,f165])).
fof(f16954,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16953,f148])).
fof(f16953,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16752,f148])).
fof(f16752,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(unit_resulting_resolution,[],[f16651,f182])).
fof(f16890,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl13 | $spl28 | $spl34)),
  inference(subsumption_resolution,[],[f16889,f206])).
fof(f16889,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16888,f10145])).
fof(f16888,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK13) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16887,f10145])).
fof(f16887,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16886,f168])).
fof(f16886,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16885,f168])).
fof(f16885,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16884,f166])).
fof(f16884,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16883,f166])).
fof(f16883,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16882,f188])).
fof(f16882,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16881,f188])).
fof(f16881,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16880,f165])).
fof(f16880,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16879,f165])).
fof(f16879,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16878,f148])).
fof(f16878,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(forward_demodulation,[],[f16758,f148])).
fof(f16758,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl28 | $spl34)),
  inference(unit_resulting_resolution,[],[f16651,f182])).
fof(f16601,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl8 | $spl13 | $spl48)),
  inference(subsumption_resolution,[],[f16600,f206])).
fof(f16600,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16599,f10145])).
fof(f16599,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK13) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16598,f10145])).
fof(f16598,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16597,f168])).
fof(f16597,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16596,f168])).
fof(f16596,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16595,f166])).
fof(f16595,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16594,f166])).
fof(f16594,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16593,f188])).
fof(f16593,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16592,f188])).
fof(f16592,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16591,f165])).
fof(f16591,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16590,f165])).
fof(f16590,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16333,f148])).
fof(f16333,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(superposition,[],[f148,f16117])).
fof(f16117,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(backward_demodulation,[],[f16116,f14197])).
fof(f16116,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | ($spl8 | $spl48)),
  inference(global_subsumption,[],[f9085,f143,f142,f141,f140,f139,f138,f137,f144,f146,f147,f148,f149,f150,f151,f152,f153,f154,f155,f156,f157,f158,f159,f160,f161,f162,f163,f164,f165,f166,f167,f168,f169,f170,f171,f172,f173,f174,f175,f176,f183,f182,f181,f180,f179,f178,f177,f184,f207,f186,f187,f188,f189,f190,f191,f192,f201,f232,f235,f243,f334,f335,f347,f357,f358,f401,f690,f691,f692,f751,f2044,f1649,f1650,f1651,f1669,f1689,f1700,f1701,f1890,f1878,f2175,f2099,f2100,f2101,f2311,f2312,f2460,f2482,f2736,f2928,f3185,f3198,f3199,f4086,f4087,f4113,f4114,f4360,f4429,f4606,f4894,f4928,f4921,f6426,f6427,f6807,f7484,f7485,f7827,f7828,f7832,f7833,f145,f7831,f4203,f2711,f7846,f7845,f7844,f7843,f7840,f7839,f7856,f7855,f7853,f7852,f7838,f7826,f6882,f6881,f5896,f5895,f5503,f5152,f5151,f4461,f4460,f4386,f4297,f4296,f4207,f3420,f3419,f2991,f2777,f2708,f1816,f1815,f1814,f727,f709,f620,f612,f611,f404,f300,f299,f265,f234,f9813,f9814,f9815,f9816,f9817,f9818,f9819,f10139,f10140,f10141,f10142,f10143,f10144,f10145,f10877,f10878,f10879,f10880,f10881,f10882,f10883,f11529,f11530,f11531,f11532,f11533,f11534,f11535,f11764,f11765,f11766,f11767,f11768,f11769,f11770])).
fof(f9085,plain,(
  s(bool,'T_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | $spl48),
  inference(superposition,[],[f192,f8664])).
fof(f16531,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl8 | $spl13 | $spl48)),
  inference(subsumption_resolution,[],[f16530,f206])).
fof(f16530,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16529,f10145])).
fof(f16529,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK13) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16528,f10145])).
fof(f16528,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16527,f168])).
fof(f16527,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16526,f168])).
fof(f16526,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16525,f166])).
fof(f16525,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16524,f166])).
fof(f16524,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16523,f188])).
fof(f16523,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16522,f188])).
fof(f16522,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16521,f165])).
fof(f16521,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16520,f165])).
fof(f16520,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16519,f148])).
fof(f16519,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16318,f148])).
fof(f16318,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(unit_resulting_resolution,[],[f16117,f182])).
fof(f16456,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl8 | $spl13 | $spl48)),
  inference(subsumption_resolution,[],[f16455,f206])).
fof(f16455,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16454,f10145])).
fof(f16454,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK13) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16453,f10145])).
fof(f16453,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16452,f168])).
fof(f16452,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16451,f168])).
fof(f16451,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16450,f166])).
fof(f16450,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16449,f166])).
fof(f16449,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16448,f188])).
fof(f16448,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16447,f188])).
fof(f16447,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16446,f165])).
fof(f16446,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16445,f165])).
fof(f16445,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16444,f148])).
fof(f16444,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(forward_demodulation,[],[f16324,f148])).
fof(f16324,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl8 | $spl48)),
  inference(unit_resulting_resolution,[],[f16117,f182])).
fof(f16204,plain,(
  $false | ($spl24 | $spl26)),
  inference(subsumption_resolution,[],[f3011,f3010])).
fof(f16203,plain,(
  $false | $spl24),
  inference(subsumption_resolution,[],[f16202,f144])).
fof(f16202,plain,(
  ~p(s(bool,'T_0')) | $spl24),
  inference(forward_demodulation,[],[f145,f3010])).
fof(f16196,plain,(
  $false | ($spl24 | $spl35)),
  inference(subsumption_resolution,[],[f16178,f144])).
fof(f16178,plain,(
  ~p(s(bool,'T_0')) | ($spl24 | $spl35)),
  inference(backward_demodulation,[],[f3010,f15993])).
fof(f15993,plain,(
  ~p(s(bool,'F_0')) | $spl35),
  inference(global_subsumption,[],[f15992,f143,f142,f141,f140,f139,f138,f137,f144,f146,f147,f148,f149,f150,f151,f152,f153,f154,f155,f156,f157,f158,f159,f160,f161,f162,f163,f164,f165,f166,f167,f168,f169,f170,f171,f172,f173,f174,f175,f176,f183,f182,f181,f180,f179,f178,f177,f184,f207,f186,f187,f188,f189,f190,f191,f192,f232,f235,f243,f334,f335,f347,f357,f358,f401,f690,f691,f692,f751,f2044,f1649,f1650,f1651,f1669,f1689,f1700,f1701,f1890,f1878,f2175,f2099,f2100,f2101,f2311,f2312,f2460,f2482,f2736,f2928,f3185,f3198,f3199,f4086,f4087,f4113,f4114,f4360,f4429,f4606,f4894,f4928,f4921,f6426,f6427,f6807,f7484,f7485,f7827,f7828,f7832,f7833,f145,f7831,f4203,f2711,f7846,f7845,f7844,f7843,f7840,f7839,f7856,f7855,f7853,f7852,f7838,f7826,f6882,f6881,f5896,f5895,f5503,f5152,f5151,f4461,f4460,f4386,f4297,f4296,f4207,f3420,f3419,f2991,f2777,f2708,f1816,f1815,f1814,f727,f709,f620,f612,f611,f404,f300,f299,f265,f234,f9813,f9814,f9815,f9816,f9817,f9818,f9819,f10139,f10140,f10141,f10142,f10143,f10144,f10145,f10877,f10878,f10879,f10880,f10881,f10882,f10883,f11529,f11530,f11531,f11532,f11533,f11534,f11535,f11764,f11765,f11766,f11767,f11768,f11769,f11770])).
fof(f15992,plain,(
  ( ! [X0] : (~p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0)) ) | $spl35),
  inference(forward_demodulation,[],[f15647,f15950])).
fof(f15950,plain,(
  s(bool,'F_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl35),
  inference(global_subsumption,[],[f143,f142,f141,f140,f139,f138,f137,f144,f146,f147,f148,f149,f150,f151,f152,f153,f154,f155,f156,f157,f158,f159,f160,f161,f162,f163,f164,f165,f166,f167,f168,f169,f170,f171,f172,f173,f174,f175,f176,f183,f182,f181,f180,f179,f178,f177,f184,f207,f186,f187,f188,f189,f190,f191,f192,f232,f235,f243,f334,f335,f347,f357,f358,f401,f690,f691,f692,f751,f2044,f1649,f1650,f1651,f1669,f1689,f1700,f1701,f1890,f1878,f2175,f2099,f2100,f2101,f2311,f2312,f2460,f2482,f2736,f2928,f3185,f3198,f3199,f4086,f4087,f4113,f4114,f4360,f4429,f4606,f4894,f4928,f4921,f6426,f6427,f6807,f7484,f7485,f7827,f7828,f7832,f7833,f7875,f145,f8185,f8184,f8330,f8324,f8127,f7831,f4203,f2711,f7846,f7845,f7844,f7843,f7840,f7839,f7856,f7855,f7853,f7852,f7838,f7826,f6882,f6881,f5896,f5895,f5503,f5152,f5151,f4461,f4460,f4386,f4297,f4296,f4207,f3420,f3419,f2991,f2777,f2708,f1816,f1815,f1814,f727,f709,f620,f612,f611,f404,f300,f299,f265,f234,f9813,f9814,f9815,f9816,f9817,f9818,f9819,f10072,f10139,f10140,f10141,f10142,f10143,f10144,f10145,f10476,f10477,f10877,f10878,f10879,f10880,f10881,f10882,f10883,f11472,f11529,f11530,f11531,f11532,f11533,f11534,f11535,f11758,f11764,f11765,f11766,f11767,f11768,f11769,f11770,f13662,f13530,f15351,f15369,f15371,f15372,f15337,f14288,f14315,f15484,f14343,f15517,f15520,f15308,f15532,f15534,f15538,f15290,f15283,f15281,f15543,f15280,f15549,f15278,f14449,f14450,f14451,f15267,f15569,f15570,f15264,f15261,f15245,f14656,f14660,f14661,f15754,f15759,f15765,f15777,f15209,f15208,f15207,f15854,f15206,f15205,f15204,f15200,f15871,f14940,f14945,f14948,f15177,f14978,f14979,f14987,f14990,f15154,f15094,f15937,f15104,f15938,f15124,f15939,f15101,f15933,f15093,f15091,f15155,f15913,f15911,f14989,f14984,f15893,f14947,f15889,f14937,f15842,f14830,f14827,f15775,f15243,f14682,f14681,f15949])).
fof(f15949,plain,(
  ( ! [X47,X50,X51] : (s(bool,'F_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X50) = s(bool,'const.combin.K_2'(s(bool,X47),s(bool,X50))) | s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X51)) ) | $spl35),
  inference(subsumption_resolution,[],[f14667,f15765])).
fof(f14667,plain,(
  ( ! [X47,X50,X48,X51,X49] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X47),s(X48,X49))) | s(bool,'F_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X50) = s(bool,'const.combin.K_2'(s(bool,X47),s(bool,X50))) | s(bool,X50) = s(bool,X51) | s(bool,'T_0') = s(bool,X51)) ) | $spl35),
  inference(superposition,[],[f234,f10477])).
fof(f14827,plain,(
  ( ! [X546,X542,X545,X543,X544] : (s(bool,X545) != s(bool,f(s(X542,sK14(X543,X544,bool,X542)))) | s(fun(X542,bool),X543) = s(fun(X542,bool),X544) | s(bool,g(s(X542,sK14(X543,X544,bool,X542)))) = s(bool,'const.combin.K_2'(s(bool,X546),s(bool,g(s(X542,sK14(X543,X544,bool,X542)))))) | s(bool,X546) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X545)) ) | $spl35),
  inference(superposition,[],[f192,f10477])).
fof(f14830,plain,(
  ( ! [X561,X557,X559,X560,X558] : (s(X559,f(s(bool,X560))) != s(X559,g(s(bool,X560))) | s(fun(bool,X559),X557) = s(fun(bool,X559),X558) | s(bool,sK14(X557,X558,X559,bool)) = s(bool,'const.combin.K_2'(s(bool,X561),s(bool,sK14(X557,X558,X559,bool)))) | s(bool,X561) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X560)) ) | $spl35),
  inference(superposition,[],[f192,f10477])).
fof(f14937,plain,(
  ( ! [X546,X542,X545,X543,X544] : (s(bool,X545) != s(bool,f(s(X542,sK14(X543,X544,bool,X542)))) | s(fun(X542,bool),X543) = s(fun(X542,bool),X544) | s(bool,X545) = s(bool,'const.combin.K_2'(s(bool,X546),s(bool,X545))) | s(bool,X546) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,g(s(X542,sK14(X543,X544,bool,X542))))) ) | $spl35),
  inference(superposition,[],[f192,f10477])).
fof(f15889,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,X2) | p(s(bool,X0)) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X0) = s(bool,X1)) ) | $spl35),
  inference(forward_demodulation,[],[f14941,f184])).
fof(f14941,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X0) = s(bool,X1)) ) | $spl35),
  inference(superposition,[],[f144,f10477])).
fof(f14947,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (s(bool,X34) != s(bool,'const.combin.K_2'(s(bool,X33),s(X35,X36))) | s(bool,'T_0') = s(bool,happ(s(fun(X37,bool),'const.combin.K_1'(s(bool,X34))),s(X37,X38))) | s(bool,X39) = s(bool,'const.combin.K_2'(s(bool,X40),s(bool,X39))) | s(bool,X40) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X33) = s(bool,X39)) ) | $spl35),
  inference(superposition,[],[f2099,f10477])).
fof(f14984,plain,(
  ( ! [X261,X257,X259,X260,X262,X258] : (s(bool,X258) != s(bool,'const.combin.K_2'(s(bool,X257),s(bool,X257))) | s(bool,'T_0') = s(bool,happ(s(fun(X259,bool),'const.combin.K_1'(s(bool,X258))),s(X259,X260))) | s(bool,X261) = s(bool,'const.combin.K_2'(s(bool,X262),s(bool,X261))) | s(bool,X262) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X257) = s(bool,X261)) ) | $spl35),
  inference(superposition,[],[f2099,f10477])).
fof(f14989,plain,(
  ( ! [X288,X285,X287,X283,X284,X286] : (s(bool,X283) != s(bool,'const.combin.K_2'(s(bool,X284),s(bool,X283))) | s(bool,'T_0') = s(bool,happ(s(fun(X285,bool),'const.combin.K_1'(s(bool,X284))),s(X285,X286))) | s(bool,X287) = s(bool,'const.combin.K_2'(s(bool,X288),s(bool,X287))) | s(bool,X288) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X283) = s(bool,X287)) ) | $spl35),
  inference(superposition,[],[f3185,f10477])).
fof(f15155,plain,(
  ( ! [X364,X360,X362,X359,X365,X361,X363] : (s(bool,'T_0') = s(bool,happ(s(fun(X362,bool),'const.combin.K_1'(s(bool,X359))),s(X362,X363))) | s(bool,X364) = s(bool,'const.combin.K_2'(s(bool,X365),s(bool,X364))) | s(bool,X365) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X364) = s(bool,'const.combin.K_2'(s(bool,X359),s(X360,X361)))) ) | $spl35),
  inference(trivial_inequality_removal,[],[f15064])).
fof(f15064,plain,(
  ( ! [X364,X360,X362,X359,X365,X361,X363] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,happ(s(fun(X362,bool),'const.combin.K_1'(s(bool,X359))),s(X362,X363))) | s(bool,X364) = s(bool,'const.combin.K_2'(s(bool,X365),s(bool,X364))) | s(bool,X365) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X364) = s(bool,'const.combin.K_2'(s(bool,X359),s(X360,X361)))) ) | $spl35),
  inference(superposition,[],[f3185,f10477])).
fof(f15091,plain,(
  ( ! [X511,X512,X514,X510,X513] : (s(bool,'T_0') != s(bool,f(s(X510,sK14(X511,X512,bool,X510)))) | s(fun(X510,bool),X511) = s(fun(X510,bool),X512) | s(bool,X513) = s(bool,'const.combin.K_2'(s(bool,X514),s(bool,X513))) | s(bool,X514) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X513) = s(bool,g(s(X510,sK14(X511,X512,bool,X510))))) ) | $spl35),
  inference(superposition,[],[f192,f10477])).
fof(f15093,plain,(
  ( ! [X524,X520,X522,X521,X523] : (s(bool,'T_0') = s(bool,X521) | s(bool,X523) = s(bool,'const.combin.K_2'(s(bool,X524),s(bool,X523))) | s(bool,X524) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X523) = s(bool,happ(s(fun(X520,bool),'const.combin.K_1'(s(bool,X521))),s(X520,X522)))) ) | $spl35),
  inference(superposition,[],[f207,f10477])).
fof(f15933,plain,(
  ( ! [X0,X1] : (s(bool,'const.combin.K_2'(s(bool,X0),s(bool,X0))) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl35),
  inference(subsumption_resolution,[],[f15097,f10072])).
fof(f15097,plain,(
  ( ! [X0,X1] : (s(bool,'const.combin.K_2'(s(bool,X0),s(bool,X0))) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X0) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl35),
  inference(equality_factoring,[],[f10477])).
fof(f15101,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) = s(bool,'const.combin.K_2'(s(bool,X0),s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))))) | s(bool,X0) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X1)) ) | $spl35),
  inference(equality_factoring,[],[f10477])).
fof(f15939,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X0),s(bool,X1))) | s(bool,X0) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(subsumption_resolution,[],[f15103,f8185])).
fof(f15103,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,X0) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X0),s(bool,X1))) | s(bool,X0) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(equality_factoring,[],[f10477])).
fof(f15124,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,'const.combin.K_2'(s(bool,X1),s(bool,'T_0'))) | s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X0)) ) | $spl35),
  inference(duplicate_literal_removal,[],[f15114])).
fof(f15114,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,'const.combin.K_2'(s(bool,X1),s(bool,'T_0'))) | s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl35),
  inference(equality_factoring,[],[f10477])).
fof(f15938,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,X1),s(bool,X0))) | s(bool,X0) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(subsumption_resolution,[],[f15111,f7875])).
fof(f15111,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,X1),s(bool,X0))) | s(bool,X0) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(equality_factoring,[],[f10477])).
fof(f15104,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X0))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl35),
  inference(equality_factoring,[],[f10477])).
fof(f15937,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X0),s(bool,X1))) | s(bool,X0) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(subsumption_resolution,[],[f15102,f7875])).
fof(f15102,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X0),s(bool,X1))) | s(bool,X0) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(equality_factoring,[],[f10477])).
fof(f15094,plain,(
  ( ! [X528,X526,X529,X525,X527] : (s(X527,f(s(bool,'T_0'))) != s(X527,g(s(bool,'T_0'))) | s(fun(bool,X527),X525) = s(fun(bool,X527),X526) | s(bool,X528) = s(bool,'const.combin.K_2'(s(bool,X529),s(bool,X528))) | s(bool,X529) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X528) = s(bool,sK14(X525,X526,X527,bool))) ) | $spl35),
  inference(superposition,[],[f192,f10477])).
fof(f14990,plain,(
  ( ! [X292,X290,X289,X291] : (s(bool,X289) = s(bool,'const.combin.K_2'(s(bool,X290),s(bool,X289))) | s(bool,X290) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X291) = s(bool,'const.combin.K_2'(s(bool,X292),s(bool,X291))) | s(bool,X292) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X289) = s(bool,X291)) ) | $spl35),
  inference(superposition,[],[f8184,f10477])).
fof(f14987,plain,(
  ( ! [X273,X275,X276,X274] : (s(bool,X273) != s(bool,'const.combin.K_2'(s(bool,X274),s(bool,X273))) | s(bool,'T_0') = s(bool,X274) | s(bool,X275) = s(bool,'const.combin.K_2'(s(bool,X276),s(bool,X275))) | s(bool,X276) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X273) = s(bool,X275)) ) | $spl35),
  inference(superposition,[],[f2736,f10477])).
fof(f14979,plain,(
  ( ! [X237,X235,X238,X236,X234] : (s(bool,X234) = s(bool,'const.combin.K_2'(s(bool,X235),s(bool,X234))) | s(bool,X235) = s(bool,X236) | s(bool,'T_0') = s(bool,X236) | s(bool,X237) = s(bool,'const.combin.K_2'(s(bool,X238),s(bool,X237))) | s(bool,X238) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X234) = s(bool,X237)) ) | $spl35),
  inference(superposition,[],[f334,f10477])).
fof(f14978,plain,(
  ( ! [X231,X233,X230,X232] : (s(bool,X230) = s(bool,'const.combin.K_2'(s(bool,X231),s(bool,X230))) | s(bool,'F_0') = s(bool,X231) | s(bool,X232) = s(bool,'const.combin.K_2'(s(bool,X233),s(bool,X232))) | s(bool,X233) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X230) = s(bool,X232)) ) | $spl35),
  inference(superposition,[],[f234,f10477])).
fof(f15177,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,'const.combin.K_2'(s(bool,X3),s(bool,X2))) | s(bool,X3) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,X2)) ) | $spl35),
  inference(condensation,[],[f15176])).
fof(f15176,plain,(
  ( ! [X175,X173,X171,X174,X172] : (s(bool,X171) != s(bool,X172) | s(bool,'T_0') = s(bool,X173) | s(bool,'T_0') = s(bool,X172) | s(bool,X174) = s(bool,'const.combin.K_2'(s(bool,X175),s(bool,X174))) | s(bool,X175) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X171) = s(bool,X174)) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14969])).
fof(f14969,plain,(
  ( ! [X175,X173,X171,X174,X172] : (s(bool,X171) != s(bool,X172) | s(bool,'T_0') = s(bool,X173) | s(bool,'T_0') = s(bool,X173) | s(bool,'T_0') = s(bool,X172) | s(bool,X174) = s(bool,'const.combin.K_2'(s(bool,X175),s(bool,X174))) | s(bool,X175) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X171) = s(bool,X174)) ) | $spl35),
  inference(superposition,[],[f4429,f10477])).
fof(f14948,plain,(
  ( ! [X47,X45,X43,X41,X48,X46,X44,X42] : (s(bool,X42) != s(bool,'const.combin.K_2'(s(bool,X41),s(X43,X44))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X42),s(X45,X46))) | s(bool,X47) = s(bool,'const.combin.K_2'(s(bool,X48),s(bool,X47))) | s(bool,X48) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X41) = s(bool,X47)) ) | $spl35),
  inference(superposition,[],[f2175,f10477])).
fof(f14945,plain,(
  ( ! [X26,X24,X23,X21,X25,X22] : (s(bool,X22) != s(bool,'const.combin.K_2'(s(bool,X21),s(X23,X24))) | s(bool,'T_0') = s(bool,X22) | s(bool,X25) = s(bool,'const.combin.K_2'(s(bool,X26),s(bool,X25))) | s(bool,X26) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X21) = s(bool,X25)) ) | $spl35),
  inference(superposition,[],[f1890,f10477])).
fof(f14940,plain,(
  ( ! [X561,X557,X559,X560,X558] : (s(X559,f(s(bool,X560))) != s(X559,g(s(bool,X560))) | s(fun(bool,X559),X557) = s(fun(bool,X559),X558) | s(bool,X560) = s(bool,'const.combin.K_2'(s(bool,X561),s(bool,X560))) | s(bool,X561) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,sK14(X557,X558,X559,bool))) ) | $spl35),
  inference(superposition,[],[f192,f10477])).
fof(f15871,plain,(
  ( ! [X315,X316,X318,X314,X317,X319] : (s(bool,X314) != s(bool,X315) | s(bool,'T_0') = s(bool,X316) | s(bool,X316) = s(bool,'const.combin.K_2'(s(bool,X315),s(X317,X318))) | s(bool,X314) = s(bool,'const.combin.K_2'(s(bool,X319),s(bool,X314))) | s(bool,X319) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(subsumption_resolution,[],[f14892,f7875])).
fof(f14892,plain,(
  ( ! [X315,X316,X318,X314,X317,X319] : (s(bool,X314) != s(bool,X315) | s(bool,'T_0') = s(bool,X316) | s(bool,X316) = s(bool,'const.combin.K_2'(s(bool,X315),s(X317,X318))) | s(bool,X314) = s(bool,'const.combin.K_2'(s(bool,X319),s(bool,X314))) | s(bool,X319) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(superposition,[],[f11472,f10477])).
fof(f15200,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.combin.K_2'(s(bool,X2),s(X3,X4))) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,X1),s(X5,X6))) | s(bool,X2) = s(bool,'const.combin.K_2'(s(bool,X7),s(bool,X2))) | s(bool,X7) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(condensation,[],[f15199])).
fof(f15199,plain,(
  ( ! [X212,X210,X208,X206,X213,X211,X209,X207,X214] : (s(bool,X208) != s(bool,'const.combin.K_2'(s(bool,X207),s(X209,X210))) | s(bool,'T_0') = s(bool,X211) | s(bool,X211) = s(bool,'const.combin.K_2'(s(bool,X208),s(X212,X213))) | s(bool,'T_0') = s(bool,X206) | s(bool,X207) = s(bool,'const.combin.K_2'(s(bool,X214),s(bool,X207))) | s(bool,X214) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14871])).
fof(f14871,plain,(
  ( ! [X212,X210,X208,X206,X213,X211,X209,X207,X214] : (s(bool,X208) != s(bool,'const.combin.K_2'(s(bool,X207),s(X209,X210))) | s(bool,'T_0') = s(bool,X211) | s(bool,X211) = s(bool,'const.combin.K_2'(s(bool,X208),s(X212,X213))) | s(bool,'T_0') = s(bool,X206) | s(bool,X207) = s(bool,'const.combin.K_2'(s(bool,X214),s(bool,X207))) | s(bool,X214) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X206)) ) | $spl35),
  inference(superposition,[],[f11758,f10477])).
fof(f15204,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,X2) | s(bool,X0) = s(bool,X2) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X3),s(bool,X1))) | s(bool,X3) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(condensation,[],[f15203])).
fof(f15203,plain,(
  ( ! [X140,X138,X136,X139,X137] : (s(bool,X137) != s(bool,X138) | s(bool,X138) = s(bool,X139) | s(bool,'T_0') = s(bool,X139) | s(bool,'T_0') = s(bool,X136) | s(bool,X137) = s(bool,'const.combin.K_2'(s(bool,X140),s(bool,X137))) | s(bool,X140) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14857])).
fof(f14857,plain,(
  ( ! [X140,X138,X136,X139,X137] : (s(bool,X137) != s(bool,X138) | s(bool,X138) = s(bool,X139) | s(bool,'T_0') = s(bool,X139) | s(bool,'T_0') = s(bool,X136) | s(bool,X137) = s(bool,'const.combin.K_2'(s(bool,X140),s(bool,X137))) | s(bool,X140) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X136)) ) | $spl35),
  inference(superposition,[],[f4429,f10477])).
fof(f15208,plain,(
  ( ! [X76,X74,X72,X77,X75,X73] : (s(bool,X73) != s(bool,'const.combin.K_2'(s(bool,X74),s(X75,X76))) | s(bool,X72) = s(bool,X74) | s(bool,'T_0') = s(bool,X72) | s(bool,X73) = s(bool,'const.combin.K_2'(s(bool,X77),s(bool,X73))) | s(bool,X77) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14846])).
fof(f14846,plain,(
  ( ! [X76,X74,X72,X77,X75,X73] : (s(bool,X73) != s(bool,'const.combin.K_2'(s(bool,X74),s(X75,X76))) | s(bool,X72) = s(bool,X74) | s(bool,'T_0') = s(bool,X72) | s(bool,X73) = s(bool,'const.combin.K_2'(s(bool,X77),s(bool,X73))) | s(bool,X77) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X72)) ) | $spl35),
  inference(superposition,[],[f1878,f10477])).
fof(f15777,plain,(
  ( ! [X231,X229,X227,X233,X230,X228,X226,X234,X232] : (s(bool,X227) != s(bool,'const.combin.K_2'(s(bool,X226),s(X228,X229))) | s(bool,'T_0') = s(bool,X230) | s(bool,X230) = s(bool,'const.combin.K_2'(s(bool,X227),s(X231,X232))) | s(bool,X233) = s(bool,'const.combin.K_2'(s(bool,X226),s(bool,X233))) | s(bool,X233) = s(bool,X234) | s(bool,'T_0') = s(bool,X234)) ) | $spl35),
  inference(subsumption_resolution,[],[f14700,f7875])).
fof(f14700,plain,(
  ( ! [X231,X229,X227,X233,X230,X228,X226,X234,X232] : (s(bool,X227) != s(bool,'const.combin.K_2'(s(bool,X226),s(X228,X229))) | s(bool,'T_0') = s(bool,X230) | s(bool,X230) = s(bool,'const.combin.K_2'(s(bool,X227),s(X231,X232))) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X233) = s(bool,'const.combin.K_2'(s(bool,X226),s(bool,X233))) | s(bool,X233) = s(bool,X234) | s(bool,'T_0') = s(bool,X234)) ) | $spl35),
  inference(superposition,[],[f11758,f10477])).
fof(f15765,plain,(
  ( ! [X144,X142,X145,X143,X141] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X141),s(X142,X143))) | s(bool,X144) = s(bool,'const.combin.K_2'(s(bool,X141),s(bool,X144))) | s(bool,X144) = s(bool,X145) | s(bool,'T_0') = s(bool,X145)) ) | $spl35),
  inference(subsumption_resolution,[],[f14684,f7875])).
fof(f14684,plain,(
  ( ! [X144,X142,X145,X143,X141] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X141),s(X142,X143))) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X144) = s(bool,'const.combin.K_2'(s(bool,X141),s(bool,X144))) | s(bool,X144) = s(bool,X145) | s(bool,'T_0') = s(bool,X145)) ) | $spl35),
  inference(superposition,[],[f2736,f10477])).
fof(f15759,plain,(
  ( ! [X103,X101,X105,X102,X100,X104] : (s(bool,X100) != s(bool,'const.combin.K_2'(s(bool,X101),s(X102,X103))) | s(bool,X101) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X104) = s(bool,'const.combin.K_2'(s(bool,X100),s(bool,X104))) | s(bool,X104) = s(bool,X105) | s(bool,'T_0') = s(bool,X105)) ) | $spl35),
  inference(subsumption_resolution,[],[f14677,f7875])).
fof(f14677,plain,(
  ( ! [X103,X101,X105,X102,X100,X104] : (s(bool,X100) != s(bool,'const.combin.K_2'(s(bool,X101),s(X102,X103))) | s(bool,X101) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X104) = s(bool,'const.combin.K_2'(s(bool,X100),s(bool,X104))) | s(bool,X104) = s(bool,X105) | s(bool,'T_0') = s(bool,X105)) ) | $spl35),
  inference(superposition,[],[f1878,f10477])).
fof(f15754,plain,(
  ( ! [X54,X52,X53] : (s(bool,X52) = s(bool,X53) | ~p(s(bool,X52)) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) ) | $spl35),
  inference(forward_demodulation,[],[f15753,f184])).
fof(f15753,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,X52)) | s(bool,X53) = s(bool,'const.combin.K_2'(s(bool,X52),s(bool,X53))) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) ) | $spl35),
  inference(subsumption_resolution,[],[f14668,f7875])).
fof(f14668,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,X52)) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X53) = s(bool,'const.combin.K_2'(s(bool,X52),s(bool,X53))) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) ) | $spl35),
  inference(superposition,[],[f235,f10477])).
fof(f14661,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22] : (s(bool,X21) != s(bool,X22) | s(bool,'T_0') = s(bool,X23) | s(bool,X23) = s(bool,'const.combin.K_2'(s(bool,X22),s(X24,X25))) | s(bool,X26) = s(bool,'const.combin.K_2'(s(bool,X21),s(bool,X26))) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) ) | $spl35),
  inference(superposition,[],[f11472,f10477])).
fof(f14660,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s(bool,X16) != s(bool,X17) | s(bool,'T_0') = s(bool,X18) | s(bool,X17) = s(bool,X18) | s(bool,X19) = s(bool,'const.combin.K_2'(s(bool,X16),s(bool,X19))) | s(bool,X19) = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) ) | $spl35),
  inference(superposition,[],[f10072,f10477])).
fof(f14656,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,X0) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X0),s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl35),
  inference(superposition,[],[f7875,f10477])).
fof(f15245,plain,(
  ( ! [X182,X180,X184,X183,X181,X179] : (s(bool,'T_0') = s(bool,X180) | s(bool,X180) = s(bool,'const.combin.K_2'(s(bool,X179),s(X181,X182))) | s(bool,X183) = s(bool,'const.combin.K_2'(s(bool,X179),s(bool,X183))) | s(bool,X183) = s(bool,X184) | s(bool,'T_0') = s(bool,X184)) ) | $spl35),
  inference(trivial_inequality_removal,[],[f14604])).
fof(f14604,plain,(
  ( ! [X182,X180,X184,X183,X181,X179] : (s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X180) | s(bool,X180) = s(bool,'const.combin.K_2'(s(bool,X179),s(X181,X182))) | s(bool,X183) = s(bool,'const.combin.K_2'(s(bool,X179),s(bool,X183))) | s(bool,X183) = s(bool,X184) | s(bool,'T_0') = s(bool,X184)) ) | $spl35),
  inference(superposition,[],[f11472,f10477])).
fof(f14451,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s(bool,X13) = s(bool,X14) | s(bool,X15) = s(bool,'const.combin.K_2'(s(bool,X16),s(bool,X15))) | s(bool,X16) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X14) = s(bool,X15) | s(bool,X13) = s(bool,X17) | s(bool,'T_0') = s(bool,X17)) ) | $spl35),
  inference(superposition,[],[f10477,f232])).
fof(f14450,plain,(
  ( ! [X6,X12,X10,X8,X7,X11,X9] : (s(bool,X6) = s(bool,X7) | s(bool,X8) = s(bool,'const.combin.K_2'(s(bool,X9),s(bool,X8))) | s(bool,X9) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X7) = s(bool,X8) | s(bool,X6) = s(bool,X10) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X11,X12)))) ) | $spl35),
  inference(superposition,[],[f10477,f334])).
fof(f14449,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.combin.K_2'(s(bool,X3),s(bool,X2))) | s(bool,X3) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,X2) | s(bool,X4) = s(bool,'const.combin.K_2'(s(bool,X5),s(bool,X4))) | s(bool,X5) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X0) = s(bool,X4)) ) | $spl35),
  inference(superposition,[],[f10477,f10477])).
fof(f15283,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X0),s(X2,X3))) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X4),s(bool,X1))) | s(bool,X4) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(condensation,[],[f15282])).
fof(f15282,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(bool,X41) = s(bool,'const.combin.K_2'(s(bool,X38),s(X39,X40))) | s(bool,X41) = s(bool,'const.combin.K_2'(s(bool,X42),s(bool,X41))) | s(bool,X42) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X38)) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14415])).
fof(f14415,plain,(
  ( ! [X39,X37,X41,X38,X42,X40] : (s(bool,X41) = s(bool,'const.combin.K_2'(s(bool,X38),s(X39,X40))) | s(bool,X41) = s(bool,'const.combin.K_2'(s(bool,X42),s(bool,X41))) | s(bool,X42) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,X37)) ) | $spl35),
  inference(superposition,[],[f10477,f357])).
fof(f15517,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (s(bool,X59) = s(bool,'const.combin.K_2'(s(bool,X56),s(X57,X58))) | s(bool,X60) = s(bool,'const.combin.K_2'(s(bool,X59),s(bool,X60))) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,X56)) ) | $spl35),
  inference(subsumption_resolution,[],[f14355,f7875])).
fof(f14355,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (s(bool,X59) = s(bool,'const.combin.K_2'(s(bool,X56),s(X57,X58))) | s(bool,X60) = s(bool,'const.combin.K_2'(s(bool,X59),s(bool,X60))) | s(bool,X60) = s(bool,X61) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,X56) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(superposition,[],[f10477,f357])).
fof(f14343,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.combin.K_2'(s(bool,X1),s(bool,X2))) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,'const.combin.K_2'(s(bool,X0),s(bool,X4))) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) ) | $spl35),
  inference(superposition,[],[f10477,f10477])).
fof(f14315,plain,(
  ( ! [X111,X109,X110] : (s(bool,X109) = s(bool,X110) | s(bool,X109) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X110) = s(bool,X111) | s(bool,'T_0') = s(bool,X111)) ) | $spl35),
  inference(superposition,[],[f10477,f184])).
fof(f14288,plain,(
  ( ! [X177,X180,X178,X181,X179] : (s(bool,X177) = s(bool,'const.combin.K_2'(s(bool,X180),s(bool,X177))) | s(bool,X180) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X181) = s(bool,'const.combin.K_2'(s(bool,X177),s(X178,X179))) | s(bool,'T_0') = s(bool,X181)) ) | $spl35),
  inference(superposition,[],[f10477,f184])).
fof(f15372,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (s(bool,X90) = s(bool,'const.combin.K_2'(s(bool,X89),s(bool,X90))) | s(bool,X90) = s(bool,X91) | s(bool,'T_0') = s(bool,X91) | s(bool,X89) = s(bool,X92) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X92),s(X93,X94)))) ) | $spl35),
  inference(subsumption_resolution,[],[f14225,f7875])).
fof(f14225,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (s(bool,X90) = s(bool,'const.combin.K_2'(s(bool,X89),s(bool,X90))) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X90) = s(bool,X91) | s(bool,'T_0') = s(bool,X91) | s(bool,X89) = s(bool,X92) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X92),s(X93,X94)))) ) | $spl35),
  inference(superposition,[],[f10477,f334])).
fof(f15371,plain,(
  ( ! [X88,X87,X85,X86,X84] : (s(bool,X85) = s(bool,'const.combin.K_2'(s(bool,X84),s(bool,X85))) | s(bool,X85) = s(bool,X86) | s(bool,'T_0') = s(bool,X86) | s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,X88) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X84) = s(bool,X87)) ) | $spl35),
  inference(subsumption_resolution,[],[f14224,f7875])).
fof(f14224,plain,(
  ( ! [X88,X87,X85,X86,X84] : (s(bool,X85) = s(bool,'const.combin.K_2'(s(bool,X84),s(bool,X85))) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X85) = s(bool,X86) | s(bool,'T_0') = s(bool,X86) | s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,X88) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X84) = s(bool,X87)) ) | $spl35),
  inference(superposition,[],[f10477,f10477])).
fof(f15351,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(bool,X0))) | s(bool,'T_0') = s(bool,X1)) ) | $spl35),
  inference(duplicate_literal_removal,[],[f15350])).
fof(f15350,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl35),
  inference(condensation,[],[f15349])).
fof(f15349,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X4) = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(bool,X4))) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X3) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) ) | $spl35),
  inference(subsumption_resolution,[],[f14207,f10072])).
fof(f14207,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X4) = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(bool,X4))) | s(bool,X3) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X3) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) ) | $spl35),
  inference(superposition,[],[f10477,f232])).
fof(f13530,plain,(
  ( ! [X280,X282,X279,X285,X281,X283,X278,X284,X286] : (s(bool,X281) != s(bool,'const.combin.K_2'(s(bool,X279),s(X282,X283))) | s(bool,'T_0') = s(bool,X284) | s(bool,X284) = s(bool,'const.combin.K_2'(s(bool,X281),s(X285,X286))) | s(bool,'T_0') = s(bool,happ(s(fun(X278,bool),'const.combin.K_1'(s(bool,X279))),s(X278,X280)))) ) | $spl35),
  inference(superposition,[],[f11758,f207])).
fof(f13662,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.combin.K_2'(s(bool,X2),s(X3,X4))) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,X1),s(X5,X6))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X2),s(X7,X8)))) ) | $spl35),
  inference(condensation,[],[f13661])).
fof(f13661,plain,(
  ( ! [X57,X54,X52,X50,X58,X56,X55,X53,X51,X49] : (s(bool,X51) != s(bool,'const.combin.K_2'(s(bool,X50),s(X52,X53))) | s(bool,'T_0') = s(bool,X54) | s(bool,X54) = s(bool,'const.combin.K_2'(s(bool,X51),s(X55,X56))) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X50),s(X57,X58)))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f13502])).
fof(f13502,plain,(
  ( ! [X57,X54,X52,X50,X58,X56,X55,X53,X51,X49] : (s(bool,X51) != s(bool,'const.combin.K_2'(s(bool,X50),s(X52,X53))) | s(bool,'T_0') = s(bool,X54) | s(bool,X54) = s(bool,'const.combin.K_2'(s(bool,X51),s(X55,X56))) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X49) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X50),s(X57,X58)))) ) | $spl35),
  inference(superposition,[],[f11758,f334])).
fof(f11758,plain,(
  ( ! [X61,X66,X64,X62,X67,X65,X63] : (s(bool,X64) != s(bool,'const.combin.K_2'(s(bool,X61),s(X62,X63))) | s(bool,'T_0') = s(bool,X65) | s(bool,X65) = s(bool,'const.combin.K_2'(s(bool,X64),s(X66,X67))) | s(bool,'T_0') = s(bool,X61)) ) | $spl35),
  inference(subsumption_resolution,[],[f11710,f7875])).
fof(f11710,plain,(
  ( ! [X61,X66,X64,X62,X67,X65,X63] : (s(bool,X64) != s(bool,'const.combin.K_2'(s(bool,X61),s(X62,X63))) | s(bool,'T_0') = s(bool,X65) | s(bool,X65) = s(bool,'const.combin.K_2'(s(bool,X64),s(X66,X67))) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(superposition,[],[f11472,f357])).
fof(f11472,plain,(
  ( ! [X80,X81,X79,X82] : (s(bool,X79) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X82) | s(bool,X82) = s(bool,'const.combin.K_2'(s(bool,X79),s(X80,X81)))) ) | $spl35),
  inference(superposition,[],[f10072,f184])).
fof(f10477,plain,(
  ( ! [X59,X57,X58] : (s(bool,X57) = s(bool,'const.combin.K_2'(s(bool,X58),s(bool,X57))) | s(bool,X58) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X57) = s(bool,X59) | s(bool,'T_0') = s(bool,X59)) ) | $spl35),
  inference(superposition,[],[f8184,f232])).
fof(f10476,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s(bool,X52) = s(bool,'const.combin.K_2'(s(bool,X53),s(bool,X52))) | s(bool,X53) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X52) = s(bool,X54) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X54),s(X55,X56)))) ) | $spl35),
  inference(superposition,[],[f8184,f334])).
fof(f10072,plain,(
  ( ! [X0,X1] : (s(bool,X1) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,X1)) ) | $spl35),
  inference(condensation,[],[f10071])).
fof(f10071,plain,(
  ( ! [X76,X77,X75] : (s(bool,X76) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X76) = s(bool,X77) | s(bool,'T_0') = s(bool,X77) | s(bool,'T_0') = s(bool,X75)) ) | $spl35),
  inference(duplicate_literal_removal,[],[f9976])).
fof(f9976,plain,(
  ( ! [X76,X77,X75] : (s(bool,X76) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X76) = s(bool,X77) | s(bool,'T_0') = s(bool,X77) | s(bool,'T_0') = s(bool,X75) | s(bool,'T_0') = s(bool,X75)) ) | $spl35),
  inference(superposition,[],[f4429,f8185])).
fof(f8127,plain,(
  s(bool,'F_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl35),
  inference(unit_resulting_resolution,[],[f7875,f146])).
fof(f8324,plain,(
  ~p(s(bool,'F_0')) | $spl35),
  inference(forward_demodulation,[],[f8134,f8127])).
fof(f8134,plain,(
  ~p(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) | $spl35),
  inference(unit_resulting_resolution,[],[f7875,f235])).
fof(f8330,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X0,X1)))) ) | $spl35),
  inference(forward_demodulation,[],[f8145,f8127])).
fof(f8145,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X0,X1)))) ) | $spl35),
  inference(unit_resulting_resolution,[],[f7875,f2736])).
fof(f8184,plain,(
  ( ! [X12,X10,X11] : (s(bool,X10) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X11,X12)))) ) | $spl35),
  inference(trivial_inequality_removal,[],[f8182])).
fof(f8182,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X10) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X11,X12)))) ) | $spl35),
  inference(superposition,[],[f7875,f334])).
fof(f8185,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X3)) ) | $spl35),
  inference(trivial_inequality_removal,[],[f8179])).
fof(f8179,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X3) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X3)) ) | $spl35),
  inference(superposition,[],[f7875,f232])).
fof(f15647,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f15646])).
fof(f15646,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl35),
  inference(condensation,[],[f15645])).
fof(f15645,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) ) | $spl35),
  inference(subsumption_resolution,[],[f14575,f3199])).
fof(f14575,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,'const.combin.K_2'(s(bool,X24),s(bool,X25))) | s(bool,X25) = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) ) | $spl35),
  inference(superposition,[],[f235,f10477])).
fof(f16195,plain,(
  $false | ($spl24 | $spl35)),
  inference(subsumption_resolution,[],[f16177,f3010])).
fof(f16177,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X3,X4)))) ) | ($spl24 | $spl35)),
  inference(backward_demodulation,[],[f3010,f15978])).
fof(f15978,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X3,X4)))) ) | $spl35),
  inference(global_subsumption,[],[f143,f142,f141,f140,f139,f138,f137,f144,f146,f147,f148,f149,f150,f151,f152,f153,f154,f155,f156,f157,f158,f159,f160,f161,f162,f163,f164,f165,f166,f167,f168,f169,f170,f171,f172,f173,f174,f175,f176,f183,f182,f181,f180,f179,f178,f177,f184,f207,f186,f187,f188,f189,f190,f191,f192,f232,f235,f243,f334,f335,f347,f357,f358,f401,f690,f691,f692,f751,f2044,f1649,f1650,f1651,f1669,f1689,f1700,f1701,f1890,f1878,f2175,f2099,f2100,f2101,f2311,f2312,f2460,f2482,f2736,f2928,f3185,f3198,f3199,f4086,f4087,f4113,f4114,f4360,f4429,f4606,f4894,f4928,f4921,f6426,f6427,f6807,f7484,f7485,f7827,f7828,f7832,f7833,f7875,f145,f8185,f8184,f8330,f8324,f8127,f7831,f4203,f2711,f7846,f7845,f7844,f7843,f7840,f7839,f7856,f7855,f7853,f7852,f7838,f7826,f6882,f6881,f5896,f5895,f5503,f5152,f5151,f4461,f4460,f4386,f4297,f4296,f4207,f3420,f3419,f2991,f2777,f2708,f1816,f1815,f1814,f727,f709,f620,f612,f611,f404,f300,f299,f265,f234,f9813,f9814,f9815,f9816,f9817,f9818,f9819,f10072,f10139,f10140,f10141,f10142,f10143,f10144,f10145,f10476,f10477,f10877,f10878,f10879,f10880,f10881,f10882,f10883,f11472,f11529,f11530,f11531,f11532,f11533,f11534,f11535,f11758,f11764,f11765,f11766,f11767,f11768,f11769,f11770,f13662,f13530,f15351,f15369,f15371,f15372,f15337,f14288,f14315,f15484,f14343,f15517,f15520,f15308,f15532,f15534,f15538,f15290,f15283,f15281,f15543,f15280,f15549,f15278,f14449,f14450,f14451,f15267,f15569,f15570,f15264,f15261,f15245,f14656,f14660,f14661,f15754,f15759,f15765,f15777,f15209,f15208,f15207,f15854,f15206,f15205,f15204,f15200,f15871,f14940,f14945,f14948,f15177,f14978,f14979,f14987,f14990,f15154,f15094,f15937,f15104,f15938,f15124,f15939,f15101,f15933,f15093,f15091,f15155,f15913,f15911,f14989,f14984,f15893,f14947,f15889,f14937,f15842,f14830,f14827,f15775,f15243,f14682,f14681,f15949,f15950,f15951,f15952,f15953,f15954,f15957,f15958,f15959,f15960,f15961,f15963,f15965,f15970,f15977])).
fof(f15977,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X3,X4))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2)))) ) | $spl35),
  inference(forward_demodulation,[],[f15700,f15950])).
fof(f15700,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X3,X4)))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f15699])).
fof(f15699,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2))) | s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X3,X4))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,X1))),s(X0,X2)))) ) | $spl35),
  inference(condensation,[],[f15698])).
fof(f15698,plain,(
  ( ! [X127,X125,X130,X128,X126,X131,X129] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X126,X127))) | s(bool,'T_0') = s(bool,happ(s(fun(X128,bool),'const.combin.K_1'(s(bool,X125))),s(X128,X129))) | s(bool,X130) = s(bool,X131) | s(bool,'T_0') = s(bool,X131)) ) | $spl35),
  inference(subsumption_resolution,[],[f14593,f7485])).
fof(f14593,plain,(
  ( ! [X127,X125,X130,X128,X126,X131,X129] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X126,X127))) | s(bool,'T_0') = s(bool,happ(s(fun(X128,bool),'const.combin.K_1'(s(bool,X125))),s(X128,X129))) | s(bool,X130) = s(bool,'const.combin.K_2'(s(bool,X125),s(bool,X130))) | s(bool,X130) = s(bool,X131) | s(bool,'T_0') = s(bool,X131)) ) | $spl35),
  inference(superposition,[],[f3185,f10477])).
fof(f15970,plain,(
  ( ! [X430,X432,X434,X431,X433] : (s(bool,'F_0') != s(bool,f(s(X430,sK14(X431,X432,bool,X430)))) | s(fun(X430,bool),X431) = s(fun(X430,bool),X432) | s(bool,X433) = s(bool,'const.combin.K_2'(s(bool,g(s(X430,sK14(X431,X432,bool,X430)))),s(bool,X433))) | s(bool,X433) = s(bool,X434) | s(bool,'T_0') = s(bool,X434)) ) | $spl35),
  inference(forward_demodulation,[],[f14652,f15950])).
fof(f14652,plain,(
  ( ! [X430,X432,X434,X431,X433] : (s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) != s(bool,f(s(X430,sK14(X431,X432,bool,X430)))) | s(fun(X430,bool),X431) = s(fun(X430,bool),X432) | s(bool,X433) = s(bool,'const.combin.K_2'(s(bool,g(s(X430,sK14(X431,X432,bool,X430)))),s(bool,X433))) | s(bool,X433) = s(bool,X434) | s(bool,'T_0') = s(bool,X434)) ) | $spl35),
  inference(superposition,[],[f192,f10477])).
fof(f15965,plain,(
  ( ! [X445,X447,X449,X446,X448] : (s(X447,f(s(bool,'F_0'))) != s(X447,g(s(bool,'F_0'))) | s(fun(bool,X447),X445) = s(fun(bool,X447),X446) | s(bool,X448) = s(bool,'const.combin.K_2'(s(bool,sK14(X445,X446,X447,bool)),s(bool,X448))) | s(bool,X448) = s(bool,X449) | s(bool,'T_0') = s(bool,X449)) ) | $spl35),
  inference(forward_demodulation,[],[f14655,f15950])).
fof(f14655,plain,(
  ( ! [X445,X447,X449,X446,X448] : (s(X447,f(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))))) != s(X447,g(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))))) | s(fun(bool,X447),X445) = s(fun(bool,X447),X446) | s(bool,X448) = s(bool,'const.combin.K_2'(s(bool,sK14(X445,X446,X447,bool)),s(bool,X448))) | s(bool,X448) = s(bool,X449) | s(bool,'T_0') = s(bool,X449)) ) | $spl35),
  inference(superposition,[],[f192,f10477])).
fof(f15963,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X2) | s(bool,X1) = s(bool,X2) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) ) | $spl35),
  inference(backward_demodulation,[],[f15950,f15889])).
fof(f15961,plain,(
  ( ! [X364,X360,X362,X359,X365,X361,X363] : (s(bool,'F_0') = s(bool,X365) | s(bool,'T_0') = s(bool,happ(s(fun(X362,bool),'const.combin.K_1'(s(bool,X359))),s(X362,X363))) | s(bool,X364) = s(bool,'const.combin.K_2'(s(bool,X365),s(bool,X364))) | s(bool,X364) = s(bool,'const.combin.K_2'(s(bool,X359),s(X360,X361)))) ) | $spl35),
  inference(backward_demodulation,[],[f15950,f15155])).
fof(f15960,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(bool,'F_0'))) | s(bool,X0) != s(bool,X1) | s(bool,X0) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X1)) ) | $spl35),
  inference(backward_demodulation,[],[f15950,f15101])).
fof(f15959,plain,(
  ( ! [X524,X520,X522,X521,X523] : (s(bool,'F_0') = s(bool,X524) | s(bool,'T_0') = s(bool,X521) | s(bool,X523) = s(bool,'const.combin.K_2'(s(bool,X524),s(bool,X523))) | s(bool,X523) = s(bool,happ(s(fun(X520,bool),'const.combin.K_1'(s(bool,X521))),s(X520,X522)))) ) | $spl35),
  inference(backward_demodulation,[],[f15950,f15093])).
fof(f15958,plain,(
  ( ! [X511,X512,X514,X510,X513] : (s(bool,'F_0') = s(bool,X514) | s(bool,'T_0') != s(bool,f(s(X510,sK14(X511,X512,bool,X510)))) | s(fun(X510,bool),X511) = s(fun(X510,bool),X512) | s(bool,X513) = s(bool,'const.combin.K_2'(s(bool,X514),s(bool,X513))) | s(bool,X513) = s(bool,g(s(X510,sK14(X511,X512,bool,X510))))) ) | $spl35),
  inference(backward_demodulation,[],[f15950,f15091])).
fof(f15957,plain,(
  ( ! [X288,X285,X287,X283,X284,X286] : (s(bool,'F_0') = s(bool,X288) | s(bool,X283) != s(bool,'const.combin.K_2'(s(bool,X284),s(bool,X283))) | s(bool,'T_0') = s(bool,happ(s(fun(X285,bool),'const.combin.K_1'(s(bool,X284))),s(X285,X286))) | s(bool,X287) = s(bool,'const.combin.K_2'(s(bool,X288),s(bool,X287))) | s(bool,X283) = s(bool,X287)) ) | $spl35),
  inference(backward_demodulation,[],[f15950,f14989])).
fof(f15954,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (s(bool,'F_0') = s(bool,X40) | s(bool,X34) != s(bool,'const.combin.K_2'(s(bool,X33),s(X35,X36))) | s(bool,'T_0') = s(bool,happ(s(fun(X37,bool),'const.combin.K_1'(s(bool,X34))),s(X37,X38))) | s(bool,X39) = s(bool,'const.combin.K_2'(s(bool,X40),s(bool,X39))) | s(bool,X33) = s(bool,X39)) ) | $spl35),
  inference(backward_demodulation,[],[f15950,f14947])).
fof(f15953,plain,(
  ( ! [X546,X542,X545,X543,X544] : (s(bool,'F_0') = s(bool,X546) | s(bool,X545) != s(bool,f(s(X542,sK14(X543,X544,bool,X542)))) | s(fun(X542,bool),X543) = s(fun(X542,bool),X544) | s(bool,X545) = s(bool,'const.combin.K_2'(s(bool,X546),s(bool,X545))) | s(bool,'T_0') = s(bool,g(s(X542,sK14(X543,X544,bool,X542))))) ) | $spl35),
  inference(backward_demodulation,[],[f15950,f14937])).
fof(f15952,plain,(
  ( ! [X561,X557,X559,X560,X558] : (s(bool,'F_0') = s(bool,X561) | s(X559,f(s(bool,X560))) != s(X559,g(s(bool,X560))) | s(fun(bool,X559),X557) = s(fun(bool,X559),X558) | s(bool,sK14(X557,X558,X559,bool)) = s(bool,'const.combin.K_2'(s(bool,X561),s(bool,sK14(X557,X558,X559,bool)))) | s(bool,'T_0') = s(bool,X560)) ) | $spl35),
  inference(backward_demodulation,[],[f15950,f14830])).
fof(f15951,plain,(
  ( ! [X546,X542,X545,X543,X544] : (s(bool,'F_0') = s(bool,X546) | s(bool,X545) != s(bool,f(s(X542,sK14(X543,X544,bool,X542)))) | s(fun(X542,bool),X543) = s(fun(X542,bool),X544) | s(bool,g(s(X542,sK14(X543,X544,bool,X542)))) = s(bool,'const.combin.K_2'(s(bool,X546),s(bool,g(s(X542,sK14(X543,X544,bool,X542)))))) | s(bool,'T_0') = s(bool,X545)) ) | $spl35),
  inference(backward_demodulation,[],[f15950,f14827])).
fof(f15948,plain,(
  ( ! [X125,X126] : (s(bool,'T_0') = s(bool,happ(s(fun(X125,bool),'const.combin.K_1'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))))),s(X125,X126)))) ) | $spl106),
  inference(cnf_transformation,[],[f15948_D])).
fof(f15948_D,plain,(
  ( ! [X125,X126] : (s(bool,'T_0') = s(bool,happ(s(fun(X125,bool),'const.combin.K_1'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))))),s(X125,X126)))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f15761,plain,(
  ( ! [X127,X123,X128,X124,X122] : (s(bool,X122) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X123,X124))) | s(bool,'T_0') = s(bool,X128) | s(bool,X127) = s(bool,X128) | s(bool,X127) = s(bool,'const.combin.K_2'(s(bool,X122),s(bool,X127)))) ) | $spl74),
  inference(cnf_transformation,[],[f15761_D])).
fof(f15761_D,plain,(
  ( ! [X127,X123,X128,X124,X122] : (s(bool,X122) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X123,X124))) | s(bool,'T_0') = s(bool,X128) | s(bool,X127) = s(bool,X128) | s(bool,X127) = s(bool,'const.combin.K_2'(s(bool,X122),s(bool,X127)))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f14681,plain,(
  ( ! [X127,X125,X123,X128,X126,X124,X122] : (s(bool,X122) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X123,X124))) | s(bool,'T_0') = s(bool,happ(s(fun(X125,bool),'const.combin.K_1'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))))),s(X125,X126))) | s(bool,X127) = s(bool,'const.combin.K_2'(s(bool,X122),s(bool,X127))) | s(bool,X127) = s(bool,X128) | s(bool,'T_0') = s(bool,X128)) ) | $spl35),
  inference(superposition,[],[f2099,f10477])).
fof(f15947,plain,(
  ( ! [X132,X133] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X132,X133)))) ) | $spl104),
  inference(cnf_transformation,[],[f15947_D])).
fof(f15947_D,plain,(
  ( ! [X132,X133] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X132,X133)))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f14682,plain,(
  ( ! [X134,X132,X130,X135,X133,X131,X129] : (s(bool,X129) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X130,X131))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X132,X133))) | s(bool,X134) = s(bool,'const.combin.K_2'(s(bool,X129),s(bool,X134))) | s(bool,X134) = s(bool,X135) | s(bool,'T_0') = s(bool,X135)) ) | $spl35),
  inference(superposition,[],[f2175,f10477])).
fof(f15945,plain,(
  ( ! [X4,X5,X3] : (s(bool,X3) = s(bool,'const.combin.K_2'(s(bool,X4),s(bool,X3))) | s(bool,'T_0') = s(bool,X5) | s(bool,X3) = s(bool,X5)) ) | $spl100),
  inference(cnf_transformation,[],[f15945_D])).
fof(f15945_D,plain,(
  ( ! [X4,X5,X3] : (s(bool,X3) = s(bool,'const.combin.K_2'(s(bool,X4),s(bool,X3))) | s(bool,'T_0') = s(bool,X5) | s(bool,X3) = s(bool,X5)) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f15946,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X1,X2)))) ) | $spl102),
  inference(cnf_transformation,[],[f15946_D])).
fof(f15946_D,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X1,X2)))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f15243,plain,(
  ( ! [X210,X208,X206,X209,X207,X205] : (s(bool,'T_0') = s(bool,X206) | s(bool,X206) = s(bool,'const.combin.K_2'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X207,X208))) | s(bool,X209) = s(bool,'const.combin.K_2'(s(bool,X205),s(bool,X209))) | s(bool,X209) = s(bool,X210) | s(bool,'T_0') = s(bool,X210)) ) | $spl35),
  inference(trivial_inequality_removal,[],[f14697])).
fof(f14697,plain,(
  ( ! [X210,X208,X206,X209,X207,X205] : (s(bool,X205) != s(bool,X205) | s(bool,'T_0') = s(bool,X206) | s(bool,X206) = s(bool,'const.combin.K_2'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X207,X208))) | s(bool,X209) = s(bool,'const.combin.K_2'(s(bool,X205),s(bool,X209))) | s(bool,X209) = s(bool,X210) | s(bool,'T_0') = s(bool,X210)) ) | $spl35),
  inference(superposition,[],[f11472,f10477])).
fof(f15775,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) = s(bool,'const.combin.K_2'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X1,X2))) | s(bool,X3) = s(bool,'const.combin.K_2'(s(bool,X4),s(bool,X3))) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) ) | $spl35),
  inference(condensation,[],[f15774])).
fof(f15774,plain,(
  ( ! [X218,X222,X225,X217,X223,X221,X224] : (s(bool,'T_0') = s(bool,X221) | s(bool,X221) = s(bool,'const.combin.K_2'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X222,X223))) | s(bool,'T_0') = s(bool,X218) | s(bool,X224) = s(bool,'const.combin.K_2'(s(bool,X217),s(bool,X224))) | s(bool,X224) = s(bool,X225) | s(bool,'T_0') = s(bool,X225)) ) | $spl35),
  inference(subsumption_resolution,[],[f14699,f15517])).
fof(f14699,plain,(
  ( ! [X218,X222,X220,X225,X219,X217,X223,X221,X224] : (s(bool,X217) != s(bool,'const.combin.K_2'(s(bool,X218),s(X219,X220))) | s(bool,'T_0') = s(bool,X221) | s(bool,X221) = s(bool,'const.combin.K_2'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X222,X223))) | s(bool,'T_0') = s(bool,X218) | s(bool,X224) = s(bool,'const.combin.K_2'(s(bool,X217),s(bool,X224))) | s(bool,X224) = s(bool,X225) | s(bool,'T_0') = s(bool,X225)) ) | $spl35),
  inference(superposition,[],[f11758,f10477])).
fof(f15943,plain,(
  ( ! [X26,X25] : (s(bool,X25) = s(bool,X26) | s(bool,X26) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | ~p(s(bool,X25))) ) | $spl98),
  inference(cnf_transformation,[],[f15943_D])).
fof(f15943_D,plain,(
  ( ! [X26,X25] : (s(bool,X25) = s(bool,X26) | s(bool,X26) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | ~p(s(bool,X25))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f15842,plain,(
  ( ! [X26,X24,X25] : (s(bool,X25) = s(bool,X26) | ~p(s(bool,X25)) | s(bool,'T_0') = s(bool,X24) | s(bool,X26) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(forward_demodulation,[],[f15216,f184])).
fof(f15216,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,X25)) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,'const.combin.K_2'(s(bool,X26),s(bool,X25))) | s(bool,X26) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14837])).
fof(f14837,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,X25)) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,'const.combin.K_2'(s(bool,X26),s(bool,X25))) | s(bool,X26) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X24)) ) | $spl35),
  inference(superposition,[],[f235,f10477])).
fof(f15852,plain,(
  ( ! [X94,X99,X98] : (s(bool,'T_0') = s(bool,happ(s(fun(X98,bool),'const.combin.K_1'(s(bool,X94))),s(X98,X99)))) ) | $spl86),
  inference(cnf_transformation,[],[f15852_D])).
fof(f15852_D,plain,(
  ( ! [X94,X99,X98] : (s(bool,'T_0') = s(bool,happ(s(fun(X98,bool),'const.combin.K_1'(s(bool,X94))),s(X98,X99)))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f15847,plain,(
  ( ! [X88,X87,X85,X86] : (s(bool,X85) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X86,X87))) | s(bool,X88) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X85) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X85)))) ) | $spl82),
  inference(cnf_transformation,[],[f15847_D])).
fof(f15847_D,plain,(
  ( ! [X88,X87,X85,X86] : (s(bool,X85) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X86,X87))) | s(bool,X88) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X85) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X85)))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f15850,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (s(bool,X95) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X96,X97))) | s(bool,'T_0') = s(bool,happ(s(fun(X98,bool),'const.combin.K_1'(s(bool,X94))),s(X98,X99))) | s(bool,X95) = s(bool,'const.combin.K_2'(s(bool,X100),s(bool,X95))) | s(bool,X100) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | ($spl17 | $spl35)),
  inference(subsumption_resolution,[],[f14850,f6569])).
fof(f6569,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X2))),s(X3,X4)))) ) | $spl17),
  inference(subsumption_resolution,[],[f6491,f246])).
fof(f6491,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),'const.combin.K_1'(s(bool,X2))),s(X3,X4))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f2099,f234])).
fof(f14850,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (s(bool,X95) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X96,X97))) | s(bool,'T_0') = s(bool,happ(s(fun(X98,bool),'const.combin.K_1'(s(bool,X94))),s(X98,X99))) | s(bool,X95) = s(bool,'const.combin.K_2'(s(bool,X100),s(bool,X95))) | s(bool,X100) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X94)) ) | $spl35),
  inference(superposition,[],[f2099,f10477])).
fof(f15855,plain,(
  ( ! [X116,X114,X117,X115] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X114),s(X115,X116))) | s(bool,X117) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X114) = s(bool,'const.combin.K_2'(s(bool,X117),s(bool,X114)))) ) | $spl90),
  inference(cnf_transformation,[],[f15855_D])).
fof(f15855_D,plain,(
  ( ! [X116,X114,X117,X115] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X114),s(X115,X116))) | s(bool,X117) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X114) = s(bool,'const.combin.K_2'(s(bool,X117),s(bool,X114)))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f15857,plain,(
  ( ! [X127,X125,X130,X128,X126,X131,X129] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X126),s(X127,X128))) | s(bool,'T_0') = s(bool,happ(s(fun(X129,bool),'const.combin.K_1'(s(bool,X125))),s(X129,X130))) | s(bool,X126) = s(bool,'const.combin.K_2'(s(bool,X131),s(bool,X126))) | s(bool,X131) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | ($spl17 | $spl35)),
  inference(subsumption_resolution,[],[f14855,f6569])).
fof(f14855,plain,(
  ( ! [X127,X125,X130,X128,X126,X131,X129] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X126),s(X127,X128))) | s(bool,'T_0') = s(bool,happ(s(fun(X129,bool),'const.combin.K_1'(s(bool,X125))),s(X129,X130))) | s(bool,X126) = s(bool,'const.combin.K_2'(s(bool,X131),s(bool,X126))) | s(bool,X131) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X125)) ) | $spl35),
  inference(superposition,[],[f3185,f10477])).
fof(f15941,plain,(
  ( ! [X111,X110,X108] : (s(bool,X110) = s(bool,X111) | s(bool,X111) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | p(s(bool,X108)) | s(bool,X108) = s(bool,X110)) ) | $spl96),
  inference(cnf_transformation,[],[f15941_D])).
fof(f15941_D,plain,(
  ( ! [X111,X110,X108] : (s(bool,X110) = s(bool,X111) | s(bool,X111) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | p(s(bool,X108)) | s(bool,X108) = s(bool,X110)) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f15893,plain,(
  ( ! [X111,X109,X110,X108] : (s(bool,X110) = s(bool,X111) | p(s(bool,X108)) | s(bool,'T_0') = s(bool,X109) | s(bool,X111) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X108) = s(bool,X110)) ) | $spl35),
  inference(forward_demodulation,[],[f15181,f184])).
fof(f15181,plain,(
  ( ! [X111,X109,X110,X108] : (p(s(bool,X108)) | s(bool,'T_0') = s(bool,X109) | s(bool,X110) = s(bool,'const.combin.K_2'(s(bool,X111),s(bool,X110))) | s(bool,X111) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X108) = s(bool,X110)) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14958])).
fof(f14958,plain,(
  ( ! [X111,X109,X110,X108] : (p(s(bool,X108)) | s(bool,'T_0') = s(bool,X109) | s(bool,'T_0') = s(bool,X109) | s(bool,X110) = s(bool,'const.combin.K_2'(s(bool,X111),s(bool,X110))) | s(bool,X111) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X108) = s(bool,X110)) ) | $spl35),
  inference(superposition,[],[f401,f10477])).
fof(f15452,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'F_0') = s(bool,X1)) ) | $spl70),
  inference(cnf_transformation,[],[f15452_D])).
fof(f15452_D,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f15911,plain,(
  ( ! [X269,X265,X268] : (s(bool,'T_0') = s(bool,X265) | s(bool,X268) = s(bool,'const.combin.K_2'(s(bool,X269),s(bool,X268))) | s(bool,X269) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'F_0') = s(bool,X268)) ) | $spl35),
  inference(subsumption_resolution,[],[f15043,f1890])).
fof(f15043,plain,(
  ( ! [X269,X265,X267,X268,X266] : (s(bool,X265) = s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X266,X267))) | s(bool,'T_0') = s(bool,X265) | s(bool,X268) = s(bool,'const.combin.K_2'(s(bool,X269),s(bool,X268))) | s(bool,X269) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'F_0') = s(bool,X268)) ) | $spl35),
  inference(superposition,[],[f2708,f10477])).
fof(f15913,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'F_0') = s(bool,X1)) ) | $spl35),
  inference(condensation,[],[f15912])).
fof(f15912,plain,(
  ( ! [X271,X273,X270,X272] : (s(bool,X270) = s(bool,X271) | s(bool,'T_0') = s(bool,X271) | s(bool,X272) = s(bool,'const.combin.K_2'(s(bool,X273),s(bool,X272))) | s(bool,X273) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'F_0') = s(bool,X272)) ) | $spl35),
  inference(subsumption_resolution,[],[f15044,f232])).
fof(f15044,plain,(
  ( ! [X271,X273,X270,X272] : (s(bool,'T_0') != s(bool,X270) | s(bool,X270) = s(bool,X271) | s(bool,'T_0') = s(bool,X271) | s(bool,X272) = s(bool,'const.combin.K_2'(s(bool,X273),s(bool,X272))) | s(bool,X273) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'F_0') = s(bool,X272)) ) | $spl35),
  inference(superposition,[],[f4360,f10477])).
fof(f15542,plain,(
  ( ! [X47,X45,X46,X44] : (s(bool,X46) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X44,X45))) | s(bool,X47) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X46) = s(bool,'const.combin.K_2'(s(bool,X47),s(bool,X46)))) ) | $spl72),
  inference(cnf_transformation,[],[f15542_D])).
fof(f15542_D,plain,(
  ( ! [X47,X45,X46,X44] : (s(bool,X46) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X44,X45))) | s(bool,X47) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X46) = s(bool,'const.combin.K_2'(s(bool,X47),s(bool,X46)))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f15154,plain,(
  ( ! [X401,X403,X404,X400,X402] : (s(bool,'T_0') = s(bool,X402) | s(bool,X403) = s(bool,'const.combin.K_2'(s(bool,X404),s(bool,X403))) | s(bool,X404) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X403) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X400,X401)))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f15069])).
fof(f15069,plain,(
  ( ! [X401,X403,X404,X400,X402] : (s(bool,'T_0') = s(bool,X402) | s(bool,'T_0') = s(bool,X402) | s(bool,X403) = s(bool,'const.combin.K_2'(s(bool,X404),s(bool,X403))) | s(bool,X404) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X403) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X400,X401)))) ) | $spl35),
  inference(superposition,[],[f2708,f10477])).
fof(f15862,plain,(
  ( ! [X147,X150] : (s(bool,'F_0') = s(bool,X150) | s(bool,X147) = s(bool,'const.combin.K_2'(s(bool,X150),s(bool,X147))) | s(bool,'T_0') != s(bool,X147)) ) | $spl94),
  inference(cnf_transformation,[],[f15862_D])).
fof(f15862_D,plain,(
  ( ! [X147,X150] : (s(bool,'F_0') = s(bool,X150) | s(bool,X147) = s(bool,'const.combin.K_2'(s(bool,X150),s(bool,X147))) | s(bool,'T_0') != s(bool,X147)) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f15861,plain,(
  ( ! [X146,X149,X147,X150,X148] : (s(bool,'F_0') = s(bool,X150) | s(bool,'T_0') != s(bool,X147) | s(bool,'T_0') = s(bool,happ(s(fun(X148,bool),'const.combin.K_1'(s(bool,X146))),s(X148,X149))) | s(bool,X147) = s(bool,'const.combin.K_2'(s(bool,X150),s(bool,X147)))) ) | ($spl17 | $spl35 | $spl55)),
  inference(forward_demodulation,[],[f15860,f9433])).
fof(f9433,plain,(
  s(bool,'F_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl35 | $spl55)),
  inference(forward_demodulation,[],[f9161,f9159])).
fof(f9159,plain,(
  s(bool,'F_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl55),
  inference(unit_resulting_resolution,[],[f8669,f146])).
fof(f9161,plain,(
  s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl35 | $spl55)),
  inference(unit_resulting_resolution,[],[f7875,f8669,f232])).
fof(f15860,plain,(
  ( ! [X146,X149,X147,X150,X148] : (s(bool,'T_0') != s(bool,X147) | s(bool,'T_0') = s(bool,happ(s(fun(X148,bool),'const.combin.K_1'(s(bool,X146))),s(X148,X149))) | s(bool,X147) = s(bool,'const.combin.K_2'(s(bool,X150),s(bool,X147))) | s(bool,X150) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | ($spl17 | $spl35)),
  inference(subsumption_resolution,[],[f14859,f6569])).
fof(f14859,plain,(
  ( ! [X146,X149,X147,X150,X148] : (s(bool,'T_0') != s(bool,X147) | s(bool,'T_0') = s(bool,happ(s(fun(X148,bool),'const.combin.K_1'(s(bool,X146))),s(X148,X149))) | s(bool,X147) = s(bool,'const.combin.K_2'(s(bool,X150),s(bool,X147))) | s(bool,X150) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X146)) ) | ($spl17 | $spl35)),
  inference(superposition,[],[f6569,f10477])).
fof(f15859,plain,(
  ( ! [X127,X128,X126,X131] : (s(bool,'F_0') = s(bool,X131) | s(bool,X126) = s(bool,'const.combin.K_2'(s(bool,X131),s(bool,X126))) | s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X126),s(X127,X128)))) ) | $spl92),
  inference(cnf_transformation,[],[f15859_D])).
fof(f15859_D,plain,(
  ( ! [X127,X128,X126,X131] : (s(bool,'F_0') = s(bool,X131) | s(bool,X126) = s(bool,'const.combin.K_2'(s(bool,X131),s(bool,X126))) | s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X126),s(X127,X128)))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f15858,plain,(
  ( ! [X127,X125,X130,X128,X126,X131,X129] : (s(bool,'F_0') = s(bool,X131) | s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X126),s(X127,X128))) | s(bool,'T_0') = s(bool,happ(s(fun(X129,bool),'const.combin.K_1'(s(bool,X125))),s(X129,X130))) | s(bool,X126) = s(bool,'const.combin.K_2'(s(bool,X131),s(bool,X126)))) ) | ($spl17 | $spl35 | $spl55)),
  inference(forward_demodulation,[],[f15857,f9433])).
fof(f15856,plain,(
  ( ! [X121,X118,X124,X120,X119] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X119),s(X120,X121))) | s(bool,X119) = s(bool,'const.combin.K_2'(s(bool,X124),s(bool,X119))) | s(bool,X124) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X118)) ) | ($spl17 | $spl26 | $spl35)),
  inference(subsumption_resolution,[],[f14854,f2736])).
fof(f14854,plain,(
  ( ! [X123,X121,X118,X124,X122,X120,X119] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X119),s(X120,X121))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X118),s(X122,X123))) | s(bool,X119) = s(bool,'const.combin.K_2'(s(bool,X124),s(bool,X119))) | s(bool,X124) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X118)) ) | ($spl17 | $spl26 | $spl35)),
  inference(superposition,[],[f3158,f10477])).
fof(f15205,plain,(
  ( ! [X116,X114,X117,X115,X113] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X114),s(X115,X116))) | s(bool,'T_0') = s(bool,X113) | s(bool,X114) = s(bool,'const.combin.K_2'(s(bool,X117),s(bool,X114))) | s(bool,X117) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14853])).
fof(f14853,plain,(
  ( ! [X116,X114,X117,X115,X113] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,X114),s(X115,X116))) | s(bool,'T_0') = s(bool,X113) | s(bool,X114) = s(bool,'const.combin.K_2'(s(bool,X117),s(bool,X114))) | s(bool,X117) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X113)) ) | $spl35),
  inference(superposition,[],[f2736,f10477])).
fof(f15206,plain,(
  ( ! [X111,X109,X112,X110,X108] : (s(bool,X109) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X110,X111))) | s(bool,'T_0') = s(bool,X108) | s(bool,X109) = s(bool,'const.combin.K_2'(s(bool,X112),s(bool,X109))) | s(bool,X112) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14852])).
fof(f14852,plain,(
  ( ! [X111,X109,X112,X110,X108] : (s(bool,X109) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X110,X111))) | s(bool,'T_0') = s(bool,X108) | s(bool,X109) = s(bool,'const.combin.K_2'(s(bool,X112),s(bool,X109))) | s(bool,X112) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X108)) ) | $spl35),
  inference(superposition,[],[f2708,f10477])).
fof(f15854,plain,(
  ( ! [X103,X101,X107,X102,X104] : (s(bool,X102) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X103,X104))) | s(bool,X102) = s(bool,'const.combin.K_2'(s(bool,X107),s(bool,X102))) | s(bool,X107) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X101)) ) | $spl35),
  inference(subsumption_resolution,[],[f14851,f2736])).
fof(f14851,plain,(
  ( ! [X103,X101,X107,X105,X102,X106,X104] : (s(bool,X102) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X103,X104))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X101),s(X105,X106))) | s(bool,X102) = s(bool,'const.combin.K_2'(s(bool,X107),s(bool,X102))) | s(bool,X107) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X101)) ) | $spl35),
  inference(superposition,[],[f2175,f10477])).
fof(f15853,plain,(
  ( ! [X97,X95,X100,X96] : (s(bool,'F_0') = s(bool,X100) | s(bool,X95) = s(bool,'const.combin.K_2'(s(bool,X100),s(bool,X95))) | s(bool,X95) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X96,X97)))) ) | $spl88),
  inference(cnf_transformation,[],[f15853_D])).
fof(f15853_D,plain,(
  ( ! [X97,X95,X100,X96] : (s(bool,'F_0') = s(bool,X100) | s(bool,X95) = s(bool,'const.combin.K_2'(s(bool,X100),s(bool,X95))) | s(bool,X95) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X96,X97)))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f15851,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (s(bool,'F_0') = s(bool,X100) | s(bool,X95) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X96,X97))) | s(bool,'T_0') = s(bool,happ(s(fun(X98,bool),'const.combin.K_1'(s(bool,X94))),s(X98,X99))) | s(bool,X95) = s(bool,'const.combin.K_2'(s(bool,X100),s(bool,X95)))) ) | ($spl17 | $spl35 | $spl55)),
  inference(forward_demodulation,[],[f15850,f9433])).
fof(f15849,plain,(
  ( ! [X90,X93] : (s(bool,'T_0') != s(bool,X90) | s(bool,X93) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X90) = s(bool,'const.combin.K_2'(s(bool,X93),s(bool,X90)))) ) | $spl84),
  inference(cnf_transformation,[],[f15849_D])).
fof(f15849_D,plain,(
  ( ! [X90,X93] : (s(bool,'T_0') != s(bool,X90) | s(bool,X93) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X90) = s(bool,'const.combin.K_2'(s(bool,X93),s(bool,X90)))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f15848,plain,(
  ( ! [X90,X93,X89] : (s(bool,'T_0') != s(bool,X90) | s(bool,X90) = s(bool,'const.combin.K_2'(s(bool,X93),s(bool,X90))) | s(bool,X93) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X89)) ) | ($spl17 | $spl35)),
  inference(subsumption_resolution,[],[f14849,f2736])).
fof(f14849,plain,(
  ( ! [X92,X90,X93,X91,X89] : (s(bool,'T_0') != s(bool,X90) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X89),s(X91,X92))) | s(bool,X90) = s(bool,'const.combin.K_2'(s(bool,X93),s(bool,X90))) | s(bool,X93) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X89)) ) | ($spl17 | $spl35)),
  inference(superposition,[],[f2071,f10477])).
fof(f15207,plain,(
  ( ! [X88,X87,X85,X86,X84] : (s(bool,X85) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X86,X87))) | s(bool,'T_0') = s(bool,X84) | s(bool,X85) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X85))) | s(bool,X88) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14848])).
fof(f14848,plain,(
  ( ! [X88,X87,X85,X86,X84] : (s(bool,X85) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X86,X87))) | s(bool,'T_0') = s(bool,X84) | s(bool,X85) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X85))) | s(bool,X88) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X84)) ) | $spl35),
  inference(superposition,[],[f1890,f10477])).
fof(f15846,plain,(
  ( ! [X70,X68,X71,X69] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X68),s(X69,X70))) | s(bool,X71) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X68) = s(bool,'const.combin.K_2'(s(bool,X71),s(bool,X68)))) ) | $spl80),
  inference(cnf_transformation,[],[f15846_D])).
fof(f15846_D,plain,(
  ( ! [X70,X68,X71,X69] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X68),s(X69,X70))) | s(bool,X71) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X68) = s(bool,'const.combin.K_2'(s(bool,X71),s(bool,X68)))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f15209,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X68),s(X69,X70))) | s(bool,'T_0') = s(bool,X67) | s(bool,X68) = s(bool,'const.combin.K_2'(s(bool,X71),s(bool,X68))) | s(bool,X71) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14845])).
fof(f14845,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X68),s(X69,X70))) | s(bool,'T_0') = s(bool,X67) | s(bool,X68) = s(bool,'const.combin.K_2'(s(bool,X71),s(bool,X68))) | s(bool,X71) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X67)) ) | $spl35),
  inference(superposition,[],[f727,f10477])).
fof(f15844,plain,(
  ( ! [X26,X25] : (s(bool,'F_0') = s(bool,X26) | ~p(s(bool,X25)) | s(bool,X25) = s(bool,X26)) ) | $spl78),
  inference(cnf_transformation,[],[f15844_D])).
fof(f15844_D,plain,(
  ( ! [X26,X25] : (s(bool,'F_0') = s(bool,X26) | ~p(s(bool,X25)) | s(bool,X25) = s(bool,X26)) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f15843,plain,(
  ( ! [X26,X24,X25] : (s(bool,'F_0') = s(bool,X26) | s(bool,X25) = s(bool,X26) | ~p(s(bool,X25)) | s(bool,'T_0') = s(bool,X24)) ) | ($spl35 | $spl55)),
  inference(forward_demodulation,[],[f15842,f9433])).
fof(f15762,plain,(
  ( ! [X125,X126] : (s(bool,'T_0') = s(bool,happ(s(fun(X125,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X125,X126)))) ) | $spl76),
  inference(cnf_transformation,[],[f15762_D])).
fof(f15762_D,plain,(
  ( ! [X125,X126] : (s(bool,'T_0') = s(bool,happ(s(fun(X125,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X125,X126)))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f15760,plain,(
  ( ! [X127,X125,X123,X128,X126,X124,X122] : (s(bool,'T_0') = s(bool,happ(s(fun(X125,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X125,X126))) | s(bool,X122) != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X123,X124))) | s(bool,X127) = s(bool,'const.combin.K_2'(s(bool,X122),s(bool,X127))) | s(bool,X127) = s(bool,X128) | s(bool,'T_0') = s(bool,X128)) ) | ($spl35 | $spl55)),
  inference(forward_demodulation,[],[f14681,f9433])).
fof(f15261,plain,(
  ( ! [X132,X130,X133,X131,X129] : (s(bool,'T_0') = s(bool,X131) | s(bool,X132) = s(bool,'const.combin.K_2'(s(bool,X133),s(bool,X132))) | s(bool,X133) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X132) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X129,X130)))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14488])).
fof(f14488,plain,(
  ( ! [X132,X130,X133,X131,X129] : (s(bool,'T_0') = s(bool,X131) | s(bool,X132) = s(bool,'const.combin.K_2'(s(bool,X133),s(bool,X132))) | s(bool,X133) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X132) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X129,X130))) | s(bool,'T_0') = s(bool,X131)) ) | $spl35),
  inference(superposition,[],[f10477,f2708])).
fof(f15370,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1)))) ) | $spl66),
  inference(cnf_transformation,[],[f15370_D])).
fof(f15370_D,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1)))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f15264,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') = s(bool,X96) | s(bool,X97) = s(bool,'const.combin.K_2'(s(bool,X98),s(bool,X97))) | s(bool,X98) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X97) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14483])).
fof(f14483,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') = s(bool,X96) | s(bool,X97) = s(bool,'const.combin.K_2'(s(bool,X98),s(bool,X97))) | s(bool,X98) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X97) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X96)) ) | $spl35),
  inference(superposition,[],[f10477,f8185])).
fof(f15570,plain,(
  ( ! [X92,X93,X91] : (s(bool,'T_0') = s(bool,X91) | s(bool,X92) = s(bool,'const.combin.K_2'(s(bool,X93),s(bool,X92))) | s(bool,X93) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X92) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(subsumption_resolution,[],[f14482,f2736])).
fof(f14482,plain,(
  ( ! [X94,X92,X95,X93,X91] : (s(bool,'T_0') = s(bool,X91) | s(bool,X92) = s(bool,'const.combin.K_2'(s(bool,X93),s(bool,X92))) | s(bool,X93) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X92) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X91),s(X94,X95)))) ) | $spl35),
  inference(superposition,[],[f10477,f8184])).
fof(f15569,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f15568])).
fof(f15568,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X0)) ) | $spl35),
  inference(condensation,[],[f15567])).
fof(f15567,plain,(
  ( ! [X90,X88,X87,X89,X86] : (s(bool,'T_0') = s(bool,X86) | s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,X88) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X87) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X89) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) ) | $spl35),
  inference(subsumption_resolution,[],[f14481,f3199])).
fof(f14481,plain,(
  ( ! [X90,X88,X87,X89,X86] : (s(bool,'T_0') = s(bool,X86) | s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,X88) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X87) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X89) = s(bool,'const.combin.K_2'(s(bool,X86),s(bool,X89))) | s(bool,X89) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) ) | $spl35),
  inference(superposition,[],[f10477,f10477])).
fof(f15405,plain,(
  ( ! [X88,X87,X85,X84] : (s(bool,X84) = s(bool,'const.combin.K_2'(s(bool,X85),s(bool,X84))) | s(bool,X84) = s(bool,X87) | s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,X88) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X85) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl68),
  inference(cnf_transformation,[],[f15405_D])).
fof(f15405_D,plain,(
  ( ! [X88,X87,X85,X84] : (s(bool,X84) = s(bool,'const.combin.K_2'(s(bool,X85),s(bool,X84))) | s(bool,X84) = s(bool,X87) | s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,X88) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X85) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f15267,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.combin.K_2'(s(bool,X62),s(bool,X61))) | s(bool,X62) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X59) = s(bool,X61) | s(bool,X59) = s(bool,'const.combin.K_2'(s(bool,X63),s(bool,X59))) | s(bool,X63) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14475])).
fof(f14475,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s(bool,'T_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.combin.K_2'(s(bool,X62),s(bool,X61))) | s(bool,X62) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X59) = s(bool,X61) | s(bool,X59) = s(bool,'const.combin.K_2'(s(bool,X63),s(bool,X59))) | s(bool,X63) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X60)) ) | $spl35),
  inference(superposition,[],[f10477,f10477])).
fof(f15278,plain,(
  ( ! [X80,X83,X81,X79,X82] : (s(bool,X80) = s(bool,X81) | s(bool,X81) = s(bool,'const.combin.K_2'(s(bool,X82),s(bool,X81))) | s(bool,X82) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X79) | s(bool,X80) = s(bool,'const.combin.K_2'(s(bool,X83),s(bool,X80))) | s(bool,X83) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14424])).
fof(f14424,plain,(
  ( ! [X80,X83,X81,X79,X82] : (s(bool,X80) = s(bool,X81) | s(bool,X81) = s(bool,'const.combin.K_2'(s(bool,X82),s(bool,X81))) | s(bool,X82) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X79) | s(bool,X80) = s(bool,'const.combin.K_2'(s(bool,X83),s(bool,X80))) | s(bool,X83) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X79)) ) | $spl35),
  inference(superposition,[],[f10477,f10477])).
fof(f15549,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f15548])).
fof(f15548,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X0)) ) | $spl35),
  inference(condensation,[],[f15547])).
fof(f15547,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s(bool,X65) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X65) = s(bool,'const.combin.K_2'(s(bool,X66),s(bool,X65))) | s(bool,X66) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X64) | s(bool,X67) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) ) | $spl35),
  inference(subsumption_resolution,[],[f14421,f3199])).
fof(f14421,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s(bool,X65) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X65) = s(bool,'const.combin.K_2'(s(bool,X66),s(bool,X65))) | s(bool,X66) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X64) | s(bool,X67) = s(bool,'const.combin.K_2'(s(bool,X64),s(bool,X67))) | s(bool,X67) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) ) | $spl35),
  inference(superposition,[],[f10477,f10477])).
fof(f15546,plain,(
  ( ! [X61,X62,X63] : (s(bool,'F_0') = s(bool,X62) | s(bool,X62) = s(bool,'const.combin.K_2'(s(bool,X63),s(bool,X62))) | s(bool,X63) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X61)) ) | ($spl35 | $spl55)),
  inference(forward_demodulation,[],[f15279,f9159])).
fof(f15279,plain,(
  ( ! [X61,X62,X63] : (s(bool,X62) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X62) = s(bool,'const.combin.K_2'(s(bool,X63),s(bool,X62))) | s(bool,X63) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X61)) ) | ($spl35 | $spl55)),
  inference(duplicate_literal_removal,[],[f14420])).
fof(f14420,plain,(
  ( ! [X61,X62,X63] : (s(bool,X62) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X62) = s(bool,'const.combin.K_2'(s(bool,X63),s(bool,X62))) | s(bool,X63) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X61) | s(bool,'T_0') = s(bool,X61)) ) | ($spl35 | $spl55)),
  inference(superposition,[],[f10477,f9243])).
fof(f9243,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X3)) ) | $spl55),
  inference(trivial_inequality_removal,[],[f9237])).
fof(f9237,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X3) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X3)) ) | $spl55),
  inference(superposition,[],[f8669,f232])).
fof(f15545,plain,(
  ( ! [X57,X58,X56] : (s(bool,'F_0') = s(bool,X57) | s(bool,X57) = s(bool,'const.combin.K_2'(s(bool,X58),s(bool,X57))) | s(bool,X58) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X56)) ) | ($spl35 | $spl55)),
  inference(forward_demodulation,[],[f15544,f9159])).
fof(f15544,plain,(
  ( ! [X57,X58,X56] : (s(bool,X57) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X57) = s(bool,'const.combin.K_2'(s(bool,X58),s(bool,X57))) | s(bool,X58) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X56)) ) | ($spl35 | $spl55)),
  inference(subsumption_resolution,[],[f14419,f2736])).
fof(f14419,plain,(
  ( ! [X59,X57,X60,X58,X56] : (s(bool,X57) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X57) = s(bool,'const.combin.K_2'(s(bool,X58),s(bool,X57))) | s(bool,X58) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X56) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X56),s(X59,X60)))) ) | ($spl35 | $spl55)),
  inference(superposition,[],[f10477,f9242])).
fof(f9242,plain,(
  ( ! [X12,X10,X11] : (s(bool,X10) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X11,X12)))) ) | $spl55),
  inference(trivial_inequality_removal,[],[f9240])).
fof(f9240,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X10) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X11,X12)))) ) | $spl55),
  inference(superposition,[],[f8669,f334])).
fof(f15280,plain,(
  ( ! [X54,X55,X53] : (s(bool,X54) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X54) = s(bool,'const.combin.K_2'(s(bool,X55),s(bool,X54))) | s(bool,X55) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X53)) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14418])).
fof(f14418,plain,(
  ( ! [X54,X55,X53] : (s(bool,X54) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X54) = s(bool,'const.combin.K_2'(s(bool,X55),s(bool,X54))) | s(bool,X55) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) ) | $spl35),
  inference(superposition,[],[f10477,f8185])).
fof(f15543,plain,(
  ( ! [X50,X48,X49] : (s(bool,X49) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X49) = s(bool,'const.combin.K_2'(s(bool,X50),s(bool,X49))) | s(bool,X50) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X48)) ) | $spl35),
  inference(subsumption_resolution,[],[f14417,f2736])).
fof(f14417,plain,(
  ( ! [X52,X50,X48,X51,X49] : (s(bool,X49) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X49) = s(bool,'const.combin.K_2'(s(bool,X50),s(bool,X49))) | s(bool,X50) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X48) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X48),s(X51,X52)))) ) | $spl35),
  inference(superposition,[],[f10477,f8184])).
fof(f15281,plain,(
  ( ! [X47,X45,X43,X46,X44] : (s(bool,X46) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X44,X45))) | s(bool,X46) = s(bool,'const.combin.K_2'(s(bool,X47),s(bool,X46))) | s(bool,X47) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X43)) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14416])).
fof(f14416,plain,(
  ( ! [X47,X45,X43,X46,X44] : (s(bool,X46) = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X44,X45))) | s(bool,X46) = s(bool,'const.combin.K_2'(s(bool,X47),s(bool,X46))) | s(bool,X47) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X43) | s(bool,'T_0') = s(bool,X43)) ) | $spl35),
  inference(superposition,[],[f10477,f2708])).
fof(f15290,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X0)) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14407])).
fof(f14407,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl35),
  inference(superposition,[],[f10477,f146])).
fof(f15538,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(condensation,[],[f15537])).
fof(f15537,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X2) = s(bool,'const.combin.K_2'(s(bool,X3),s(bool,X2))) | s(bool,X0) = s(bool,X1) | s(bool,X3) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(forward_demodulation,[],[f15292,f184])).
fof(f15292,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X0))) = s(bool,'const.combin.K_2'(s(bool,X3),s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X0))))) | s(bool,X3) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f15291])).
fof(f15291,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X0))) = s(bool,'const.combin.K_2'(s(bool,X3),s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X0))))) | s(bool,X3) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X1)) ) | $spl35),
  inference(condensation,[],[f14403])).
fof(f14403,plain,(
  ( ! [X167,X171,X169,X170,X168] : (s(bool,X168) = s(bool,X169) | s(bool,'const.combin.K_2'(s(bool,X167),s(bool,X168))) = s(bool,'const.combin.K_2'(s(bool,X170),s(bool,'const.combin.K_2'(s(bool,X167),s(bool,X168))))) | s(bool,X170) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X169) | s(bool,X167) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X168) = s(bool,X171) | s(bool,'T_0') = s(bool,X171)) ) | $spl35),
  inference(superposition,[],[f10477,f10477])).
fof(f15536,plain,(
  ( ! [X165,X166,X162] : (s(bool,'F_0') = s(bool,X162) | s(bool,X162) = s(bool,'const.combin.K_2'(s(bool,X166),s(bool,X162))) | s(bool,'T_0') = s(bool,X165) | s(bool,X166) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | ($spl35 | $spl55)),
  inference(forward_demodulation,[],[f15535,f9159])).
fof(f15535,plain,(
  ( ! [X165,X166,X162] : (s(bool,X162) = s(bool,'const.combin.K_2'(s(bool,X166),s(bool,X162))) | s(bool,'T_0') = s(bool,X165) | s(bool,X166) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X162) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | ($spl35 | $spl55)),
  inference(forward_demodulation,[],[f15293,f184])).
fof(f15293,plain,(
  ( ! [X165,X163,X166,X164,X162] : (s(bool,'T_0') = s(bool,X165) | s(bool,'const.combin.K_2'(s(bool,X162),s(X163,X164))) = s(bool,'const.combin.K_2'(s(bool,X166),s(bool,'const.combin.K_2'(s(bool,X162),s(X163,X164))))) | s(bool,X166) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X162) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | ($spl35 | $spl55)),
  inference(duplicate_literal_removal,[],[f14402])).
fof(f14402,plain,(
  ( ! [X165,X163,X166,X164,X162] : (s(bool,'T_0') = s(bool,X165) | s(bool,'const.combin.K_2'(s(bool,X162),s(X163,X164))) = s(bool,'const.combin.K_2'(s(bool,X166),s(bool,'const.combin.K_2'(s(bool,X162),s(X163,X164))))) | s(bool,X166) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X165) | s(bool,X162) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | ($spl35 | $spl55)),
  inference(superposition,[],[f10477,f9242])).
fof(f15534,plain,(
  ( ! [X161,X157,X160] : (s(bool,X157) = s(bool,'const.combin.K_2'(s(bool,X161),s(bool,X157))) | s(bool,'T_0') = s(bool,X160) | s(bool,X161) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X157) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(forward_demodulation,[],[f15294,f184])).
fof(f15294,plain,(
  ( ! [X158,X161,X159,X157,X160] : (s(bool,'T_0') = s(bool,X160) | s(bool,'const.combin.K_2'(s(bool,X157),s(X158,X159))) = s(bool,'const.combin.K_2'(s(bool,X161),s(bool,'const.combin.K_2'(s(bool,X157),s(X158,X159))))) | s(bool,X161) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X157) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14401])).
fof(f14401,plain,(
  ( ! [X158,X161,X159,X157,X160] : (s(bool,'T_0') = s(bool,X160) | s(bool,'const.combin.K_2'(s(bool,X157),s(X158,X159))) = s(bool,'const.combin.K_2'(s(bool,X161),s(bool,'const.combin.K_2'(s(bool,X157),s(X158,X159))))) | s(bool,X161) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X160) | s(bool,X157) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(superposition,[],[f10477,f8184])).
fof(f15532,plain,(
  ( ! [X138,X135,X139] : (s(bool,X135) = s(bool,'const.combin.K_2'(s(bool,X139),s(bool,X135))) | s(bool,'T_0') = s(bool,X138) | s(bool,X139) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'F_0') = s(bool,X135)) ) | $spl35),
  inference(forward_demodulation,[],[f15297,f184])).
fof(f15297,plain,(
  ( ! [X138,X136,X135,X139,X137] : (s(bool,'T_0') = s(bool,X138) | s(bool,'const.combin.K_2'(s(bool,X135),s(X136,X137))) = s(bool,'const.combin.K_2'(s(bool,X139),s(bool,'const.combin.K_2'(s(bool,X135),s(X136,X137))))) | s(bool,X139) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'F_0') = s(bool,X135)) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14397])).
fof(f14397,plain,(
  ( ! [X138,X136,X135,X139,X137] : (s(bool,'T_0') = s(bool,X138) | s(bool,'const.combin.K_2'(s(bool,X135),s(X136,X137))) = s(bool,'const.combin.K_2'(s(bool,X139),s(bool,'const.combin.K_2'(s(bool,X135),s(X136,X137))))) | s(bool,X139) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X138) | s(bool,'F_0') = s(bool,X135)) ) | $spl35),
  inference(superposition,[],[f10477,f234])).
fof(f15308,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,'T_0') = s(bool,X70) | s(bool,X69) = s(bool,'const.combin.K_2'(s(bool,X71),s(bool,X69))) | s(bool,X71) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X72) = s(bool,'const.combin.K_2'(s(bool,X73),s(bool,X72))) | s(bool,X73) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X69) = s(bool,X72)) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14380])).
fof(f14380,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,'T_0') = s(bool,X70) | s(bool,X69) = s(bool,'const.combin.K_2'(s(bool,X71),s(bool,X69))) | s(bool,X71) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X70) | s(bool,X72) = s(bool,'const.combin.K_2'(s(bool,X73),s(bool,X72))) | s(bool,X73) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X69) = s(bool,X72)) ) | $spl35),
  inference(superposition,[],[f10477,f10477])).
fof(f15520,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f15519])).
fof(f15519,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(condensation,[],[f15518])).
fof(f15518,plain,(
  ( ! [X92,X90,X88,X91,X89] : (s(bool,'T_0') = s(bool,X88) | s(bool,X89) = s(bool,X90) | s(bool,'T_0') = s(bool,X90) | s(bool,X91) = s(bool,'const.combin.K_2'(s(bool,X92),s(bool,X91))) | s(bool,X92) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X91) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(subsumption_resolution,[],[f14362,f3199])).
fof(f14362,plain,(
  ( ! [X92,X90,X88,X91,X89] : (s(bool,'T_0') = s(bool,X88) | s(bool,X89) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X89))) | s(bool,X89) = s(bool,X90) | s(bool,'T_0') = s(bool,X90) | s(bool,X91) = s(bool,'const.combin.K_2'(s(bool,X92),s(bool,X91))) | s(bool,X92) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X91) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(superposition,[],[f10477,f10477])).
fof(f15484,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(condensation,[],[f15483])).
fof(f15483,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X3)) ) | $spl35),
  inference(condensation,[],[f15482])).
fof(f15482,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,X70) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X71) = s(bool,X72) | s(bool,'T_0') = s(bool,X72) | s(bool,X70) = s(bool,'const.combin.K_2'(s(bool,X73),s(bool,X70))) | s(bool,X73) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X69)) ) | $spl35),
  inference(subsumption_resolution,[],[f14330,f3199])).
fof(f14330,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,X70) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X71) = s(bool,'const.combin.K_2'(s(bool,X69),s(bool,X71))) | s(bool,X71) = s(bool,X72) | s(bool,'T_0') = s(bool,X72) | s(bool,X70) = s(bool,'const.combin.K_2'(s(bool,X73),s(bool,X70))) | s(bool,X73) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X69)) ) | $spl35),
  inference(superposition,[],[f10477,f10477])).
fof(f15451,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,'F_0') = s(bool,X1) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | ($spl35 | $spl55)),
  inference(condensation,[],[f15450])).
fof(f15450,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X2) = s(bool,'const.combin.K_2'(s(bool,X3),s(bool,X2))) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,X3) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | ($spl35 | $spl55)),
  inference(forward_demodulation,[],[f15449,f184])).
fof(f15449,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X0))) = s(bool,'const.combin.K_2'(s(bool,X3),s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X0))))) | s(bool,X3) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | ($spl35 | $spl55)),
  inference(forward_demodulation,[],[f15316,f9433])).
fof(f15316,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X1) | s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X0))) = s(bool,'const.combin.K_2'(s(bool,X3),s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X0))))) | s(bool,X3) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(duplicate_literal_removal,[],[f15315])).
fof(f15315,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X1) | s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X0))) = s(bool,'const.combin.K_2'(s(bool,X3),s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X0))))) | s(bool,X3) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X1)) ) | $spl35),
  inference(condensation,[],[f14313])).
fof(f14313,plain,(
  ( ! [X103,X101,X99,X102,X100] : (s(bool,X100) = s(bool,X101) | s(bool,X99) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X100) = s(bool,X102) | s(bool,'T_0') = s(bool,X102) | s(bool,'const.combin.K_2'(s(bool,X99),s(bool,X100))) = s(bool,'const.combin.K_2'(s(bool,X103),s(bool,'const.combin.K_2'(s(bool,X99),s(bool,X100))))) | s(bool,X103) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X101)) ) | $spl35),
  inference(superposition,[],[f10477,f10477])).
fof(f15337,plain,(
  ( ! [X88,X87,X85,X86,X84] : (s(bool,X84) = s(bool,'const.combin.K_2'(s(bool,X85),s(bool,X84))) | s(bool,X85) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X86) | s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,X88) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X84) = s(bool,X87)) ) | $spl35),
  inference(duplicate_literal_removal,[],[f14266])).
fof(f14266,plain,(
  ( ! [X88,X87,X85,X86,X84] : (s(bool,X84) = s(bool,'const.combin.K_2'(s(bool,X85),s(bool,X84))) | s(bool,X85) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X86) | s(bool,'T_0') = s(bool,X86) | s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,X88) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X84) = s(bool,X87)) ) | $spl35),
  inference(superposition,[],[f10477,f10477])).
fof(f15369,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(condensation,[],[f15368])).
fof(f15368,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X1) = s(bool,'const.combin.K_2'(s(bool,X2),s(bool,X1))) | s(bool,X2) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X3)) ) | $spl35),
  inference(condensation,[],[f15367])).
fof(f15367,plain,(
  ( ! [X78,X76,X74,X77,X75] : (s(bool,X74) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X76) = s(bool,X77) | s(bool,'T_0') = s(bool,X77) | s(bool,X74) = s(bool,'const.combin.K_2'(s(bool,X78),s(bool,X74))) | s(bool,X78) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X75)) ) | $spl35),
  inference(subsumption_resolution,[],[f14222,f3199])).
fof(f14222,plain,(
  ( ! [X78,X76,X74,X77,X75] : (s(bool,X76) = s(bool,'const.combin.K_2'(s(bool,X75),s(bool,X76))) | s(bool,X74) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X76) = s(bool,X77) | s(bool,'T_0') = s(bool,X77) | s(bool,X74) = s(bool,'const.combin.K_2'(s(bool,X78),s(bool,X74))) | s(bool,X78) = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X75)) ) | $spl35),
  inference(superposition,[],[f10477,f10477])).
fof(f14195,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl10 | $spl13)),
  inference(subsumption_resolution,[],[f206,f14006])).
fof(f14006,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14005,f10145])).
fof(f14005,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK13) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14004,f10145])).
fof(f14004,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14003,f168])).
fof(f14003,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14002,f168])).
fof(f14002,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14001,f166])).
fof(f14001,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14000,f166])).
fof(f14000,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13999,f188])).
fof(f13999,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13998,f188])).
fof(f13998,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13997,f165])).
fof(f13997,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13996,f165])).
fof(f13996,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13995,f148])).
fof(f13995,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13862,f148])).
fof(f13862,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(unit_resulting_resolution,[],[f13415,f182])).
fof(f13415,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13414,f195])).
fof(f13414,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13413,f199])).
fof(f13413,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl10)),
  inference(forward_demodulation,[],[f193,f203])).
fof(f14135,plain,(
  $false | ($spl0 | $spl2 | $spl5 | $spl6 | $spl10)),
  inference(subsumption_resolution,[],[f14134,f198])).
fof(f14134,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14133,f10883])).
fof(f14133,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14132,f10883])).
fof(f14132,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14131,f174])).
fof(f14131,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14130,f174])).
fof(f14130,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14129,f10877])).
fof(f14129,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14128,f10877])).
fof(f14128,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14127,f174])).
fof(f14127,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14126,f174])).
fof(f14126,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14125,f10878])).
fof(f14125,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14124,f10878])).
fof(f14124,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14123,f174])).
fof(f14123,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14122,f174])).
fof(f14122,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14121,f10879])).
fof(f14121,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14120,f10879])).
fof(f14120,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14119,f174])).
fof(f14119,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14118,f174])).
fof(f14118,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14117,f10880])).
fof(f14117,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14116,f10880])).
fof(f14116,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13870,f152])).
fof(f13870,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(superposition,[],[f152,f13415])).
fof(f14053,plain,(
  $false | ($spl0 | $spl2 | $spl5 | $spl6 | $spl10)),
  inference(subsumption_resolution,[],[f14052,f198])).
fof(f14052,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14051,f10883])).
fof(f14051,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14050,f10883])).
fof(f14050,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14049,f174])).
fof(f14049,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14048,f174])).
fof(f14048,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14047,f10877])).
fof(f14047,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14046,f10877])).
fof(f14046,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14045,f174])).
fof(f14045,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14044,f174])).
fof(f14044,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14043,f10878])).
fof(f14043,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14042,f10878])).
fof(f14042,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14041,f174])).
fof(f14041,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14040,f174])).
fof(f14040,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14039,f10879])).
fof(f14039,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14038,f10879])).
fof(f14038,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14037,f174])).
fof(f14037,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14036,f174])).
fof(f14036,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14035,f10880])).
fof(f14035,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14034,f10880])).
fof(f14034,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f14033,f152])).
fof(f14033,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13858,f152])).
fof(f13858,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(unit_resulting_resolution,[],[f13415,f178])).
fof(f13977,plain,(
  $false | ($spl0 | $spl2 | $spl5 | $spl6 | $spl10)),
  inference(subsumption_resolution,[],[f13976,f198])).
fof(f13976,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13975,f10883])).
fof(f13975,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13974,f10883])).
fof(f13974,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13973,f174])).
fof(f13973,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13972,f174])).
fof(f13972,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13971,f10877])).
fof(f13971,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13970,f10877])).
fof(f13970,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13969,f174])).
fof(f13969,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13968,f174])).
fof(f13968,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13967,f10878])).
fof(f13967,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13966,f10878])).
fof(f13966,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13965,f174])).
fof(f13965,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13964,f174])).
fof(f13964,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13963,f10879])).
fof(f13963,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13962,f10879])).
fof(f13962,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13961,f174])).
fof(f13961,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13960,f174])).
fof(f13960,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13959,f10880])).
fof(f13959,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13958,f10880])).
fof(f13958,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13957,f152])).
fof(f13957,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f13864,f152])).
fof(f13864,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10)),
  inference(unit_resulting_resolution,[],[f13415,f178])).
fof(f13412,plain,(
  $false | ($spl0 | $spl2 | $spl5 | $spl6 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f198,f13243])).
fof(f13243,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13242,f10883])).
fof(f13242,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13241,f10883])).
fof(f13241,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13240,f174])).
fof(f13240,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13239,f174])).
fof(f13239,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13238,f10877])).
fof(f13238,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13237,f10877])).
fof(f13237,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13236,f174])).
fof(f13236,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13235,f174])).
fof(f13235,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13234,f10878])).
fof(f13234,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13233,f10878])).
fof(f13233,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13232,f174])).
fof(f13232,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13231,f174])).
fof(f13231,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13230,f10879])).
fof(f13230,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13229,f10879])).
fof(f13229,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13228,f174])).
fof(f13228,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13227,f174])).
fof(f13227,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13226,f10880])).
fof(f13226,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),happ(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13225,f10880])).
fof(f13225,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13224,f152])).
fof(f13224,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13140,f152])).
fof(f13140,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'const.modSem.state_refs_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(unit_resulting_resolution,[],[f12410,f178])).
fof(f12410,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f217,f195])).
fof(f217,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f216,f199])).
fof(f216,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f215,f203])).
fof(f215,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl12)),
  inference(forward_demodulation,[],[f193,f205])).
fof(f13358,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl9 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f13357,f202])).
fof(f13357,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13356,f11535])).
fof(f13356,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13355,f11535])).
fof(f13355,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13354,f175])).
fof(f13354,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13353,f175])).
fof(f13353,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13352,f11529])).
fof(f13352,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13351,f11529])).
fof(f13351,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13350,f175])).
fof(f13350,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13349,f175])).
fof(f13349,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13348,f11530])).
fof(f13348,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13347,f11530])).
fof(f13347,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13346,f187])).
fof(f13346,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13345,f187])).
fof(f13345,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13344,f164])).
fof(f13344,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13343,f164])).
fof(f13343,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13145,f153])).
fof(f13145,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(superposition,[],[f153,f12410])).
fof(f13320,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl9 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f13319,f202])).
fof(f13319,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13318,f11535])).
fof(f13318,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13317,f11535])).
fof(f13317,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13316,f175])).
fof(f13316,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13315,f175])).
fof(f13315,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13314,f11529])).
fof(f13314,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13313,f11529])).
fof(f13313,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13312,f175])).
fof(f13312,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13311,f175])).
fof(f13311,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13310,f11530])).
fof(f13310,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13309,f11530])).
fof(f13309,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13308,f187])).
fof(f13308,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13307,f187])).
fof(f13307,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13306,f164])).
fof(f13306,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13305,f164])).
fof(f13305,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13304,f153])).
fof(f13304,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13133,f153])).
fof(f13133,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(unit_resulting_resolution,[],[f12410,f180])).
fof(f13261,plain,(
  $false | ($spl0 | $spl2 | $spl6 | $spl9 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f13260,f202])).
fof(f13260,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13259,f11535])).
fof(f13259,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13258,f11535])).
fof(f13258,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13257,f175])).
fof(f13257,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13256,f175])).
fof(f13256,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13255,f11529])).
fof(f13255,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13254,f11529])).
fof(f13254,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13253,f175])).
fof(f13253,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13252,f175])).
fof(f13252,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13251,f11530])).
fof(f13251,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13250,f11530])).
fof(f13250,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13249,f187])).
fof(f13249,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13248,f187])).
fof(f13248,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13247,f164])).
fof(f13247,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13246,f164])).
fof(f13246,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13245,f153])).
fof(f13245,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f13139,f153])).
fof(f13139,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl6 | $spl10 | $spl12)),
  inference(unit_resulting_resolution,[],[f12410,f180])).
fof(f12381,plain,(
  $false | ($spl0 | $spl2 | $spl4 | $spl6 | $spl9 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f12380,f202])).
fof(f12380,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12379,f11535])).
fof(f12379,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12378,f11535])).
fof(f12378,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12377,f175])).
fof(f12377,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12376,f175])).
fof(f12376,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12375,f11529])).
fof(f12375,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12374,f11529])).
fof(f12374,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12373,f175])).
fof(f12373,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12372,f175])).
fof(f12372,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12371,f11530])).
fof(f12371,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12370,f11530])).
fof(f12370,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12369,f187])).
fof(f12369,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12368,f187])).
fof(f12368,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12367,f164])).
fof(f12367,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12366,f164])).
fof(f12366,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12197,f153])).
fof(f12197,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(superposition,[],[f153,f219])).
fof(f219,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f218,f195])).
fof(f218,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f217,f197])).
fof(f12343,plain,(
  $false | ($spl0 | $spl2 | $spl4 | $spl6 | $spl9 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f12342,f202])).
fof(f12342,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12341,f11535])).
fof(f12341,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12340,f11535])).
fof(f12340,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12339,f175])).
fof(f12339,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12338,f175])).
fof(f12338,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12337,f11529])).
fof(f12337,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12336,f11529])).
fof(f12336,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12335,f175])).
fof(f12335,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12334,f175])).
fof(f12334,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12333,f11530])).
fof(f12333,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12332,f11530])).
fof(f12332,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12331,f187])).
fof(f12331,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12330,f187])).
fof(f12330,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12329,f164])).
fof(f12329,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12328,f164])).
fof(f12328,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12327,f153])).
fof(f12327,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12185,f153])).
fof(f12185,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(unit_resulting_resolution,[],[f219,f180])).
fof(f12297,plain,(
  $false | ($spl0 | $spl2 | $spl4 | $spl6 | $spl9 | $spl10 | $spl12)),
  inference(subsumption_resolution,[],[f12296,f202])).
fof(f12296,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12295,f11535])).
fof(f12295,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12294,f11535])).
fof(f12294,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12293,f175])).
fof(f12293,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12292,f175])).
fof(f12292,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12291,f11529])).
fof(f12291,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.bool.ARB_0'))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12290,f11529])).
fof(f12290,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12289,f175])).
fof(f12289,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12288,f175])).
fof(f12288,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12287,f11530])).
fof(f12287,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),happ(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12286,f11530])).
fof(f12286,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12285,f187])).
fof(f12285,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12284,f187])).
fof(f12284,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12283,f164])).
fof(f12283,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12282,f164])).
fof(f12282,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12281,f153])).
fof(f12281,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f12191,f153])).
fof(f12191,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) = s(fun('type.semanticPrimitives.tid_or_exn',bool),'const.modSem.state_defined_types_1'(s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))))) | ($spl0 | $spl2 | $spl4 | $spl6 | $spl10 | $spl12)),
  inference(unit_resulting_resolution,[],[f219,f180])).
fof(f9424,plain,(
  $false | ($spl55 | $spl60)),
  inference(subsumption_resolution,[],[f9423,f144])).
fof(f9423,plain,(
  ~p(s(bool,'T_0')) | ($spl55 | $spl60)),
  inference(forward_demodulation,[],[f9170,f9398])).
fof(f9398,plain,(
  ( ! [X11] : (s(bool,'T_0') = s(bool,X11)) ) | ($spl55 | $spl60)),
  inference(global_subsumption,[],[f143,f142,f141,f140,f139,f138,f137,f144,f146,f147,f148,f149,f150,f151,f152,f153,f154,f155,f156,f157,f158,f159,f160,f161,f162,f163,f164,f165,f166,f167,f168,f169,f170,f171,f172,f173,f174,f175,f176,f183,f182,f181,f180,f179,f178,f177,f184,f207,f186,f187,f188,f189,f190,f191,f192,f232,f235,f243,f334,f335,f347,f357,f358,f401,f690,f691,f692,f751,f2044,f1649,f1650,f1651,f1669,f1689,f1700,f1701,f1890,f1878,f2175,f2099,f2100,f2101,f2311,f2312,f2460,f2482,f2736,f2928,f3185,f3198,f3199,f4086,f4087,f4113,f4114,f4360,f4429,f4606,f4894,f4928,f4921,f6426,f6427,f6807,f7484,f7485,f7827,f7828,f7832,f7833,f145,f8672,f8669,f7831,f7845,f7844,f7843,f7840,f7839,f7856,f7855,f7853,f7852,f7838,f7826,f6882,f6881,f4461,f4460,f3420,f3419,f2991,f2777,f2708,f1815,f1814,f620,f234,f5503,f5152,f5151,f612,f300,f7846,f5896,f5895,f4386,f4297,f4296,f4207,f4203,f2711,f1816,f727,f709,f611,f299,f9354,f265,f404])).
fof(f9354,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X11,X12)))) ) | ($spl55 | $spl60)),
  inference(subsumption_resolution,[],[f9242,f8672])).
fof(f9170,plain,(
  ~p(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn'))))) | $spl55),
  inference(unit_resulting_resolution,[],[f8669,f235])).
fof(f9418,plain,(
  $false | ($spl55 | $spl60)),
  inference(subsumption_resolution,[],[f9417,f9398])).
fof(f9417,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | ($spl55 | $spl60)),
  inference(forward_demodulation,[],[f9183,f9398])).
fof(f9183,plain,(
  ( ! [X0,X1] : (s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1))) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl55),
  inference(unit_resulting_resolution,[],[f8669,f8669,f1878])).
fof(f9416,plain,(
  $false | ($spl55 | $spl60)),
  inference(subsumption_resolution,[],[f9415,f9398])).
fof(f9415,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | ($spl55 | $spl60)),
  inference(forward_demodulation,[],[f9185,f9398])).
fof(f9185,plain,(
  ( ! [X0,X1] : (s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1))) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl55),
  inference(unit_resulting_resolution,[],[f8669,f1890])).
fof(f9414,plain,(
  $false | ($spl55 | $spl60)),
  inference(subsumption_resolution,[],[f9186,f9398])).
fof(f9186,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))),s(X0,X1)))) ) | $spl55),
  inference(unit_resulting_resolution,[],[f8669,f2736])).
fof(f9402,plain,(
  $false | ($spl35 | $spl55 | $spl60)),
  inference(subsumption_resolution,[],[f8330,f9398])).
fof(f9401,plain,(
  $false | ($spl35 | $spl55 | $spl60)),
  inference(subsumption_resolution,[],[f9400,f144])).
fof(f9400,plain,(
  ~p(s(bool,'T_0')) | ($spl35 | $spl55 | $spl60)),
  inference(forward_demodulation,[],[f8324,f9398])).
fof(f9395,plain,(
  $false | ($spl35 | $spl55 | $spl56)),
  inference(subsumption_resolution,[],[f9394,f144])).
fof(f9394,plain,(
  ~p(s(bool,'T_0')) | ($spl35 | $spl55 | $spl56)),
  inference(forward_demodulation,[],[f8324,f9355])).
fof(f9355,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,X3)) ) | ($spl55 | $spl56)),
  inference(subsumption_resolution,[],[f9243,f8670])).
fof(f9393,plain,(
  $false | ($spl35 | $spl55 | $spl56)),
  inference(subsumption_resolution,[],[f8330,f9355])).
fof(f9377,plain,(
  $false | ($spl55 | $spl56)),
  inference(subsumption_resolution,[],[f9186,f9355])).
fof(f9376,plain,(
  $false | ($spl55 | $spl56)),
  inference(subsumption_resolution,[],[f9375,f9355])).
fof(f9375,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | ($spl55 | $spl56)),
  inference(forward_demodulation,[],[f9185,f9355])).
fof(f9374,plain,(
  $false | ($spl55 | $spl56)),
  inference(subsumption_resolution,[],[f9373,f9355])).
fof(f9373,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | ($spl55 | $spl56)),
  inference(forward_demodulation,[],[f9183,f9355])).
fof(f9364,plain,(
  $false | ($spl55 | $spl56)),
  inference(subsumption_resolution,[],[f9363,f144])).
fof(f9363,plain,(
  ~p(s(bool,'T_0')) | ($spl55 | $spl56)),
  inference(forward_demodulation,[],[f9170,f9355])).
fof(f9346,plain,(
  $false | ($spl35 | $spl55 | $spl64)),
  inference(subsumption_resolution,[],[f9345,f144])).
fof(f9345,plain,(
  ~p(s(bool,'T_0')) | ($spl35 | $spl55 | $spl64)),
  inference(forward_demodulation,[],[f9170,f9249])).
fof(f9249,plain,(
  ( ! [X13] : (s(bool,'T_0') = s(bool,X13)) ) | ($spl35 | $spl55 | $spl64)),
  inference(subsumption_resolution,[],[f9248,f727])).
fof(f9248,plain,(
  ( ! [X14,X15,X13] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) | s(bool,'T_0') = s(bool,X13)) ) | ($spl35 | $spl55 | $spl64)),
  inference(backward_demodulation,[],[f9247,f8674])).
fof(f9247,plain,(
  s(bool,'F_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl35 | $spl55)),
  inference(forward_demodulation,[],[f9246,f207])).
fof(f9246,plain,(
  ( ! [X0,X3] : (s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X0,X3)))) ) | ($spl35 | $spl55)),
  inference(forward_demodulation,[],[f9210,f184])).
fof(f9210,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X1,X2))))),s(X0,X3)))) ) | ($spl35 | $spl55)),
  inference(unit_resulting_resolution,[],[f207,f8330,f8669,f4429])).
fof(f9335,plain,(
  $false | ($spl35 | $spl55 | $spl64)),
  inference(subsumption_resolution,[],[f9334,f9249])).
fof(f9334,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | ($spl35 | $spl55 | $spl64)),
  inference(forward_demodulation,[],[f9183,f9249])).
fof(f9333,plain,(
  $false | ($spl35 | $spl55 | $spl64)),
  inference(subsumption_resolution,[],[f9332,f9249])).
fof(f9332,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | ($spl35 | $spl55 | $spl64)),
  inference(forward_demodulation,[],[f9185,f9249])).
fof(f9331,plain,(
  $false | ($spl35 | $spl55 | $spl64)),
  inference(subsumption_resolution,[],[f9186,f9249])).
fof(f9312,plain,(
  $false | ($spl35 | $spl55 | $spl64)),
  inference(subsumption_resolution,[],[f9294,f9249])).
fof(f9294,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | ($spl35 | $spl55 | $spl64)),
  inference(backward_demodulation,[],[f9249,f8330])).
fof(f9311,plain,(
  $false | ($spl35 | $spl55 | $spl64)),
  inference(subsumption_resolution,[],[f9293,f144])).
fof(f9293,plain,(
  ~p(s(bool,'T_0')) | ($spl35 | $spl55 | $spl64)),
  inference(backward_demodulation,[],[f9249,f8324])).
fof(f8813,plain,(
  $false | ($spl9 | $spl17 | $spl51 | $spl55)),
  inference(subsumption_resolution,[],[f8799,f8769])).
fof(f8769,plain,(
  ( ! [X91] : (s(bool,'T_0') = s(bool,X91)) ) | ($spl17 | $spl51 | $spl55)),
  inference(global_subsumption,[],[f8768,f143,f142,f141,f140,f139,f138,f137,f144,f146,f147,f148,f149,f150,f151,f152,f153,f154,f155,f156,f157,f158,f159,f160,f161,f162,f163,f164,f165,f166,f167,f168,f169,f170,f171,f172,f173,f174,f175,f176,f183,f182,f181,f180,f179,f178,f177,f184,f207,f186,f187,f188,f189,f190,f191,f192,f232,f235,f243,f334,f335,f347,f357,f358,f401,f690,f691,f692,f751,f2044,f1649,f1650,f1651,f1669,f1689,f1700,f1701,f1890,f1878,f2175,f2099,f2100,f2101,f2311,f2312,f2460,f2482,f2736,f2928,f3185,f3198,f3199,f4086,f4087,f4113,f4114,f4360,f4429,f4606,f4894,f4928,f4921,f6426,f6427,f6807,f7484,f7485,f7827,f7828,f7832,f7833,f145,f7831,f4203,f2711,f7846,f7845,f7844,f7843,f7840,f7839,f7856,f7855,f7853,f7852,f7838,f7826,f6882,f6881,f5896,f5895,f5503,f5152,f5151,f4461,f4460,f4386,f4297,f4296,f4207,f3420,f3419,f2991,f2777,f2708,f1816,f1815,f1814,f727,f709,f620,f612,f611,f404,f300,f299,f265,f234,f8669,f8666,f8739])).
fof(f8739,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X7),s(X8,X9)))) ) | ($spl51 | $spl55)),
  inference(subsumption_resolution,[],[f8738,f8669])).
fof(f8738,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X7),s(X8,X9)))) ) | $spl51),
  inference(subsumption_resolution,[],[f8715,f234])).
fof(f8715,plain,(
  ( ! [X8,X7,X9] : (s(bool,'F_0') != s(bool,X7) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X7),s(X8,X9)))) ) | $spl51),
  inference(superposition,[],[f8666,f334])).
fof(f8768,plain,(
  ( ! [X88,X87,X91] : (s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,X87) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) ) | ($spl17 | $spl51 | $spl55)),
  inference(subsumption_resolution,[],[f8765,f246])).
fof(f8765,plain,(
  ( ! [X88,X87,X91] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,X87) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) ) | ($spl17 | $spl51 | $spl55)),
  inference(backward_demodulation,[],[f8761,f5152])).
fof(f8761,plain,(
  ( ! [X43,X44,X40] : (s(bool,'T_0') = s(bool,happ(s(fun(X43,bool),'const.combin.K_1'(s(bool,X40))),s(X43,X44)))) ) | ($spl17 | $spl51 | $spl55)),
  inference(subsumption_resolution,[],[f8741,f246])).
fof(f8741,plain,(
  ( ! [X43,X44,X40] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun(X43,bool),'const.combin.K_1'(s(bool,X40))),s(X43,X44)))) ) | ($spl51 | $spl55)),
  inference(backward_demodulation,[],[f8739,f611])).
fof(f8799,plain,(
  s(bool,'T_0') != s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl9 | $spl17 | $spl51 | $spl55)),
  inference(backward_demodulation,[],[f8769,f7825])).
fof(f7825,plain,(
  s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) != s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl9),
  inference(unit_resulting_resolution,[],[f202,f192])).
fof(f8812,plain,(
  $false | ($spl17 | $spl35 | $spl51 | $spl55)),
  inference(subsumption_resolution,[],[f8797,f8769])).
fof(f8797,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | ($spl17 | $spl35 | $spl51 | $spl55)),
  inference(backward_demodulation,[],[f8769,f8330])).
fof(f8811,plain,(
  $false | ($spl17 | $spl35 | $spl51 | $spl55)),
  inference(subsumption_resolution,[],[f8796,f144])).
fof(f8796,plain,(
  ~p(s(bool,'T_0')) | ($spl17 | $spl35 | $spl51 | $spl55)),
  inference(backward_demodulation,[],[f8769,f8324])).
fof(f8735,plain,(
  $false | ($spl51 | $spl55)),
  inference(subsumption_resolution,[],[f8734,f8669])).
fof(f8734,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl51),
  inference(condensation,[],[f8733])).
fof(f8733,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X2)) ) | $spl51),
  inference(subsumption_resolution,[],[f8712,f146])).
fof(f8712,plain,(
  ( ! [X2] : (s(bool,'F_0') != s(bool,X2) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X2)) ) | $spl51),
  inference(superposition,[],[f8666,f232])).
fof(f8732,plain,(
  $false | ($spl51 | $spl55)),
  inference(subsumption_resolution,[],[f8731,f8669])).
fof(f8731,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl51),
  inference(condensation,[],[f8730])).
fof(f8730,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl51),
  inference(subsumption_resolution,[],[f8711,f146])).
fof(f8711,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl51),
  inference(superposition,[],[f8666,f232])).
fof(f8729,plain,(
  $false | ($spl51 | $spl55)),
  inference(subsumption_resolution,[],[f8718,f8669])).
fof(f8718,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl51),
  inference(trivial_inequality_removal,[],[f8709])).
fof(f8709,plain,(
  s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl51),
  inference(superposition,[],[f8666,f146])).
fof(f8728,plain,(
  $false | ($spl51 | $spl55)),
  inference(subsumption_resolution,[],[f8693,f8669])).
fof(f8693,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl51),
  inference(unit_resulting_resolution,[],[f8666,f146])).
fof(f8727,plain,(
  $false | ($spl17 | $spl51 | $spl55)),
  inference(subsumption_resolution,[],[f8694,f8669])).
fof(f8694,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl17 | $spl51)),
  inference(unit_resulting_resolution,[],[f246,f8666,f232])).
fof(f8726,plain,(
  $false | ($spl35 | $spl51 | $spl55)),
  inference(subsumption_resolution,[],[f8695,f8669])).
fof(f8695,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl35 | $spl51)),
  inference(unit_resulting_resolution,[],[f8330,f8666,f334])).
fof(f8725,plain,(
  $false | ($spl35 | $spl51 | $spl55)),
  inference(subsumption_resolution,[],[f8696,f8669])).
fof(f8696,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl35 | $spl51)),
  inference(unit_resulting_resolution,[],[f8324,f8666,f401])).
fof(f8723,plain,(
  $false | ($spl35 | $spl51 | $spl55)),
  inference(subsumption_resolution,[],[f8698,f8669])).
fof(f8698,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl35 | $spl51)),
  inference(unit_resulting_resolution,[],[f7875,f8127,f8666,f4429])).
fof(f8722,plain,(
  $false | ($spl35 | $spl51 | $spl55)),
  inference(subsumption_resolution,[],[f8699,f8669])).
fof(f8699,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl35 | $spl51)),
  inference(unit_resulting_resolution,[],[f8330,f184,f8666,f4429])).
fof(f8721,plain,(
  $false | ($spl17 | $spl51 | $spl55)),
  inference(subsumption_resolution,[],[f8700,f8669])).
fof(f8700,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl17 | $spl51)),
  inference(unit_resulting_resolution,[],[f246,f8666,f232])).
fof(f8664,plain,(
  s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl48),
  inference(cnf_transformation,[],[f8664_D])).
fof(f8664_D,plain,(
  s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f8674,plain,(
  ( ! [X14,X15,X13] : (s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X13)) ) | $spl64),
  inference(cnf_transformation,[],[f8674_D])).
fof(f8674_D,plain,(
  ( ! [X14,X15,X13] : (s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X13)) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f8662,plain,(
  ( ! [X14,X15,X13] : (s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl9),
  inference(superposition,[],[f7825,f357])).
fof(f8673,plain,(
  ( ! [X12,X10,X11] : (s(bool,X10) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X11,X12)))) ) | $spl62),
  inference(cnf_transformation,[],[f8673_D])).
fof(f8673_D,plain,(
  ( ! [X12,X10,X11] : (s(bool,X10) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X11,X12)))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f8669,plain,(
  s(bool,'T_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl55),
  inference(cnf_transformation,[],[f8669_D])).
fof(f8669_D,plain,(
  s(bool,'T_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) <=> ~$spl55),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl55])])).
fof(f8661,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X10) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X11,X12)))) ) | $spl9),
  inference(superposition,[],[f7825,f334])).
fof(f8672,plain,(
  ( ! [X8,X7,X9] : (s(bool,X7) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X7),s(X8,X9)))) ) | $spl60),
  inference(cnf_transformation,[],[f8672_D])).
fof(f8672_D,plain,(
  ( ! [X8,X7,X9] : (s(bool,X7) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X7),s(X8,X9)))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f8660,plain,(
  ( ! [X8,X7,X9] : (s(bool,X7) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X7),s(X8,X9)))) ) | $spl9),
  inference(superposition,[],[f7825,f334])).
fof(f8671,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))),s(X5,X6)))) ) | $spl58),
  inference(cnf_transformation,[],[f8671_D])).
fof(f8671_D,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))),s(X5,X6)))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f8670,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X1)) ) | $spl56),
  inference(cnf_transformation,[],[f8670_D])).
fof(f8670_D,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f8659,plain,(
  ( ! [X6,X4,X5] : (s(bool,X4) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))),s(X5,X6)))) ) | $spl9),
  inference(superposition,[],[f7825,f334])).
fof(f8667,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X0)) ) | $spl52),
  inference(cnf_transformation,[],[f8667_D])).
fof(f8667_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f8658,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X3) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X3)) ) | $spl9),
  inference(superposition,[],[f7825,f232])).
fof(f8657,plain,(
  ( ! [X2] : (s(bool,X2) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X2)) ) | $spl9),
  inference(superposition,[],[f7825,f232])).
fof(f8656,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl9),
  inference(superposition,[],[f7825,f232])).
fof(f8655,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X0) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X0)) ) | $spl9),
  inference(superposition,[],[f7825,f232])).
fof(f8666,plain,(
  s(bool,'F_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl51),
  inference(cnf_transformation,[],[f8666_D])).
fof(f8666_D,plain,(
  s(bool,'F_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) <=> ~$spl51),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl51])])).
fof(f8654,plain,(
  s(bool,'F_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl9),
  inference(superposition,[],[f7825,f146])).
fof(f8320,plain,(
  $false | ($spl35 | $spl40)),
  inference(subsumption_resolution,[],[f8319,f144])).
fof(f8319,plain,(
  ~p(s(bool,'T_0')) | ($spl35 | $spl40)),
  inference(forward_demodulation,[],[f8134,f8301])).
fof(f8301,plain,(
  ( ! [X11] : (s(bool,'T_0') = s(bool,X11)) ) | ($spl35 | $spl40)),
  inference(global_subsumption,[],[f143,f142,f141,f140,f139,f138,f137,f144,f146,f147,f148,f149,f150,f151,f152,f153,f154,f155,f156,f157,f158,f159,f160,f161,f162,f163,f164,f165,f166,f167,f168,f169,f170,f171,f172,f173,f174,f175,f176,f183,f182,f181,f180,f179,f178,f177,f184,f207,f186,f187,f188,f189,f190,f191,f192,f232,f235,f243,f334,f335,f347,f357,f358,f401,f690,f691,f692,f751,f2044,f1649,f1650,f1651,f1669,f1689,f1700,f1701,f1890,f1878,f2175,f2099,f2100,f2101,f2311,f2312,f2460,f2482,f2736,f2928,f3185,f3198,f3199,f4086,f4087,f4113,f4114,f4360,f4429,f4606,f4894,f4928,f4921,f6426,f6427,f6807,f7484,f7485,f7827,f7828,f7832,f7833,f7878,f7875,f7831,f7845,f7844,f7843,f7840,f7839,f7856,f7855,f7853,f7852,f7838,f7826,f6882,f6881,f4461,f4460,f3420,f3419,f2991,f2777,f2708,f1815,f1814,f620,f234,f5503,f5152,f5151,f612,f300,f7846,f5896,f5895,f4386,f4297,f4296,f4207,f4203,f2711,f1816,f727,f709,f611,f299,f8274,f145,f265,f404])).
fof(f8274,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X11,X12)))) ) | ($spl35 | $spl40)),
  inference(subsumption_resolution,[],[f8184,f7878])).
fof(f8316,plain,(
  $false | ($spl35 | $spl40)),
  inference(subsumption_resolution,[],[f8315,f8301])).
fof(f8315,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | ($spl35 | $spl40)),
  inference(forward_demodulation,[],[f8142,f8301])).
fof(f8142,plain,(
  ( ! [X0,X1] : (s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1))) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(unit_resulting_resolution,[],[f7875,f7875,f1878])).
fof(f8314,plain,(
  $false | ($spl35 | $spl40)),
  inference(subsumption_resolution,[],[f8313,f8301])).
fof(f8313,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | ($spl35 | $spl40)),
  inference(forward_demodulation,[],[f8144,f8301])).
fof(f8144,plain,(
  ( ! [X0,X1] : (s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1))) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl35),
  inference(unit_resulting_resolution,[],[f7875,f1890])).
fof(f8312,plain,(
  $false | ($spl35 | $spl40)),
  inference(subsumption_resolution,[],[f8145,f8301])).
fof(f8307,plain,(
  $false | ($spl9 | $spl35 | $spl40)),
  inference(subsumption_resolution,[],[f8306,f8301])).
fof(f8306,plain,(
  s(bool,'T_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl9 | $spl35 | $spl40)),
  inference(forward_demodulation,[],[f7825,f8301])).
fof(f8304,plain,(
  $false | ($spl26 | $spl35 | $spl40)),
  inference(subsumption_resolution,[],[f3011,f8301])).
fof(f8303,plain,(
  $false | ($spl35 | $spl40)),
  inference(subsumption_resolution,[],[f8302,f144])).
fof(f8302,plain,(
  ~p(s(bool,'T_0')) | ($spl35 | $spl40)),
  inference(backward_demodulation,[],[f8301,f145])).
fof(f8299,plain,(
  $false | ($spl35 | $spl36)),
  inference(subsumption_resolution,[],[f8298,f144])).
fof(f8298,plain,(
  ~p(s(bool,'T_0')) | ($spl35 | $spl36)),
  inference(forward_demodulation,[],[f145,f8275])).
fof(f8275,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,X3)) ) | ($spl35 | $spl36)),
  inference(subsumption_resolution,[],[f8185,f7876])).
fof(f8297,plain,(
  $false | ($spl26 | $spl35 | $spl36)),
  inference(subsumption_resolution,[],[f3011,f8275])).
fof(f8295,plain,(
  $false | ($spl9 | $spl35 | $spl36)),
  inference(subsumption_resolution,[],[f8294,f8275])).
fof(f8294,plain,(
  s(bool,'T_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl9 | $spl35 | $spl36)),
  inference(forward_demodulation,[],[f7825,f8275])).
fof(f8288,plain,(
  $false | ($spl35 | $spl36)),
  inference(subsumption_resolution,[],[f8145,f8275])).
fof(f8287,plain,(
  $false | ($spl35 | $spl36)),
  inference(subsumption_resolution,[],[f8286,f8275])).
fof(f8286,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | ($spl35 | $spl36)),
  inference(forward_demodulation,[],[f8144,f8275])).
fof(f8285,plain,(
  $false | ($spl35 | $spl36)),
  inference(subsumption_resolution,[],[f8284,f8275])).
fof(f8284,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | ($spl35 | $spl36)),
  inference(forward_demodulation,[],[f8142,f8275])).
fof(f8280,plain,(
  $false | ($spl35 | $spl36)),
  inference(subsumption_resolution,[],[f8279,f144])).
fof(f8279,plain,(
  ~p(s(bool,'T_0')) | ($spl35 | $spl36)),
  inference(forward_demodulation,[],[f8134,f8275])).
fof(f8270,plain,(
  $false | ($spl17 | $spl35 | $spl44)),
  inference(subsumption_resolution,[],[f8269,f144])).
fof(f8269,plain,(
  ~p(s(bool,'T_0')) | ($spl17 | $spl35 | $spl44)),
  inference(forward_demodulation,[],[f8134,f8190])).
fof(f8190,plain,(
  ( ! [X13] : (s(bool,'T_0') = s(bool,X13)) ) | ($spl17 | $spl35 | $spl44)),
  inference(subsumption_resolution,[],[f8189,f727])).
fof(f8189,plain,(
  ( ! [X14,X15,X13] : (s(bool,'F_0') != s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) | s(bool,'T_0') = s(bool,X13)) ) | ($spl17 | $spl35 | $spl44)),
  inference(backward_demodulation,[],[f8188,f7880])).
fof(f8188,plain,(
  s(bool,'F_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl17 | $spl35)),
  inference(forward_demodulation,[],[f8156,f207])).
fof(f8156,plain,(
  ( ! [X0,X1] : (s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) = s(bool,happ(s(fun(X0,bool),'const.combin.K_1'(s(bool,'F_0'))),s(X0,X1)))) ) | ($spl17 | $spl35)),
  inference(unit_resulting_resolution,[],[f207,f246,f7875,f4429])).
fof(f8265,plain,(
  $false | ($spl17 | $spl35 | $spl44)),
  inference(subsumption_resolution,[],[f8264,f8190])).
fof(f8264,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | ($spl17 | $spl35 | $spl44)),
  inference(forward_demodulation,[],[f8142,f8190])).
fof(f8263,plain,(
  $false | ($spl17 | $spl35 | $spl44)),
  inference(subsumption_resolution,[],[f8262,f8190])).
fof(f8262,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X0,X1)))) ) | ($spl17 | $spl35 | $spl44)),
  inference(forward_demodulation,[],[f8144,f8190])).
fof(f8261,plain,(
  $false | ($spl17 | $spl35 | $spl44)),
  inference(subsumption_resolution,[],[f8145,f8190])).
fof(f8254,plain,(
  $false | ($spl9 | $spl17 | $spl35 | $spl44)),
  inference(subsumption_resolution,[],[f8242,f8190])).
fof(f8242,plain,(
  s(bool,'T_0') != s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl9 | $spl17 | $spl35 | $spl44)),
  inference(backward_demodulation,[],[f8190,f7825])).
fof(f8253,plain,(
  $false | ($spl17 | $spl26 | $spl35 | $spl44)),
  inference(subsumption_resolution,[],[f8208,f8190])).
fof(f8208,plain,(
  ( ! [X97,X98] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X97,X98)))) ) | ($spl17 | $spl26 | $spl35 | $spl44)),
  inference(backward_demodulation,[],[f8190,f3011])).
fof(f8252,plain,(
  $false | ($spl17 | $spl35 | $spl44)),
  inference(subsumption_resolution,[],[f8191,f144])).
fof(f8191,plain,(
  ~p(s(bool,'T_0')) | ($spl17 | $spl35 | $spl44)),
  inference(backward_demodulation,[],[f8190,f145])).
fof(f8023,plain,(
  $false | ($spl9 | $spl17 | $spl31 | $spl35)),
  inference(subsumption_resolution,[],[f8007,f7974])).
fof(f7974,plain,(
  ( ! [X91] : (s(bool,'T_0') = s(bool,X91)) ) | ($spl17 | $spl31 | $spl35)),
  inference(global_subsumption,[],[f7973,f143,f142,f141,f140,f139,f138,f137,f144,f146,f147,f148,f149,f150,f151,f152,f153,f154,f155,f156,f157,f158,f159,f160,f161,f162,f163,f164,f165,f166,f167,f168,f169,f170,f171,f172,f173,f174,f175,f176,f183,f182,f181,f180,f179,f178,f177,f184,f207,f186,f187,f188,f189,f190,f191,f192,f232,f235,f243,f334,f335,f347,f357,f358,f401,f690,f691,f692,f751,f620,f404,f265,f234,f145,f612,f300,f727,f709,f611,f299,f2044,f1649,f1650,f1651,f1669,f1689,f1700,f1701,f1814,f1815,f1816,f1890,f1878,f2175,f2099,f2100,f2101,f2311,f2312,f2711,f2460,f2708,f2482,f2736,f2991,f2777,f2928,f3185,f3198,f3199,f3419,f3420,f4207,f4203,f4086,f4087,f4113,f4114,f4386,f4296,f4297,f4360,f4429,f4460,f4461,f4606,f4894,f4928,f4921,f5503,f5151,f5152,f5895,f5896,f6426,f6427,f6807,f6881,f6882,f7484,f7485,f7826,f7827,f7828,f7831,f7832,f7833,f7852,f7853,f7838,f7839,f7840,f7843,f7844,f7845,f7846,f7855,f7856,f7875,f7872,f7944])).
fof(f7944,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X7),s(X8,X9)))) ) | ($spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7943,f7875])).
fof(f7943,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X7),s(X8,X9)))) ) | $spl31),
  inference(subsumption_resolution,[],[f7913,f234])).
fof(f7913,plain,(
  ( ! [X8,X7,X9] : (s(bool,'F_0') != s(bool,X7) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X7),s(X8,X9)))) ) | $spl31),
  inference(superposition,[],[f7872,f334])).
fof(f7973,plain,(
  ( ! [X88,X87,X91] : (s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,X87) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) ) | ($spl17 | $spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7970,f246])).
fof(f7970,plain,(
  ( ! [X88,X87,X91] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X87) = s(bool,'const.combin.K_2'(s(bool,X88),s(bool,X87))) | s(bool,X87) = s(bool,X91) | s(bool,'T_0') = s(bool,X91)) ) | ($spl17 | $spl31 | $spl35)),
  inference(backward_demodulation,[],[f7966,f5152])).
fof(f7966,plain,(
  ( ! [X43,X44,X40] : (s(bool,'T_0') = s(bool,happ(s(fun(X43,bool),'const.combin.K_1'(s(bool,X40))),s(X43,X44)))) ) | ($spl17 | $spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7946,f246])).
fof(f7946,plain,(
  ( ! [X43,X44,X40] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,happ(s(fun(X43,bool),'const.combin.K_1'(s(bool,X40))),s(X43,X44)))) ) | ($spl31 | $spl35)),
  inference(backward_demodulation,[],[f7944,f611])).
fof(f8007,plain,(
  s(bool,'T_0') != s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl9 | $spl17 | $spl31 | $spl35)),
  inference(backward_demodulation,[],[f7974,f7824])).
fof(f7824,plain,(
  s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) != s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl9),
  inference(unit_resulting_resolution,[],[f202,f192])).
fof(f8022,plain,(
  $false | ($spl9 | $spl17 | $spl31 | $spl35)),
  inference(subsumption_resolution,[],[f8006,f7974])).
fof(f8006,plain,(
  s(bool,'T_0') != s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK5,sK11,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl9 | $spl17 | $spl31 | $spl35)),
  inference(backward_demodulation,[],[f7974,f7825])).
fof(f8021,plain,(
  $false | ($spl17 | $spl26 | $spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7986,f7974])).
fof(f7986,plain,(
  ( ! [X97,X98] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'T_0'),s(X97,X98)))) ) | ($spl17 | $spl26 | $spl31 | $spl35)),
  inference(backward_demodulation,[],[f7974,f3011])).
fof(f8019,plain,(
  $false | ($spl17 | $spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7975,f144])).
fof(f7975,plain,(
  ~p(s(bool,'T_0')) | ($spl17 | $spl31 | $spl35)),
  inference(backward_demodulation,[],[f7974,f145])).
fof(f7940,plain,(
  $false | ($spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7939,f7875])).
fof(f7939,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl31),
  inference(condensation,[],[f7938])).
fof(f7938,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X2)) ) | $spl31),
  inference(subsumption_resolution,[],[f7910,f146])).
fof(f7910,plain,(
  ( ! [X2] : (s(bool,'F_0') != s(bool,X2) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X2)) ) | $spl31),
  inference(superposition,[],[f7872,f232])).
fof(f7937,plain,(
  $false | ($spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7936,f7875])).
fof(f7936,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl31),
  inference(condensation,[],[f7935])).
fof(f7935,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl31),
  inference(subsumption_resolution,[],[f7909,f146])).
fof(f7909,plain,(
  ( ! [X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl31),
  inference(superposition,[],[f7872,f232])).
fof(f7934,plain,(
  $false | ($spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7919,f7875])).
fof(f7919,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl31),
  inference(trivial_inequality_removal,[],[f7907])).
fof(f7907,plain,(
  s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl31),
  inference(superposition,[],[f7872,f146])).
fof(f7933,plain,(
  $false | ($spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7887,f7875])).
fof(f7887,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl31),
  inference(unit_resulting_resolution,[],[f7872,f146])).
fof(f7932,plain,(
  $false | ($spl17 | $spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7888,f7875])).
fof(f7888,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl17 | $spl31)),
  inference(unit_resulting_resolution,[],[f246,f7872,f232])).
fof(f7931,plain,(
  $false | ($spl26 | $spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7889,f7875])).
fof(f7889,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl26 | $spl31)),
  inference(unit_resulting_resolution,[],[f3011,f7872,f334])).
fof(f7930,plain,(
  $false | ($spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7890,f7875])).
fof(f7890,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl31),
  inference(unit_resulting_resolution,[],[f145,f7872,f401])).
fof(f7928,plain,(
  $false | ($spl26 | $spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7892,f7875])).
fof(f7892,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl26 | $spl31)),
  inference(unit_resulting_resolution,[],[f184,f7872,f3089])).
fof(f3089,plain,(
  ( ! [X41,X40] : (s(bool,X40) != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(bool,X40))) | s(bool,X40) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) ) | $spl26),
  inference(superposition,[],[f3011,f232])).
fof(f7926,plain,(
  $false | ($spl26 | $spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7894,f7875])).
fof(f7894,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl26 | $spl31)),
  inference(unit_resulting_resolution,[],[f3011,f184,f7872,f4429])).
fof(f7925,plain,(
  $false | ($spl26 | $spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7895,f7875])).
fof(f7895,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl26 | $spl31)),
  inference(unit_resulting_resolution,[],[f184,f7872,f4601])).
fof(f4601,plain,(
  ( ! [X66,X64,X67,X65] : (s(bool,X64) != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X65,X66))) | s(bool,X64) = s(bool,X67) | s(bool,'T_0') = s(bool,X67)) ) | $spl26),
  inference(subsumption_resolution,[],[f4572,f3011])).
fof(f4572,plain,(
  ( ! [X66,X64,X67,X65] : (s(bool,X64) != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X65,X66))) | s(bool,X64) = s(bool,X67) | s(bool,'T_0') = s(bool,X67) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(bool,X64)))) ) | $spl26),
  inference(superposition,[],[f3089,f2708])).
fof(f7924,plain,(
  $false | ($spl17 | $spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7896,f7875])).
fof(f7896,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | ($spl17 | $spl31)),
  inference(unit_resulting_resolution,[],[f246,f7872,f232])).
fof(f7922,plain,(
  $false | ($spl31 | $spl35)),
  inference(subsumption_resolution,[],[f7900,f7875])).
fof(f7900,plain,(
  s(bool,'T_0') = s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl31),
  inference(unit_resulting_resolution,[],[f184,f7872,f4207])).
fof(f7877,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X5,X6)))) ) | $spl38),
  inference(cnf_transformation,[],[f7877_D])).
fof(f7877_D,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X5,X6)))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f7872,plain,(
  s(bool,'F_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl31),
  inference(cnf_transformation,[],[f7872_D])).
fof(f7872_D,plain,(
  s(bool,'F_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f7884,plain,(
  ( ! [X24,X25] : (s(bool,'F_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X24,X25)))) ) | $spl9),
  inference(forward_demodulation,[],[f7868,f184])).
fof(f7868,plain,(
  ( ! [X24,X23,X25,X22] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X22,X23))) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X24,X25)))) ) | $spl9),
  inference(superposition,[],[f7824,f2991])).
fof(f7883,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') = s(bool,happ(s(fun(X20,bool),'const.combin.K_1'(s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))))),s(X20,X21)))) ) | $spl46),
  inference(cnf_transformation,[],[f7883_D])).
fof(f7883_D,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') = s(bool,happ(s(fun(X20,bool),'const.combin.K_1'(s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))))),s(X20,X21)))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f7882,plain,(
  ( ! [X21,X20] : (s(bool,'F_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,happ(s(fun(X20,bool),'const.combin.K_1'(s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))))),s(X20,X21)))) ) | $spl9),
  inference(forward_demodulation,[],[f7867,f184])).
fof(f7867,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X18,X19))) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,happ(s(fun(X20,bool),'const.combin.K_1'(s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))))),s(X20,X21)))) ) | $spl9),
  inference(superposition,[],[f7824,f2777])).
fof(f7870,plain,(
  s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl28),
  inference(cnf_transformation,[],[f7870_D])).
fof(f7870_D,plain,(
  s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f7881,plain,(
  s(bool,'F_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl9),
  inference(forward_demodulation,[],[f7866,f184])).
fof(f7866,plain,(
  ( ! [X17,X16] : (s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X16,X17))) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl9),
  inference(superposition,[],[f7824,f2708])).
fof(f7880,plain,(
  ( ! [X14,X15,X13] : (s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X13)) ) | $spl44),
  inference(cnf_transformation,[],[f7880_D])).
fof(f7880_D,plain,(
  ( ! [X14,X15,X13] : (s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X13)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f7865,plain,(
  ( ! [X14,X15,X13] : (s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl9),
  inference(superposition,[],[f7824,f357])).
fof(f7879,plain,(
  ( ! [X12,X10,X11] : (s(bool,X10) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X11,X12)))) ) | $spl42),
  inference(cnf_transformation,[],[f7879_D])).
fof(f7879_D,plain,(
  ( ! [X12,X10,X11] : (s(bool,X10) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X11,X12)))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f7875,plain,(
  s(bool,'T_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl35),
  inference(cnf_transformation,[],[f7875_D])).
fof(f7875_D,plain,(
  s(bool,'T_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f7864,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X10) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X10),s(X11,X12)))) ) | $spl9),
  inference(superposition,[],[f7824,f334])).
fof(f7878,plain,(
  ( ! [X8,X7,X9] : (s(bool,X7) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X7),s(X8,X9)))) ) | $spl40),
  inference(cnf_transformation,[],[f7878_D])).
fof(f7878_D,plain,(
  ( ! [X8,X7,X9] : (s(bool,X7) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X7),s(X8,X9)))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f7863,plain,(
  ( ! [X8,X7,X9] : (s(bool,X7) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X7),s(X8,X9)))) ) | $spl9),
  inference(superposition,[],[f7824,f334])).
fof(f7876,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X1)) ) | $spl36),
  inference(cnf_transformation,[],[f7876_D])).
fof(f7876_D,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f7862,plain,(
  ( ! [X6,X4,X5] : (s(bool,X4) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))),s(X5,X6)))) ) | $spl9),
  inference(superposition,[],[f7824,f334])).
fof(f7873,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X0)) ) | $spl32),
  inference(cnf_transformation,[],[f7873_D])).
fof(f7873_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f7861,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X3) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X3)) ) | $spl9),
  inference(superposition,[],[f7824,f232])).
fof(f7860,plain,(
  ( ! [X2] : (s(bool,X2) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X2)) ) | $spl9),
  inference(superposition,[],[f7824,f232])).
fof(f7859,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn'))))) ) | $spl9),
  inference(superposition,[],[f7824,f232])).
fof(f7858,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,X0) = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,X0)) ) | $spl9),
  inference(superposition,[],[f7824,f232])).
fof(f7857,plain,(
  s(bool,'F_0') != s(bool,f(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | s(bool,'T_0') = s(bool,g(s('type.semanticPrimitives.tid_or_exn',sK14(sK11,sK5,bool,'type.semanticPrimitives.tid_or_exn')))) | $spl9),
  inference(superposition,[],[f7824,f146])).
fof(f3011,plain,(
  ( ! [X97,X98] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X97,X98)))) ) | $spl26),
  inference(cnf_transformation,[],[f3011_D])).
fof(f3011_D,plain,(
  ( ! [X97,X98] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X97,X98)))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f3009,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X97,X98))) | s(bool,'T_0') = s(bool,X96)) ) | $spl17),
  inference(subsumption_resolution,[],[f2861,f2736])).
fof(f2861,plain,(
  ( ! [X99,X97,X100,X98,X96] : (s(bool,'T_0') != s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X97,X98))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X96),s(X99,X100))) | s(bool,'T_0') = s(bool,X96)) ) | $spl17),
  inference(superposition,[],[f2071,f2708])).
fof(f1172,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f1166,f144])).
fof(f1166,plain,(
  ~p(s(bool,'T_0')) | $spl20),
  inference(backward_demodulation,[],[f1129,f145])).
fof(f1129,plain,(
  ( ! [X34] : (s(bool,'T_0') = s(bool,X34)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f1092])).
fof(f1092,plain,(
  ( ! [X34] : (s(bool,'T_0') = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) ) | $spl20),
  inference(superposition,[],[f840,f184])).
fof(f1165,plain,(
  $false | ($spl17 | $spl20)),
  inference(subsumption_resolution,[],[f1135,f246])).
fof(f1135,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl20),
  inference(condensation,[],[f1134])).
fof(f1134,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X3)) ) | $spl20),
  inference(duplicate_literal_removal,[],[f1087])).
fof(f1087,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl20),
  inference(superposition,[],[f840,f727])).
fof(f1164,plain,(
  $false | ($spl17 | $spl20)),
  inference(subsumption_resolution,[],[f1159,f246])).
fof(f1159,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl20),
  inference(condensation,[],[f1158])).
fof(f1158,plain,(
  ( ! [X36] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X36)) ) | $spl20),
  inference(backward_demodulation,[],[f1146,f727])).
fof(f1146,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X0),s(X1,X2)))) ) | $spl20),
  inference(condensation,[],[f1060])).
fof(f1060,plain,(
  ( ! [X66,X64,X62,X65,X63] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X62),s(X65,X66))) | s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X62),s(X63,X64)))) ) | $spl20),
  inference(superposition,[],[f840,f184])).
fof(f942,plain,(
  $false | ($spl17 | $spl22)),
  inference(subsumption_resolution,[],[f913,f246])).
fof(f913,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl22),
  inference(superposition,[],[f184,f841])).
fof(f938,plain,(
  $false | ($spl17 | $spl22)),
  inference(subsumption_resolution,[],[f902,f246])).
fof(f902,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl22),
  inference(superposition,[],[f841,f184])).
fof(f839,plain,(
  ( ! [X12,X17,X16] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X12),s(X16,X17))) | s(bool,'T_0') = s(bool,X12)) ) | $spl18),
  inference(cnf_transformation,[],[f839_D])).
fof(f839_D,plain,(
  ( ! [X12,X17,X16] : (s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X12),s(X16,X17))) | s(bool,'T_0') = s(bool,X12)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f841,plain,(
  ( ! [X26,X25] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X25,X26)))) ) | $spl22),
  inference(cnf_transformation,[],[f841_D])).
fof(f841_D,plain,(
  ( ! [X26,X25] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X25,X26)))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f692,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,'F_0'),s(X25,X26))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X24),s(X27,X28))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f299,f146])).
fof(f840,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) | s(bool,'T_0') = s(bool,X13)) ) | $spl20),
  inference(cnf_transformation,[],[f840_D])).
fof(f840_D,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) | s(bool,'T_0') = s(bool,X13)) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f691,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X19),s(X20,X21))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X18),s(X22,X23))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f299,f232])).
fof(f690,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s(bool,'T_0') = s(bool,'const.combin.K_2'(s(bool,X13),s(X14,X15))) | s(bool,'F_0') = s(bool,'const.combin.K_2'(s(bool,X12),s(X16,X17))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f299,f232])).
fof(f244,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl14),
  inference(cnf_transformation,[],[f244_D])).
fof(f244_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f246,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl17),
  inference(cnf_transformation,[],[f246_D])).
fof(f246_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f243,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f146])).
fof(f214,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12)),
  inference(trivial_inequality_removal,[],[f213])).
fof(f213,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) != s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f212,f195])).
fof(f212,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) != s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl1 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f211,f197])).
fof(f211,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) != s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl1 | $spl6 | $spl8 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f210,f199])).
fof(f210,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) != s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl1 | $spl8 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f209,f201])).
fof(f209,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) != s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl1 | $spl10 | $spl12)),
  inference(forward_demodulation,[],[f208,f203])).
fof(f208,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) != s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | ($spl1 | $spl12)),
  inference(forward_demodulation,[],[f194,f205])).
fof(f193,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl0),
  inference(cnf_transformation,[],[f193_D])).
fof(f193_D,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f195,plain,(
  s('type.num.num',sK2) = s('type.num.num',sK8) | $spl2),
  inference(cnf_transformation,[],[f195_D])).
fof(f195_D,plain,(
  s('type.num.num',sK2) = s('type.num.num',sK8) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f137,plain,(
  s('type.num.num',sK2) = s('type.num.num',sK8) | s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0')))))))))))))),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  (s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | (s('type.num.num',sK2) = s('type.num.num',sK8) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) & s('type.ffi.ffi_state'(sK1),sK4) = s('type.ffi.ffi_state'(sK1),sK10) & s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) & s(fun('type.list.list'('type.string.char'),bool),sK6) = s(fun('type.list.list'('type.string.char'),bool),sK12) & s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13))) & (s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) != s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | s('type.num.num',sK2) != s('type.num.num',sK8) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) | s('type.ffi.ffi_state'(sK1),sK4) != s('type.ffi.ffi_state'(sK1),sK10) | s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) != s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | s(fun('type.list.list'('type.string.char'),bool),sK6) != s(fun('type.list.list'('type.string.char'),bool),sK12) | s('type.list.list'('type.option.option'('type.modSem.v')),sK7) != s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13])],[f132])).
fof(f132,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : ((s('type.modSem.state'(X1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.modSem.state'(X1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3))),s('type.modSem.state'(X1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X4))),s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X5))),s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X6))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.modSem.state'(X0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(X1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.modSem.state'(X1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9))),s('type.modSem.state'(X1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X10))),s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X11))),s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X13))),s('type.modSem.state'(X0),'const.bool.ARB_0'))))))))))))) | (s('type.num.num',X2) = s('type.num.num',X8) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9) & s('type.ffi.ffi_state'(X1),X4) = s('type.ffi.ffi_state'(X1),X10) & s(fun('type.semanticPrimitives.tid_or_exn',bool),X5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),X11) & s(fun('type.list.list'('type.string.char'),bool),X6) = s(fun('type.list.list'('type.string.char'),bool),X12) & s('type.list.list'('type.option.option'('type.modSem.v')),X7) = s('type.list.list'('type.option.option'('type.modSem.v')),X13))) & (s('type.modSem.state'(X1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.modSem.state'(X1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3))),s('type.modSem.state'(X1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X4))),s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X5))),s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X6))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.modSem.state'(X0),'const.bool.ARB_0'))))))))))))) != s('type.modSem.state'(X1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.modSem.state'(X1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9))),s('type.modSem.state'(X1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X10))),s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X11))),s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X13))),s('type.modSem.state'(X0),'const.bool.ARB_0'))))))))))))) | s('type.num.num',X2) != s('type.num.num',X8) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9) | s('type.ffi.ffi_state'(X1),X4) != s('type.ffi.ffi_state'(X1),X10) | s(fun('type.semanticPrimitives.tid_or_exn',bool),X5) != s(fun('type.semanticPrimitives.tid_or_exn',bool),X11) | s(fun('type.list.list'('type.string.char'),bool),X6) != s(fun('type.list.list'('type.string.char'),bool),X12) | s('type.list.list'('type.option.option'('type.modSem.v')),X7) != s('type.list.list'('type.option.option'('type.modSem.v')),X13)))),
  inference(flattening,[],[f131])).
fof(f131,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : ((s('type.modSem.state'(X1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.modSem.state'(X1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3))),s('type.modSem.state'(X1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X4))),s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X5))),s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X6))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.modSem.state'(X0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(X1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.modSem.state'(X1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9))),s('type.modSem.state'(X1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X10))),s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X11))),s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X13))),s('type.modSem.state'(X0),'const.bool.ARB_0'))))))))))))) | (s('type.num.num',X2) = s('type.num.num',X8) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9) & s('type.ffi.ffi_state'(X1),X4) = s('type.ffi.ffi_state'(X1),X10) & s(fun('type.semanticPrimitives.tid_or_exn',bool),X5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),X11) & s(fun('type.list.list'('type.string.char'),bool),X6) = s(fun('type.list.list'('type.string.char'),bool),X12) & s('type.list.list'('type.option.option'('type.modSem.v')),X7) = s('type.list.list'('type.option.option'('type.modSem.v')),X13))) & (s('type.modSem.state'(X1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.modSem.state'(X1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3))),s('type.modSem.state'(X1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X4))),s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X5))),s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X6))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.modSem.state'(X0),'const.bool.ARB_0'))))))))))))) != s('type.modSem.state'(X1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.modSem.state'(X1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9))),s('type.modSem.state'(X1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X10))),s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X11))),s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X13))),s('type.modSem.state'(X0),'const.bool.ARB_0'))))))))))))) | (s('type.num.num',X2) != s('type.num.num',X8) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9) | s('type.ffi.ffi_state'(X1),X4) != s('type.ffi.ffi_state'(X1),X10) | s(fun('type.semanticPrimitives.tid_or_exn',bool),X5) != s(fun('type.semanticPrimitives.tid_or_exn',bool),X11) | s(fun('type.list.list'('type.string.char'),bool),X6) != s(fun('type.list.list'('type.string.char'),bool),X12) | s('type.list.list'('type.option.option'('type.modSem.v')),X7) != s('type.list.list'('type.option.option'('type.modSem.v')),X13))))),
  inference(nnf_transformation,[],[f129])).
fof(f129,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.modSem.state'(X1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.modSem.state'(X1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3))),s('type.modSem.state'(X1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X4))),s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X5))),s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X6))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.modSem.state'(X0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(X1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.modSem.state'(X1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9))),s('type.modSem.state'(X1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X10))),s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X11))),s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X13))),s('type.modSem.state'(X0),'const.bool.ARB_0'))))))))))))) <~> (s('type.num.num',X2) = s('type.num.num',X8) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9) & s('type.ffi.ffi_state'(X1),X4) = s('type.ffi.ffi_state'(X1),X10) & s(fun('type.semanticPrimitives.tid_or_exn',bool),X5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),X11) & s(fun('type.list.list'('type.string.char'),bool),X6) = s(fun('type.list.list'('type.string.char'),bool),X12) & s('type.list.list'('type.option.option'('type.modSem.v')),X7) = s('type.list.list'('type.option.option'('type.modSem.v')),X13)))),
  inference(ennf_transformation,[],[f47])).
fof(f47,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.modSem.state'(X1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.modSem.state'(X1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3))),s('type.modSem.state'(X1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X4))),s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X5))),s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X6))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.modSem.state'(X0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(X1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.modSem.state'(X1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9))),s('type.modSem.state'(X1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X10))),s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X11))),s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X13))),s('type.modSem.state'(X0),'const.bool.ARB_0'))))))))))))) <=> (s('type.num.num',X2) = s('type.num.num',X8) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9) & s('type.ffi.ffi_state'(X1),X4) = s('type.ffi.ffi_state'(X1),X10) & s(fun('type.semanticPrimitives.tid_or_exn',bool),X5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),X11) & s(fun('type.list.list'('type.string.char'),bool),X6) = s(fun('type.list.list'('type.string.char'),bool),X12) & s('type.list.list'('type.option.option'('type.modSem.v')),X7) = s('type.list.list'('type.option.option'('type.modSem.v')),X13)))),
  inference(flattening,[],[f46])).
fof(f46,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.modSem.state'(X1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X2))),s('type.modSem.state'(X1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3))),s('type.modSem.state'(X1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X4))),s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X5))),s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X6))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X7))),s('type.modSem.state'(X0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(X1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.modSem.state'(X1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9))),s('type.modSem.state'(X1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X0),'type.ffi.ffi_state'(X1)),'const.combin.K_1'(s('type.ffi.ffi_state'(X1),X10))),s('type.modSem.state'(X0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X11))),s('type.modSem.state'(X0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.modSem.state'(X0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X13))),s('type.modSem.state'(X0),'const.bool.ARB_0'))))))))))))) <=> (s('type.num.num',X2) = s('type.num.num',X8) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X3) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9) & s('type.ffi.ffi_state'(X1),X4) = s('type.ffi.ffi_state'(X1),X10) & s(fun('type.semanticPrimitives.tid_or_exn',bool),X5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),X11) & s(fun('type.list.list'('type.string.char'),bool),X6) = s(fun('type.list.list'('type.string.char'),bool),X12) & s('type.list.list'('type.option.option'('type.modSem.v')),X7) = s('type.list.list'('type.option.option'('type.modSem.v')),X13)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19] : (s('type.modSem.state'(X7),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.modSem.state'(X7),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9))),s('type.modSem.state'(X7),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),'const.combin.K_1'(s('type.ffi.ffi_state'(X7),X10))),s('type.modSem.state'(X6),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X11))),s('type.modSem.state'(X6),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.modSem.state'(X6),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X13))),s('type.modSem.state'(X6),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(X7),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X14))),s('type.modSem.state'(X7),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X15))),s('type.modSem.state'(X7),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),'const.combin.K_1'(s('type.ffi.ffi_state'(X7),X16))),s('type.modSem.state'(X6),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X17))),s('type.modSem.state'(X6),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X18))),s('type.modSem.state'(X6),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X19))),s('type.modSem.state'(X6),'const.bool.ARB_0'))))))))))))) <=> (s('type.num.num',X8) = s('type.num.num',X14) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X15) & s('type.ffi.ffi_state'(X7),X10) = s('type.ffi.ffi_state'(X7),X16) & s(fun('type.semanticPrimitives.tid_or_exn',bool),X11) = s(fun('type.semanticPrimitives.tid_or_exn',bool),X17) & s(fun('type.list.list'('type.string.char'),bool),X12) = s(fun('type.list.list'('type.string.char'),bool),X18) & s('type.list.list'('type.option.option'('type.modSem.v')),X13) = s('type.list.list'('type.option.option'('type.modSem.v')),X19)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19] : (s('type.modSem.state'(X7),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X8))),s('type.modSem.state'(X7),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9))),s('type.modSem.state'(X7),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),'const.combin.K_1'(s('type.ffi.ffi_state'(X7),X10))),s('type.modSem.state'(X6),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X11))),s('type.modSem.state'(X6),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X12))),s('type.modSem.state'(X6),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X13))),s('type.modSem.state'(X6),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(X7),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',X14))),s('type.modSem.state'(X7),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X15))),s('type.modSem.state'(X7),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(X6),'type.ffi.ffi_state'(X7)),'const.combin.K_1'(s('type.ffi.ffi_state'(X7),X16))),s('type.modSem.state'(X6),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),X17))),s('type.modSem.state'(X6),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),X18))),s('type.modSem.state'(X6),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X19))),s('type.modSem.state'(X6),'const.bool.ARB_0'))))))))))))) <=> (s('type.num.num',X8) = s('type.num.num',X14) & s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X9) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),X15) & s('type.ffi.ffi_state'(X7),X10) = s('type.ffi.ffi_state'(X7),X16) & s(fun('type.semanticPrimitives.tid_or_exn',bool),X11) = s(fun('type.semanticPrimitives.tid_or_exn',bool),X17) & s(fun('type.list.list'('type.string.char'),bool),X12) = s(fun('type.list.list'('type.string.char'),bool),X18) & s('type.list.list'('type.option.option'('type.modSem.v')),X13) = s('type.list.list'('type.option.option'('type.modSem.v')),X19)))),
  file('thm.modSem.state_literal_|49||49|','thm.modSem.state_literal_|49||49|')).
fof(f197,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) | $spl4),
  inference(cnf_transformation,[],[f197_D])).
fof(f197_D,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f138,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3) = s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) | s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0')))))))))))))),
  inference(cnf_transformation,[],[f133])).
fof(f199,plain,(
  s('type.ffi.ffi_state'(sK1),sK4) = s('type.ffi.ffi_state'(sK1),sK10) | $spl6),
  inference(cnf_transformation,[],[f199_D])).
fof(f199_D,plain,(
  s('type.ffi.ffi_state'(sK1),sK4) = s('type.ffi.ffi_state'(sK1),sK10) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f139,plain,(
  s('type.ffi.ffi_state'(sK1),sK4) = s('type.ffi.ffi_state'(sK1),sK10) | s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0')))))))))))))),
  inference(cnf_transformation,[],[f133])).
fof(f201,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | $spl8),
  inference(cnf_transformation,[],[f201_D])).
fof(f201_D,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f140,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) = s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0')))))))))))))),
  inference(cnf_transformation,[],[f133])).
fof(f203,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK6) = s(fun('type.list.list'('type.string.char'),bool),sK12) | $spl10),
  inference(cnf_transformation,[],[f203_D])).
fof(f203_D,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK6) = s(fun('type.list.list'('type.string.char'),bool),sK12) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f141,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK6) = s(fun('type.list.list'('type.string.char'),bool),sK12) | s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0')))))))))))))),
  inference(cnf_transformation,[],[f133])).
fof(f205,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | $spl12),
  inference(cnf_transformation,[],[f205_D])).
fof(f205_D,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f142,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) = s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) = s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0')))))))))))))),
  inference(cnf_transformation,[],[f133])).
fof(f194,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) != s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) | $spl1),
  inference(cnf_transformation,[],[f194_D])).
fof(f194_D,plain,(
  s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) != s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f196,plain,(
  s('type.num.num',sK2) != s('type.num.num',sK8) | $spl3),
  inference(cnf_transformation,[],[f196_D])).
fof(f196_D,plain,(
  s('type.num.num',sK2) != s('type.num.num',sK8) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f198,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) | $spl5),
  inference(cnf_transformation,[],[f198_D])).
fof(f198_D,plain,(
  s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f200,plain,(
  s('type.ffi.ffi_state'(sK1),sK4) != s('type.ffi.ffi_state'(sK1),sK10) | $spl7),
  inference(cnf_transformation,[],[f200_D])).
fof(f200_D,plain,(
  s('type.ffi.ffi_state'(sK1),sK4) != s('type.ffi.ffi_state'(sK1),sK10) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f202,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) != s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | $spl9),
  inference(cnf_transformation,[],[f202_D])).
fof(f202_D,plain,(
  s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) != s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f204,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK6) != s(fun('type.list.list'('type.string.char'),bool),sK12) | $spl11),
  inference(cnf_transformation,[],[f204_D])).
fof(f204_D,plain,(
  s(fun('type.list.list'('type.string.char'),bool),sK6) != s(fun('type.list.list'('type.string.char'),bool),sK12) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f206,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) != s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | $spl13),
  inference(cnf_transformation,[],[f206_D])).
fof(f206_D,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) != s('type.list.list'('type.option.option'('type.modSem.v')),sK13) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f143,plain,(
  s('type.list.list'('type.option.option'('type.modSem.v')),sK7) != s('type.list.list'('type.option.option'('type.modSem.v')),sK13) | s(fun('type.list.list'('type.string.char'),bool),sK6) != s(fun('type.list.list'('type.string.char'),bool),sK12) | s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5) != s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11) | s('type.ffi.ffi_state'(sK1),sK4) != s('type.ffi.ffi_state'(sK1),sK10) | s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3) != s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9) | s('type.num.num',sK2) != s('type.num.num',sK8) | s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK2))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK3))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK4))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK5))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK6))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK7))),s('type.modSem.state'(sK0),'const.bool.ARB_0'))))))))))))) != s('type.modSem.state'(sK1),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num',sK8))),s('type.modSem.state'(sK1),'const.modSem.state_refs_fupd_2'(s(fun('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.modSem.v')),sK9))),s('type.modSem.state'(sK1),'const.modSem.state_ffi_fupd_2'(s(fun('type.ffi.ffi_state'(sK0),'type.ffi.ffi_state'(sK1)),'const.combin.K_1'(s('type.ffi.ffi_state'(sK1),sK10))),s('type.modSem.state'(sK0),'const.modSem.state_defined_types_fupd_2'(s(fun(fun('type.semanticPrimitives.tid_or_exn',bool),fun('type.semanticPrimitives.tid_or_exn',bool)),'const.combin.K_1'(s(fun('type.semanticPrimitives.tid_or_exn',bool),sK11))),s('type.modSem.state'(sK0),'const.modSem.state_defined_mods_fupd_2'(s(fun(fun('type.list.list'('type.string.char'),bool),fun('type.list.list'('type.string.char'),bool)),'const.combin.K_1'(s(fun('type.list.list'('type.string.char'),bool),sK12))),s('type.modSem.state'(sK0),'const.modSem.state_globals_fupd_2'(s(fun('type.list.list'('type.option.option'('type.modSem.v')),'type.list.list'('type.option.option'('type.modSem.v'))),'const.combin.K_1'(s('type.list.list'('type.option.option'('type.modSem.v')),sK13))),s('type.modSem.state'(sK0),'const.bool.ARB_0')))))))))))))),
  inference(cnf_transformation,[],[f133])).
% SZS output end Proof for thm.modSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 155
% Passive clauses: 770
% Generated clauses: 21097
% Final active clauses: 70
% Final passive clauses: 154
% Input formulas: 44
% Initial clauses: 56
% 
% Duplicate literals: 788
% Trivial inequalities: 208
% Fw subsumption resolutions: 1065
% Fw demodulations: 4679
% Bw demodulations: 372
% Condensations: 1946
% Global subsumptions: 13
% 
% Simple tautologies: 171
% Equational tautologies: 168
% Forward subsumptions: 11070
% Fw demodulations to eq. taut.: 24
% Bw demodulations to eq. taut.: 3
% 
% Unit resulting resolution: 987
% Forward superposition: 4832
% Backward superposition: 4815
% Self superposition: 239
% Equality factoring: 82
% Equality resolution: 21
% 
% Split clauses: 83
% Split components: 171
% SAT solver clauses: 1070
% SAT solver unit clauses: 84
% SAT solver binary clauses: 218
% 
% Sat splits: 83
% Sat splitting refutations: 119
% 
% Memory used [KB]: 11257
% Time elapsed: 0.851 s
% ------------------------------
% ------------------------------
% Success in time 2.17 s
