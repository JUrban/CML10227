Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% (96610)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 123
% Passive clauses: 1027
% Generated clauses: 9047
% Final active clauses: 98
% Final passive clauses: 764
% Input formulas: 17
% Initial clauses: 26
% 
% Duplicate literals: 683
% Trivial inequalities: 103
% Fw subsumption resolutions: 1304
% Fw demodulations: 882
% Bw demodulations: 16
% 
% Simple tautologies: 233
% Equational tautologies: 42
% Forward subsumptions: 3905
% Fw demodulations to eq. taut.: 2
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 197
% Forward superposition: 2716
% Backward superposition: 3603
% Self superposition: 185
% Equality factoring: 132
% Equality resolution: 19
% 
% Split clauses: 702
% Split components: 1444
% SAT solver clauses: 990
% SAT solver unit clauses: 48
% SAT solver binary clauses: 241
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 1
% 
% Sat splits: 702
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 986
% TWLsolver calls for satisfiability: 103
% 
% Memory used [KB]: 6140
% Time elapsed: 0.650 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f1695,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1681,f57,f83,f225,f230,f61,f92,f77,f101,f1622,f1639,f55,f87,f1235,f1247,f74,f99,f188,f194,f71,f98,f160,f162,f58,f89,f79,f102,f105,f107,f56,f85,f64,f94])).
fof(f94,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(cnf_transformation,[],[f94_D])).
fof(f94_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f64,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X11] : (s(bool,'T_0') = s(bool,X11) <=> p(s(bool,X11)))),
  file('thm.bvp_to_wordProps.n2w_lsr_eq_|48|','thm.bool.EQ_CLAUSES|split|1')).
fof(f85,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) | $spl2),
  inference(cnf_transformation,[],[f85_D])).
fof(f85_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f56,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) & s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) != s('type.fcp.cart'(bool,sK0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1))),s('type.num.num',sK2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f43])).
fof(f43,plain,(
  ? [X0,X1,X2] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) & s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) != s('type.fcp.cart'(bool,X0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))),s('type.num.num',X2))))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ? [X0,X1,X2] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))) & s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) != s('type.fcp.cart'(bool,X0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))),s('type.num.num',X2))))),
  inference(ennf_transformation,[],[f20])).
fof(f20,plain,(
  ~! [X0,X1,X2] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))) => s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))),s('type.num.num',X2))))),
  inference(flattening,[],[f19])).
fof(f19,plain,(
  ~! [X0] : ! [X1,X2] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))) => s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))),s('type.num.num',X2))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))))) => s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X6),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num',X7))),s('type.num.num',X8))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : ((s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',X7),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X8))))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))))))) => s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,X6),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num',X7))),s('type.num.num',X8))))),
  file('thm.bvp_to_wordProps.n2w_lsr_eq_|48|','thm.bvp_to_wordProps.n2w_lsr_eq_|48|')).
fof(f107,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) | $spl34),
  inference(cnf_transformation,[],[f107_D])).
fof(f107_D,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f105,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) | ($spl2 | $spl14)),
  inference(resolution,[],[f94,f85])).
fof(f102,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) | $spl30),
  inference(cnf_transformation,[],[f102_D])).
fof(f102_D,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0)))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f79,plain,(
  ( ! [X0,X1] : (s('type.num.num',X1) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | s('type.num.num',X1) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) => s('type.num.num',X1) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num',X0))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X7,X8] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X8),s('type.num.num',X7)))) => s('type.num.num',X8) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X8),s('type.num.num',X7))))),
  file('thm.bvp_to_wordProps.n2w_lsr_eq_|48|','thm.arithmetic.LESS_MOD')).
fof(f89,plain,(
  p(s(bool,'T_0')) | $spl6),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f58,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvp_to_wordProps.n2w_lsr_eq_|48|',aHL_TRUTH)).
fof(f162,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) | $spl46),
  inference(cnf_transformation,[],[f162_D])).
fof(f162_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f160,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) | ($spl6 | $spl30 | $spl34)),
  inference(subsumption_resolution,[],[f152,f89])).
fof(f152,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK1) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',sK1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))) | ($spl30 | $spl34)),
  inference(superposition,[],[f102,f107])).
fof(f98,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) ) | $spl22),
  inference(cnf_transformation,[],[f98_D])).
fof(f98_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f71,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) )),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0,X1] : s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ! [X0] : ! [X1] : s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X1))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X1),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X7] : s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num',X7))))) = s('type.num.num','const.arithmetic.MOD_2'(s('type.num.num',X7),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))))),
  file('thm.bvp_to_wordProps.n2w_lsr_eq_|48|','thm.words.w2n_n2w')).
fof(f194,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1))))) | $spl60),
  inference(cnf_transformation,[],[f194_D])).
fof(f194_D,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1))))) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f188,plain,(
  s('type.num.num',sK1) = s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1))))) | ($spl22 | $spl46)),
  inference(superposition,[],[f98,f162])).
fof(f99,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,X0),X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X1))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))))) ) | $spl24),
  inference(cnf_transformation,[],[f99_D])).
fof(f99_D,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,X0),X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X1))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f74,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,X0),X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X1))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))))) )),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,X0),X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X1))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,X0),X1),s('type.num.num',X2))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X1))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2)))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : ! [X13,X14] : s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X6),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,X6),X13),s('type.num.num',X14))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X6),X13))),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X14)))))),
  file('thm.bvp_to_wordProps.n2w_lsr_eq_|48|','thm.words.w2n_lsr')).
fof(f1247,plain,(
  ( ! [X0] : (s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,sK0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1))),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))) ) | $spl260),
  inference(cnf_transformation,[],[f1247_D])).
fof(f1247_D,plain,(
  ( ! [X0] : (s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,sK0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1))),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))) ) <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f1235,plain,(
  ( ! [X0] : (s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,sK0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1))),s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))))) ) | ($spl24 | $spl60)),
  inference(superposition,[],[f99,f194])).
fof(f87,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2))))) | $spl4),
  inference(cnf_transformation,[],[f87_D])).
fof(f87_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f55,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num',sK1),s('type.num.num','const.arithmetic.EXP_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',sK2)))))),
  inference(cnf_transformation,[],[f46])).
fof(f1639,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,sK0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1))),s('type.num.num',sK2))))) | $spl342),
  inference(cnf_transformation,[],[f1639_D])).
fof(f1639_D,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,sK0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1))),s('type.num.num',sK2))))) <=> ~$spl342),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl342])])).
fof(f1622,plain,(
  s('type.num.num','const.num.|48|_0') = s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,sK0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1))),s('type.num.num',sK2))))) | ($spl4 | $spl260)),
  inference(superposition,[],[f1247,f87])).
fof(f101,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X1))) != s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X2))) | s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),X2)) ) | $spl28),
  inference(cnf_transformation,[],[f101_D])).
fof(f101_D,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X1))) != s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X2))) | s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),X2)) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f77,plain,(
  ( ! [X2,X0,X1] : (s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),X2) | s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X1))) != s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X2)))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1,X2] : ((s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X1))) != s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X2))) | s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),X2)) & (s('type.fcp.cart'(bool,X0),X1) != s('type.fcp.cart'(bool,X0),X2) | s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X1))) = s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X2)))))),
  inference(nnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0,X1,X2] : (s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X1))) = s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X2))) <=> s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),X2))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ! [X0] : ! [X1,X2] : (s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X1))) = s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X2))) <=> s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),X2))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6] : ! [X12,X13] : (s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X6),X12))) = s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X6),X13))) <=> s('type.fcp.cart'(bool,X6),X12) = s('type.fcp.cart'(bool,X6),X13))),
  file('thm.bvp_to_wordProps.n2w_lsr_eq_|48|','thm.words.w2n_|49||49|')).
fof(f92,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0')))))) ) | $spl10),
  inference(cnf_transformation,[],[f92_D])).
fof(f92_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0')))))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f61,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0')))))) )),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0')))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0')))))),
  file('thm.bvp_to_wordProps.n2w_lsr_eq_|48|','thm.words.word_|48|_n2w')).
fof(f230,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X1))) | s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0')))) ) | $spl66),
  inference(cnf_transformation,[],[f230_D])).
fof(f230_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X1))) | s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f225,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X0),X1))) | s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0')))) ) | ($spl10 | $spl28)),
  inference(superposition,[],[f101,f92])).
fof(f83,plain,(
  s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) != s('type.fcp.cart'(bool,sK0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1))),s('type.num.num',sK2))) | $spl1),
  inference(cnf_transformation,[],[f83_D])).
fof(f83_D,plain,(
  s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) != s('type.fcp.cart'(bool,sK0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1))),s('type.num.num',sK2))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f57,plain,(
  s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) != s('type.fcp.cart'(bool,sK0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1))),s('type.num.num',sK2)))),
  inference(cnf_transformation,[],[f46])).
fof(f1681,plain,(
  $false | ($spl1 | $spl66 | $spl342)),
  inference(subsumption_resolution,[],[f1676,f83])).
fof(f1676,plain,(
  s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,sK0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1))),s('type.num.num',sK2))) | ($spl66 | $spl342)),
  inference(trivial_inequality_removal,[],[f1656])).
fof(f1656,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.|48|_0') | s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))) = s('type.fcp.cart'(bool,sK0),'const.words.word_lsr_2'(s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK1))),s('type.num.num',sK2))) | ($spl66 | $spl342)),
  inference(superposition,[],[f230,f1639])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 73
% Passive clauses: 178
% Generated clauses: 1593
% Final active clauses: 55
% Final passive clauses: 98
% Input formulas: 17
% Initial clauses: 26
% 
% Duplicate literals: 95
% Trivial inequalities: 31
% Fw subsumption resolutions: 72
% Fw demodulations: 209
% Bw demodulations: 20
% Condensations: 109
% 
% Simple tautologies: 62
% Equational tautologies: 18
% Forward subsumptions: 583
% Fw demodulations to eq. taut.: 2
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 25
% Forward superposition: 402
% Backward superposition: 350
% Self superposition: 34
% Equality factoring: 26
% Equality resolution: 10
% 
% Split clauses: 11
% Split components: 27
% SAT solver clauses: 257
% SAT solver unit clauses: 34
% SAT solver binary clauses: 25
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 11
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 254
% TWLsolver calls for satisfiability: 116
% 
% Memory used [KB]: 2686
% Time elapsed: 0.089 s
% ------------------------------
% ------------------------------
% Success in time 0.76 s
