Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvlSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvlSem
% SZS output start Proof for thm.bvlSem
fof(f1373,plain,(
  $false),
  inference(subsumption_resolution,[],[f1372,f30])).
fof(f30,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvlSem.datatype_v',aHL_TRUTH)).
fof(f1372,plain,(
  ~p(s(bool,'T_0'))),
  inference(forward_demodulation,[],[f29,f38])).
fof(f38,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X7] : ! [X8] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X7,X8)))),
  file('thm.bvlSem.datatype_v','thm.bool.DATATYPE_TAG_THM')).
fof(f29,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.num.num','type.bvlSem.v'),bool),happ(s(fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool))),happ(s(fun(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool)))),happ(s(fun(fun('type.integer.int','type.bvlSem.v'),fun(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool))))),sK0),s(fun('type.integer.int','type.bvlSem.v'),'const.bvlSem.Number_0'))),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),'const.bvlSem.Word64_0'))),s(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),'const.bvlSem.Block_0'))),s(fun('type.num.num','type.bvlSem.v'),'const.bvlSem.CodePtr_0'))),s(fun('type.num.num','type.bvlSem.v'),'const.bvlSem.RefPtr_0'))))))),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.num.num','type.bvlSem.v'),bool),happ(s(fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool))),happ(s(fun(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool)))),happ(s(fun(fun('type.integer.int','type.bvlSem.v'),fun(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool))))),sK0),s(fun('type.integer.int','type.bvlSem.v'),'const.bvlSem.Number_0'))),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),'const.bvlSem.Word64_0'))),s(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),'const.bvlSem.Block_0'))),s(fun('type.num.num','type.bvlSem.v'),'const.bvlSem.CodePtr_0'))),s(fun('type.num.num','type.bvlSem.v'),'const.bvlSem.RefPtr_0'))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f25])).
fof(f25,plain,(
  ? [X0] : ~p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.num.num','type.bvlSem.v'),bool),happ(s(fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool))),happ(s(fun(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool)))),happ(s(fun(fun('type.integer.int','type.bvlSem.v'),fun(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool))))),X0),s(fun('type.integer.int','type.bvlSem.v'),'const.bvlSem.Number_0'))),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),'const.bvlSem.Word64_0'))),s(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),'const.bvlSem.Block_0'))),s(fun('type.num.num','type.bvlSem.v'),'const.bvlSem.CodePtr_0'))),s(fun('type.num.num','type.bvlSem.v'),'const.bvlSem.RefPtr_0'))))))),
  inference(ennf_transformation,[],[f14])).
fof(f14,plain,(
  ~! [X0] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.num.num','type.bvlSem.v'),bool),happ(s(fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool))),happ(s(fun(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool)))),happ(s(fun(fun('type.integer.int','type.bvlSem.v'),fun(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool))))),X0),s(fun('type.integer.int','type.bvlSem.v'),'const.bvlSem.Number_0'))),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),'const.bvlSem.Word64_0'))),s(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),'const.bvlSem.Block_0'))),s(fun('type.num.num','type.bvlSem.v'),'const.bvlSem.CodePtr_0'))),s(fun('type.num.num','type.bvlSem.v'),'const.bvlSem.RefPtr_0'))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.num.num','type.bvlSem.v'),bool),happ(s(fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool))),happ(s(fun(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool)))),happ(s(fun(fun('type.integer.int','type.bvlSem.v'),fun(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool))))),X6),s(fun('type.integer.int','type.bvlSem.v'),'const.bvlSem.Number_0'))),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),'const.bvlSem.Word64_0'))),s(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),'const.bvlSem.Block_0'))),s(fun('type.num.num','type.bvlSem.v'),'const.bvlSem.CodePtr_0'))),s(fun('type.num.num','type.bvlSem.v'),'const.bvlSem.RefPtr_0'))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.bool.DATATYPE_1'(s(bool,happ(s(fun(fun('type.num.num','type.bvlSem.v'),bool),happ(s(fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool)),happ(s(fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool))),happ(s(fun(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool)))),happ(s(fun(fun('type.integer.int','type.bvlSem.v'),fun(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),fun(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),fun(fun('type.num.num','type.bvlSem.v'),fun(fun('type.num.num','type.bvlSem.v'),bool))))),X6),s(fun('type.integer.int','type.bvlSem.v'),'const.bvlSem.Number_0'))),s(fun('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'type.bvlSem.v'),'const.bvlSem.Word64_0'))),s(fun('type.num.num',fun('type.list.list'('type.bvlSem.v'),'type.bvlSem.v')),'const.bvlSem.Block_0'))),s(fun('type.num.num','type.bvlSem.v'),'const.bvlSem.CodePtr_0'))),s(fun('type.num.num','type.bvlSem.v'),'const.bvlSem.RefPtr_0'))))))),
  file('thm.bvlSem.datatype_v','thm.bvlSem.datatype_v')).
% SZS output end Proof for thm.bvlSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 29
% Passive clauses: 113
% Generated clauses: 1301
% Final active clauses: 27
% Final passive clauses: 68
% Input formulas: 12
% Initial clauses: 12
% 
% Duplicate literals: 145
% Trivial inequalities: 20
% Fw subsumption resolutions: 107
% Fw demodulations: 117
% 
% Simple tautologies: 60
% Equational tautologies: 19
% Forward subsumptions: 696
% 
% Binary resolution: 6
% Forward superposition: 518
% Backward superposition: 237
% Self superposition: 69
% Equality factoring: 48
% Equality resolution: 9
% 
% Split clauses: 22
% Split components: 44
% SAT solver clauses: 36
% SAT solver unit clauses: 4
% SAT solver binary clauses: 18
% 
% Sat splits: 22
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 36
% TWLsolver calls for satisfiability: 13
% 
% Memory used [KB]: 1151
% Time elapsed: 0.034 s
% ------------------------------
% ------------------------------
% Success in time 0.036 s
