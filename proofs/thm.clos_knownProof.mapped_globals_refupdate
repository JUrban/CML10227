Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f8891,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f8857])).
fof(f8857,plain,(
  s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK1))) != s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK1)))),
  inference(superposition,[],[f128,f8600])).
fof(f8600,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X2))) = s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),X1),s('type.closSem.state'(X0),X2)))))) )),
  inference(forward_demodulation,[],[f8562,f134])).
fof(f134,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X1))) = s(fun('type.num.num',bool),'const.pred_set.GSPEC_1'(s(fun('type.num.num','type.pair.prod'('type.num.num',bool)),'_dst_x1x1_2'(s(fun('type.num.num',fun(bool,'type.pair.prod'('type.num.num',bool))),'const.pair.,_0'),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun(fun('type.closSem.v',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closSem.v',bool)),'_dst_x00x10x01_3'(s(fun('type.option.option'('type.option.option'('type.closSem.v')),fun('type.option.option'('type.option.option'('type.closSem.v')),bool)),'=_0'),s(fun('type.num.num','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.option.option'('type.closSem.v')),'type.option.option'('type.option.option'('type.closSem.v')))),'const.closSem.get_global_0'),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))))),s(fun('type.closSem.v','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x0x1_2'(s(fun('type.option.option'('type.closSem.v'),'type.option.option'('type.option.option'('type.closSem.v'))),'const.option.SOME_0'),s(fun('type.closSem.v','type.option.option'('type.closSem.v')),'const.option.SOME_0')))))))))))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1] : s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X1))) = s(fun('type.num.num',bool),'const.pred_set.GSPEC_1'(s(fun('type.num.num','type.pair.prod'('type.num.num',bool)),'_dst_x1x1_2'(s(fun('type.num.num',fun(bool,'type.pair.prod'('type.num.num',bool))),'const.pair.,_0'),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun(fun('type.closSem.v',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closSem.v',bool)),'_dst_x00x10x01_3'(s(fun('type.option.option'('type.option.option'('type.closSem.v')),fun('type.option.option'('type.option.option'('type.closSem.v')),bool)),'=_0'),s(fun('type.num.num','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.option.option'('type.closSem.v')),'type.option.option'('type.option.option'('type.closSem.v')))),'const.closSem.get_global_0'),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))))),s(fun('type.closSem.v','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x0x1_2'(s(fun('type.option.option'('type.closSem.v'),'type.option.option'('type.option.option'('type.closSem.v'))),'const.option.SOME_0'),s(fun('type.closSem.v','type.option.option'('type.closSem.v')),'const.option.SOME_0')))))))))))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0] : ! [X1] : s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X1))) = s(fun('type.num.num',bool),'const.pred_set.GSPEC_1'(s(fun('type.num.num','type.pair.prod'('type.num.num',bool)),'_dst_x1x1_2'(s(fun('type.num.num',fun(bool,'type.pair.prod'('type.num.num',bool))),'const.pair.,_0'),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun(fun('type.closSem.v',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closSem.v',bool)),'_dst_x00x10x01_3'(s(fun('type.option.option'('type.option.option'('type.closSem.v')),fun('type.option.option'('type.option.option'('type.closSem.v')),bool)),'=_0'),s(fun('type.num.num','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.option.option'('type.closSem.v')),'type.option.option'('type.option.option'('type.closSem.v')))),'const.closSem.get_global_0'),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))))),s(fun('type.closSem.v','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x0x1_2'(s(fun('type.option.option'('type.closSem.v'),'type.option.option'('type.option.option'('type.closSem.v'))),'const.option.SOME_0'),s(fun('type.closSem.v','type.option.option'('type.closSem.v')),'const.option.SOME_0')))))))))))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6] : ! [X7] : s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X6),X7))) = s(fun('type.num.num',bool),'const.pred_set.GSPEC_1'(s(fun('type.num.num','type.pair.prod'('type.num.num',bool)),'_dst_x1x1_2'(s(fun('type.num.num',fun(bool,'type.pair.prod'('type.num.num',bool))),'const.pair.,_0'),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun(fun('type.closSem.v',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closSem.v',bool)),'_dst_x00x10x01_3'(s(fun('type.option.option'('type.option.option'('type.closSem.v')),fun('type.option.option'('type.option.option'('type.closSem.v')),bool)),'=_0'),s(fun('type.num.num','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.option.option'('type.closSem.v')),'type.option.option'('type.option.option'('type.closSem.v')))),'const.closSem.get_global_0'),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X6),X7))))),s(fun('type.closSem.v','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x0x1_2'(s(fun('type.option.option'('type.closSem.v'),'type.option.option'('type.option.option'('type.closSem.v'))),'const.option.SOME_0'),s(fun('type.closSem.v','type.option.option'('type.closSem.v')),'const.option.SOME_0')))))))))))),
  file('thm.clos_knownProof.mapped_globals_refupdate','thm.clos_knownProof.mapped_globals_def')).
fof(f8562,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),X1),s('type.closSem.state'(X0),X2))))) = s(fun('type.num.num',bool),'const.pred_set.GSPEC_1'(s(fun('type.num.num','type.pair.prod'('type.num.num',bool)),'_dst_x1x1_2'(s(fun('type.num.num',fun(bool,'type.pair.prod'('type.num.num',bool))),'const.pair.,_0'),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun(fun('type.closSem.v',bool),bool),'?_0'),s(fun('type.num.num',fun('type.closSem.v',bool)),'_dst_x00x10x01_3'(s(fun('type.option.option'('type.option.option'('type.closSem.v')),fun('type.option.option'('type.option.option'('type.closSem.v')),bool)),'=_0'),s(fun('type.num.num','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x1x0_2'(s(fun('type.num.num',fun('type.list.list'('type.option.option'('type.closSem.v')),'type.option.option'('type.option.option'('type.closSem.v')))),'const.closSem.get_global_0'),s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X2))))),s(fun('type.closSem.v','type.option.option'('type.option.option'('type.closSem.v'))),'_dst_x0x1_2'(s(fun('type.option.option'('type.closSem.v'),'type.option.option'('type.option.option'('type.closSem.v'))),'const.option.SOME_0'),s(fun('type.closSem.v','type.option.option'('type.closSem.v')),'const.option.SOME_0')))))))))))) )),
  inference(superposition,[],[f134,f147])).
fof(f147,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),X2),s('type.closSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),X2),s('type.closSem.state'(X0),X1)))))),
  inference(flattening,[],[f73])).
fof(f73,plain,(
  ! [X0] : ! [X1,X2] : s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),X1))) = s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),X2),s('type.closSem.state'(X0),X1)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X10] : ! [X7,X8] : s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X10),X7))) = s('type.list.list'('type.option.option'('type.closSem.v')),'const.closSem.state_globals_1'(s('type.closSem.state'(X10),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),X8),s('type.closSem.state'(X10),X7)))))),
  file('thm.clos_knownProof.mapped_globals_refupdate','thm.closSem.closSem_63_prove_ltb')).
fof(f128,plain,(
  s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK1))) != s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),sK2),s('type.closSem.state'(sK0),sK1)))))),
  inference(cnf_transformation,[],[f121])).
fof(f121,plain,(
  s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),sK1))) != s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(sK0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),sK2),s('type.closSem.state'(sK0),sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f119])).
fof(f119,plain,(
  ? [X0,X1,X2] : s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X1))) != s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),X2),s('type.closSem.state'(X0),X1)))))),
  inference(ennf_transformation,[],[f45])).
fof(f45,plain,(
  ~! [X0,X1,X2] : s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X1))) = s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),X2),s('type.closSem.state'(X0),X1)))))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ~! [X0] : ! [X1,X2] : s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),X1))) = s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X0),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),X2),s('type.closSem.state'(X0),X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X6),X7))) = s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X6),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),X8),s('type.closSem.state'(X6),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X6),X7))) = s(fun('type.num.num',bool),'const.clos_knownProof.mapped_globals_1'(s('type.closSem.state'(X6),'const.closSem.state_refs_fupd_2'(s(fun('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v')),'type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.closSem.v'))),X8),s('type.closSem.state'(X6),X7)))))),
  file('thm.clos_knownProof.mapped_globals_refupdate','thm.clos_knownProof.mapped_globals_refupdate')).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 123
% Passive clauses: 1778
% Generated clauses: 8542
% Final active clauses: 87
% Final passive clauses: 1439
% Input formulas: 42
% Initial clauses: 45
% 
% Duplicate literals: 466
% Trivial inequalities: 64
% Fw subsumption resolutions: 433
% Fw demodulations: 908
% Bw demodulations: 25
% 
% Simple tautologies: 91
% Equational tautologies: 22
% Forward subsumptions: 4448
% 
% Binary resolution: 106
% Forward superposition: 3353
% Backward superposition: 2872
% Self superposition: 132
% Equality factoring: 58
% Equality resolution: 10
% 
% Split clauses: 231
% Split components: 471
% SAT solver clauses: 372
% SAT solver unit clauses: 13
% SAT solver binary clauses: 90
% 
% Sat splits: 231
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 370
% TWLsolver calls for satisfiability: 81
% 
% Memory used [KB]: 11129
% Time elapsed: 0.415 s
% ------------------------------
% ------------------------------
% Success in time 0.44 s
