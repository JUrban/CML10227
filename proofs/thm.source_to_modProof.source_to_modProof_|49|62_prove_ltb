Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (70513)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 102
% Passive clauses: 2647
% Generated clauses: 16243
% Final active clauses: 102
% Final passive clauses: 2442
% Input formulas: 37
% Initial clauses: 55
% 
% Duplicate literals: 557
% Trivial inequalities: 243
% Fw subsumption resolutions: 1652
% Fw demodulations: 2520
% 
% Simple tautologies: 260
% Equational tautologies: 26
% Forward subsumptions: 8089
% 
% Binary resolution: 11
% Forward superposition: 5893
% Backward superposition: 4957
% Self superposition: 225
% Equality factoring: 60
% Equality resolution: 37
% 
% Split clauses: 145
% Split components: 290
% SAT solver clauses: 304
% SAT solver unit clauses: 21
% SAT solver binary clauses: 86
% 
% Sat splits: 145
% 
% TWLsolver clauses: 304
% TWLsolver calls for satisfiability: 62
% 
% Memory used [KB]: 28528
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (70541)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 77
% Passive clauses: 1091
% Generated clauses: 10180
% Final active clauses: 65
% Final passive clauses: 741
% Input formulas: 37
% Initial clauses: 55
% 
% Duplicate literals: 334
% Trivial inequalities: 123
% Fw subsumption resolutions: 451
% Fw demodulations: 789
% Bw demodulations: 237
% Condensations: 575
% Global subsumptions: 4
% 
% Simple tautologies: 174
% Equational tautologies: 25
% Forward subsumptions: 4990
% Bw demodulations to eq. taut.: 13
% 
% Binary resolution: 16
% Forward superposition: 2987
% Backward superposition: 2916
% Self superposition: 172
% Equality factoring: 48
% Equality resolution: 18
% 
% Split clauses: 58
% Split components: 118
% SAT solver clauses: 1677
% SAT solver unit clauses: 77
% SAT solver binary clauses: 52
% SAT solver learnt clauses: 8
% 
% Sat splits: 58
% Sat splitting refutations: 6
% 
% TWLsolver clauses: 1661
% TWLsolver calls for satisfiability: 196
% 
% Memory used [KB]: 21875
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% (70572)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 440
% Passive clauses: 11433
% Generated clauses: 177618
% Final active clauses: 174
% Final passive clauses: 924
% Input formulas: 37
% Initial clauses: 55
% Discarded non-redundant clauses: 19841
% 
% Duplicate literals: 2662
% Trivial inequalities: 1172
% Fw subsumption resolutions: 4667
% Fw demodulations: 58095
% Bw demodulations: 6169
% Condensations: 4634
% Global subsumptions: 140
% 
% Simple tautologies: 829
% Equational tautologies: 588
% Forward subsumptions: 71124
% Fw demodulations to eq. taut.: 14237
% Bw demodulations to eq. taut.: 322
% 
% Unit resulting resolution: 33316
% Forward superposition: 32621
% Backward superposition: 25665
% Self superposition: 393
% Equality factoring: 110
% Equality resolution: 100
% 
% Split clauses: 135
% Split components: 278
% SAT solver clauses: 12114
% SAT solver unit clauses: 897
% SAT solver binary clauses: 4697
% 
% Sat splits: 135
% Sat splitting refutations: 269
% 
% Memory used [KB]: 125882
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f284,plain,(
  $false),
  inference(equality_resolution,[],[f212])).
fof(f212,plain,(
  ( ! [X8] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),X8) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.source_to_mod.compile_top_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK1),s('type.ast.top',sK4)))) )),
  inference(superposition,[],[f183,f97])).
fof(f97,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))),
  inference(flattening,[],[f55])).
fof(f55,plain,(
  ! [X0,X1] : ! [X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X6,X29] : ! [X33] : s('type.pair.prod'(X6,X29),X33) = s('type.pair.prod'(X6,X29),'const.pair.,_2'(s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X29),X33))),s(X29,'const.pair.SND_1'(s('type.pair.prod'(X6,X29),X33)))))),
  file('thm.source_to_modProof.source_to_modProof_|49|62_prove_ltb','thm.pair.PAIR')).
fof(f183,plain,(
  ( ! [X10,X11] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt')),X10))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.source_to_mod.compile_top_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK1),s('type.ast.top',sK4)))) )),
  inference(superposition,[],[f141,f97])).
fof(f141,plain,(
  ( ! [X14,X12,X13] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.source_to_mod.compile_top_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK1),s('type.ast.top',sK4))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.pair.,_2'(s('type.num.num',X13),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X14),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'),X12)))))) )),
  inference(superposition,[],[f79,f97])).
fof(f79,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.source_to_mod.compile_top_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK1),s('type.ast.top',sK4))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.modLang.prompt',X8)))))))) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X5,X6,X7,X8] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.source_to_mod.compile_top_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(sK0),sK2))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK1),s('type.ast.top',sK4))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.modLang.prompt',X8)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f63])).
fof(f63,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6,X7,X8] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.source_to_mod.compile_top_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X1),s('type.ast.top',X4))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.modLang.prompt',X8)))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6,X7,X8] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.source_to_mod.compile_top_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X1),s('type.ast.top',X4))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.modLang.prompt',X8)))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : ? [X5,X6,X7,X8] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.source_to_mod.compile_top_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X0),X2))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X1),s('type.ast.top',X4))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.modLang.prompt',X8)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12,X13,X14] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.source_to_mod.compile_top_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X8))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.ast.top',X10))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X12),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X13),s('type.modLang.prompt',X14)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12,X13,X14] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.source_to_mod.compile_top_4'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),'const.modSem.state_globals_1'(s('type.modSem.state'(X6),X8))))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X9),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.ast.top',X10))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'))),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),'type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt')),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X12),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'type.modLang.prompt'),'const.pair.,_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X13),s('type.modLang.prompt',X14)))))))),
  file('thm.source_to_modProof.source_to_modProof_|49|62_prove_ltb','thm.source_to_modProof.source_to_modProof_|49|62_prove_ltb')).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 25
% Passive clauses: 62
% Generated clauses: 134
% Final active clauses: 25
% Final passive clauses: 58
% Input formulas: 37
% Initial clauses: 32
% 
% Selected by SInE selection: 18
% SInE iterations: 1
% 
% Duplicate literals: 1
% Trivial inequalities: 1
% 
% Simple tautologies: 9
% Equational tautologies: 1
% Forward subsumptions: 71
% 
% Forward superposition: 171
% Equality resolution: 1
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 1791
% Time elapsed: 0.011 s
% ------------------------------
% ------------------------------
% Success in time 11.76 s
