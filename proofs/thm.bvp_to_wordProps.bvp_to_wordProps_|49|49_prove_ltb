Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% (91231)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 94
% Passive clauses: 2099
% Generated clauses: 16261
% Final active clauses: 70
% Final passive clauses: 1896
% Input formulas: 7
% Initial clauses: 11
% 
% Duplicate literals: 1133
% Trivial inequalities: 226
% Fw subsumption resolutions: 2296
% Fw demodulations: 845
% Bw demodulations: 16
% 
% Simple tautologies: 339
% Equational tautologies: 99
% Forward subsumptions: 6978
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 75
% Forward superposition: 6698
% Backward superposition: 4167
% Self superposition: 349
% Equality factoring: 278
% Equality resolution: 14
% 
% Split clauses: 816
% Split components: 1638
% SAT solver clauses: 2342
% SAT solver unit clauses: 263
% SAT solver binary clauses: 695
% 
% Sat splits: 816
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 2338
% TWLsolver calls for satisfiability: 113
% 
% Memory used [KB]: 6268
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f122,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f121,f29,f41,f39,f107,f40,f36,f55,f28,f43,f30,f47,f35,f56,f67,f69,f27,f45,f31,f49,f32,f50])).
fof(f50,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f50_D])).
fof(f50_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f32,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_|49|49_prove_ltb',aHL_BOOL_CASES)).
fof(f49,plain,(
  ~p(s(bool,'F_0')) | $spl11),
  inference(cnf_transformation,[],[f49_D])).
fof(f49_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f31,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f11])).
fof(f11,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_|49|49_prove_ltb',aHL_FALSITY)).
fof(f45,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK5),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),sK2)))))) | $spl6),
  inference(cnf_transformation,[],[f45_D])).
fof(f45_D,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK5),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),sK2)))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f27,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK5),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),sK2))))))),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK5),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),sK2)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3))) & (~p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),sK5),s('type.list.list'(sK1),sK3)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),sK4),s('type.list.list'(sK1),sK2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6])],[f19])).
fof(f19,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X6),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X4))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X2)))))) & s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) & (~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X6),s('type.list.list'(X0),X5),s('type.list.list'(X1),X3)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X6),s('type.list.list'(X0),X4),s('type.list.list'(X1),X2))))))),
  inference(flattening,[],[f18])).
fof(f18,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X6),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X4))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X2)))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) & (~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X6),s('type.list.list'(X0),X5),s('type.list.list'(X1),X3)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X6),s('type.list.list'(X0),X4),s('type.list.list'(X1),X2)))))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X6),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X4))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X2)))))) => (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) => (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X6),s('type.list.list'(X0),X5),s('type.list.list'(X1),X3)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X6),s('type.list.list'(X0),X4),s('type.list.list'(X1),X2)))))))),
  inference(flattening,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5,X6] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X6),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X4))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X3),s('type.list.list'(X1),X2)))))) => (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X3))) => (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X6),s('type.list.list'(X0),X5),s('type.list.list'(X1),X3)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X6),s('type.list.list'(X0),X4),s('type.list.list'(X1),X2)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11,X12] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X12),s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X11),s('type.list.list'(X6),X10))),s('type.list.list'(X7),'const.list.APPEND_2'(s('type.list.list'(X7),X9),s('type.list.list'(X7),X8)))))) => (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X11))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X9))) => (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X12),s('type.list.list'(X6),X11),s('type.list.list'(X7),X9)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X12),s('type.list.list'(X6),X10),s('type.list.list'(X7),X8)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11,X12] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X12),s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X11),s('type.list.list'(X6),X10))),s('type.list.list'(X7),'const.list.APPEND_2'(s('type.list.list'(X7),X9),s('type.list.list'(X7),X8)))))) => (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X11))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X9))) => (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X12),s('type.list.list'(X6),X11),s('type.list.list'(X7),X9)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X12),s('type.list.list'(X6),X10),s('type.list.list'(X7),X8)))))))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_|49|49_prove_ltb','thm.bvp_to_wordProps.bvp_to_wordProps_|49|49_prove_ltb')).
fof(f69,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK5),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),sK2))))) | $spl28),
  inference(cnf_transformation,[],[f69_D])).
fof(f69_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK5),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),sK2))))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f67,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK5),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),sK2))))) | ($spl6 | $spl11 | $spl12)),
  inference(subsumption_resolution,[],[f62,f49])).
fof(f62,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),'const.list.APPEND_2'(s('type.list.list'(sK0),sK5),s('type.list.list'(sK0),sK4))),s('type.list.list'(sK1),'const.list.APPEND_2'(s('type.list.list'(sK1),sK3),s('type.list.list'(sK1),sK2))))) | ($spl6 | $spl12)),
  inference(superposition,[],[f45,f50])).
fof(f56,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X2))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X6),s('type.list.list'(X1),X3)))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X5),s('type.list.list'(X1),X6)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X6)))) ) | $spl22),
  inference(cnf_transformation,[],[f56_D])).
fof(f56_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X2))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X6),s('type.list.list'(X1),X3)))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X5),s('type.list.list'(X1),X6)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X6)))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f35,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X5),s('type.list.list'(X1),X6)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X2))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X6),s('type.list.list'(X1),X3)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X6)))) )),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X6))) | ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X2))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X6),s('type.list.list'(X1),X3)))))) | (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X5),s('type.list.list'(X1),X6)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))) & (~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X5),s('type.list.list'(X1),X6)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X2))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X6),s('type.list.list'(X1),X3)))))))))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X6))) | ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X2))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X6),s('type.list.list'(X1),X3)))))) | (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X5),s('type.list.list'(X1),X6)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))) & ((~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X5),s('type.list.list'(X1),X6)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X2))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X6),s('type.list.list'(X1),X3)))))))))),
  inference(nnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X6))) | (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X2))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X6),s('type.list.list'(X1),X3)))))) <=> (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X5),s('type.list.list'(X1),X6)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))),
  inference(ennf_transformation,[],[f17])).
fof(f17,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X6))) => (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X2))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X6),s('type.list.list'(X1),X3)))))) <=> (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X5),s('type.list.list'(X1),X6)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))),
  inference(flattening,[],[f16])).
fof(f16,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X6))) => (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X2))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X6),s('type.list.list'(X1),X3)))))) <=> (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X5),s('type.list.list'(X1),X6)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : ! [X13,X14,X12,X15,X16] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X15))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X7),X16))) => (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X12),s('type.list.list'(X6),'const.list.APPEND_2'(s('type.list.list'(X6),X15),s('type.list.list'(X6),X13))),s('type.list.list'(X7),'const.list.APPEND_2'(s('type.list.list'(X7),X16),s('type.list.list'(X7),X14)))))) <=> (p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X12),s('type.list.list'(X6),X15),s('type.list.list'(X7),X16)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun(X6,fun(X7,bool)),X12),s('type.list.list'(X6),X13),s('type.list.list'(X7),X14)))))))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_|49|49_prove_ltb','thm.copying_gc.EVERY2_APPEND')).
fof(f47,plain,(
  p(s(bool,'T_0')) | $spl8),
  inference(cnf_transformation,[],[f47_D])).
fof(f47_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f30,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvp_to_wordProps.bvp_to_wordProps_|49|49_prove_ltb',aHL_TRUTH)).
fof(f43,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3))) | $spl4),
  inference(cnf_transformation,[],[f43_D])).
fof(f43_D,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f28,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3)))),
  inference(cnf_transformation,[],[f23])).
fof(f55,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X2))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X6),s('type.list.list'(X1),X3)))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X6)))) ) | $spl20),
  inference(cnf_transformation,[],[f55_D])).
fof(f55_D,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X2))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X6),s('type.list.list'(X1),X3)))))) | p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X6)))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f36,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),X2),s('type.list.list'(X1),X3)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(X0,fun(X1,bool)),X4),s('type.list.list'(X0),'const.list.APPEND_2'(s('type.list.list'(X0),X5),s('type.list.list'(X0),X2))),s('type.list.list'(X1),'const.list.APPEND_2'(s('type.list.list'(X1),X6),s('type.list.list'(X1),X3)))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X1),X6)))) )),
  inference(cnf_transformation,[],[f26])).
fof(f40,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),sK4),s('type.list.list'(sK1),sK2)))) | $spl2),
  inference(cnf_transformation,[],[f40_D])).
fof(f40_D,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),sK4),s('type.list.list'(sK1),sK2)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f107,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),sK4),s('type.list.list'(sK1),sK2)))) | ($spl4 | $spl8 | $spl20 | $spl28)),
  inference(subsumption_resolution,[],[f106,f43])).
fof(f106,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),sK4),s('type.list.list'(sK1),sK2)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3))) | ($spl8 | $spl20 | $spl28)),
  inference(subsumption_resolution,[],[f104,f47])).
fof(f104,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),sK4),s('type.list.list'(sK1),sK2)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3))) | ($spl20 | $spl28)),
  inference(superposition,[],[f55,f69])).
fof(f39,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),sK5),s('type.list.list'(sK1),sK3)))) | $spl1),
  inference(cnf_transformation,[],[f39_D])).
fof(f39_D,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),sK5),s('type.list.list'(sK1),sK3)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f41,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),sK4),s('type.list.list'(sK1),sK2)))) | $spl3),
  inference(cnf_transformation,[],[f41_D])).
fof(f41_D,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),sK4),s('type.list.list'(sK1),sK2)))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f29,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),sK4),s('type.list.list'(sK1),sK2)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),sK5),s('type.list.list'(sK1),sK3))))),
  inference(cnf_transformation,[],[f23])).
fof(f121,plain,(
  $false | ($spl1 | $spl4 | $spl8 | $spl22 | $spl28)),
  inference(subsumption_resolution,[],[f120,f43])).
fof(f120,plain,(
  s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3))) | ($spl1 | $spl8 | $spl22 | $spl28)),
  inference(subsumption_resolution,[],[f119,f39])).
fof(f119,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),sK5),s('type.list.list'(sK1),sK3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3))) | ($spl8 | $spl22 | $spl28)),
  inference(subsumption_resolution,[],[f117,f47])).
fof(f117,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.list.LIST_REL_3'(s(fun(sK0,fun(sK1,bool)),sK6),s('type.list.list'(sK0),sK5),s('type.list.list'(sK1),sK3)))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK0),sK5))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(sK1),sK3))) | ($spl22 | $spl28)),
  inference(superposition,[],[f56,f69])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 17
% Passive clauses: 28
% Generated clauses: 93
% Final active clauses: 14
% Final passive clauses: 5
% Input formulas: 7
% Initial clauses: 11
% 
% Duplicate literals: 1
% Fw subsumption resolutions: 11
% Fw demodulations: 2
% Bw demodulations: 8
% Global subsumptions: 1
% 
% Simple tautologies: 2
% Equational tautologies: 2
% Forward subsumptions: 19
% 
% Binary resolution: 3
% Forward superposition: 14
% Backward superposition: 7
% Self superposition: 2
% Equality factoring: 2
% 
% Split clauses: 2
% Split components: 4
% SAT solver clauses: 40
% SAT solver unit clauses: 15
% SAT solver binary clauses: 7
% SAT solver learnt clauses: 3
% SAT solver learnt literals: 5
% 
% Sat splits: 2
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 36
% TWLsolver calls for satisfiability: 107
% 
% Memory used [KB]: 895
% Time elapsed: 0.006 s
% ------------------------------
% ------------------------------
% Success in time 0.629 s
