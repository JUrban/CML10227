Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% (18934)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 145
% Passive clauses: 1688
% Generated clauses: 24186
% Final active clauses: 103
% Final passive clauses: 1354
% Input formulas: 10
% Initial clauses: 26
% 
% Duplicate literals: 1088
% Trivial inequalities: 476
% Fw subsumption resolutions: 4077
% Fw demodulations: 2958
% Bw demodulations: 33
% 
% Simple tautologies: 554
% Equational tautologies: 62
% Forward subsumptions: 11202
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 161
% Forward superposition: 7688
% Backward superposition: 7002
% Self superposition: 244
% Equality factoring: 177
% Equality resolution: 38
% 
% Split clauses: 1280
% Split components: 2631
% SAT solver clauses: 2183
% SAT solver unit clauses: 31
% SAT solver binary clauses: 154
% 
% Sat splits: 1280
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 2181
% TWLsolver calls for satisfiability: 188
% 
% Memory used [KB]: 11257
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f1394,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1083,f44,f87,f106,f108,f41,f83,f45,f89,f47,f91,f257,f258,f46,f90,f51,f93,f109,f111,f42,f81,f153,f156,f149,f151,f40,f85,f1122,f1123,f96,f104,f1208,f1100,f135,f1281,f1249,f1260,f1250,f1262,f43,f79,f1350,f154,f158])).
fof(f158,plain,(
  ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'T_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(sK1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))))) | $spl49),
  inference(cnf_transformation,[],[f158_D])).
fof(f158_D,plain,(
  ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'T_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(sK1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))))) <=> ~$spl49),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl49])])).
fof(f154,plain,(
  ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'T_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(sK1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))))) | ($spl1 | $spl40)),
  inference(backward_demodulation,[],[f146,f79])).
fof(f146,plain,(
  s(bool,'T_0') = s(bool,sK8) | $spl40),
  inference(cnf_transformation,[],[f146_D])).
fof(f146_D,plain,(
  s(bool,'T_0') = s(bool,sK8) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f1350,plain,(
  $false | ($spl8 | $spl11 | $spl36)),
  inference(subsumption_resolution,[],[f1287,f87])).
fof(f1287,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl36)),
  inference(backward_demodulation,[],[f135,f89])).
fof(f79,plain,(
  ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,sK8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(sK1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))))) | $spl1),
  inference(cnf_transformation,[],[f79_D])).
fof(f79_D,plain,(
  ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,sK8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(sK1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f43,plain,(
  ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,sK8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(sK1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2))))))),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,sK8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(sK1),'const.bool.the_value_0')))) & p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) & ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,sK8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(sK1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8,sK9])],[f25])).
fof(f25,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : (p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X9),s('type.num.num',X3))))))),s('type.num.num',X5),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) & p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) & ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X9),s('type.num.num',X3))))))),s('type.num.num',X5),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : ((p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X9),s('type.num.num',X3))))))),s('type.num.num',X5),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) & p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) & ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X9),s('type.num.num',X3))))))),s('type.num.num',X5),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))))))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : ((p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X9),s('type.num.num',X3))))))),s('type.num.num',X5),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) & p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) => p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X9),s('type.num.num',X3))))))),s('type.num.num',X5),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))))))),
  inference(flattening,[],[f12])).
fof(f12,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9] : ((p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X9),s('type.num.num',X3))))))),s('type.num.num',X5),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) & p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) => p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X9),s('type.num.num',X3))))))),s('type.num.num',X5),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15] : ((p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))))),X12),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X14),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X15),s('type.num.num',X9))))))),s('type.num.num',X11),s('type.bvp_to_word.config',X13),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X10))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X7))),X8)))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X7),'const.bool.the_value_0')))) & p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) => p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))))),X12),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X14),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X15),s('type.num.num',X9))))))),s('type.num.num',X11),s('type.bvp_to_word.config',X13),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X10))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X7))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X7)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(X7),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X7))),X8)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15] : ((p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))))),X12),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X14),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X15),s('type.num.num',X9))))))),s('type.num.num',X11),s('type.bvp_to_word.config',X13),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X10))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X7))),X8)))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X7),'const.bool.the_value_0')))) & p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))) => p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))))),X12),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X14),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X15),s('type.num.num',X9))))))),s('type.num.num',X11),s('type.bvp_to_word.config',X13),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X10))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X7))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X7)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(X7),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X7))),X8)))))))),
  file('thm.bvp_to_wordProps.word_ml_inv_zero','thm.bvp_to_wordProps.word_ml_inv_zero')).
fof(f1262,plain,(
  s(bool,'T_0') = s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'F_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2))) | $spl228),
  inference(cnf_transformation,[],[f1262_D])).
fof(f1262_D,plain,(
  s(bool,'T_0') = s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'F_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2))) <=> ~$spl228),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl228])])).
fof(f1250,plain,(
  s(bool,'T_0') = s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'F_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2))) | ($spl44 | $spl182)),
  inference(backward_demodulation,[],[f1100,f151])).
fof(f1260,plain,(
  ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'F_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(sK1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))))) | $spl227),
  inference(cnf_transformation,[],[f1260_D])).
fof(f1260_D,plain,(
  ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'F_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(sK1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))))) <=> ~$spl227),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl227])])).
fof(f1249,plain,(
  ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'F_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(sK1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,sK1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))))) | ($spl1 | $spl182)),
  inference(backward_demodulation,[],[f1100,f79])).
fof(f1281,plain,(
  $false | ($spl8 | $spl26 | $spl76 | $spl227 | $spl228)),
  inference(subsumption_resolution,[],[f1280,f87])).
fof(f1280,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl26 | $spl76 | $spl227 | $spl228)),
  inference(forward_demodulation,[],[f1279,f1262])).
fof(f1279,plain,(
  ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'F_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))) | ($spl8 | $spl26 | $spl76 | $spl227)),
  inference(subsumption_resolution,[],[f1278,f87])).
fof(f1278,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'F_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))) | ($spl26 | $spl76 | $spl227)),
  inference(forward_demodulation,[],[f1264,f108])).
fof(f1264,plain,(
  ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(sK1),'const.bool.the_value_0')))) | ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'F_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))) | ($spl76 | $spl227)),
  inference(resolution,[],[f1260,f258])).
fof(f135,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl36),
  inference(cnf_transformation,[],[f135_D])).
fof(f135_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f1100,plain,(
  s(bool,'F_0') = s(bool,sK8) | $spl182),
  inference(cnf_transformation,[],[f1100_D])).
fof(f1100_D,plain,(
  s(bool,'F_0') = s(bool,sK8) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f1208,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,sK8) | s(bool,'T_0') = s(bool,X9)) ) | ($spl14 | $spl206)),
  inference(duplicate_literal_removal,[],[f1135])).
fof(f1135,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,sK8) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | ($spl14 | $spl206)),
  inference(superposition,[],[f1123,f91])).
fof(f104,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl22),
  inference(cnf_transformation,[],[f104_D])).
fof(f104_D,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f96,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(superposition,[],[f91,f91])).
fof(f1123,plain,(
  ( ! [X0] : (s(bool,sK8) = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl206),
  inference(cnf_transformation,[],[f1123_D])).
fof(f1123_D,plain,(
  ( ! [X0] : (s(bool,sK8) = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f1122,plain,(
  ( ! [X0] : (s(bool,sK8) = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl22 | $spl41)),
  inference(trivial_inequality_removal,[],[f1116])).
fof(f1116,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,sK8) = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | ($spl22 | $spl41)),
  inference(superposition,[],[f145,f104])).
fof(f145,plain,(
  s(bool,'T_0') != s(bool,sK8) | $spl41),
  inference(cnf_transformation,[],[f145_D])).
fof(f145_D,plain,(
  s(bool,'T_0') != s(bool,sK8) <=> ~$spl41),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl41])])).
fof(f85,plain,(
  p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,sK8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))) | $spl6),
  inference(cnf_transformation,[],[f85_D])).
fof(f85_D,plain,(
  p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,sK8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f40,plain,(
  p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,sK8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2))))),
  inference(cnf_transformation,[],[f33])).
fof(f151,plain,(
  s(bool,'T_0') = s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,sK8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2))) | $spl44),
  inference(cnf_transformation,[],[f151_D])).
fof(f151_D,plain,(
  s(bool,'T_0') = s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,sK8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f149,plain,(
  s(bool,'T_0') = s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,sK8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2))) | ($spl6 | $spl11 | $spl14)),
  inference(subsumption_resolution,[],[f144,f89])).
fof(f144,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,sK8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2))) | ($spl6 | $spl14)),
  inference(superposition,[],[f85,f91])).
fof(f156,plain,(
  s(bool,'T_0') = s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'T_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2))) | $spl46),
  inference(cnf_transformation,[],[f156_D])).
fof(f156_D,plain,(
  s(bool,'T_0') = s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'T_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f153,plain,(
  s(bool,'T_0') = s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'T_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2))) | ($spl40 | $spl44)),
  inference(backward_demodulation,[],[f146,f151])).
fof(f81,plain,(
  p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | $spl2),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f42,plain,(
  p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),
  inference(cnf_transformation,[],[f33])).
fof(f111,plain,(
  s(bool,'T_0') = s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | $spl28),
  inference(cnf_transformation,[],[f111_D])).
fof(f111_D,plain,(
  s(bool,'T_0') = s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f109,plain,(
  s(bool,'T_0') = s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl2 | $spl11 | $spl14)),
  inference(subsumption_resolution,[],[f101,f89])).
fof(f101,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))) | ($spl2 | $spl14)),
  inference(superposition,[],[f81,f91])).
fof(f93,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X7),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X3))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X8),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X5))))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))))) | ~p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5)))))) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) | ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X7),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X3))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X8),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2))))) ) | $spl18),
  inference(cnf_transformation,[],[f93_D])).
fof(f93_D,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X7),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X3))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X8),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X5))))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))))) | ~p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5)))))) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) | ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X7),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X3))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X8),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f51,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X7),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X3))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X8),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X5))))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))))) | ~p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5)))))) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) | ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X7),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X3))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X8),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2))))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : (~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X7),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X3))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X8),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) | ~p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5)))))) | p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X7),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X3))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X8),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X5))))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))))))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : ((~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X7),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X3))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X8),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) | ~p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))))))) | p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X7),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X3))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X8),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X5))))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))))))),
  inference(ennf_transformation,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : ((p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X7),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X3))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X8),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) & p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))))))) => p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X7),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X3))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X8),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X5))))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))))))),
  inference(flattening,[],[f20])).
fof(f20,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : ((p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X7),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X3))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X8),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) & p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))))))) => p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X7),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X3))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X8),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X5))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X5))))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X2)))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6,X7] : ! [X8,X9,X10,X24,X11,X12,X13,X14,X15] : ((p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))))),X12),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X14),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X15),s('type.num.num',X9))))))),s('type.num.num',X11),s('type.bvp_to_word.config',X13),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X10))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X7))),X8)))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X7),'const.bool.the_value_0')))) & p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))))) => p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X7),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X7))))),X12),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X14),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X15),s('type.num.num',X9))))))),s('type.num.num',X11),s('type.bvp_to_word.config',X13),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X6),X10))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X7))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X7)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X24))))),s('type.wordSem.word_loc'(X7),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num',X24))))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X7))),X8)))))))),
  file('thm.bvp_to_wordProps.word_ml_inv_zero','thm.bvp_to_wordProps.word_ml_inv_num')).
fof(f90,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) | $spl12),
  inference(cnf_transformation,[],[f90_D])).
fof(f90_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f46,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X16] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X16),s('type.num.num','const.num.|48|_0')))),
  file('thm.bvp_to_wordProps.word_ml_inv_zero','thm.arithmetic.MULT_|48|')).
fof(f258,plain,(
  ( ! [X6,X4,X2,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X2),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X8),X9))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X10)))))) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) | ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X2),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X8),X9))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X10))))) ) | $spl76),
  inference(cnf_transformation,[],[f258_D])).
fof(f258_D,plain,(
  ( ! [X6,X4,X2,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X2),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X8),X9))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X10)))))) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) | ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X2),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X8),X9))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X10))))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f257,plain,(
  ( ! [X6,X4,X2,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X2),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X8),X9))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X10)))))) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) | ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X2),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X8),X9))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X10))))) ) | ($spl8 | $spl12 | $spl18 | $spl28)),
  inference(subsumption_resolution,[],[f256,f87])).
fof(f256,plain,(
  ( ! [X6,X4,X2,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X2),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X8),X9))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X10)))))) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) | ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X2),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X8),X9))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X10))))) ) | ($spl12 | $spl18 | $spl28)),
  inference(forward_demodulation,[],[f255,f111])).
fof(f255,plain,(
  ( ! [X6,X4,X2,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0')))))) | p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X2),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X8),X9))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X10)))))) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) | ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X2),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X8),X9))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X10))))) ) | ($spl12 | $spl18)),
  inference(forward_demodulation,[],[f254,f90])).
fof(f254,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X2),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X8),X9))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.num.|48|_0'))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X10)))))) | ~p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) | ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X2),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X8),X9))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X10))))) ) | ($spl12 | $spl18)),
  inference(forward_demodulation,[],[f240,f90])).
fof(f240,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X2),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X8),X9))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),'const.list.CONS_2'(s('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1)),'const.pair.,_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))),s('type.wordSem.word_loc'(X1),'const.wordSem.Word_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.num.|48|_0'))))))))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X10)))))) | ~p(s(bool,'const.bviSem.small_enough_int_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num','const.num.|48|_0')))))))) | ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) | ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(X1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(X1))))),X2),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5))))))),s('type.num.num',X6),s('type.bvp_to_word.config',X7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X8),X9))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(X1))),X10))))) ) | ($spl12 | $spl18)),
  inference(superposition,[],[f93,f90])).
fof(f91,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(cnf_transformation,[],[f91_D])).
fof(f91_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f47,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.bvp_to_wordProps.word_ml_inv_zero',aHL_BOOL_CASES)).
fof(f89,plain,(
  ~p(s(bool,'F_0')) | $spl11),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f45,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f14])).
fof(f14,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.bvp_to_wordProps.word_ml_inv_zero',aHL_FALSITY)).
fof(f83,plain,(
  p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(sK1),'const.bool.the_value_0')))) | $spl4),
  inference(cnf_transformation,[],[f83_D])).
fof(f83_D,plain,(
  p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(sK1),'const.bool.the_value_0')))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f41,plain,(
  p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(sK1),'const.bool.the_value_0'))))),
  inference(cnf_transformation,[],[f33])).
fof(f108,plain,(
  s(bool,'T_0') = s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(sK1),'const.bool.the_value_0'))) | $spl26),
  inference(cnf_transformation,[],[f108_D])).
fof(f108_D,plain,(
  s(bool,'T_0') = s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(sK1),'const.bool.the_value_0'))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f106,plain,(
  s(bool,'T_0') = s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(sK1),'const.bool.the_value_0'))) | ($spl4 | $spl11 | $spl14)),
  inference(subsumption_resolution,[],[f100,f89])).
fof(f100,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(sK1),'const.bool.the_value_0'))) | ($spl4 | $spl14)),
  inference(superposition,[],[f83,f91])).
fof(f87,plain,(
  p(s(bool,'T_0')) | $spl8),
  inference(cnf_transformation,[],[f87_D])).
fof(f87_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f44,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvp_to_wordProps.word_ml_inv_zero',aHL_TRUTH)).
fof(f1083,plain,(
  $false | ($spl8 | $spl26 | $spl46 | $spl49 | $spl76)),
  inference(subsumption_resolution,[],[f1082,f87])).
fof(f1082,plain,(
  ~p(s(bool,'T_0')) | ($spl8 | $spl26 | $spl46 | $spl49 | $spl76)),
  inference(forward_demodulation,[],[f1081,f156])).
fof(f1081,plain,(
  ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'T_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))) | ($spl8 | $spl26 | $spl49 | $spl76)),
  inference(subsumption_resolution,[],[f1080,f87])).
fof(f1080,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'T_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))) | ($spl26 | $spl49 | $spl76)),
  inference(forward_demodulation,[],[f1052,f108])).
fof(f1052,plain,(
  ~p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(sK1),'const.bool.the_value_0')))) | ~p(s(bool,'const.bvp_to_wordProps.word_ml_inv_5'(s('type.pair.prod'('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),'type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.copying_gc.heap_element'('type.wordSem.word_loc'(sK1),'type.pair.prod'('type.bvp_to_wordProps.tag','type.list.list'('type.wordSem.word_loc'(sK1))))),sK6),s('type.pair.prod'(bool,'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s(bool,'T_0'),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK9),s('type.num.num',sK3))))))),s('type.num.num',sK5),s('type.bvp_to_word.config',sK7),s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(sK0),sK4))),s('type.list.list'('type.pair.prod'('type.bvlSem.v','type.wordSem.word_loc'(sK1))),sK2)))) | ($spl49 | $spl76)),
  inference(resolution,[],[f258,f158])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 41
% Passive clauses: 127
% Generated clauses: 1354
% Final active clauses: 19
% Final passive clauses: 20
% Input formulas: 10
% Initial clauses: 26
% 
% Duplicate literals: 100
% Trivial inequalities: 29
% Fw subsumption resolutions: 162
% Fw demodulations: 81
% Bw demodulations: 78
% Condensations: 128
% 
% Simple tautologies: 52
% Equational tautologies: 15
% Forward subsumptions: 423
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 25
% Forward superposition: 290
% Backward superposition: 211
% Self superposition: 25
% Equality factoring: 28
% Equality resolution: 9
% 
% Split clauses: 30
% Split components: 68
% SAT solver clauses: 218
% SAT solver unit clauses: 24
% SAT solver binary clauses: 10
% SAT solver learnt clauses: 3
% SAT solver learnt literals: 3
% 
% Sat splits: 30
% Sat splitting refutations: 13
% 
% TWLsolver clauses: 215
% TWLsolver calls for satisfiability: 152
% 
% Memory used [KB]: 2430
% Time elapsed: 0.093 s
% ------------------------------
% ------------------------------
% Success in time 0.699 s
