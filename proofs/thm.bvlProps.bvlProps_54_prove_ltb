Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvlProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvlProps
% SZS output start Proof for thm.bvlProps
fof(f1776,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1775,f132,f247,f245,f243,f241,f239,f237,f235,f233,f1202,f1201,f704,f703,f702,f701,f1774])).
fof(f1774,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f245,f139])).
fof(f139,plain,(
  ( ! [X4,X5,X3] : (s('type.bvl.exp',sK6) != s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X3),s('type.option.option'('type.num.num'),X4),s('type.list.list'('type.bvl.exp'),X5)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  (s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK7))) | s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',sK8),s('type.bvl.exp',sK9),s('type.bvl.exp',sK10))) | s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),sK11),s('type.bvl.exp',sK12))) | s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',sK13))) | s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',sK14),s('type.bvl.exp',sK15))) | s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK16))) | s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK17),s('type.option.option'('type.num.num'),sK18),s('type.list.list'('type.bvl.exp'),sK19))) | s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK20),s('type.list.list'('type.bvl.exp'),sK21)))) & ! [X15] : s('type.bvl.exp',sK6) != s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X15))) & ! [X12,X13,X14] : s('type.bvl.exp',sK6) != s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X12),s('type.bvl.exp',X13),s('type.bvl.exp',X14))) & ! [X10,X11] : s('type.bvl.exp',sK6) != s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X10),s('type.bvl.exp',X11))) & ! [X9] : s('type.bvl.exp',sK6) != s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X9))) & ! [X7,X8] : s('type.bvl.exp',sK6) != s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X7),s('type.bvl.exp',X8))) & ! [X6] : s('type.bvl.exp',sK6) != s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X6))) & ! [X3,X4,X5] : s('type.bvl.exp',sK6) != s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X3),s('type.option.option'('type.num.num'),X4),s('type.list.list'('type.bvl.exp'),X5))) & ! [X1,X2] : s('type.bvl.exp',sK6) != s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.bvl.exp'),X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21])],[f89])).
fof(f89,plain,(
  ? [X0] : ((? [X30] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X30))) | ? [X27,X28,X29] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X27),s('type.bvl.exp',X28),s('type.bvl.exp',X29))) | ? [X25,X26] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X25),s('type.bvl.exp',X26))) | ? [X24] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X24))) | ? [X22,X23] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X22),s('type.bvl.exp',X23))) | ? [X21] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X21))) | ? [X18,X19,X20] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X18),s('type.option.option'('type.num.num'),X19),s('type.list.list'('type.bvl.exp'),X20))) | ? [X16,X17] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X16),s('type.list.list'('type.bvl.exp'),X17)))) & ! [X15] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X15))) & ! [X12,X13,X14] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X12),s('type.bvl.exp',X13),s('type.bvl.exp',X14))) & ! [X10,X11] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X10),s('type.bvl.exp',X11))) & ! [X9] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X9))) & ! [X7,X8] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X7),s('type.bvl.exp',X8))) & ! [X6] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X6))) & ! [X3,X4,X5] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X3),s('type.option.option'('type.num.num'),X4),s('type.list.list'('type.bvl.exp'),X5))) & ! [X1,X2] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.bvl.exp'),X2))))),
  inference(rectify,[],[f64])).
fof(f64,plain,(
  ? [X0] : ((? [X15] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X15))) | ? [X12,X13,X14] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X12),s('type.bvl.exp',X13),s('type.bvl.exp',X14))) | ? [X10,X11] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X10),s('type.bvl.exp',X11))) | ? [X9] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X9))) | ? [X7,X8] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X7),s('type.bvl.exp',X8))) | ? [X6] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X6))) | ? [X3,X4,X5] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X3),s('type.option.option'('type.num.num'),X4),s('type.list.list'('type.bvl.exp'),X5))) | ? [X1,X2] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.bvl.exp'),X2)))) & ! [X30] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X30))) & ! [X27,X28,X29] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X27),s('type.bvl.exp',X28),s('type.bvl.exp',X29))) & ! [X25,X26] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X25),s('type.bvl.exp',X26))) & ! [X24] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X24))) & ! [X22,X23] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X22),s('type.bvl.exp',X23))) & ! [X21] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X21))) & ! [X18,X19,X20] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X18),s('type.option.option'('type.num.num'),X19),s('type.list.list'('type.bvl.exp'),X20))) & ! [X16,X17] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X16),s('type.list.list'('type.bvl.exp'),X17))))),
  inference(flattening,[],[f63])).
fof(f63,plain,(
  ? [X0] : ((? [X15] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X15))) | ? [X12,X13,X14] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X12),s('type.bvl.exp',X13),s('type.bvl.exp',X14))) | ? [X10,X11] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X10),s('type.bvl.exp',X11))) | ? [X9] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X9))) | ? [X7,X8] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X7),s('type.bvl.exp',X8))) | ? [X6] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X6))) | ? [X3,X4,X5] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X3),s('type.option.option'('type.num.num'),X4),s('type.list.list'('type.bvl.exp'),X5))) | ? [X1,X2] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.bvl.exp'),X2)))) & (! [X30] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X30))) & ! [X27,X28,X29] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X27),s('type.bvl.exp',X28),s('type.bvl.exp',X29))) & ! [X25,X26] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X25),s('type.bvl.exp',X26))) & ! [X24] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X24))) & ! [X22,X23] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X22),s('type.bvl.exp',X23))) & ! [X21] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X21))) & ! [X18,X19,X20] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X18),s('type.option.option'('type.num.num'),X19),s('type.list.list'('type.bvl.exp'),X20))) & ! [X16,X17] : s('type.bvl.exp',X0) != s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X16),s('type.list.list'('type.bvl.exp'),X17)))))),
  inference(ennf_transformation,[],[f28])).
fof(f28,plain,(
  ~! [X0] : ((? [X15] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X15))) | ? [X12,X13,X14] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X12),s('type.bvl.exp',X13),s('type.bvl.exp',X14))) | ? [X10,X11] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X10),s('type.bvl.exp',X11))) | ? [X9] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X9))) | ? [X7,X8] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X7),s('type.bvl.exp',X8))) | ? [X6] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X6))) | ? [X3,X4,X5] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X3),s('type.option.option'('type.num.num'),X4),s('type.list.list'('type.bvl.exp'),X5))) | ? [X1,X2] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.bvl.exp'),X2)))) => (? [X30] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X30))) | ? [X27,X28,X29] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X27),s('type.bvl.exp',X28),s('type.bvl.exp',X29))) | ? [X25,X26] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X25),s('type.bvl.exp',X26))) | ? [X24] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X24))) | ? [X22,X23] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X22),s('type.bvl.exp',X23))) | ? [X21] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X21))) | ? [X18,X19,X20] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X18),s('type.option.option'('type.num.num'),X19),s('type.list.list'('type.bvl.exp'),X20))) | ? [X16,X17] : s('type.bvl.exp',X0) = s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X16),s('type.list.list'('type.bvl.exp'),X17)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X7))) | ? [X8,X9,X10] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X8),s('type.bvl.exp',X9),s('type.bvl.exp',X10))) | ? [X11,X12] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X11),s('type.bvl.exp',X12))) | ? [X13] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X13))) | ? [X14,X15] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X14),s('type.bvl.exp',X15))) | ? [X16] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X16))) | ? [X17,X18,X19] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X17),s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.bvl.exp'),X19))) | ? [X20,X21] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X20),s('type.list.list'('type.bvl.exp'),X21)))) => (? [X7] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X7))) | ? [X8,X9,X10] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X8),s('type.bvl.exp',X9),s('type.bvl.exp',X10))) | ? [X11,X12] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X11),s('type.bvl.exp',X12))) | ? [X13] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X13))) | ? [X14,X15] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X14),s('type.bvl.exp',X15))) | ? [X16] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X16))) | ? [X17,X18,X19] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X17),s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.bvl.exp'),X19))) | ? [X20,X21] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X20),s('type.list.list'('type.bvl.exp'),X21)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X7))) | ? [X8,X9,X10] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X8),s('type.bvl.exp',X9),s('type.bvl.exp',X10))) | ? [X11,X12] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X11),s('type.bvl.exp',X12))) | ? [X13] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X13))) | ? [X14,X15] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X14),s('type.bvl.exp',X15))) | ? [X16] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X16))) | ? [X17,X18,X19] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X17),s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.bvl.exp'),X19))) | ? [X20,X21] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X20),s('type.list.list'('type.bvl.exp'),X21)))) => (? [X7] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X7))) | ? [X8,X9,X10] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X8),s('type.bvl.exp',X9),s('type.bvl.exp',X10))) | ? [X11,X12] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X11),s('type.bvl.exp',X12))) | ? [X13] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X13))) | ? [X14,X15] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X14),s('type.bvl.exp',X15))) | ? [X16] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X16))) | ? [X17,X18,X19] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X17),s('type.option.option'('type.num.num'),X18),s('type.list.list'('type.bvl.exp'),X19))) | ? [X20,X21] : s('type.bvl.exp',X6) = s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X20),s('type.list.list'('type.bvl.exp'),X21)))))),
  file('thm.bvlProps.bvlProps_54_prove_ltb','thm.bvlProps.bvlProps_54_prove_ltb')).
fof(f701,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f237,f135])).
fof(f135,plain,(
  ( ! [X10,X11] : (s('type.bvl.exp',sK6) != s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X10),s('type.bvl.exp',X11)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f702,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f233,f133])).
fof(f133,plain,(
  ( ! [X15] : (s('type.bvl.exp',sK6) != s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X15)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f703,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f247,f140])).
fof(f140,plain,(
  ( ! [X2,X1] : (s('type.bvl.exp',sK6) != s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.bvl.exp'),X2)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f704,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f241,f137])).
fof(f137,plain,(
  ( ! [X8,X7] : (s('type.bvl.exp',sK6) != s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X7),s('type.bvl.exp',X8)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f1201,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f235,f134])).
fof(f134,plain,(
  ( ! [X14,X12,X13] : (s('type.bvl.exp',sK6) != s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X12),s('type.bvl.exp',X13),s('type.bvl.exp',X14)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f1202,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f243,f138])).
fof(f138,plain,(
  ( ! [X6] : (s('type.bvl.exp',sK6) != s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X6)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f233,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK7))) | $spl0),
  inference(cnf_transformation,[],[f233_D])).
fof(f233_D,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK7))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f235,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',sK8),s('type.bvl.exp',sK9),s('type.bvl.exp',sK10))) | $spl2),
  inference(cnf_transformation,[],[f235_D])).
fof(f235_D,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',sK8),s('type.bvl.exp',sK9),s('type.bvl.exp',sK10))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f237,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),sK11),s('type.bvl.exp',sK12))) | $spl4),
  inference(cnf_transformation,[],[f237_D])).
fof(f237_D,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),sK11),s('type.bvl.exp',sK12))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f239,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',sK13))) | $spl6),
  inference(cnf_transformation,[],[f239_D])).
fof(f239_D,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',sK13))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f241,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',sK14),s('type.bvl.exp',sK15))) | $spl8),
  inference(cnf_transformation,[],[f241_D])).
fof(f241_D,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',sK14),s('type.bvl.exp',sK15))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f243,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK16))) | $spl10),
  inference(cnf_transformation,[],[f243_D])).
fof(f243_D,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK16))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f245,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK17),s('type.option.option'('type.num.num'),sK18),s('type.list.list'('type.bvl.exp'),sK19))) | $spl12),
  inference(cnf_transformation,[],[f245_D])).
fof(f245_D,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK17),s('type.option.option'('type.num.num'),sK18),s('type.list.list'('type.bvl.exp'),sK19))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f247,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK20),s('type.list.list'('type.bvl.exp'),sK21))) | $spl14),
  inference(cnf_transformation,[],[f247_D])).
fof(f247_D,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK20),s('type.list.list'('type.bvl.exp'),sK21))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f132,plain,(
  s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK20),s('type.list.list'('type.bvl.exp'),sK21))) | s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK17),s('type.option.option'('type.num.num'),sK18),s('type.list.list'('type.bvl.exp'),sK19))) | s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK16))) | s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',sK14),s('type.bvl.exp',sK15))) | s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',sK13))) | s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),sK11),s('type.bvl.exp',sK12))) | s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',sK8),s('type.bvl.exp',sK9),s('type.bvl.exp',sK10))) | s('type.bvl.exp',sK6) = s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK7)))),
  inference(cnf_transformation,[],[f90])).
fof(f1775,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f239,f136])).
fof(f136,plain,(
  ( ! [X9] : (s('type.bvl.exp',sK6) != s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X9)))) )),
  inference(cnf_transformation,[],[f90])).
% SZS output end Proof for thm.bvlProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 168
% Passive clauses: 539
% Generated clauses: 1637
% Final active clauses: 168
% Final passive clauses: 321
% Input formulas: 26
% Initial clauses: 99
% 
% Duplicate literals: 37
% Trivial inequalities: 13
% Fw subsumption resolutions: 131
% 
% Simple tautologies: 55
% Equational tautologies: 11
% Forward subsumptions: 818
% 
% Binary resolution: 995
% Factoring: 200
% Forward superposition: 60
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 43
% Split components: 93
% SAT solver clauses: 84
% SAT solver unit clauses: 12
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 43
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 83
% TWLsolver calls for satisfiability: 63
% 
% Memory used [KB]: 1279
% Time elapsed: 0.069 s
% ------------------------------
% ------------------------------
% Success in time 0.091 s
