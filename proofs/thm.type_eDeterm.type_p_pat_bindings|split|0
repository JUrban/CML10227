Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.type_eDeterm
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.type_eDeterm
% SZS output start Proof for thm.type_eDeterm
fof(f572,plain,(
  $false),
  inference(subsumption_resolution,[],[f563,f83])).
fof(f83,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',sK2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK4)))),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  p(s(bool,'const.typeSystem.type_p_5'(s('type.num.num',sK0),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),sK1),s('type.ast.pat',sK2),s('type.ast.t',sK3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK4)))) & s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',sK2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f46])).
fof(f46,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.typeSystem.type_p_5'(s('type.num.num',X0),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),X1),s('type.ast.pat',X2),s('type.ast.t',X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) & s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.typeSystem.type_p_5'(s('type.num.num',X0),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),X1),s('type.ast.pat',X2),s('type.ast.t',X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) => s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10] : (p(s(bool,'const.typeSystem.type_p_5'(s('type.num.num',X6),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),X7),s('type.ast.pat',X8),s('type.ast.t',X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10)))) => s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10] : (p(s(bool,'const.typeSystem.type_p_5'(s('type.num.num',X6),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),X7),s('type.ast.pat',X8),s('type.ast.t',X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10)))) => s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10))))),
  file('thm.type_eDeterm.type_p_pat_bindings|split|0','thm.type_eDeterm.type_p_pat_bindings|split|0')).
fof(f563,plain,(
  s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',sK2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK4)))),
  inference(resolution,[],[f128,f82])).
fof(f82,plain,(
  p(s(bool,'const.typeSystem.type_p_5'(s('type.num.num',sK0),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),sK1),s('type.ast.pat',sK2),s('type.ast.t',sK3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),sK4))))),
  inference(cnf_transformation,[],[f54])).
fof(f128,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.typeSystem.type_p_5'(s('type.num.num',X0),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),X1),s('type.ast.pat',X2),s('type.ast.t',X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) | s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.typeSystem.type_p_5'(s('type.num.num',X0),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),X1),s('type.ast.pat',X2),s('type.ast.t',X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) | s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))))),
  inference(ennf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.typeSystem.type_p_5'(s('type.num.num',X0),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),X1),s('type.ast.pat',X2),s('type.ast.t',X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4)))) => s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X4))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X11,X8,X9,X10] : (p(s(bool,'const.typeSystem.type_p_5'(s('type.num.num',X6),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn'))))),X11),s('type.ast.pat',X8),s('type.ast.t',X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10)))) => s('type.list.list'('type.list.list'('type.string.char')),'const.ast.pat_bindings_2'(s('type.ast.pat',X8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.t')),X10))))),
  file('thm.type_eDeterm.type_p_pat_bindings|split|0','thm.typeSysProps.typeSysProps_|49|66_prove_ltb|split|0')).
% SZS output end Proof for thm.type_eDeterm
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 25
% Passive clauses: 65
% Generated clauses: 465
% Final active clauses: 19
% Final passive clauses: 19
% Input formulas: 21
% Initial clauses: 47
% 
% Duplicate literals: 58
% Trivial inequalities: 15
% Fw subsumption resolutions: 36
% Bw demodulations: 3
% 
% Simple tautologies: 60
% Equational tautologies: 16
% Forward subsumptions: 198
% 
% Binary resolution: 23
% Forward superposition: 114
% Backward superposition: 101
% Self superposition: 24
% Equality factoring: 26
% Equality resolution: 6
% 
% Split clauses: 15
% Split components: 31
% SAT solver clauses: 25
% SAT solver unit clauses: 2
% SAT solver binary clauses: 19
% 
% Sat splits: 15
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 25
% TWLsolver calls for satisfiability: 8
% 
% Memory used [KB]: 767
% Time elapsed: 0.020 s
% ------------------------------
% ------------------------------
% Success in time 0.038 s
