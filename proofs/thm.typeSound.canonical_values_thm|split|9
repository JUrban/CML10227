Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.typeSound
% (132097)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1378
% Passive clauses: 7308
% Generated clauses: 29233
% Final active clauses: 1192
% Final passive clauses: 5355
% Input formulas: 310
% Initial clauses: 705
% 
% Duplicate literals: 318
% Trivial inequalities: 64
% Fw subsumption resolutions: 2158
% Fw demodulations: 2034
% Bw demodulations: 180
% 
% Simple tautologies: 316
% Equational tautologies: 47
% Forward subsumptions: 16930
% 
% Binary resolution: 8877
% Factoring: 1462
% Forward superposition: 8194
% Backward superposition: 5054
% Self superposition: 50
% Equality factoring: 2
% Equality resolution: 40
% 
% Split clauses: 416
% Split components: 834
% SAT solver clauses: 638
% SAT solver unit clauses: 7
% SAT solver binary clauses: 86
% 
% Sat splits: 416
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 638
% TWLsolver calls for satisfiability: 547
% 
% Memory used [KB]: 14711
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.typeSound
% (132132)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 788
% Passive clauses: 2039
% Generated clauses: 14405
% Final active clauses: 713
% Final passive clauses: 1169
% Input formulas: 310
% Initial clauses: 705
% 
% Duplicate literals: 109
% Trivial inequalities: 74
% Fw subsumption resolutions: 697
% Fw demodulations: 1173
% Bw demodulations: 157
% Condensations: 95
% Global subsumptions: 51
% 
% Simple tautologies: 276
% Equational tautologies: 31
% Forward subsumptions: 7336
% Fw demodulations to eq. taut.: 12
% 
% Binary resolution: 1916
% Factoring: 275
% Forward superposition: 4120
% Backward superposition: 2989
% Self superposition: 50
% Equality factoring: 2
% Equality resolution: 44
% 
% Split clauses: 10
% Split components: 20
% SAT solver clauses: 3390
% SAT solver unit clauses: 956
% SAT solver binary clauses: 324
% SAT solver learnt clauses: 102
% SAT solver learnt literals: 50
% 
% Sat splits: 10
% 
% TWLsolver clauses: 3186
% TWLsolver calls for satisfiability: 6245
% 
% Memory used [KB]: 15351
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.typeSound
% (132170)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1630
% Passive clauses: 8407
% Generated clauses: 164692
% Final active clauses: 1058
% Final passive clauses: 2831
% Input formulas: 310
% Initial clauses: 705
% Discarded non-redundant clauses: 19209
% 
% Duplicate literals: 41
% Trivial inequalities: 59
% Fw subsumption resolutions: 668
% Fw demodulations: 55048
% Bw demodulations: 1432
% Condensations: 121
% Global subsumptions: 454
% 
% Simple tautologies: 108
% Equational tautologies: 83
% Forward subsumptions: 43882
% Fw demodulations to eq. taut.: 38864
% Bw demodulations to eq. taut.: 29
% 
% Unit resulting resolution: 72434
% Factoring: 1
% Forward superposition: 21997
% Backward superposition: 11467
% Self superposition: 106
% Equality factoring: 2
% Equality resolution: 76
% 
% Split clauses: 21
% Split components: 42
% SAT solver clauses: 9374
% SAT solver unit clauses: 3356
% SAT solver binary clauses: 3619
% 
% Sat splits: 21
% Sat splitting refutations: 468
% 
% Memory used [KB]: 143025
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 29 next slice time: 29
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.typeSound
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.typeSound
% SZS output start Proof for thm.typeSound
fof(f16247,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f838,f1341,f837,f1343,f1340,f1344,f1345,f1346,f1347,f1348,f1362,f1363,f1364,f1497,f1366,f1499,f1368,f1474,f1472,f1501,f1502,f1371,f1471,f1469,f1504,f1505,f1586,f1587,f1588,f1589,f1590,f1592,f1733,f1593,f1692,f1731,f1749,f1470,f1750,f1751,f1752,f1758,f1473,f1759,f1762,f1763,f1770,f1776,f1777,f1785,f1793,f1794,f1855,f1859,f1858,f1860,f1864,f1870,f1861,f2094,f2098,f2097,f2099,f2103,f2331,f2102,f1790,f2100,f1784,f1769,f2341,f1767,f2342,f2344,f2345,f2346,f2358,f2359,f2360,f2374,f1481,f2375,f2376,f1480,f2489,f1479,f1498,f2378,f2490,f1500,f2791,f2805,f2806,f3003,f1483,f3006,f1482,f2905,f3020,f3056,f3001,f3065,f3070,f2335,f3423,f3104,f3108,f3109,f3137,f3436,f3424,f3024,f3139,f3437,f2918,f3439,f3142,f3143,f3144,f3145,f3146,f3147,f3148,f3239,f3426,f3240,f3247,f3251,f3253,f3281,f3284,f3285,f3286,f3287,f3288,f3462,f3289,f3430,f3303,f3465,f3464,f3315,f3318,f3467,f3320,f3468,f3517,f3534,f3536,f3540,f3541,f3874,f3554,f3571,f3879,f3882,f3574,f3885,f3575,f3886,f3576,f3887,f3577,f3889,f3578,f3890,f3579,f3888,f3891,f3580,f3892,f3671,f2334,f3866,f3672,f3895,f3674,f3862,f3680,f3897,f3684,f3898,f3686,f3899,f3714,f3717,f3718,f3719,f3869,f3867,f3720,f3721,f3722,f3872,f3737,f3908,f3909,f3876,f3746,f3910,f3875,f3749,f3878,f3877,f3751,f3754,f3911,f3757,f3912,f3759,f3883,f3913,f3923,f4267,f4324,f2333,f4331,f4413,f4429,f4480,f4485,f4504,f4505,f4509,f4798,f4797,f4510,f4801,f4800,f4511,f4804,f4803,f4512,f4807,f4806,f4545,f4546,f4547,f4548,f4777,f4642,f4643,f4784,f4782,f4644,f4809,f4645,f4808,f4813,f4812,f4650,f4651,f4656,f4783,f4657,f4821,f4658,f4823,f4659,f4825,f4661,f4799,f4662,f4827,f4663,f4805,f4664,f4802,f4665,f4829,f4667,f4796,f4819,f4671,f4672,f4673,f4674,f4675,f4676,f4677,f4951,f4952,f5002,f5003,f5027,f5326,f5029,f5032,f5330,f5329,f5033,f5333,f5332,f5034,f5336,f5035,f5339,f5338,f5311,f5344,f5341,f5168,f5346,f5170,f5349,f5172,f5174,f5175,f5181,f5182,f5183,f5185,f5331,f5186,f5364,f5187,f5337,f5188,f5189,f5366,f5191,f5328,f5356,f5195,f5196,f5367,f5197,f5201,f5368,f5203,f5204,f5370,f5206,f5207,f5373,f5209,f5210,f5376,f5384,f5387,f5358,f5402,f5405,f5360,f5420,f5423,f5362,f6115,f6092,f6090,f6088,f6124,f6126,f6127,f6128,f6262,f6836,f6813,f6811,f6809,f6841,f6843,f6844,f6118,f6845,f6119,f7059,f7069,f7514,f7517,f7519,f7521,f7523,f7524,f7525,f7177,f7529,f7531,f7180,f7504,f7534,f7536,f7230,f7233,f7497,f7496,f7488,f7487,f7486,f7522,f7485,f7484,f7483,f7482,f7334,f7335,f7336,f7337,f7341,f7481,f7549,f7550,f7376,f7380,f7382,f7480,f7344,f7503,f3429,f7576,f7624,f7479,f7502,f3432,f7934,f7984,f5319,f7958,f7990,f7959,f3431,f7983,f8624,f8626,f8627,f8628,f8629,f8631,f8633,f8617,f8637,f8612,f8641,f8606,f8605,f8604,f8603,f8602,f8459,f8460,f8646,f8645,f8461,f8462,f8647,f8466,f8648,f8601,f8636,f8649,f8497,f8653,f8501,f8654,f8503,f3884,f8655,f8659,f8663,f8660,f8491,f8600,f8469,f4795,f8352,f8616,f8035,f8012,f8665,f7968,f7370,f7352,f7213,f3870,f7067,f6399,f5681,f3902,f5038,f4514,f3905,f4309,f1478,f8672,f8797,f7890,f8930,f8934,f7646,f7670,f8935,f8936,f3871,f8955,f8957,f9303,f9306,f8985,f9014,f3434,f9310,f3924,f9304,f9312,f3435,f9020,f3442,f9021,f3443,f9022,f3444,f9023,f3446,f9024,f3447,f9025,f3445,f3448,f9026,f3449,f9316,f9307,f9118,f3452,f9126,f3454,f9130,f3455,f9132,f3456,f9160,f9163,f3459,f9164,f3863,f9165,f3864,f3427,f9193,f3440,f3466,f9319,f8034,f9320,f9323,f9326,f8958,f7971,f7669,f9328,f9330,f9332,f8892,f7368,f9333,f7367,f7215,f9334,f5684,f9335,f4517,f9336,f9337,f9356,f9357,f9355,f7579,f7578,f8387,f8321,f9495,f9508,f3023,f4332,f9395,f3022,f1496,f9609,f9673,f5345,f9694,f4794,f9737,f9739,f9829,f9831,f8632,f4810,f9833,f4815,f9834,f4816,f9860,f4831,f4830,f9863,f4833,f9864,f4834,f4832,f9869,f4836,f9870,f4837,f4835,f9873,f4839,f9874,f4840,f4838,f11065,f11042,f11040,f11070,f6116,f11072,f6117,f11073,f8625,f11122,f11126,f11130,f11134,f11141,f11154,f11145,f11301,f11972,f11973,f11974,f11975,f11976,f11978,f11671,f5348,f11965,f11980,f11718,f5318,f11960,f7530,f11954,f4811,f11953,f5340,f11952,f7518,f11951,f7515,f11950,f7516,f7543,f11808,f11809,f7546,f7537,f11810,f11811,f7547,f11815,f7548,f11949,f7533,f11987,f7535,f11845,f7554,f11849,f7555,f11851,f3441,f7556,f12056,f12067,f12057,f12068,f12058,f12069,f12059,f12070,f12060,f12071,f12063,f3460,f12065,f12075,f12066,f12076,f12077,f12081,f12083,f12087,f12090,f12094,f12095,f12099,f13313,f12064,f2339,f1786,f14633,f13811,f14746,f14744,f13524,f14749,f14750,f14751,f10305,f14753,f14754,f10282,f14752,f14755,f14756,f8492,f8487,f14758,f8353,f14757,f6400,f14761,f5039,f14762,f4014,f3979,f14765,f3736,f3907,f3723,f14767,f14768,f3675,f3670,f14770,f3881,f3880,f14771,f3572,f3570,f14774,f3542,f14766,f3535,f14769,f3523,f14773,f14772,f14635,f14776,f13810,f14778,f8667,f3004,f14595,f14781,f14779,f14594,f14784,f14782,f14593,f14787,f14785,f14592,f14790,f14788,f14576,f14792,f5351,f14575,f14794,f4814,f14737,f14798,f14796,f14732,f14802,f14800,f14728,f14806,f14804,f14725,f14808,f14433,f14432,f14814,f14812,f14425,f14424,f14818,f14816,f14407,f14406,f14822,f14820,f14403,f14402,f14825,f14824,f14687,f14686,f14829,f14827,f14375,f14374,f14832,f14831,f14351,f14350,f14836,f14834,f14347,f14346,f14839,f14838,f14323,f14322,f14843,f14841,f14319,f14318,f14846,f14845,f14295,f14294,f14850,f14848,f14291,f14290,f14853,f14852,f14267,f14266,f14857,f14855,f14263,f14262,f14860,f14859,f14237,f14236,f14863,f14862,f14685,f14684,f14864,f14205,f14204,f14870,f14868,f14683,f14682,f14866,f14871,f14197,f14196,f14875,f14873,f14179,f14178,f14879,f14877,f14175,f14174,f14882,f14881,f14681,f14680,f14883,f14139,f14138,f14889,f14887,f14679,f14678,f14885,f14890,f14131,f14130,f14894,f14892,f14113,f14112,f14898,f14896,f14109,f14108,f14901,f14900,f14677,f14676,f14905,f14903,f14081,f14080,f14908,f14907,f14057,f14056,f14912,f14910,f14053,f14052,f14915,f14914,f14029,f14028,f14919,f14917,f14025,f14024,f14922,f14921,f14001,f14000,f14926,f14924,f13997,f13996,f14929,f14928,f13961,f13960,f14933,f14931,f13953,f13952,f14937,f14935,f13935,f13934,f14941,f14939,f13931,f13930,f14944,f14943,f13907,f13906,f14948,f14946,f13903,f13902,f14951,f14950,f13879,f13878,f14955,f14953,f13875,f13874,f14958,f14957,f14639,f14810,f13854,f14961,f13853,f14962,f13852,f14963,f13849,f14960,f14964,f13762,f13761,f14968,f14966,f13758,f13757,f14971,f14970,f13754,f13655,f13654,f13652,f1737,f1736,f13651,f13650,f1735,f13649,f1734,f14973,f13648,f1732,f14972,f14978,f1342,f14980,f3066,f2337,f14986,f1476,f15118,f15257,f15258,f15259,f15278,f15279,f15352,f3903,f1771,f15377,f15395,f1477,f1475,f15617,f15667,f15690,f16002,f15691,f5327,f4793,f15697,f16005,f5335,f15700,f3428,f3461,f15701,f3868,f3904,f15703,f7577,f9327,f15992,f15829,f4789,f4788,f15831,f7528,f7527,f16009,f8634,f7520,f15837,f5352,f15838,f5353,f16010,f15851,f5334,f16013,f15861,f4781,f15862,f7541,f4780,f15871,f5369,f16014,f15874,f5371,f15875,f5372,f16015,f15880,f5374,f15881,f5375,f16016,f15884,f5377,f15885,f5378,f16017,f16244,f16245,f3063,f16246])).
fof(f16246,plain,(
  $false | ($spl2 | $spl4)),
  inference(subsumption_resolution,[],[f14748,f1343])).
fof(f14748,plain,(
  s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',sK32) | $spl2),
  inference(subsumption_resolution,[],[f14747,f835])).
fof(f835,plain,(
  p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28))))),
  inference(cnf_transformation,[],[f610])).
fof(f610,plain,(
  p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28)))) & p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) & (! [X6] : s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',sK31))) != s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),X6))) | (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',sK32) & ! [X5] : s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',sK31))) != s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X5)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK28,sK29,sK30,sK31,sK32])],[f530])).
fof(f530,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0)))) & p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.semanticPrimitives.v',X3),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X4),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) & (! [X6] : s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X3))) != s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),X6))) | (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X4) & ! [X5] : s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X3))) != s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X5))))))),
  inference(flattening,[],[f529])).
fof(f529,plain,(
  ? [X0,X1,X2,X3,X4] : ((p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0)))) & p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.semanticPrimitives.v',X3),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X4),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))) & (! [X6] : s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X3))) != s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),X6))) | (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X4) & ! [X5] : s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X3))) != s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X5))))))),
  inference(ennf_transformation,[],[f312])).
fof(f312,plain,(
  ~! [X0,X1,X2,X3,X4] : ((p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0)))) & p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X0),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.semanticPrimitives.v',X3),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X4),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))) => (? [X6] : s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X3))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),X6))) & (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X4) => ? [X5] : s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X3))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X5))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10] : ((p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6)))) & p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8),s('type.semanticPrimitives.v',X9),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X10),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))) => (? [X11] : s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X9))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),X11))) & (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X10) => ? [X11] : s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X9))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X11))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10] : ((p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6)))) & p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8),s('type.semanticPrimitives.v',X9),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X10),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))) => (? [X11] : s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X9))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),X11))) & (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X10) => ? [X11] : s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X9))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X11))))))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.typeSound.canonical_values_thm|split|9')).
fof(f14747,plain,(
  s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',sK32) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28)))) | $spl2),
  inference(subsumption_resolution,[],[f13645,f1341])).
fof(f13645,plain,(
  s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',sK31))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34(sK32,sK30,sK29,sK28,sK31)))) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',sK32) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28))))),
  inference(resolution,[],[f836,f840])).
fof(f840,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X0))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34(X4,X3,X2,X1,X0)))) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X4) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X3),s('type.semanticPrimitives.v',X0),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X4),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1))))) )),
  inference(cnf_transformation,[],[f611])).
fof(f611,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X3),s('type.semanticPrimitives.v',X0),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X4),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | (s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X0))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),sK33(X4,X3,X2,X1,X0)))) & (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X4) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X0))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34(X4,X3,X2,X1,X0)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK33,sK34])],[f532])).
fof(f532,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X3),s('type.semanticPrimitives.v',X0),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X4),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ? [X5] : (s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X0))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),X5))) & (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X4) | ? [X6] : s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X0))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X6))))))),
  inference(flattening,[],[f531])).
fof(f531,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X3),s('type.semanticPrimitives.v',X0),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X4),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))) | ? [X5] : (s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X0))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),X5))) & (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X4) | ? [X6] : s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X0))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X6))))))),
  inference(ennf_transformation,[],[f313])).
fof(f313,plain,(
  ! [X0,X1,X2,X3,X4] : ((p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1)))) & p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X3),s('type.semanticPrimitives.v',X0),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X4),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))) => ? [X5] : (s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X0))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),X5))) & (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X4) => ? [X6] : s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X0))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X6))))))),
  inference(rectify,[],[f295])).
fof(f295,axiom,(
  ! [X9,X6,X7,X8,X10] : ((p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6)))) & p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X6),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X8),s('type.semanticPrimitives.v',X9),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X10),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))) => ? [X11] : (s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X9))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),X11))) & (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X10) => ? [X54] : s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X9))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X54))))))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.typeSound.typeSound_5_prove_ltb')).
fof(f836,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))),
  inference(cnf_transformation,[],[f610])).
fof(f3063,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X1)))))) ) | $spl100),
  inference(cnf_transformation,[],[f3063_D])).
fof(f3063_D,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X1)))))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f16245,plain,(
  ( ! [X0] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X0)) ) | $spl828),
  inference(cnf_transformation,[],[f16245_D])).
fof(f16245_D,plain,(
  ( ! [X0] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X0)) ) <=> ~$spl828),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl828])])).
fof(f16244,plain,(
  ( ! [X2,X0,X1] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X0) | s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X2)))))) ) | ($spl16 | $spl412)),
  inference(subsumption_resolution,[],[f16240,f1336])).
fof(f1336,plain,(
  p(s(bool,'T_0'))),
  inference(trivial_inequality_removal,[],[f1251])).
fof(f1251,plain,(
  ( ! [X0,X1] : (p(s(bool,'T_0')) | s(X0,X1) != s(X0,X1)) )),
  inference(cnf_transformation,[],[f793])).
fof(f793,plain,(
  ! [X0,X1] : ((s(X0,X1) != s(X0,X1) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X1)))),
  inference(nnf_transformation,[],[f487])).
fof(f487,plain,(
  ! [X0,X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(flattening,[],[f486])).
fof(f486,plain,(
  ! [X0] : ! [X1] : (s(X0,X1) = s(X0,X1) <=> p(s(bool,'T_0')))),
  inference(rectify,[],[f137])).
fof(f137,axiom,(
  ! [X14] : ! [X22] : (s(X14,X22) = s(X14,X22) <=> p(s(bool,'T_0')))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.bool.REFL_CLAUSE')).
fof(f16240,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X0) | s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X2)))))) ) | ($spl16 | $spl412)),
  inference(resolution,[],[f16147,f876])).
fof(f876,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1) | ~p(s(bool,'T_0')) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X0) | s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X2)))))) )),
  inference(cnf_transformation,[],[f630])).
fof(f630,plain,(
  ! [X0,X1] : ((~sP7(X0,X1) | (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK41(X1,X0)))))) & s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X0) & p(s(bool,'T_0')))) & (! [X2] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X2))))) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X0) | ~p(s(bool,'T_0'))) | sP7(X0,X1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK41])],[f629])).
fof(f629,plain,(
  ! [X0,X1] : ((~sP7(X0,X1) | ? [X3] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X3))))) & s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X0) & p(s(bool,'T_0')))) & (! [X2] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X2))))) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X0) | ~p(s(bool,'T_0'))) | sP7(X0,X1)))),
  inference(rectify,[],[f628])).
fof(f628,plain,(
  ! [X4,X3] : ((~sP7(X4,X3) | ? [X34] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X34))))) & s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X4) & p(s(bool,'T_0')))) & (! [X34] : (s('type.semanticPrimitives.v',X3) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X34))))) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X4) | ~p(s(bool,'T_0'))) | sP7(X4,X3)))),
  inference(nnf_transformation,[],[f579])).
fof(f579,plain,(
  ! [X4,X3] : (sP7(X4,X3) <=> ? [X34] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X34))))) & s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X4) & p(s(bool,'T_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f16147,plain,(
  ( ! [X0,X3] : (~sP7(X0,X3)) ) | ($spl16 | $spl412)),
  inference(subsumption_resolution,[],[f16031,f874])).
fof(f874,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X0) | ~sP7(X0,X1)) )),
  inference(cnf_transformation,[],[f630])).
fof(f16031,plain,(
  ( ! [X0,X3] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X0) | ~sP7(X0,X3)) ) | ($spl16 | $spl412)),
  inference(backward_demodulation,[],[f1477,f7069])).
fof(f16017,plain,(
  ( ! [X220] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X220),s('type.ast.tctor','const.ast.TC_array_0')))) ) | $spl826),
  inference(cnf_transformation,[],[f16017_D])).
fof(f16017_D,plain,(
  ( ! [X220] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X220),s('type.ast.tctor','const.ast.TC_array_0')))) ) <=> ~$spl826),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl826])])).
fof(f5378,plain,(
  ( ! [X218,X220,X219,X217,X221] : (s('type.ast.t',X217) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X218),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.semanticPrimitives.v',X220) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X221))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X218)))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X218))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X219),s('type.num.num',X221))) | sP4(X219,X217,X220)) ) | $spl402),
  inference(cnf_transformation,[],[f5378_D])).
fof(f5378_D,plain,(
  ( ! [X218,X220,X219,X217,X221] : (s('type.ast.t',X217) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X218),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.semanticPrimitives.v',X220) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X221))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X218)))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X218))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X219),s('type.num.num',X221))) | sP4(X219,X217,X220)) ) <=> ~$spl402),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl402])])).
fof(f15885,plain,(
  ( ! [X222,X225,X223,X221,X226,X224] : (s('type.ast.t',X221) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X222),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0'))) | sP4(X223,X221,X224) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X222))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X223),s('type.num.num',X225))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X222)))) | s('type.semanticPrimitives.v',X224) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X225))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X226),s('type.ast.tctor','const.ast.TC_array_0')))) )),
  inference(superposition,[],[f890,f1004])).
fof(f1004,plain,(
  ( ! [X0,X1] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X0) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0)))) )),
  inference(cnf_transformation,[],[f687])).
fof(f687,plain,(
  ! [X0,X1] : ((s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) | (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X0))) & (s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X0) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0)))))),
  inference(flattening,[],[f686])).
fof(f686,plain,(
  ! [X0,X1] : ((s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) | (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X0))) & ((s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X0)) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0)))))),
  inference(nnf_transformation,[],[f347])).
fof(f347,plain,(
  ! [X0,X1] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) <=> (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X0)))),
  inference(rectify,[],[f176])).
fof(f176,axiom,(
  ! [X36,X12] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X12),s('type.ast.tctor',X36))) <=> (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X12) & s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X36)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.evalProps.Tword_simp|split|18')).
fof(f890,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP4(X0,X1,X2) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X4))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.num.num',X3))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X4)))) | s('type.ast.t',X1) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X4),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f639])).
fof(f639,plain,(
  ! [X0,X1,X2] : ((~sP4(X0,X1,X2) | (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',sK45(X2,X1,X0)))) & s('type.ast.t',X1) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK46(X2,X1,X0)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK46(X2,X1,X0))))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',sK46(X2,X1,X0)))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.num.num',sK45(X2,X1,X0)))))) & (! [X3,X4] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X3))) | s('type.ast.t',X1) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X4),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X4)))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X4))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.num.num',X3)))) | sP4(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK45,sK46])],[f638])).
fof(f638,plain,(
  ! [X0,X1,X2] : ((~sP4(X0,X1,X2) | ? [X5,X6] : (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X5))) & s('type.ast.t',X1) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X6),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X6))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.num.num',X5))))) & (! [X3,X4] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X3))) | s('type.ast.t',X1) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X4),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X4)))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X4))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.num.num',X3)))) | sP4(X0,X1,X2)))),
  inference(rectify,[],[f637])).
fof(f637,plain,(
  ! [X2,X4,X3] : ((~sP4(X2,X4,X3) | ? [X7,X8] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X7))) & s('type.ast.t',X4) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X8),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X8)))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X8))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',X7))))) & (! [X7,X8] : (s('type.semanticPrimitives.v',X3) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X7))) | s('type.ast.t',X4) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X8),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X8)))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X8))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',X7)))) | sP4(X2,X4,X3)))),
  inference(nnf_transformation,[],[f576])).
fof(f576,plain,(
  ! [X2,X4,X3] : (sP4(X2,X4,X3) <=> ? [X7,X8] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X7))) & s('type.ast.t',X4) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X8),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X8)))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X8))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',X7)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f5377,plain,(
  ( ! [X215,X213,X214] : (s('type.ast.t',X213) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK46(X214,X213,X215)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0'))) | ~sP4(X215,X213,X214)) ) | $spl400),
  inference(cnf_transformation,[],[f5377_D])).
fof(f5377_D,plain,(
  ( ! [X215,X213,X214] : (s('type.ast.t',X213) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK46(X214,X213,X215)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0'))) | ~sP4(X215,X213,X214)) ) <=> ~$spl400),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl400])])).
fof(f15884,plain,(
  ( ! [X218,X220,X219,X217] : (s('type.ast.t',X217) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK46(X218,X217,X219)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0'))) | ~sP4(X219,X217,X218) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X220),s('type.ast.tctor','const.ast.TC_array_0')))) )),
  inference(superposition,[],[f887,f1004])).
fof(f887,plain,(
  ( ! [X2,X0,X1] : (s('type.ast.t',X1) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK46(X2,X1,X0)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | ~sP4(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f639])).
fof(f16016,plain,(
  ( ! [X205] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X205),s('type.ast.tctor','const.ast.TC_vector_0')))) ) | $spl824),
  inference(cnf_transformation,[],[f16016_D])).
fof(f16016_D,plain,(
  ( ! [X205] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X205),s('type.ast.tctor','const.ast.TC_vector_0')))) ) <=> ~$spl824),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl824])])).
fof(f5375,plain,(
  ( ! [X208,X206,X204,X209,X207,X205,X203] : (s('type.ast.t',X203) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X204),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.semanticPrimitives.v',X208) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X209))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X204)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X205),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X206),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X207))),s('type.ast.t',X204))),s('type.list.list'('type.semanticPrimitives.v'),X209)))) | sP5(X205,X206,X207,X203,X208)) ) | $spl396),
  inference(cnf_transformation,[],[f5375_D])).
fof(f5375_D,plain,(
  ( ! [X208,X206,X204,X209,X207,X205,X203] : (s('type.ast.t',X203) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X204),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.semanticPrimitives.v',X208) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X209))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X204)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X205),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X206),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X207))),s('type.ast.t',X204))),s('type.list.list'('type.semanticPrimitives.v'),X209)))) | sP5(X205,X206,X207,X203,X208)) ) <=> ~$spl396),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl396])])).
fof(f15881,plain,(
  ( ! [X212,X210,X208,X206,X213,X211,X209,X207] : (s('type.ast.t',X206) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X207),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0'))) | sP5(X208,X209,X210,X206,X211) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X208),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X209),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X210))),s('type.ast.t',X207))),s('type.list.list'('type.semanticPrimitives.v'),X212)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X207)))) | s('type.semanticPrimitives.v',X211) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X212))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X213),s('type.ast.tctor','const.ast.TC_vector_0')))) )),
  inference(superposition,[],[f885,f1004])).
fof(f885,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP5(X0,X1,X2,X3,X4) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2))),s('type.ast.t',X6))),s('type.list.list'('type.semanticPrimitives.v'),X5)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) | s('type.ast.t',X3) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X6),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | s('type.semanticPrimitives.v',X4) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X5)))) )),
  inference(cnf_transformation,[],[f636])).
fof(f636,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP5(X0,X1,X2,X3,X4) | (s('type.semanticPrimitives.v',X4) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK43(X4,X3,X2,X1,X0)))) & s('type.ast.t',X3) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK44(X4,X3,X2,X1,X0)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK44(X4,X3,X2,X1,X0))))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2))),s('type.ast.t',sK44(X4,X3,X2,X1,X0)))),s('type.list.list'('type.semanticPrimitives.v'),sK43(X4,X3,X2,X1,X0))))))) & (! [X5,X6] : (s('type.semanticPrimitives.v',X4) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X5))) | s('type.ast.t',X3) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X6),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2))),s('type.ast.t',X6))),s('type.list.list'('type.semanticPrimitives.v'),X5))))) | sP5(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK43,sK44])],[f635])).
fof(f635,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP5(X0,X1,X2,X3,X4) | ? [X7,X8] : (s('type.semanticPrimitives.v',X4) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X7))) & s('type.ast.t',X3) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X8),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X8)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2))),s('type.ast.t',X8))),s('type.list.list'('type.semanticPrimitives.v'),X7)))))) & (! [X5,X6] : (s('type.semanticPrimitives.v',X4) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X5))) | s('type.ast.t',X3) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X6),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2))),s('type.ast.t',X6))),s('type.list.list'('type.semanticPrimitives.v'),X5))))) | sP5(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f634])).
fof(f634,plain,(
  ! [X0,X1,X2,X4,X3] : ((~sP5(X0,X1,X2,X4,X3) | ? [X5,X6] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X5))) & s('type.ast.t',X4) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X6),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2))),s('type.ast.t',X6))),s('type.list.list'('type.semanticPrimitives.v'),X5)))))) & (! [X5,X6] : (s('type.semanticPrimitives.v',X3) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X5))) | s('type.ast.t',X4) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X6),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2))),s('type.ast.t',X6))),s('type.list.list'('type.semanticPrimitives.v'),X5))))) | sP5(X0,X1,X2,X4,X3)))),
  inference(nnf_transformation,[],[f577])).
fof(f577,plain,(
  ! [X0,X1,X2,X4,X3] : (sP5(X0,X1,X2,X4,X3) <=> ? [X5,X6] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X5))) & s('type.ast.t',X4) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X6),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) & p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2))),s('type.ast.t',X6))),s('type.list.list'('type.semanticPrimitives.v'),X5))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f5374,plain,(
  ( ! [X198,X200,X199,X197,X201] : (s('type.ast.t',X197) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK44(X198,X197,X199,X200,X201)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0'))) | ~sP5(X201,X200,X199,X197,X198)) ) | $spl394),
  inference(cnf_transformation,[],[f5374_D])).
fof(f5374_D,plain,(
  ( ! [X198,X200,X199,X197,X201] : (s('type.ast.t',X197) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK44(X198,X197,X199,X200,X201)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0'))) | ~sP5(X201,X200,X199,X197,X198)) ) <=> ~$spl394),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl394])])).
fof(f15880,plain,(
  ( ! [X204,X202,X200,X205,X203,X201] : (s('type.ast.t',X200) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK44(X201,X200,X202,X203,X204)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0'))) | ~sP5(X204,X203,X202,X200,X201) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X205),s('type.ast.tctor','const.ast.TC_vector_0')))) )),
  inference(superposition,[],[f882,f1004])).
fof(f882,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.ast.t',X3) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK44(X4,X3,X2,X1,X0)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~sP5(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f636])).
fof(f16015,plain,(
  ( ! [X185] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X185),s('type.ast.tctor','const.ast.TC_tup_0')))) ) | $spl822),
  inference(cnf_transformation,[],[f16015_D])).
fof(f16015_D,plain,(
  ( ! [X185] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X185),s('type.ast.tctor','const.ast.TC_tup_0')))) ) <=> ~$spl822),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl822])])).
fof(f5372,plain,(
  ( ! [X191,X189,X187,X192,X190,X188,X186] : (s('type.ast.t',X186) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X187),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.semanticPrimitives.v',X191) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X192))) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X188),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X189),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X190),s('type.list.list'('type.semanticPrimitives.v'),X192),s('type.list.list'('type.ast.t'),X187)))) | sP11(X188,X189,X190,X186,X191)) ) | $spl390),
  inference(cnf_transformation,[],[f5372_D])).
fof(f5372_D,plain,(
  ( ! [X191,X189,X187,X192,X190,X188,X186] : (s('type.ast.t',X186) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X187),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.semanticPrimitives.v',X191) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X192))) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X188),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X189),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X190),s('type.list.list'('type.semanticPrimitives.v'),X192),s('type.list.list'('type.ast.t'),X187)))) | sP11(X188,X189,X190,X186,X191)) ) <=> ~$spl390),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl390])])).
fof(f15875,plain,(
  ( ! [X191,X189,X187,X192,X190,X188,X186,X193] : (s('type.ast.t',X186) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X187),s('type.ast.tctor','const.ast.TC_word8_0'))) | sP11(X188,X189,X190,X186,X191) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X188),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X189),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X190),s('type.list.list'('type.semanticPrimitives.v'),X192),s('type.list.list'('type.ast.t'),X187)))) | s('type.semanticPrimitives.v',X191) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X192))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X193),s('type.ast.tctor','const.ast.TC_tup_0')))) )),
  inference(superposition,[],[f860,f1004])).
fof(f860,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP11(X0,X1,X2,X3,X4) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.t'),X6)))) | s('type.ast.t',X3) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X6),s('type.ast.tctor','const.ast.TC_tup_0'))) | s('type.semanticPrimitives.v',X4) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X5)))) )),
  inference(cnf_transformation,[],[f618])).
fof(f618,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP11(X0,X1,X2,X3,X4) | (s('type.semanticPrimitives.v',X4) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),sK36(X4,X3,X2,X1,X0)))) & s('type.ast.t',X3) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK37(X4,X3,X2,X1,X0)),s('type.ast.tctor','const.ast.TC_tup_0'))) & p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),sK36(X4,X3,X2,X1,X0)),s('type.list.list'('type.ast.t'),sK37(X4,X3,X2,X1,X0))))))) & (! [X5,X6] : (s('type.semanticPrimitives.v',X4) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X5))) | s('type.ast.t',X3) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X6),s('type.ast.tctor','const.ast.TC_tup_0'))) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.t'),X6))))) | sP11(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK36,sK37])],[f617])).
fof(f617,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP11(X0,X1,X2,X3,X4) | ? [X7,X8] : (s('type.semanticPrimitives.v',X4) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X7))) & s('type.ast.t',X3) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X8),s('type.ast.tctor','const.ast.TC_tup_0'))) & p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X7),s('type.list.list'('type.ast.t'),X8)))))) & (! [X5,X6] : (s('type.semanticPrimitives.v',X4) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X5))) | s('type.ast.t',X3) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X6),s('type.ast.tctor','const.ast.TC_tup_0'))) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.t'),X6))))) | sP11(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f616])).
fof(f616,plain,(
  ! [X0,X1,X2,X4,X3] : ((~sP11(X0,X1,X2,X4,X3) | ? [X23,X24] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X23))) & s('type.ast.t',X4) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X24),s('type.ast.tctor','const.ast.TC_tup_0'))) & p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X23),s('type.list.list'('type.ast.t'),X24)))))) & (! [X23,X24] : (s('type.semanticPrimitives.v',X3) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X23))) | s('type.ast.t',X4) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X24),s('type.ast.tctor','const.ast.TC_tup_0'))) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X23),s('type.list.list'('type.ast.t'),X24))))) | sP11(X0,X1,X2,X4,X3)))),
  inference(nnf_transformation,[],[f583])).
fof(f583,plain,(
  ! [X0,X1,X2,X4,X3] : (sP11(X0,X1,X2,X4,X3) <=> ? [X23,X24] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X23))) & s('type.ast.t',X4) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X24),s('type.ast.tctor','const.ast.TC_tup_0'))) & p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X23),s('type.list.list'('type.ast.t'),X24))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP11])])).
fof(f5371,plain,(
  ( ! [X182,X180,X184,X183,X181] : (s('type.ast.t',X180) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK37(X181,X180,X182,X183,X184)),s('type.ast.tctor','const.ast.TC_word8_0'))) | ~sP11(X184,X183,X182,X180,X181)) ) | $spl388),
  inference(cnf_transformation,[],[f5371_D])).
fof(f5371_D,plain,(
  ( ! [X182,X180,X184,X183,X181] : (s('type.ast.t',X180) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK37(X181,X180,X182,X183,X184)),s('type.ast.tctor','const.ast.TC_word8_0'))) | ~sP11(X184,X183,X182,X180,X181)) ) <=> ~$spl388),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl388])])).
fof(f15874,plain,(
  ( ! [X185,X182,X180,X184,X183,X181] : (s('type.ast.t',X180) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK37(X181,X180,X182,X183,X184)),s('type.ast.tctor','const.ast.TC_word8_0'))) | ~sP11(X184,X183,X182,X180,X181) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X185),s('type.ast.tctor','const.ast.TC_tup_0')))) )),
  inference(superposition,[],[f858,f1004])).
fof(f858,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.ast.t',X3) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK37(X4,X3,X2,X1,X0)),s('type.ast.tctor','const.ast.TC_tup_0'))) | ~sP11(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f618])).
fof(f16014,plain,(
  ( ! [X176] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X176),s('type.ast.tctor','const.ast.TC_fn_0')))) ) | $spl820),
  inference(cnf_transformation,[],[f16014_D])).
fof(f16014_D,plain,(
  ( ! [X176] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X176),s('type.ast.tctor','const.ast.TC_fn_0')))) ) <=> ~$spl820),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl820])])).
fof(f5369,plain,(
  ( ! [X175,X176] : (s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X175),s('type.ast.t',X176))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X175),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X176),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))))),s('type.ast.tctor','const.ast.TC_word8_0')))) ) | $spl384),
  inference(cnf_transformation,[],[f5369_D])).
fof(f5369_D,plain,(
  ( ! [X175,X176] : (s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X175),s('type.ast.t',X176))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X175),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X176),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))))),s('type.ast.tctor','const.ast.TC_word8_0')))) ) <=> ~$spl384),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl384])])).
fof(f15871,plain,(
  ( ! [X175,X176,X174] : (s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X174),s('type.ast.t',X175))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X174),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X175),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))))),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X176),s('type.ast.tctor','const.ast.TC_fn_0')))) )),
  inference(superposition,[],[f1015,f1004])).
fof(f1015,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X0),s('type.ast.t',X1))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X0),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X1),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))))),s('type.ast.tctor','const.ast.TC_fn_0')))) )),
  inference(cnf_transformation,[],[f351])).
fof(f351,plain,(
  ! [X0,X1] : s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X0),s('type.ast.t',X1))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X0),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X1),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))))),s('type.ast.tctor','const.ast.TC_fn_0')))),
  inference(rectify,[],[f113])).
fof(f113,axiom,(
  ! [X20,X21] : s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X20),s('type.ast.t',X21))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X20),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X21),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))))),s('type.ast.tctor','const.ast.TC_fn_0')))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.ast.Tfn_def')).
fof(f4780,plain,(
  ( ! [X21] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X21),s('type.ast.tctor','const.ast.TC_word64_0')))) ) | $spl242),
  inference(cnf_transformation,[],[f4780_D])).
fof(f4780_D,plain,(
  ( ! [X21] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X21),s('type.ast.tctor','const.ast.TC_word64_0')))) ) <=> ~$spl242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl242])])).
fof(f7541,plain,(
  ( ! [X19,X20] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X19) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X20) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X19)))) ) | $spl436),
  inference(cnf_transformation,[],[f7541_D])).
fof(f7541_D,plain,(
  ( ! [X19,X20] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X19) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X20) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X19)))) ) <=> ~$spl436),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl436])])).
fof(f15862,plain,(
  ( ! [X161,X162,X160] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X160) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X161),s('type.ast.tctor',X160))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X161) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X162),s('type.ast.tctor','const.ast.TC_word64_0')))) )),
  inference(superposition,[],[f1011,f1004])).
fof(f1011,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X0) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1)) )),
  inference(cnf_transformation,[],[f691])).
fof(f691,plain,(
  ! [X0,X1] : ((s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) | (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X0))) & (s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X0) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0)))))),
  inference(flattening,[],[f690])).
fof(f690,plain,(
  ! [X0,X1] : ((s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) | (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X0))) & ((s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X0)) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0)))))),
  inference(nnf_transformation,[],[f349])).
fof(f349,plain,(
  ! [X0,X1] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) <=> (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X0)))),
  inference(rectify,[],[f180])).
fof(f180,axiom,(
  ! [X36,X12] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X12),s('type.ast.tctor',X36))) <=> (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X12) & s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X36)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.evalProps.Tword_simp|split|22')).
fof(f4781,plain,(
  ( ! [X19,X20] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X19) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X19)))) ) | $spl244),
  inference(cnf_transformation,[],[f4781_D])).
fof(f4781_D,plain,(
  ( ! [X19,X20] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X19) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X19)))) ) <=> ~$spl244),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl244])])).
fof(f15861,plain,(
  ( ! [X158,X159,X157] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X157) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X158),s('type.ast.tctor',X157))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X159),s('type.ast.tctor','const.ast.TC_word64_0')))) )),
  inference(superposition,[],[f1010,f1004])).
fof(f1010,plain,(
  ( ! [X0,X1] : (s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X0) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0)))) )),
  inference(cnf_transformation,[],[f691])).
fof(f16013,plain,(
  ( ! [X138,X139] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X139),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X138)))))) ) | $spl818),
  inference(cnf_transformation,[],[f16013_D])).
fof(f16013_D,plain,(
  ( ! [X138,X139] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X139),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X138)))))) ) <=> ~$spl818),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl818])])).
fof(f5334,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_fn_0') | $spl343),
  inference(cnf_transformation,[],[f5334_D])).
fof(f5334_D,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_fn_0') <=> ~$spl343),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl343])])).
fof(f15851,plain,(
  ( ! [X138,X139] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_fn_0') | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X139),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X138)))))) )),
  inference(superposition,[],[f1027,f1004])).
fof(f1027,plain,(
  ( ! [X0] : (s('type.ast.tctor','const.ast.TC_fn_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))) )),
  inference(cnf_transformation,[],[f370])).
fof(f370,plain,(
  ! [X0] : s('type.ast.tctor','const.ast.TC_fn_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(flattening,[],[f369])).
fof(f369,plain,(
  ! [X0] : ~s('type.ast.tctor','const.ast.TC_fn_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X12] : ~s('type.ast.tctor','const.ast.TC_fn_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X12)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.ast.tctor_distinct|split|7')).
fof(f16010,plain,(
  ( ! [X103] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X103),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) ) | $spl816),
  inference(cnf_transformation,[],[f16010_D])).
fof(f16010_D,plain,(
  ( ! [X103] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X103),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) ) <=> ~$spl816),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl816])])).
fof(f5353,plain,(
  ( ! [X111,X114,X112,X110,X113] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X110),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X111),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X112),s('type.semanticPrimitives.v',X113),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X114),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0')))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X111)))) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X114) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X113))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34(X114,X112,X110,X111,X113))))) ) | $spl366),
  inference(cnf_transformation,[],[f5353_D])).
fof(f5353_D,plain,(
  ( ! [X111,X114,X112,X110,X113] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X110),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X111),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X112),s('type.semanticPrimitives.v',X113),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X114),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0')))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X111)))) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X114) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X113))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34(X114,X112,X110,X111,X113))))) ) <=> ~$spl366),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl366])])).
fof(f15838,plain,(
  ( ! [X109,X107,X105,X108,X106,X104] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X104),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X105),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X106),s('type.semanticPrimitives.v',X107),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X108),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0')))))) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X107))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34(X108,X106,X104,X105,X107)))) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X108) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X105)))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X109),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) )),
  inference(superposition,[],[f840,f1004])).
fof(f5352,plain,(
  ( ! [X107,X105,X108,X106,X104] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X104),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X105),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X106),s('type.semanticPrimitives.v',X107),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X108),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0')))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X105)))) | s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X107))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),sK33(X108,X106,X104,X105,X107))))) ) | $spl364),
  inference(cnf_transformation,[],[f5352_D])).
fof(f5352_D,plain,(
  ( ! [X107,X105,X108,X106,X104] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X104),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X105),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X106),s('type.semanticPrimitives.v',X107),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X108),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0')))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X105)))) | s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X107))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),sK33(X108,X106,X104,X105,X107))))) ) <=> ~$spl364),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl364])])).
fof(f15837,plain,(
  ( ! [X103,X101,X99,X102,X100,X98] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X98),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X99),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X100),s('type.semanticPrimitives.v',X101),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X102),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0')))))) | s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X101))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),sK33(X102,X100,X98,X99,X101)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X99)))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X103),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) )),
  inference(superposition,[],[f839,f1004])).
fof(f839,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X0))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),sK33(X4,X3,X2,X1,X0)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X3),s('type.semanticPrimitives.v',X0),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X4),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1))))) )),
  inference(cnf_transformation,[],[f611])).
fof(f7520,plain,(
  ( ! [X22,X20] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X22)))) ) | $spl420),
  inference(cnf_transformation,[],[f7520_D])).
fof(f7520_D,plain,(
  ( ! [X22,X20] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X22)))) ) <=> ~$spl420),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl420])])).
fof(f8634,plain,(
  ( ! [X18] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X18),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X18)) ) | $spl464),
  inference(cnf_transformation,[],[f8634_D])).
fof(f8634_D,plain,(
  ( ! [X18] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X18),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X18)) ) <=> ~$spl464),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl464])])).
fof(f16009,plain,(
  ( ! [X94,X92,X93] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X93),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X93) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X94),s('type.ast.tctor',X92)))) )),
  inference(subsumption_resolution,[],[f15835,f1004])).
fof(f15835,plain,(
  ( ! [X94,X92,X93] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X93),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X92) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X93) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X94),s('type.ast.tctor',X92)))) )),
  inference(superposition,[],[f1014,f1004])).
fof(f1014,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X0) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1)) )),
  inference(cnf_transformation,[],[f693])).
fof(f693,plain,(
  ! [X0,X1] : ((s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) | (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X0))) & (s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X0) | s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0)))))),
  inference(flattening,[],[f692])).
fof(f692,plain,(
  ! [X0,X1] : ((s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) | (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X0))) & ((s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X0)) | s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0)))))),
  inference(nnf_transformation,[],[f350])).
fof(f350,plain,(
  ! [X0,X1] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) <=> (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X0)))),
  inference(rectify,[],[f179])).
fof(f179,axiom,(
  ! [X36,X12] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X12),s('type.ast.tctor',X36))) <=> (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X12) & s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X36)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.evalProps.Tword_simp|split|21')).
fof(f7527,plain,(
  ( ! [X14,X16] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X14)))) ) | $spl424),
  inference(cnf_transformation,[],[f7527_D])).
fof(f7527_D,plain,(
  ( ! [X14,X16] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X14)))) ) <=> ~$spl424),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl424])])).
fof(f7528,plain,(
  ( ! [X15] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X15)) ) | $spl426),
  inference(cnf_transformation,[],[f7528_D])).
fof(f7528_D,plain,(
  ( ! [X15] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X15)) ) <=> ~$spl426),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl426])])).
fof(f15831,plain,(
  ( ! [X80,X81,X79] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X80),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X79) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X80) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X81),s('type.ast.tctor',X79)))) )),
  inference(superposition,[],[f1011,f1004])).
fof(f4788,plain,(
  ( ! [X14,X16] : (s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X14) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X14)))) ) | $spl250),
  inference(cnf_transformation,[],[f4788_D])).
fof(f4788_D,plain,(
  ( ! [X14,X16] : (s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X14) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X14)))) ) <=> ~$spl250),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl250])])).
fof(f4789,plain,(
  ( ! [X15] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor','const.ast.TC_word8_0')))) ) | $spl252),
  inference(cnf_transformation,[],[f4789_D])).
fof(f4789_D,plain,(
  ( ! [X15] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor','const.ast.TC_word8_0')))) ) <=> ~$spl252),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl252])])).
fof(f15829,plain,(
  ( ! [X74,X75,X73] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X74),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X73) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X75),s('type.ast.tctor',X73)))) )),
  inference(superposition,[],[f1010,f1004])).
fof(f15992,plain,(
  ( ! [X111,X112,X110] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X111),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X111) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X112),s('type.ast.tctor',X110)))) )),
  inference(trivial_inequality_removal,[],[f15739])).
fof(f15739,plain,(
  ( ! [X111,X112,X110] : (s('type.ast.tctor',X110) != s('type.ast.tctor',X110) | s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X111),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X111) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X112),s('type.ast.tctor',X110)))) )),
  inference(superposition,[],[f1014,f1004])).
fof(f9327,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X45) | ~sP12(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP2(X47,X46,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP11(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP1(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X46,X47,X48,X49) | sP3(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP4(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP5(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49)) ) | $spl500),
  inference(cnf_transformation,[],[f9327_D])).
fof(f9327_D,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X45) | ~sP12(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP2(X47,X46,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP11(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP1(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X46,X47,X48,X49) | sP3(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP4(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP5(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49)) ) <=> ~$spl500),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl500])])).
fof(f7577,plain,(
  s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | $spl453),
  inference(cnf_transformation,[],[f7577_D])).
fof(f7577_D,plain,(
  s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) <=> ~$spl453),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl453])])).
fof(f15703,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X45) | sP5(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP4(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP3(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X46,X47,X48,X49) | sP1(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP11(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP2(X47,X46,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | ~sP12(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49)) )),
  inference(superposition,[],[f1004,f842])).
fof(f842,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP5(X0,X1,X2,X3,X4) | sP4(X2,X3,X4) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X3) | sP3(X2,X3,X4) | sP0(X3,X0,X1,X2,X4) | sP1(X0,X1,X2,X3,X4) | sP11(X0,X1,X2,X3,X4) | sP2(X1,X0,X2,X3,X4) | sP10(X3,X4) | sP9(X3,X4) | sP8(X3,X4) | sP7(X3,X4) | sP6(X3,X4) | ~sP12(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f615])).
fof(f615,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP12(X0,X1,X2,X3,X4) | sP6(X3,X4) | sP7(X3,X4) | sP8(X3,X4) | sP9(X3,X4) | sP10(X3,X4) | sP2(X1,X0,X2,X3,X4) | sP11(X0,X1,X2,X3,X4) | sP1(X0,X1,X2,X3,X4) | sP0(X3,X0,X1,X2,X4) | sP3(X2,X3,X4) | (s('type.semanticPrimitives.v',X4) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',sK35(X4,X3,X2,X1,X0)))) & s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X3) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',sK35(X4,X3,X2,X1,X0))))) | sP4(X2,X3,X4) | sP5(X0,X1,X2,X3,X4)) & ((~sP6(X3,X4) & ~sP7(X3,X4) & ~sP8(X3,X4) & ~sP9(X3,X4) & ~sP10(X3,X4) & ~sP2(X1,X0,X2,X3,X4) & ~sP11(X0,X1,X2,X3,X4) & ~sP1(X0,X1,X2,X3,X4) & ~sP0(X3,X0,X1,X2,X4) & ~sP3(X2,X3,X4) & ! [X5] : (s('type.semanticPrimitives.v',X4) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X5))) | s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t',X3) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',X5)))) & ~sP4(X2,X3,X4) & ~sP5(X0,X1,X2,X3,X4)) | sP12(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK35])],[f614])).
fof(f614,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP12(X0,X1,X2,X3,X4) | sP6(X3,X4) | sP7(X3,X4) | sP8(X3,X4) | sP9(X3,X4) | sP10(X3,X4) | sP2(X1,X0,X2,X3,X4) | sP11(X0,X1,X2,X3,X4) | sP1(X0,X1,X2,X3,X4) | sP0(X3,X0,X1,X2,X4) | sP3(X2,X3,X4) | ? [X6] : (s('type.semanticPrimitives.v',X4) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X6))) & s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X3) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',X6)))) | sP4(X2,X3,X4) | sP5(X0,X1,X2,X3,X4)) & ((~sP6(X3,X4) & ~sP7(X3,X4) & ~sP8(X3,X4) & ~sP9(X3,X4) & ~sP10(X3,X4) & ~sP2(X1,X0,X2,X3,X4) & ~sP11(X0,X1,X2,X3,X4) & ~sP1(X0,X1,X2,X3,X4) & ~sP0(X3,X0,X1,X2,X4) & ~sP3(X2,X3,X4) & ! [X5] : (s('type.semanticPrimitives.v',X4) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X5))) | s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t',X3) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',X5)))) & ~sP4(X2,X3,X4) & ~sP5(X0,X1,X2,X3,X4)) | sP12(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f613])).
fof(f613,plain,(
  ! [X0,X1,X2,X4,X3] : ((~sP12(X0,X1,X2,X4,X3) | sP6(X4,X3) | sP7(X4,X3) | sP8(X4,X3) | sP9(X4,X3) | sP10(X4,X3) | sP2(X1,X0,X2,X4,X3) | sP11(X0,X1,X2,X4,X3) | sP1(X0,X1,X2,X4,X3) | sP0(X4,X0,X1,X2,X3) | sP3(X2,X4,X3) | ? [X9] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X9))) & s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X4) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',X9)))) | sP4(X2,X4,X3) | sP5(X0,X1,X2,X4,X3)) & ((~sP6(X4,X3) & ~sP7(X4,X3) & ~sP8(X4,X3) & ~sP9(X4,X3) & ~sP10(X4,X3) & ~sP2(X1,X0,X2,X4,X3) & ~sP11(X0,X1,X2,X4,X3) & ~sP1(X0,X1,X2,X4,X3) & ~sP0(X4,X0,X1,X2,X3) & ~sP3(X2,X4,X3) & ! [X9] : (s('type.semanticPrimitives.v',X3) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X9))) | s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t',X4) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',X9)))) & ~sP4(X2,X4,X3) & ~sP5(X0,X1,X2,X4,X3)) | sP12(X0,X1,X2,X4,X3)))),
  inference(flattening,[],[f612])).
fof(f612,plain,(
  ! [X0,X1,X2,X4,X3] : ((~sP12(X0,X1,X2,X4,X3) | (sP6(X4,X3) | sP7(X4,X3) | sP8(X4,X3) | sP9(X4,X3) | sP10(X4,X3) | sP2(X1,X0,X2,X4,X3) | sP11(X0,X1,X2,X4,X3) | sP1(X0,X1,X2,X4,X3) | sP0(X4,X0,X1,X2,X3) | sP3(X2,X4,X3) | ? [X9] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X9))) & s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X4) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',X9)))) | sP4(X2,X4,X3) | sP5(X0,X1,X2,X4,X3))) & ((~sP6(X4,X3) & ~sP7(X4,X3) & ~sP8(X4,X3) & ~sP9(X4,X3) & ~sP10(X4,X3) & ~sP2(X1,X0,X2,X4,X3) & ~sP11(X0,X1,X2,X4,X3) & ~sP1(X0,X1,X2,X4,X3) & ~sP0(X4,X0,X1,X2,X3) & ~sP3(X2,X4,X3) & ! [X9] : (s('type.semanticPrimitives.v',X3) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X9))) | s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t',X4) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',X9)))) & ~sP4(X2,X4,X3) & ~sP5(X0,X1,X2,X4,X3)) | sP12(X0,X1,X2,X4,X3)))),
  inference(nnf_transformation,[],[f584])).
fof(f584,plain,(
  ! [X0,X1,X2,X4,X3] : (sP12(X0,X1,X2,X4,X3) <=> (sP6(X4,X3) | sP7(X4,X3) | sP8(X4,X3) | sP9(X4,X3) | sP10(X4,X3) | sP2(X1,X0,X2,X4,X3) | sP11(X0,X1,X2,X4,X3) | sP1(X0,X1,X2,X4,X3) | sP0(X4,X0,X1,X2,X3) | sP3(X2,X4,X3) | ? [X9] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X9))) & s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X4) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',X9)))) | sP4(X2,X4,X3) | sP5(X0,X1,X2,X4,X3)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP12])])).
fof(f3904,plain,(
  ( ! [X356,X357,X355] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X356) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X355),s('type.ast.tctor',X356)),X357)) ) | $spl222),
  inference(cnf_transformation,[],[f3904_D])).
fof(f3904_D,plain,(
  ( ! [X356,X357,X355] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X356) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X355),s('type.ast.tctor',X356)),X357)) ) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f3868,plain,(
  s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | $spl175),
  inference(cnf_transformation,[],[f3868_D])).
fof(f3868_D,plain,(
  s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) <=> ~$spl175),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl175])])).
fof(f15701,plain,(
  ( ! [X39,X38,X40] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X39) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X38),s('type.ast.tctor',X39)),X40)) )),
  inference(superposition,[],[f1004,f866])).
fof(f866,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X0) | ~sP9(X0,X1)) )),
  inference(cnf_transformation,[],[f624])).
fof(f624,plain,(
  ! [X0,X1] : ((~sP9(X0,X1) | (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK39(X1,X0)))))) & s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X0) & p(s(bool,'T_0')))) & (! [X2] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2))))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X0) | ~p(s(bool,'T_0'))) | sP9(X0,X1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK39])],[f623])).
fof(f623,plain,(
  ! [X0,X1] : ((~sP9(X0,X1) | ? [X3] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X3))))) & s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X0) & p(s(bool,'T_0')))) & (! [X2] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2))))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X0) | ~p(s(bool,'T_0'))) | sP9(X0,X1)))),
  inference(rectify,[],[f622])).
fof(f622,plain,(
  ! [X4,X3] : ((~sP9(X4,X3) | ? [X32] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X32))))) & s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X4) & p(s(bool,'T_0')))) & (! [X32] : (s('type.semanticPrimitives.v',X3) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X32))))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X4) | ~p(s(bool,'T_0'))) | sP9(X4,X3)))),
  inference(nnf_transformation,[],[f581])).
fof(f581,plain,(
  ! [X4,X3] : (sP9(X4,X3) <=> ? [X32] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X32))))) & s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X4) & p(s(bool,'T_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f3461,plain,(
  ( ! [X352,X354,X353] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X353) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X352),s('type.ast.tctor',X353)),X354)) ) | $spl152),
  inference(cnf_transformation,[],[f3461_D])).
fof(f3461_D,plain,(
  ( ! [X352,X354,X353] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X353) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X352),s('type.ast.tctor',X353)),X354)) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f3428,plain,(
  s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | $spl111),
  inference(cnf_transformation,[],[f3428_D])).
fof(f3428_D,plain,(
  s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) <=> ~$spl111),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl111])])).
fof(f15700,plain,(
  ( ! [X37,X35,X36] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X36) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X35),s('type.ast.tctor',X36)),X37)) )),
  inference(superposition,[],[f1004,f862])).
fof(f862,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t',X0) | ~sP10(X0,X1)) )),
  inference(cnf_transformation,[],[f621])).
fof(f621,plain,(
  ! [X0,X1] : ((~sP10(X0,X1) | (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK38(X1,X0)))))) & s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t',X0) & p(s(bool,'T_0')))) & (! [X2] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2))))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X0) | ~p(s(bool,'T_0'))) | sP10(X0,X1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK38])],[f620])).
fof(f620,plain,(
  ! [X0,X1] : ((~sP10(X0,X1) | ? [X3] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X3))))) & s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t',X0) & p(s(bool,'T_0')))) & (! [X2] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2))))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X0) | ~p(s(bool,'T_0'))) | sP10(X0,X1)))),
  inference(rectify,[],[f619])).
fof(f619,plain,(
  ! [X4,X3] : ((~sP10(X4,X3) | ? [X31] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X31))))) & s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t',X4) & p(s(bool,'T_0')))) & (! [X31] : (s('type.semanticPrimitives.v',X3) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X31))))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X4) | ~p(s(bool,'T_0'))) | sP10(X4,X3)))),
  inference(nnf_transformation,[],[f582])).
fof(f582,plain,(
  ! [X4,X3] : (sP10(X4,X3) <=> ? [X31] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X31))))) & s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t',X4) & p(s(bool,'T_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP10])])).
fof(f5335,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_fn_0') | $spl342),
  inference(cnf_transformation,[],[f5335_D])).
fof(f5335_D,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_fn_0') <=> ~$spl342),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl342])])).
fof(f16005,plain,(
  ( ! [X24,X23] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X23),s('type.ast.t',X24)))) ) | $spl814),
  inference(cnf_transformation,[],[f16005_D])).
fof(f16005_D,plain,(
  ( ! [X24,X23] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X23),s('type.ast.t',X24)))) ) <=> ~$spl814),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl814])])).
fof(f15697,plain,(
  ( ! [X24,X23] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X23),s('type.ast.t',X24))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_fn_0')) )),
  inference(superposition,[],[f1004,f1015])).
fof(f4793,plain,(
  ( ! [X8] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X8)) ) | $spl254),
  inference(cnf_transformation,[],[f4793_D])).
fof(f4793_D,plain,(
  ( ! [X8] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X8)) ) <=> ~$spl254),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl254])])).
fof(f5327,plain,(
  ( ! [X14] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X14) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14)) ) | $spl332),
  inference(cnf_transformation,[],[f5327_D])).
fof(f5327_D,plain,(
  ( ! [X14] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X14) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14)) ) <=> ~$spl332),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl332])])).
fof(f15691,plain,(
  ( ! [X12,X11] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X12) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X12) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X11)) )),
  inference(superposition,[],[f1004,f1011])).
fof(f16002,plain,(
  ( ! [X10,X9] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10)))) ) | $spl812),
  inference(cnf_transformation,[],[f16002_D])).
fof(f16002_D,plain,(
  ( ! [X10,X9] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10)))) ) <=> ~$spl812),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl812])])).
fof(f15690,plain,(
  ( ! [X10,X8,X9] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X8)) )),
  inference(superposition,[],[f1004,f1002])).
fof(f1002,plain,(
  ( ! [X2,X0,X1] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X2))) | s('type.ast.tctor',X2) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X0))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1)) )),
  inference(cnf_transformation,[],[f685])).
fof(f685,plain,(
  ! [X0,X1,X2] : ((s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X2))) | (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor',X2) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X0))))) & (s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1) | s('type.ast.tctor',X2) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X0))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X2)))))),
  inference(flattening,[],[f684])).
fof(f684,plain,(
  ! [X0,X1,X2] : ((s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X2))) | (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor',X2) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X0))))) & ((s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1) | s('type.ast.tctor',X2) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X0)))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X2)))))),
  inference(nnf_transformation,[],[f346])).
fof(f346,plain,(
  ! [X0,X1,X2] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X2))) <=> (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor',X2) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X0)))))),
  inference(rectify,[],[f178])).
fof(f178,axiom,(
  ! [X35,X12,X36] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X35))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X12),s('type.ast.tctor',X36))) <=> (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X12) & s('type.ast.tctor',X36) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X35)))))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.evalProps.Tword_simp|split|20')).
fof(f15667,plain,(
  ( ! [X19,X17,X18] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X18),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X17) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X19),s('type.ast.tctor',X17)))) )),
  inference(superposition,[],[f1004,f1010])).
fof(f15617,plain,(
  ( ! [X28,X29,X27] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X27) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X28),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X29),s('type.ast.tctor',X27)))) )),
  inference(superposition,[],[f1004,f1010])).
fof(f1475,plain,(
  ( ! [X2] : (~sP9(sK32,X2)) ) | $spl14),
  inference(cnf_transformation,[],[f1475_D])).
fof(f1475_D,plain,(
  ( ! [X2] : (~sP9(sK32,X2)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f1477,plain,(
  s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | $spl16),
  inference(cnf_transformation,[],[f1477_D])).
fof(f1477_D,plain,(
  s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f15395,plain,(
  ( ! [X23] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | ~sP9(sK32,X23)) ) | $spl4),
  inference(superposition,[],[f866,f1343])).
fof(f15377,plain,(
  ( ! [X1] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | ~sP9(sK32,X1)) ) | $spl4),
  inference(superposition,[],[f1343,f866])).
fof(f1771,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1)))))) ) | $spl58),
  inference(cnf_transformation,[],[f1771_D])).
fof(f1771_D,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1)))))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f3903,plain,(
  ( ! [X342] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X342)))) ) | $spl220),
  inference(cnf_transformation,[],[f3903_D])).
fof(f3903_D,plain,(
  ( ! [X342] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X342)))) ) <=> ~$spl220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl220])])).
fof(f15352,plain,(
  ( ! [X2,X0,X1] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) | s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))) ) | $spl226),
  inference(resolution,[],[f3907,f3057])).
fof(f3057,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X0) | s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))) )),
  inference(subsumption_resolution,[],[f868,f1336])).
fof(f868,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1) | ~p(s(bool,'T_0')) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X0) | s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))) )),
  inference(cnf_transformation,[],[f624])).
fof(f15279,plain,(
  $false | $spl48),
  inference(subsumption_resolution,[],[f15158,f1737])).
fof(f15158,plain,(
  ( ! [X494,X495] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X494),s('type.num.num',X495))))) ) | $spl48),
  inference(resolution,[],[f1737,f1052])).
fof(f1052,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f704])).
fof(f704,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0))))) & (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f390])).
fof(f390,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) <=> ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(flattening,[],[f389])).
fof(f389,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X1)))))) <=> ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f247])).
fof(f247,axiom,(
  ! [X36,X43] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X36))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X43)))))) <=> ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X43),s('type.num.num',X36)))))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.numeral.numeral_lt|split|5')).
fof(f15278,plain,(
  $false | $spl48),
  inference(subsumption_resolution,[],[f15157,f1737])).
fof(f15157,plain,(
  ( ! [X492,X493] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X492))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X493))))))) ) | $spl48),
  inference(resolution,[],[f1737,f1052])).
fof(f15259,plain,(
  $false | $spl48),
  inference(subsumption_resolution,[],[f15120,f1324])).
fof(f1324,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.typeSound.canonical_values_thm|split|9',aHL_TRUTH)).
fof(f15120,plain,(
  ~p(s(bool,'T_0')) | $spl48),
  inference(resolution,[],[f1737,f1322])).
fof(f1322,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f831])).
fof(f831,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f525])).
fof(f525,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f135])).
fof(f135,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.bool.NOT_CLAUSES|split|1')).
fof(f15258,plain,(
  $false | $spl48),
  inference(subsumption_resolution,[],[f15119,f1324])).
fof(f15119,plain,(
  ~p(s(bool,'T_0')) | $spl48),
  inference(resolution,[],[f1737,f1320])).
fof(f1320,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f830])).
fof(f830,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f524])).
fof(f524,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f136])).
fof(f136,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.bool.NOT_CLAUSES|split|2')).
fof(f15257,plain,(
  $false | $spl48),
  inference(subsumption_resolution,[],[f15111,f1737])).
fof(f15111,plain,(
  ( ! [X320] : (~p(s(bool,X320))) ) | $spl48),
  inference(resolution,[],[f1737,f1258])).
fof(f1258,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | ~p(s(bool,'F_0'))) )),
  inference(cnf_transformation,[],[f797])).
fof(f797,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | ~p(s(bool,X0))) & (p(s(bool,X0)) | ~p(s(bool,X0)) | p(s(bool,'F_0'))))),
  inference(flattening,[],[f796])).
fof(f796,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | ~p(s(bool,X0))) & (p(s(bool,X0)) | (~p(s(bool,X0)) | p(s(bool,'F_0')))))),
  inference(nnf_transformation,[],[f561])).
fof(f561,plain,(
  ! [X0] : ((~p(s(bool,X0)) | p(s(bool,'F_0'))) <=> ~p(s(bool,X0)))),
  inference(ennf_transformation,[],[f493])).
fof(f493,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f492])).
fof(f492,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f133])).
fof(f133,axiom,(
  ! [X19] : ((p(s(bool,X19)) => p(s(bool,'F_0'))) <=> ~p(s(bool,X19)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.bool.IMP_CLAUSES|split|4')).
fof(f15118,plain,(
  $false | $spl48),
  inference(resolution,[],[f1737,f1318])).
fof(f1318,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f523])).
fof(f523,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.typeSound.canonical_values_thm|split|9',aHL_FALSITY)).
fof(f1476,plain,(
  s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | $spl17),
  inference(cnf_transformation,[],[f1476_D])).
fof(f1476_D,plain,(
  s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f14986,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X1)))))) ) | $spl576),
  inference(subsumption_resolution,[],[f14982,f1336])).
fof(f14982,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X1)))))) ) | $spl576),
  inference(resolution,[],[f14772,f876])).
fof(f2337,plain,(
  s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | $spl82),
  inference(cnf_transformation,[],[f2337_D])).
fof(f2337_D,plain,(
  s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f3066,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | ~sP12(X6,X7,X8,sK32,X9) | sP6(sK32,X9) | sP8(sK32,X9) | sP9(sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP1(X6,X7,X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP3(X8,sK32,X9) | sP4(X8,sK32,X9)) ) | $spl102),
  inference(cnf_transformation,[],[f3066_D])).
fof(f3066_D,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | ~sP12(X6,X7,X8,sK32,X9) | sP6(sK32,X9) | sP8(sK32,X9) | sP9(sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP1(X6,X7,X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP3(X8,sK32,X9) | sP4(X8,sK32,X9)) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f14980,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP9(sK32,X9) | sP8(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl18 | $spl542)),
  inference(subsumption_resolution,[],[f14976,f1478])).
fof(f14976,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP10(sK32,X9) | sP9(sK32,X9) | sP8(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | $spl542),
  inference(resolution,[],[f14744,f842])).
fof(f1342,plain,(
  s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',sK32) | $spl5),
  inference(cnf_transformation,[],[f1342_D])).
fof(f1342_D,plain,(
  s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',sK32) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f14978,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',sK32) | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X1)))))) ) | $spl542),
  inference(subsumption_resolution,[],[f14974,f1336])).
fof(f14974,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',sK32) | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X1)))))) ) | $spl542),
  inference(resolution,[],[f14744,f876])).
fof(f14972,plain,(
  ( ! [X198] : (p(s(bool,X198)) | s(bool,X198) != s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) ) | $spl808),
  inference(cnf_transformation,[],[f14972_D])).
fof(f14972_D,plain,(
  ( ! [X198] : (p(s(bool,X198)) | s(bool,X198) != s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) ) <=> ~$spl808),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl808])])).
fof(f1732,plain,(
  ( ! [X10,X8] : (p(s(bool,X8)) | s(bool,X8) != s(bool,X10)) ) | $spl38),
  inference(cnf_transformation,[],[f1732_D])).
fof(f1732_D,plain,(
  ( ! [X10,X8] : (p(s(bool,X8)) | s(bool,X8) != s(bool,X10)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f13648,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X9)) | p(s(bool,X10)) | s(bool,X9) != s(bool,X11) | s(bool,X10) != s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) )),
  inference(resolution,[],[f836,f927])).
fof(f927,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X3)) | ~p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f654])).
fof(f654,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | ~p(s(bool,X1)) | p(s(bool,X3))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | ~p(s(bool,X0)) | p(s(bool,X2)))))),
  inference(flattening,[],[f653])).
fof(f653,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | (((p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X1)) | p(s(bool,X3)))) & ((p(s(bool,X1)) & ~p(s(bool,X3))) | (~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f534])).
fof(f534,plain,(
  ! [X0,X1,X2,X3] : (s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3)) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(flattening,[],[f533])).
fof(f533,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) != s(bool,X1) | (p(s(bool,X1)) & s(bool,X2) != s(bool,X3))) | ((~p(s(bool,X0)) | p(s(bool,X2))) <=> (~p(s(bool,X1)) | p(s(bool,X3)))))),
  inference(ennf_transformation,[],[f317])).
fof(f317,plain,(
  ! [X0,X1,X2,X3] : ((s(bool,X0) = s(bool,X1) & (p(s(bool,X1)) => s(bool,X2) = s(bool,X3))) => ((p(s(bool,X0)) => p(s(bool,X2))) <=> (p(s(bool,X1)) => p(s(bool,X3)))))),
  inference(rectify,[],[f150])).
fof(f150,axiom,(
  ! [X22,X31,X23,X32] : ((s(bool,X22) = s(bool,X31) & (p(s(bool,X31)) => s(bool,X23) = s(bool,X32))) => ((p(s(bool,X22)) => p(s(bool,X23))) <=> (p(s(bool,X31)) => p(s(bool,X32)))))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.bool.IMP_CONG')).
fof(f14973,plain,(
  ( ! [X29] : (s(bool,X29) != s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) ) | $spl810),
  inference(cnf_transformation,[],[f14973_D])).
fof(f14973_D,plain,(
  ( ! [X29] : (s(bool,X29) != s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) ) <=> ~$spl810),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl810])])).
fof(f1734,plain,(
  ( ! [X12,X11] : (p(s(bool,X11)) | s(bool,X11) != s(bool,X12) | ~p(s(bool,X12))) ) | $spl42),
  inference(cnf_transformation,[],[f1734_D])).
fof(f1734_D,plain,(
  ( ! [X12,X11] : (p(s(bool,X11)) | s(bool,X11) != s(bool,X12) | ~p(s(bool,X12))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f13649,plain,(
  ( ! [X14,X12,X13] : (p(s(bool,X12)) | ~p(s(bool,X13)) | s(bool,X12) != s(bool,X13) | s(bool,X14) != s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) )),
  inference(resolution,[],[f836,f929])).
fof(f929,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X3)) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f654])).
fof(f1735,plain,(
  ( ! [X15,X16] : (~p(s(bool,X15)) | s(bool,X15) != s(bool,X16)) ) | $spl44),
  inference(cnf_transformation,[],[f1735_D])).
fof(f1735_D,plain,(
  ( ! [X15,X16] : (~p(s(bool,X15)) | s(bool,X15) != s(bool,X16)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f13650,plain,(
  ( ! [X17,X15,X16] : (p(s(bool,X15)) | ~p(s(bool,X16)) | s(bool,X15) != s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))) | s(bool,X16) != s(bool,X17)) )),
  inference(resolution,[],[f836,f929])).
fof(f13651,plain,(
  ( ! [X19,X20,X18] : (p(s(bool,X18)) | p(s(bool,X19)) | s(bool,X18) != s(bool,X20) | s(bool,X19) != s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) )),
  inference(resolution,[],[f836,f931])).
fof(f931,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f654])).
fof(f1736,plain,(
  ( ! [X21] : (~p(s(bool,X21))) ) | $spl46),
  inference(cnf_transformation,[],[f1736_D])).
fof(f1736_D,plain,(
  ( ! [X21] : (~p(s(bool,X21))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f1737,plain,(
  ( ! [X20] : (p(s(bool,X20))) ) | $spl48),
  inference(cnf_transformation,[],[f1737_D])).
fof(f1737_D,plain,(
  ( ! [X20] : (p(s(bool,X20))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f13652,plain,(
  ( ! [X23,X21,X22] : (p(s(bool,X21)) | ~p(s(bool,X22)) | p(s(bool,X23)) | s(bool,X23) != s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) )),
  inference(resolution,[],[f836,f932])).
fof(f932,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X3)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f654])).
fof(f13654,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X27)) | ~p(s(bool,X28)) | s(bool,X27) != s(bool,X28) | s(bool,X29) != s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) )),
  inference(resolution,[],[f836,f933])).
fof(f933,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X3)) | s(bool,X2) != s(bool,X3) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f654])).
fof(f13655,plain,(
  ( ! [X30,X31,X32] : (p(s(bool,X30)) | ~p(s(bool,X31)) | s(bool,X30) != s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))) | s(bool,X31) != s(bool,X32)) )),
  inference(resolution,[],[f836,f933])).
fof(f13754,plain,(
  ( ! [X198,X197] : (p(s(bool,X197)) | p(s(bool,X198)) | s(bool,X198) != s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) )),
  inference(resolution,[],[f836,f1331])).
fof(f1331,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f930])).
fof(f930,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X2)) | ~p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X1)) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f654])).
fof(f14970,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK29),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl805),
  inference(cnf_transformation,[],[f14970_D])).
fof(f14970_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK29),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl805),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl805])])).
fof(f14971,plain,(
  ( ! [X1] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',sK29))) != s('type.string.char','const.string.CHR_1'(s('type.num.num',X1)))) ) | $spl806),
  inference(cnf_transformation,[],[f14971_D])).
fof(f14971_D,plain,(
  ( ! [X1] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',sK29))) != s('type.string.char','const.string.CHR_1'(s('type.num.num',X1)))) ) <=> ~$spl806),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl806])])).
fof(f13757,plain,(
  ( ! [X0] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',sK29))) != s('type.string.char','const.string.CHR_1'(s('type.num.num',X0))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK29),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f1040,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) = s('type.num.num',X1) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X0))) != s('type.string.char','const.string.CHR_1'(s('type.num.num',X1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(cnf_transformation,[],[f700])).
fof(f700,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ((s('type.string.char','const.string.CHR_1'(s('type.num.num',X0))) != s('type.string.char','const.string.CHR_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X0))) = s('type.string.char','const.string.CHR_1'(s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f540])).
fof(f540,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | (s('type.string.char','const.string.CHR_1'(s('type.num.num',X0))) = s('type.string.char','const.string.CHR_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1)))),
  inference(flattening,[],[f539])).
fof(f539,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | (s('type.string.char','const.string.CHR_1'(s('type.num.num',X0))) = s('type.string.char','const.string.CHR_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))))),
  inference(ennf_transformation,[],[f382])).
fof(f382,plain,(
  ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) => (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) => (s('type.string.char','const.string.CHR_1'(s('type.num.num',X0))) = s('type.string.char','const.string.CHR_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))))),
  inference(rectify,[],[f294])).
fof(f294,axiom,(
  ! [X44,X53] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X44),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) => (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X53),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) => (s('type.string.char','const.string.CHR_1'(s('type.num.num',X44))) = s('type.string.char','const.string.CHR_1'(s('type.num.num',X53))) <=> s('type.num.num',X44) = s('type.num.num',X53))))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.string.CHR_|49||49|')).
fof(f13758,plain,(
  ( ! [X1] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',sK29))) != s('type.string.char','const.string.CHR_1'(s('type.num.num',X1))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK29),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14966,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK29))) | $spl801),
  inference(cnf_transformation,[],[f14966_D])).
fof(f14966_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK29))) <=> ~$spl801),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl801])])).
fof(f14968,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl802),
  inference(cnf_transformation,[],[f14968_D])).
fof(f14968_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl802),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl802])])).
fof(f13761,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK29)))),
  inference(superposition,[],[f836,f1045])).
fof(f1045,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f702])).
fof(f702,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f385])).
fof(f385,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f216])).
fof(f216,axiom,(
  ! [X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X36))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.numeral.numeral_distrib|split|18')).
fof(f13762,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',sK29)))),
  inference(superposition,[],[f836,f1047])).
fof(f1047,plain,(
  ( ! [X0] : (s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f703])).
fof(f703,plain,(
  ! [X0] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0)) & (s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0)))))),
  inference(nnf_transformation,[],[f386])).
fof(f386,plain,(
  ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X0))),
  inference(rectify,[],[f215])).
fof(f215,axiom,(
  ! [X36] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))) <=> s('type.num.num','const.arithmetic.ZERO_0') = s('type.num.num',X36))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.numeral.numeral_distrib|split|17')).
fof(f14964,plain,(
  ( ! [X6,X4,X7,X5] : (sP17(X4,X5,X6,'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0')),X7) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.semanticPrimitives.v'),X7),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))))))) ) | $spl798),
  inference(cnf_transformation,[],[f14964_D])).
fof(f14964_D,plain,(
  ( ! [X6,X4,X7,X5] : (sP17(X4,X5,X6,'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0')),X7) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.semanticPrimitives.v'),X7),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))))))) ) <=> ~$spl798),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl798])])).
fof(f14960,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl790),
  inference(cnf_transformation,[],[f14960_D])).
fof(f14960_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl790),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl790])])).
fof(f13849,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | sP17(X4,X5,X6,'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0')),X7) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X5),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X6),s('type.list.list'('type.semanticPrimitives.v'),X7),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))))))) )),
  inference(superposition,[],[f836,f982])).
fof(f982,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP17(X0,X1,X2,X4,X3) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X4) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.t'),X4))))) )),
  inference(cnf_transformation,[],[f676])).
fof(f676,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.t'),X4)))) | (s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X3) & s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X4) & p(s(bool,'T_0'))) | sP17(X0,X1,X2,X4,X3)) & (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X3) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X4) | ~p(s(bool,'T_0'))) & ~sP17(X0,X1,X2,X4,X3)) | p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.t'),X4))))))),
  inference(flattening,[],[f675])).
fof(f675,plain,(
  ! [X0,X1,X2,X3,X4] : ((~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.t'),X4)))) | ((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X3) & s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X4) & p(s(bool,'T_0'))) | sP17(X0,X1,X2,X4,X3))) & (((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X3) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X4) | ~p(s(bool,'T_0'))) & ~sP17(X0,X1,X2,X4,X3)) | p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.t'),X4))))))),
  inference(nnf_transformation,[],[f592])).
fof(f592,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.t'),X4)))) <=> ((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X3) & s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X4) & p(s(bool,'T_0'))) | sP17(X0,X1,X2,X4,X3)))),
  inference(definition_folding,[],[f342,f591])).
fof(f591,plain,(
  ! [X0,X1,X2,X4,X3] : (sP17(X0,X1,X2,X4,X3) <=> ? [X5,X6,X7,X8] : (s('type.list.list'('type.semanticPrimitives.v'),X3) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X5),s('type.list.list'('type.semanticPrimitives.v'),X6))) & s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X7),s('type.list.list'('type.ast.t'),X8))) & p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.semanticPrimitives.v',X5),s('type.ast.t',X7)))) & p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X6),s('type.list.list'('type.ast.t'),X8))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP17])])).
fof(f342,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.t'),X4)))) <=> ((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X3) & s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X4) & p(s(bool,'T_0'))) | ? [X5,X6,X7,X8] : (s('type.list.list'('type.semanticPrimitives.v'),X3) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X5),s('type.list.list'('type.semanticPrimitives.v'),X6))) & s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X7),s('type.list.list'('type.ast.t'),X8))) & p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.semanticPrimitives.v',X5),s('type.ast.t',X7)))) & p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X6),s('type.list.list'('type.ast.t'),X8)))))))),
  inference(rectify,[],[f297])).
fof(f297,axiom,(
  ! [X69,X70,X71,X72,X73] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X70),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X71),s('type.list.list'('type.semanticPrimitives.v'),X72),s('type.list.list'('type.ast.t'),X73)))) <=> ((s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') = s('type.list.list'('type.semanticPrimitives.v'),X72) & s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X73) & p(s(bool,'T_0'))) | ? [X9,X11,X19,X63] : (s('type.list.list'('type.semanticPrimitives.v'),X72) = s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',X9),s('type.list.list'('type.semanticPrimitives.v'),X11))) & s('type.list.list'('type.ast.t'),X73) = s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X19),s('type.list.list'('type.ast.t'),X63))) & p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X70),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X71),s('type.semanticPrimitives.v',X9),s('type.ast.t',X19)))) & p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X69),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X70),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X71),s('type.list.list'('type.semanticPrimitives.v'),X11),s('type.list.list'('type.ast.t'),X63)))))))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.typeSoundInvariants.type_v_cases|split|1')).
fof(f14963,plain,(
  ( ! [X14,X15] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X14))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor',X15)))) ) | $spl796),
  inference(cnf_transformation,[],[f14963_D])).
fof(f14963_D,plain,(
  ( ! [X14,X15] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X14))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor',X15)))) ) <=> ~$spl796),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl796])])).
fof(f13852,plain,(
  ( ! [X14,X15] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X14))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor',X15)))) )),
  inference(superposition,[],[f836,f1000])).
fof(f1000,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X2)))) )),
  inference(cnf_transformation,[],[f685])).
fof(f14962,plain,(
  ( ! [X16] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor',X16)))) ) | $spl794),
  inference(cnf_transformation,[],[f14962_D])).
fof(f14962_D,plain,(
  ( ! [X16] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor',X16)))) ) <=> ~$spl794),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl794])])).
fof(f13853,plain,(
  ( ! [X16] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor',X16)))) )),
  inference(superposition,[],[f836,f1009])).
fof(f1009,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0)))) )),
  inference(cnf_transformation,[],[f691])).
fof(f14961,plain,(
  ( ! [X17] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor',X17)))) ) | $spl792),
  inference(cnf_transformation,[],[f14961_D])).
fof(f14961_D,plain,(
  ( ! [X17] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor',X17)))) ) <=> ~$spl792),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl792])])).
fof(f13854,plain,(
  ( ! [X17] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor',X17)))) )),
  inference(superposition,[],[f836,f1012])).
fof(f1012,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0)))) )),
  inference(cnf_transformation,[],[f693])).
fof(f14810,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | $spl621),
  inference(cnf_transformation,[],[f14810_D])).
fof(f14810_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) <=> ~$spl621),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl621])])).
fof(f14639,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))),
  inference(forward_demodulation,[],[f14638,f1091])).
fof(f1091,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f421])).
fof(f421,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f181])).
fof(f181,axiom,(
  ! [X14] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.NIL_0')))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.list.LENGTH|split|0')).
fof(f14638,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))),
  inference(forward_demodulation,[],[f13855,f1088])).
fof(f1088,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f418])).
fof(f418,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f417])).
fof(f417,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f182])).
fof(f182,axiom,(
  ! [X14] : ! [X37,X19] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X19))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),'const.list.CONS_2'(s(X14,X37),s('type.list.list'(X14),X19)))))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.list.LENGTH|split|1')).
fof(f13855,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))))),
  inference(superposition,[],[f836,f1089])).
fof(f1089,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f715])).
fof(f715,plain,(
  ! [X0,X1] : ((s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1)) & (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1) | s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1)))))),
  inference(nnf_transformation,[],[f420])).
fof(f420,plain,(
  ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(flattening,[],[f419])).
fof(f419,plain,(
  ! [X0] : ! [X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) <=> s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),X1))),
  inference(rectify,[],[f190])).
fof(f190,axiom,(
  ! [X14] : ! [X38] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X14),X38))) <=> s('type.list.list'(X14),'const.list.NIL_0') = s('type.list.list'(X14),X38))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.list.LENGTH_NIL')).
fof(f14957,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl787),
  inference(cnf_transformation,[],[f14957_D])).
fof(f14957_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl787),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl787])])).
fof(f14958,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl788),
  inference(cnf_transformation,[],[f14958_D])).
fof(f14958_D,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) <=> ~$spl788),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl788])])).
fof(f13874,plain,(
  ( ! [X4] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X4))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f13875,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14953,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl783),
  inference(cnf_transformation,[],[f14953_D])).
fof(f14953_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl783),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl783])])).
fof(f14955,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl784),
  inference(cnf_transformation,[],[f14955_D])).
fof(f14955_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl784),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl784])])).
fof(f13878,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(superposition,[],[f836,f1045])).
fof(f13879,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14950,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl779),
  inference(cnf_transformation,[],[f14950_D])).
fof(f14950_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl779),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl779])])).
fof(f14951,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | $spl780),
  inference(cnf_transformation,[],[f14951_D])).
fof(f14951_D,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) <=> ~$spl780),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl780])])).
fof(f13902,plain,(
  ( ! [X4] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X4))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f13903,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14946,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | $spl775),
  inference(cnf_transformation,[],[f14946_D])).
fof(f14946_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) <=> ~$spl775),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl775])])).
fof(f14948,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl776),
  inference(cnf_transformation,[],[f14948_D])).
fof(f14948_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl776),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl776])])).
fof(f13906,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(superposition,[],[f836,f1045])).
fof(f13907,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14943,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl771),
  inference(cnf_transformation,[],[f14943_D])).
fof(f14943_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl771),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl771])])).
fof(f14944,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) ) | $spl772),
  inference(cnf_transformation,[],[f14944_D])).
fof(f14944_D,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) ) <=> ~$spl772),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl772])])).
fof(f13930,plain,(
  ( ! [X4] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X4))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f13931,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14939,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | $spl767),
  inference(cnf_transformation,[],[f14939_D])).
fof(f14939_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) <=> ~$spl767),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl767])])).
fof(f14941,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl768),
  inference(cnf_transformation,[],[f14941_D])).
fof(f14941_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl768),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl768])])).
fof(f13934,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))),
  inference(superposition,[],[f836,f1045])).
fof(f13935,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14935,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | $spl763),
  inference(cnf_transformation,[],[f14935_D])).
fof(f14935_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) <=> ~$spl763),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl763])])).
fof(f14937,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl764),
  inference(cnf_transformation,[],[f14937_D])).
fof(f14937_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl764),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl764])])).
fof(f13952,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(superposition,[],[f836,f1048])).
fof(f1048,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f703])).
fof(f13953,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(superposition,[],[f836,f1046])).
fof(f1046,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num',X0)) )),
  inference(cnf_transformation,[],[f702])).
fof(f14931,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) | $spl759),
  inference(cnf_transformation,[],[f14931_D])).
fof(f14931_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) <=> ~$spl759),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl759])])).
fof(f14933,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl760),
  inference(cnf_transformation,[],[f14933_D])).
fof(f14933_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl760),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl760])])).
fof(f13960,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))),
  inference(superposition,[],[f836,f1045])).
fof(f13961,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14928,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl755),
  inference(cnf_transformation,[],[f14928_D])).
fof(f14928_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl755),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl755])])).
fof(f14929,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl756),
  inference(cnf_transformation,[],[f14929_D])).
fof(f14929_D,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) <=> ~$spl756),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl756])])).
fof(f13996,plain,(
  ( ! [X4] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X4))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f13997,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14924,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl751),
  inference(cnf_transformation,[],[f14924_D])).
fof(f14924_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl751),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl751])])).
fof(f14926,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl752),
  inference(cnf_transformation,[],[f14926_D])).
fof(f14926_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl752),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl752])])).
fof(f14000,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f836,f1045])).
fof(f14001,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14921,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl747),
  inference(cnf_transformation,[],[f14921_D])).
fof(f14921_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl747),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl747])])).
fof(f14922,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl748),
  inference(cnf_transformation,[],[f14922_D])).
fof(f14922_D,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) <=> ~$spl748),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl748])])).
fof(f14024,plain,(
  ( ! [X4] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X4))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14025,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14917,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl743),
  inference(cnf_transformation,[],[f14917_D])).
fof(f14917_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl743),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl743])])).
fof(f14919,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl744),
  inference(cnf_transformation,[],[f14919_D])).
fof(f14919_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl744),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl744])])).
fof(f14028,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(superposition,[],[f836,f1045])).
fof(f14029,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14914,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl739),
  inference(cnf_transformation,[],[f14914_D])).
fof(f14914_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl739),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl739])])).
fof(f14915,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl740),
  inference(cnf_transformation,[],[f14915_D])).
fof(f14915_D,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) <=> ~$spl740),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl740])])).
fof(f14052,plain,(
  ( ! [X4] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X4))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14053,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14910,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl735),
  inference(cnf_transformation,[],[f14910_D])).
fof(f14910_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl735),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl735])])).
fof(f14912,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl736),
  inference(cnf_transformation,[],[f14912_D])).
fof(f14912_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl736),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl736])])).
fof(f14056,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(superposition,[],[f836,f1045])).
fof(f14057,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14907,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl731),
  inference(cnf_transformation,[],[f14907_D])).
fof(f14907_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl731),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl731])])).
fof(f14908,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | $spl732),
  inference(cnf_transformation,[],[f14908_D])).
fof(f14908_D,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) <=> ~$spl732),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl732])])).
fof(f14080,plain,(
  ( ! [X4] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X4))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14081,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14903,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | $spl727),
  inference(cnf_transformation,[],[f14903_D])).
fof(f14903_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) <=> ~$spl727),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl727])])).
fof(f14905,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl728),
  inference(cnf_transformation,[],[f14905_D])).
fof(f14905_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl728),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl728])])).
fof(f14676,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(forward_demodulation,[],[f14084,f1051])).
fof(f1051,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f211])).
fof(f211,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.numeral.numeral_distrib|split|13')).
fof(f14084,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(superposition,[],[f836,f1045])).
fof(f14677,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(forward_demodulation,[],[f14085,f1051])).
fof(f14085,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14900,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl723),
  inference(cnf_transformation,[],[f14900_D])).
fof(f14900_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl723),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl723])])).
fof(f14901,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) ) | $spl724),
  inference(cnf_transformation,[],[f14901_D])).
fof(f14901_D,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) ) <=> ~$spl724),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl724])])).
fof(f14108,plain,(
  ( ! [X4] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X4))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14109,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14896,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | $spl719),
  inference(cnf_transformation,[],[f14896_D])).
fof(f14896_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) <=> ~$spl719),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl719])])).
fof(f14898,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl720),
  inference(cnf_transformation,[],[f14898_D])).
fof(f14898_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl720),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl720])])).
fof(f14112,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))),
  inference(superposition,[],[f836,f1045])).
fof(f14113,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14892,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | $spl715),
  inference(cnf_transformation,[],[f14892_D])).
fof(f14892_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) <=> ~$spl715),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl715])])).
fof(f14894,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl716),
  inference(cnf_transformation,[],[f14894_D])).
fof(f14894_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl716),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl716])])).
fof(f14130,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(superposition,[],[f836,f1048])).
fof(f14131,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(superposition,[],[f836,f1046])).
fof(f14890,plain,(
  ( ! [X3] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))) ) | $spl712),
  inference(cnf_transformation,[],[f14890_D])).
fof(f14890_D,plain,(
  ( ! [X3] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))) ) <=> ~$spl712),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl712])])).
fof(f14885,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))) | $spl707),
  inference(cnf_transformation,[],[f14885_D])).
fof(f14885_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))) <=> ~$spl707),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl707])])).
fof(f14678,plain,(
  ( ! [X2] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X2))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X2))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(forward_demodulation,[],[f14134,f1044])).
fof(f1044,plain,(
  ( ! [X0,X1] : (s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f384])).
fof(f384,plain,(
  ! [X0,X1] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f220])).
fof(f220,axiom,(
  ! [X36,X43] : s(bool,'const.prim_rec.<_2'(s('type.num.num',X36),s('type.num.num',X43))) = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X36))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X43)))))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.numeral.numeral_distrib|split|22')).
fof(f14134,plain,(
  ( ! [X2] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X2))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X2))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14679,plain,(
  ( ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(forward_demodulation,[],[f14135,f1044])).
fof(f14135,plain,(
  ( ! [X3] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14887,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) | $spl709),
  inference(cnf_transformation,[],[f14887_D])).
fof(f14887_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) <=> ~$spl709),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl709])])).
fof(f14889,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl710),
  inference(cnf_transformation,[],[f14889_D])).
fof(f14889_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl710),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl710])])).
fof(f14138,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))),
  inference(superposition,[],[f836,f1045])).
fof(f14139,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14883,plain,(
  ( ! [X1] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X1))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) ) | $spl704),
  inference(cnf_transformation,[],[f14883_D])).
fof(f14883_D,plain,(
  ( ! [X1] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X1))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) ) <=> ~$spl704),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl704])])).
fof(f14680,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X0))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(forward_demodulation,[],[f14156,f1044])).
fof(f14156,plain,(
  ( ! [X0] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X0))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1041])).
fof(f1041,plain,(
  ( ! [X0,X1] : (s('type.string.char','const.string.CHR_1'(s('type.num.num',X0))) = s('type.string.char','const.string.CHR_1'(s('type.num.num',X1))) | s('type.num.num',X0) != s('type.num.num',X1) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(cnf_transformation,[],[f700])).
fof(f14681,plain,(
  ( ! [X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X1))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(forward_demodulation,[],[f14157,f1044])).
fof(f14157,plain,(
  ( ! [X1] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X1))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1041])).
fof(f14881,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl701),
  inference(cnf_transformation,[],[f14881_D])).
fof(f14881_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl701),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl701])])).
fof(f14882,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) ) | $spl702),
  inference(cnf_transformation,[],[f14882_D])).
fof(f14882_D,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) ) <=> ~$spl702),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl702])])).
fof(f14174,plain,(
  ( ! [X4] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X4))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14175,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14877,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | $spl697),
  inference(cnf_transformation,[],[f14877_D])).
fof(f14877_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) <=> ~$spl697),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl697])])).
fof(f14879,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl698),
  inference(cnf_transformation,[],[f14879_D])).
fof(f14879_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl698),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl698])])).
fof(f14178,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))),
  inference(superposition,[],[f836,f1045])).
fof(f14179,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14873,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | $spl693),
  inference(cnf_transformation,[],[f14873_D])).
fof(f14873_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) <=> ~$spl693),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl693])])).
fof(f14875,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl694),
  inference(cnf_transformation,[],[f14875_D])).
fof(f14875_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl694),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl694])])).
fof(f14196,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(superposition,[],[f836,f1048])).
fof(f14197,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(superposition,[],[f836,f1046])).
fof(f14871,plain,(
  ( ! [X3] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))) ) | $spl690),
  inference(cnf_transformation,[],[f14871_D])).
fof(f14871_D,plain,(
  ( ! [X3] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))) ) <=> ~$spl690),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl690])])).
fof(f14866,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))) | $spl685),
  inference(cnf_transformation,[],[f14866_D])).
fof(f14866_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))) <=> ~$spl685),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl685])])).
fof(f14682,plain,(
  ( ! [X2] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X2))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X2))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(forward_demodulation,[],[f14200,f1044])).
fof(f14200,plain,(
  ( ! [X2] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X2))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X2))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14683,plain,(
  ( ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(forward_demodulation,[],[f14201,f1044])).
fof(f14201,plain,(
  ( ! [X3] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14868,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) | $spl687),
  inference(cnf_transformation,[],[f14868_D])).
fof(f14868_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) <=> ~$spl687),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl687])])).
fof(f14870,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl688),
  inference(cnf_transformation,[],[f14870_D])).
fof(f14870_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl688),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl688])])).
fof(f14204,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))),
  inference(superposition,[],[f836,f1045])).
fof(f14205,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14864,plain,(
  ( ! [X1] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X1))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) ) | $spl682),
  inference(cnf_transformation,[],[f14864_D])).
fof(f14864_D,plain,(
  ( ! [X1] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X1))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) ) <=> ~$spl682),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl682])])).
fof(f14684,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X0))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(forward_demodulation,[],[f14222,f1044])).
fof(f14222,plain,(
  ( ! [X0] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X0))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num',X0) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1041])).
fof(f14685,plain,(
  ( ! [X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X1))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(forward_demodulation,[],[f14223,f1044])).
fof(f14223,plain,(
  ( ! [X1] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num',X1))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num',X1) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X1),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1041])).
fof(f14862,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl679),
  inference(cnf_transformation,[],[f14862_D])).
fof(f14862_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl679),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl679])])).
fof(f14863,plain,(
  ( ! [X3] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.string.char','const.string.CHR_1'(s('type.num.num',X3)))) ) | $spl680),
  inference(cnf_transformation,[],[f14863_D])).
fof(f14863_D,plain,(
  ( ! [X3] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.string.char','const.string.CHR_1'(s('type.num.num',X3)))) ) <=> ~$spl680),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl680])])).
fof(f14236,plain,(
  ( ! [X2] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X2))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.string.char','const.string.CHR_1'(s('type.num.num',X2))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14237,plain,(
  ( ! [X3] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X3))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))) != s('type.string.char','const.string.CHR_1'(s('type.num.num',X3))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.ZERO_0'),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14859,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl675),
  inference(cnf_transformation,[],[f14859_D])).
fof(f14859_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl675),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl675])])).
fof(f14860,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl676),
  inference(cnf_transformation,[],[f14860_D])).
fof(f14860_D,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl676),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl676])])).
fof(f14262,plain,(
  ( ! [X4] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X4))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14263,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14855,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl671),
  inference(cnf_transformation,[],[f14855_D])).
fof(f14855_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl671),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl671])])).
fof(f14857,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl672),
  inference(cnf_transformation,[],[f14857_D])).
fof(f14857_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl672),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl672])])).
fof(f14266,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f836,f1045])).
fof(f14267,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(superposition,[],[f836,f1047])).
fof(f14852,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl667),
  inference(cnf_transformation,[],[f14852_D])).
fof(f14852_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl667),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl667])])).
fof(f14853,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) | $spl668),
  inference(cnf_transformation,[],[f14853_D])).
fof(f14853_D,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) ) <=> ~$spl668),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl668])])).
fof(f14290,plain,(
  ( ! [X4] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X4))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14291,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14848,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl663),
  inference(cnf_transformation,[],[f14848_D])).
fof(f14848_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl663),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl663])])).
fof(f14850,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl664),
  inference(cnf_transformation,[],[f14850_D])).
fof(f14850_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl664),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl664])])).
fof(f14294,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f836,f1045])).
fof(f14295,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14845,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl659),
  inference(cnf_transformation,[],[f14845_D])).
fof(f14845_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl659),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl659])])).
fof(f14846,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) | $spl660),
  inference(cnf_transformation,[],[f14846_D])).
fof(f14846_D,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))) ) <=> ~$spl660),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl660])])).
fof(f14318,plain,(
  ( ! [X4] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X4))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14319,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14841,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) | $spl655),
  inference(cnf_transformation,[],[f14841_D])).
fof(f14841_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) <=> ~$spl655),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl655])])).
fof(f14843,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl656),
  inference(cnf_transformation,[],[f14843_D])).
fof(f14843_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl656),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl656])])).
fof(f14322,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(superposition,[],[f836,f1045])).
fof(f14323,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14838,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl651),
  inference(cnf_transformation,[],[f14838_D])).
fof(f14838_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl651),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl651])])).
fof(f14839,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) | $spl652),
  inference(cnf_transformation,[],[f14839_D])).
fof(f14839_D,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))) ) <=> ~$spl652),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl652])])).
fof(f14346,plain,(
  ( ! [X4] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X4))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14347,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14834,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) | $spl647),
  inference(cnf_transformation,[],[f14834_D])).
fof(f14834_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) <=> ~$spl647),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl647])])).
fof(f14836,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl648),
  inference(cnf_transformation,[],[f14836_D])).
fof(f14836_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl648),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl648])])).
fof(f14350,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(superposition,[],[f836,f1045])).
fof(f14351,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14831,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl643),
  inference(cnf_transformation,[],[f14831_D])).
fof(f14831_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl643),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl643])])).
fof(f14832,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) | $spl644),
  inference(cnf_transformation,[],[f14832_D])).
fof(f14832_D,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))) ) <=> ~$spl644),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl644])])).
fof(f14374,plain,(
  ( ! [X4] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X4))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X4))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X4))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14375,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num',X5))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num',X5))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14827,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | $spl639),
  inference(cnf_transformation,[],[f14827_D])).
fof(f14827_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) <=> ~$spl639),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl639])])).
fof(f14829,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl640),
  inference(cnf_transformation,[],[f14829_D])).
fof(f14829_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl640),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl640])])).
fof(f14686,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(forward_demodulation,[],[f14378,f1051])).
fof(f14378,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(superposition,[],[f836,f1045])).
fof(f14687,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(forward_demodulation,[],[f14379,f1051])).
fof(f14379,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14824,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | $spl635),
  inference(cnf_transformation,[],[f14824_D])).
fof(f14824_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) <=> ~$spl635),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl635])])).
fof(f14825,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) ) | $spl636),
  inference(cnf_transformation,[],[f14825_D])).
fof(f14825_D,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))) ) <=> ~$spl636),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl636])])).
fof(f14402,plain,(
  ( ! [X4] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X4))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X4))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14403,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X5))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.string.char','const.string.CHR_1'(s('type.num.num',X5))) != s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))) )),
  inference(superposition,[],[f836,f1040])).
fof(f14820,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) | $spl631),
  inference(cnf_transformation,[],[f14820_D])).
fof(f14820_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))) <=> ~$spl631),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl631])])).
fof(f14822,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl632),
  inference(cnf_transformation,[],[f14822_D])).
fof(f14822_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl632),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl632])])).
fof(f14406,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))),
  inference(superposition,[],[f836,f1045])).
fof(f14407,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14816,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) | $spl627),
  inference(cnf_transformation,[],[f14816_D])).
fof(f14816_D,plain,(
  s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))) <=> ~$spl627),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl627])])).
fof(f14818,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl628),
  inference(cnf_transformation,[],[f14818_D])).
fof(f14818_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl628),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl628])])).
fof(f14424,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(superposition,[],[f836,f1048])).
fof(f14425,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.num.|48|_0'))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.arithmetic.ZERO_0') != s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))),
  inference(superposition,[],[f836,f1046])).
fof(f14812,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) | $spl623),
  inference(cnf_transformation,[],[f14812_D])).
fof(f14812_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))) <=> ~$spl623),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl623])])).
fof(f14814,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl624),
  inference(cnf_transformation,[],[f14814_D])).
fof(f14814_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl624),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl624])])).
fof(f14432,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))),
  inference(superposition,[],[f836,f1045])).
fof(f14433,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.ZERO_0'))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))),
  inference(superposition,[],[f836,f1047])).
fof(f14808,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) | $spl618),
  inference(cnf_transformation,[],[f14808_D])).
fof(f14808_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) <=> ~$spl618),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl618])])).
fof(f14725,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))),
  inference(forward_demodulation,[],[f14724,f1091])).
fof(f14724,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),'const.list.NIL_0'))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))),
  inference(forward_demodulation,[],[f14486,f1088])).
fof(f14486,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))),
  inference(superposition,[],[f836,f1089])).
fof(f14804,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))) | $spl614),
  inference(cnf_transformation,[],[f14804_D])).
fof(f14804_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))) <=> ~$spl614),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl614])])).
fof(f14806,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | $spl617),
  inference(cnf_transformation,[],[f14806_D])).
fof(f14806_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) <=> ~$spl617),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl617])])).
fof(f14728,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))),
  inference(forward_demodulation,[],[f14727,f1091])).
fof(f14727,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))),
  inference(forward_demodulation,[],[f14726,f1088])).
fof(f14726,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))),
  inference(forward_demodulation,[],[f14505,f1088])).
fof(f14505,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))),
  inference(superposition,[],[f836,f1089])).
fof(f14800,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))) | $spl610),
  inference(cnf_transformation,[],[f14800_D])).
fof(f14800_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))) <=> ~$spl610),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl610])])).
fof(f14802,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | $spl613),
  inference(cnf_transformation,[],[f14802_D])).
fof(f14802_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) <=> ~$spl613),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl613])])).
fof(f14732,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))),
  inference(forward_demodulation,[],[f14731,f1091])).
fof(f14731,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))),
  inference(forward_demodulation,[],[f14730,f1088])).
fof(f14730,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))),
  inference(forward_demodulation,[],[f14729,f1088])).
fof(f14729,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))),
  inference(forward_demodulation,[],[f14524,f1088])).
fof(f14524,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))),
  inference(superposition,[],[f836,f1089])).
fof(f14796,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))) | $spl606),
  inference(cnf_transformation,[],[f14796_D])).
fof(f14796_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))) <=> ~$spl606),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl606])])).
fof(f14798,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) | $spl609),
  inference(cnf_transformation,[],[f14798_D])).
fof(f14798_D,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) <=> ~$spl609),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl609])])).
fof(f14737,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),
  inference(forward_demodulation,[],[f14736,f1091])).
fof(f14736,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),
  inference(forward_demodulation,[],[f14735,f1088])).
fof(f14735,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),
  inference(forward_demodulation,[],[f14734,f1088])).
fof(f14734,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),
  inference(forward_demodulation,[],[f14733,f1088])).
fof(f14733,plain,(
  s('type.num.num','const.num.|48|_0') != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))) | p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),
  inference(forward_demodulation,[],[f14543,f1088])).
fof(f14543,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))),
  inference(superposition,[],[f836,f1089])).
fof(f4814,plain,(
  ( ! [X103] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X103),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) ) | $spl286),
  inference(cnf_transformation,[],[f4814_D])).
fof(f4814_D,plain,(
  ( ! [X103] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X103),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) ) <=> ~$spl286),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl286])])).
fof(f14794,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0')))))) | $spl604),
  inference(cnf_transformation,[],[f14794_D])).
fof(f14794_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0')))))) <=> ~$spl604),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl604])])).
fof(f14575,plain,(
  ( ! [X10] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0')))))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X10),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) )),
  inference(superposition,[],[f836,f1010])).
fof(f5351,plain,(
  ( ! [X109] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X109),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) ) | $spl362),
  inference(cnf_transformation,[],[f5351_D])).
fof(f5351_D,plain,(
  ( ! [X109] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X109),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) ) <=> ~$spl362),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl362])])).
fof(f14792,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0')))))) | $spl602),
  inference(cnf_transformation,[],[f14792_D])).
fof(f14792_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0')))))) <=> ~$spl602),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl602])])).
fof(f14576,plain,(
  ( ! [X11] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0')))))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X11),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) )),
  inference(superposition,[],[f836,f1013])).
fof(f1013,plain,(
  ( ! [X0,X1] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X0) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0)))) )),
  inference(cnf_transformation,[],[f693])).
fof(f14788,plain,(
  ( ! [X5] : (~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X5)) ) | $spl598),
  inference(cnf_transformation,[],[f14788_D])).
fof(f14788_D,plain,(
  ( ! [X5] : (~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X5)) ) <=> ~$spl598),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl598])])).
fof(f14790,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tword64_0')))) | $spl600),
  inference(cnf_transformation,[],[f14790_D])).
fof(f14790_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tword64_0')))) <=> ~$spl600),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl600])])).
fof(f14592,plain,(
  ( ! [X5] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tword64_0')))) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X5)) )),
  inference(superposition,[],[f836,f862])).
fof(f14785,plain,(
  ( ! [X6] : (~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X6)) ) | $spl594),
  inference(cnf_transformation,[],[f14785_D])).
fof(f14785_D,plain,(
  ( ! [X6] : (~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X6)) ) <=> ~$spl594),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl594])])).
fof(f14787,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tword8_0')))) | $spl596),
  inference(cnf_transformation,[],[f14787_D])).
fof(f14787_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tword8_0')))) <=> ~$spl596),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl596])])).
fof(f14593,plain,(
  ( ! [X6] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tword8_0')))) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X6)) )),
  inference(superposition,[],[f836,f866])).
fof(f14782,plain,(
  ( ! [X7] : (~sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X7)) ) | $spl590),
  inference(cnf_transformation,[],[f14782_D])).
fof(f14782_D,plain,(
  ( ! [X7] : (~sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X7)) ) <=> ~$spl590),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl590])])).
fof(f14784,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tchar_0')))) | $spl592),
  inference(cnf_transformation,[],[f14784_D])).
fof(f14784_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tchar_0')))) <=> ~$spl592),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl592])])).
fof(f14594,plain,(
  ( ! [X7] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tchar_0')))) | ~sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X7)) )),
  inference(superposition,[],[f836,f874])).
fof(f14779,plain,(
  ( ! [X10,X8,X11,X9] : (sP5(X8,X9,X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | ~sP12(X8,X9,X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP2(X9,X8,X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP11(X8,X9,X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP1(X8,X9,X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X8,X9,X10,X11) | sP3(X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP4(X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11)) ) | $spl586),
  inference(cnf_transformation,[],[f14779_D])).
fof(f14779_D,plain,(
  ( ! [X10,X8,X11,X9] : (sP5(X8,X9,X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | ~sP12(X8,X9,X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP2(X9,X8,X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP11(X8,X9,X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP1(X8,X9,X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X8,X9,X10,X11) | sP3(X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP4(X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11)) ) <=> ~$spl586),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl586])])).
fof(f14781,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tword8array_0')))) | $spl588),
  inference(cnf_transformation,[],[f14781_D])).
fof(f14781_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tword8array_0')))) <=> ~$spl588),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl588])])).
fof(f14595,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tword8array_0')))) | sP5(X8,X9,X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP4(X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP3(X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X8,X9,X10,X11) | sP1(X8,X9,X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP11(X8,X9,X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP2(X9,X8,X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11) | ~sP12(X8,X9,X10,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK32),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))),X11)) )),
  inference(superposition,[],[f836,f842])).
fof(f3004,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,sK32,X7) | ~sP12(X4,X5,X6,sK32,X7) | sP6(sK32,X7) | sP7(sK32,X7) | sP8(sK32,X7) | sP9(sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP1(X4,X5,X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP3(X6,sK32,X7) | sP4(X6,sK32,X7)) ) | $spl94),
  inference(cnf_transformation,[],[f3004_D])).
fof(f3004_D,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,sK32,X7) | ~sP12(X4,X5,X6,sK32,X7) | sP6(sK32,X7) | sP7(sK32,X7) | sP8(sK32,X7) | sP9(sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP1(X4,X5,X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP3(X6,sK32,X7) | sP4(X6,sK32,X7)) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f8667,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,sK32,X7) | sP4(X6,sK32,X7) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP1(X4,X5,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP9(sK32,X7) | sP8(sK32,X7) | sP7(sK32,X7) | sP6(sK32,X7) | ~sP12(X4,X5,X6,sK32,X7)) ) | $spl18),
  inference(resolution,[],[f1478,f842])).
fof(f14778,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl584),
  inference(cnf_transformation,[],[f14778_D])).
fof(f14778_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl584),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl584])])).
fof(f13810,plain,(
  ( ! [X1] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~sP9(sK32,X1)) )),
  inference(superposition,[],[f836,f866])).
fof(f14776,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8array_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl582),
  inference(cnf_transformation,[],[f14776_D])).
fof(f14776_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8array_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl582),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl582])])).
fof(f14635,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8array_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | sP5(X3,X4,X5,sK32,X6) | sP4(X5,sK32,X6) | sP3(X5,sK32,X6) | sP0(sK32,X3,X4,X5,X6) | sP1(X3,X4,X5,sK32,X6) | sP11(X3,X4,X5,sK32,X6) | sP2(X4,X3,X5,sK32,X6) | sP9(sK32,X6) | sP8(sK32,X6) | sP7(sK32,X6) | sP6(sK32,X6) | ~sP12(X3,X4,X5,sK32,X6)) ) | $spl18),
  inference(subsumption_resolution,[],[f13812,f1478])).
fof(f13812,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8array_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | sP5(X3,X4,X5,sK32,X6) | sP4(X5,sK32,X6) | sP3(X5,sK32,X6) | sP0(sK32,X3,X4,X5,X6) | sP1(X3,X4,X5,sK32,X6) | sP11(X3,X4,X5,sK32,X6) | sP2(X4,X3,X5,sK32,X6) | sP10(sK32,X6) | sP9(sK32,X6) | sP8(sK32,X6) | sP7(sK32,X6) | sP6(sK32,X6) | ~sP12(X3,X4,X5,sK32,X6)) )),
  inference(superposition,[],[f836,f842])).
fof(f14772,plain,(
  ( ! [X26] : (~sP7('const.ast.Tword8_0',X26)) ) | $spl576),
  inference(cnf_transformation,[],[f14772_D])).
fof(f14772_D,plain,(
  ( ! [X26] : (~sP7('const.ast.Tword8_0',X26)) ) <=> ~$spl576),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl576])])).
fof(f14773,plain,(
  ( ! [X27,X25] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X25) | ~sP9(X25,X27)) ) | $spl578),
  inference(cnf_transformation,[],[f14773_D])).
fof(f14773_D,plain,(
  ( ! [X27,X25] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X25) | ~sP9(X25,X27)) ) <=> ~$spl578),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl578])])).
fof(f3523,plain,(
  ( ! [X8,X7,X9] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X7) | ~sP9(X7,X8) | ~sP7('const.ast.Tword8_0',X9)) )),
  inference(superposition,[],[f866,f874])).
fof(f14769,plain,(
  ( ! [X43,X44,X42] : (~sP7(X42,X43) | ~sP9(X42,X44)) ) | $spl570),
  inference(cnf_transformation,[],[f14769_D])).
fof(f14769_D,plain,(
  ( ! [X43,X44,X42] : (~sP7(X42,X43) | ~sP9(X42,X44)) ) <=> ~$spl570),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl570])])).
fof(f3535,plain,(
  ( ! [X6,X4,X5] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | ~sP9(X4,X5) | ~sP7(X4,X6)) )),
  inference(superposition,[],[f866,f874])).
fof(f14766,plain,(
  ( ! [X370] : (~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_char_0')),X370)) ) | $spl566),
  inference(cnf_transformation,[],[f14766_D])).
fof(f14766_D,plain,(
  ( ! [X370] : (~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_char_0')),X370)) ) <=> ~$spl566),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl566])])).
fof(f3542,plain,(
  ( ! [X33] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_char_0')),X33)) )),
  inference(superposition,[],[f866,f925])).
fof(f925,plain,(
  s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_char_0')))),
  inference(cnf_transformation,[],[f108])).
fof(f108,axiom,(
  s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_char_0')))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.ast.Tchar_def')).
fof(f14774,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X10),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X11),s('type.semanticPrimitives.v',X12),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X8),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~sP9(X8,X13) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X10)))) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X12))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tword8_0',X11,X9,X10,X12))))) ) | $spl580),
  inference(cnf_transformation,[],[f14774_D])).
fof(f14774_D,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X10),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X11),s('type.semanticPrimitives.v',X12),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X8),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~sP9(X8,X13) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X10)))) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X12))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tword8_0',X11,X9,X10,X12))))) ) <=> ~$spl580),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl580])])).
fof(f3570,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X10),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X11),s('type.semanticPrimitives.v',X12),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X8),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X12))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tword8_0',X11,X9,X10,X12)))) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X10)))) | ~sP9(X8,X13)) )),
  inference(superposition,[],[f840,f866])).
fof(f3572,plain,(
  ( ! [X26,X27,X25] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',X25) | ~sP7('const.ast.Tword8_0',X26) | ~sP9(X25,X27)) )),
  inference(superposition,[],[f874,f866])).
fof(f14771,plain,(
  ( ! [X30,X29] : (sP7('const.ast.Tword8_0',X29) | s('type.semanticPrimitives.v',X29) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X30)))))) ) | $spl574),
  inference(cnf_transformation,[],[f14771_D])).
fof(f14771_D,plain,(
  ( ! [X30,X29] : (sP7('const.ast.Tword8_0',X29) | s('type.semanticPrimitives.v',X29) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X30)))))) ) <=> ~$spl574),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl574])])).
fof(f3880,plain,(
  ( ! [X14,X19] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X14) | ~sP9(X14,X19)) ) | $spl190),
  inference(cnf_transformation,[],[f3880_D])).
fof(f3880_D,plain,(
  ( ! [X14,X19] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X14) | ~sP9(X14,X19)) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f3881,plain,(
  ( ! [X30,X28,X31,X29] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X28) | sP7('const.ast.Tword8_0',X29) | s('type.semanticPrimitives.v',X29) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X30))))) | ~sP9(X28,X31)) )),
  inference(subsumption_resolution,[],[f3573,f1336])).
fof(f3573,plain,(
  ( ! [X30,X28,X31,X29] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X28) | sP7('const.ast.Tword8_0',X29) | ~p(s(bool,'T_0')) | s('type.semanticPrimitives.v',X29) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X30))))) | ~sP9(X28,X31)) )),
  inference(superposition,[],[f876,f866])).
fof(f14770,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X13))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34(X12,X14,X15,X16,X13)))) | ~sP9(X12,X17) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X16)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X16),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X14),s('type.semanticPrimitives.v',X13),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X12),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))) ) | $spl572),
  inference(cnf_transformation,[],[f14770_D])).
fof(f14770_D,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X13))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34(X12,X14,X15,X16,X13)))) | ~sP9(X12,X17) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X16)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X16),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X14),s('type.semanticPrimitives.v',X13),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X12),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))) ) <=> ~$spl572),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl572])])).
fof(f3670,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X13))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34(X12,X14,X15,X16,X13)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X15),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X16),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X14),s('type.semanticPrimitives.v',X13),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X12),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X16)))) | ~sP9(X12,X17)) )),
  inference(superposition,[],[f840,f866])).
fof(f3675,plain,(
  ( ! [X43,X44,X42] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | ~sP7(X42,X43) | ~sP9(X42,X44)) )),
  inference(superposition,[],[f874,f866])).
fof(f14768,plain,(
  ( ! [X47,X45,X48,X46] : (sP7(X45,X46) | ~sP9(X45,X48) | s('type.semanticPrimitives.v',X46) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X47)))))) ) | $spl568),
  inference(cnf_transformation,[],[f14768_D])).
fof(f14768_D,plain,(
  ( ! [X47,X45,X48,X46] : (sP7(X45,X46) | ~sP9(X45,X48) | s('type.semanticPrimitives.v',X46) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X47)))))) ) <=> ~$spl568),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl568])])).
fof(f14767,plain,(
  ( ! [X47,X45,X48,X46] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | sP7(X45,X46) | s('type.semanticPrimitives.v',X46) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X47))))) | ~sP9(X45,X48)) )),
  inference(subsumption_resolution,[],[f3676,f1336])).
fof(f3676,plain,(
  ( ! [X47,X45,X48,X46] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | sP7(X45,X46) | ~p(s(bool,'T_0')) | s('type.semanticPrimitives.v',X46) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X47))))) | ~sP9(X45,X48)) )),
  inference(superposition,[],[f876,f866])).
fof(f3723,plain,(
  ( ! [X370] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_char_0')),X370)) )),
  inference(superposition,[],[f925,f866])).
fof(f3907,plain,(
  ( ! [X438,X435] : (~sP9('const.ast.Tword_1'(s('type.ast.word_size',X435)),X438)) ) | $spl226),
  inference(cnf_transformation,[],[f3907_D])).
fof(f3907_D,plain,(
  ( ! [X438,X435] : (~sP9('const.ast.Tword_1'(s('type.ast.word_size',X435)),X438)) ) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f3736,plain,(
  ( ! [X434,X433] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | ~sP9('const.ast.Tword_1'(s('type.ast.word_size',X433)),X434)) )),
  inference(superposition,[],[f924,f866])).
fof(f924,plain,(
  ( ! [X0] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0)))) )),
  inference(cnf_transformation,[],[f316])).
fof(f316,plain,(
  ! [X0] : s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0)))),
  inference(flattening,[],[f315])).
fof(f315,plain,(
  ! [X0] : ~s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0)))),
  inference(rectify,[],[f168])).
fof(f168,axiom,(
  ! [X35] : ~s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X35)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.evalProps.Tword_simp|split|10')).
fof(f14765,plain,(
  ( ! [X43] : (~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_int_0')),X43)) ) | $spl564),
  inference(cnf_transformation,[],[f14765_D])).
fof(f14765_D,plain,(
  ( ! [X43] : (~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_int_0')),X43)) ) <=> ~$spl564),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl564])])).
fof(f3979,plain,(
  ( ! [X5] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_int_0')),X5)) ) | $spl8),
  inference(superposition,[],[f1873,f866])).
fof(f1873,plain,(
  s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_int_0'))) | $spl8),
  inference(backward_demodulation,[],[f1471,f1016])).
fof(f1016,plain,(
  s('type.ast.t','const.ast.Tint_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_int_0')))),
  inference(cnf_transformation,[],[f107])).
fof(f107,axiom,(
  s('type.ast.t','const.ast.Tint_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_int_0')))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.ast.Tint_def')).
fof(f4014,plain,(
  ( ! [X43] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor','const.ast.TC_int_0')),X43)) ) | $spl8),
  inference(superposition,[],[f866,f1873])).
fof(f14762,plain,(
  ( ! [X43,X41,X42] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X42) | ~sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X41),s('type.ast.tctor',X42)),X43)) ) | $spl562),
  inference(cnf_transformation,[],[f14762_D])).
fof(f14762_D,plain,(
  ( ! [X43,X41,X42] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X42) | ~sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X41),s('type.ast.tctor',X42)),X43)) ) <=> ~$spl562),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl562])])).
fof(f5039,plain,(
  ( ! [X43,X41,X42] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X42) | ~sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X41),s('type.ast.tctor',X42)),X43)) )),
  inference(superposition,[],[f1013,f874])).
fof(f14761,plain,(
  ( ! [X43,X41,X42] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X41) | ~sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X41),s('type.ast.tctor',X42)),X43)) ) | $spl560),
  inference(cnf_transformation,[],[f14761_D])).
fof(f14761_D,plain,(
  ( ! [X43,X41,X42] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X41) | ~sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X41),s('type.ast.tctor',X42)),X43)) ) <=> ~$spl560),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl560])])).
fof(f6400,plain,(
  ( ! [X43,X41,X42] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X41) | ~sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X41),s('type.ast.tctor',X42)),X43)) )),
  inference(superposition,[],[f1012,f874])).
fof(f14757,plain,(
  ( ! [X151,X149,X150] : (~sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X149),s('type.ast.tctor',X150)),X151) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X149) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X150)) ) | $spl556),
  inference(cnf_transformation,[],[f14757_D])).
fof(f14757_D,plain,(
  ( ! [X151,X149,X150] : (~sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X149),s('type.ast.tctor',X150)),X151) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X149) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X150)) ) <=> ~$spl556),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl556])])).
fof(f8353,plain,(
  ( ! [X41,X42,X40] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X41) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X40) | ~sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X40),s('type.ast.tctor',X41)),X42)) )),
  inference(superposition,[],[f1014,f874])).
fof(f14758,plain,(
  ( ! [X121,X118,X122,X120,X119,X117] : (s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X119))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X117),s('type.ast.tctor',X118)),X120,X121,X122,X119)))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X117) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X118) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X122)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X121),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X122),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X120),s('type.semanticPrimitives.v',X119),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X117),s('type.ast.tctor',X118))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))) ) | $spl558),
  inference(cnf_transformation,[],[f14758_D])).
fof(f14758_D,plain,(
  ( ! [X121,X118,X122,X120,X119,X117] : (s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X119))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X117),s('type.ast.tctor',X118)),X120,X121,X122,X119)))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X117) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X118) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X122)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X121),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X122),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X120),s('type.semanticPrimitives.v',X119),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X117),s('type.ast.tctor',X118))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))) ) <=> ~$spl558),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl558])])).
fof(f8487,plain,(
  ( ! [X121,X118,X122,X120,X119,X117] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X119))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X117),s('type.ast.tctor',X118)),X120,X121,X122,X119)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X121),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X122),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X120),s('type.semanticPrimitives.v',X119),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X117),s('type.ast.tctor',X118))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X122)))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X118) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X117)) )),
  inference(superposition,[],[f840,f1014])).
fof(f8492,plain,(
  ( ! [X151,X149,X150] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | ~sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X149),s('type.ast.tctor',X150)),X151) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X150) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X149)) )),
  inference(superposition,[],[f874,f1014])).
fof(f14756,plain,(
  ( ! [X154,X152,X155,X153] : (sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X152),s('type.ast.tctor',X153)),X154) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X152) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X153) | s('type.semanticPrimitives.v',X154) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X155)))))) ) | $spl554),
  inference(cnf_transformation,[],[f14756_D])).
fof(f14756_D,plain,(
  ( ! [X154,X152,X155,X153] : (sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X152),s('type.ast.tctor',X153)),X154) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X152) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X153) | s('type.semanticPrimitives.v',X154) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X155)))))) ) <=> ~$spl554),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl554])])).
fof(f14755,plain,(
  ( ! [X154,X152,X155,X153] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X152),s('type.ast.tctor',X153)),X154) | s('type.semanticPrimitives.v',X154) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X155))))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X153) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X152)) )),
  inference(subsumption_resolution,[],[f8493,f1336])).
fof(f8493,plain,(
  ( ! [X154,X152,X155,X153] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X152),s('type.ast.tctor',X153)),X154) | ~p(s(bool,'T_0')) | s('type.semanticPrimitives.v',X154) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X155))))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X153) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X152)) )),
  inference(superposition,[],[f876,f1014])).
fof(f14752,plain,(
  ( ! [X33] : (~sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X33)) ) | $spl550),
  inference(cnf_transformation,[],[f14752_D])).
fof(f14752_D,plain,(
  ( ! [X33] : (~sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X33)) ) <=> ~$spl550),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl550])])).
fof(f10282,plain,(
  ( ! [X5] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | ~sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X5)) ) | $spl174),
  inference(superposition,[],[f3869,f874])).
fof(f14754,plain,(
  ( ! [X21,X19,X20,X18] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X20),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X21),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X19),s('type.semanticPrimitives.v',X18),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X21)))) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X18))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X19,X20,X21,X18))))) ) | $spl552),
  inference(cnf_transformation,[],[f14754_D])).
fof(f14754_D,plain,(
  ( ! [X21,X19,X20,X18] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X20),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X21),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X19),s('type.semanticPrimitives.v',X18),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X21)))) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X18))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X19,X20,X21,X18))))) ) <=> ~$spl552),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl552])])).
fof(f14753,plain,(
  ( ! [X21,X19,X20,X18] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X20),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X21),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X19),s('type.semanticPrimitives.v',X18),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X18))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X19,X20,X21,X18)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X21))))) ) | $spl174),
  inference(forward_demodulation,[],[f10301,f3869])).
fof(f10301,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X18))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X19,X20,X21,X18)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X20),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X21),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X19),s('type.semanticPrimitives.v',X18),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X21))))) ) | $spl174),
  inference(superposition,[],[f840,f3869])).
fof(f10305,plain,(
  ( ! [X33] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | ~sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X33)) ) | $spl174),
  inference(superposition,[],[f874,f3869])).
fof(f14751,plain,(
  ( ! [X35,X34] : (sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X34) | s('type.semanticPrimitives.v',X34) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X35)))))) ) | $spl548),
  inference(cnf_transformation,[],[f14751_D])).
fof(f14751_D,plain,(
  ( ! [X35,X34] : (sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X34) | s('type.semanticPrimitives.v',X34) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X35)))))) ) <=> ~$spl548),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl548])])).
fof(f14750,plain,(
  ( ! [X35,X34] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X34) | s('type.semanticPrimitives.v',X34) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X35)))))) ) | $spl174),
  inference(subsumption_resolution,[],[f10306,f1336])).
fof(f10306,plain,(
  ( ! [X35,X34] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X34) | ~p(s(bool,'T_0')) | s('type.semanticPrimitives.v',X34) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X35)))))) ) | $spl174),
  inference(superposition,[],[f876,f3869])).
fof(f14749,plain,(
  ( ! [X12,X13,X11] : (~sP7('const.ast.Tfn_2'(s('type.ast.t',X11),s('type.ast.t',X12)),X13)) ) | $spl546),
  inference(cnf_transformation,[],[f14749_D])).
fof(f14749_D,plain,(
  ( ! [X12,X13,X11] : (~sP7('const.ast.Tfn_2'(s('type.ast.t',X11),s('type.ast.t',X12)),X13)) ) <=> ~$spl546),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl546])])).
fof(f13524,plain,(
  ( ! [X12,X13,X11] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | ~sP7('const.ast.Tfn_2'(s('type.ast.t',X11),s('type.ast.t',X12)),X13)) ) | $spl344),
  inference(superposition,[],[f5336,f874])).
fof(f14744,plain,(
  ( ! [X2] : (~sP7(sK32,X2)) ) | $spl542),
  inference(cnf_transformation,[],[f14744_D])).
fof(f14744_D,plain,(
  ( ! [X2] : (~sP7(sK32,X2)) ) <=> ~$spl542),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl542])])).
fof(f14746,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tchar_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl544),
  inference(cnf_transformation,[],[f14746_D])).
fof(f14746_D,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tchar_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) <=> ~$spl544),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl544])])).
fof(f13811,plain,(
  ( ! [X2] : (p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tchar_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~sP7(sK32,X2)) )),
  inference(superposition,[],[f836,f874])).
fof(f14633,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f14632,f835])).
fof(f14632,plain,(
  ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28)))) | $spl0),
  inference(subsumption_resolution,[],[f13644,f1340])).
fof(f13644,plain,(
  s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',sK31))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),sK33(sK32,sK30,sK29,sK28,sK31)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28))))),
  inference(resolution,[],[f836,f839])).
fof(f1786,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))))) ) | $spl62),
  inference(cnf_transformation,[],[f1786_D])).
fof(f1786_D,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f2339,plain,(
  s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',sK32) | $spl85),
  inference(cnf_transformation,[],[f2339_D])).
fof(f2339_D,plain,(
  s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',sK32) <=> ~$spl85),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl85])])).
fof(f12064,plain,(
  ( ! [X39,X40] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',sK32) | s('type.semanticPrimitives.v',X39) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X40)))))) ) | $spl18),
  inference(resolution,[],[f2998,f1478])).
fof(f2998,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X0) | s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2)))))) )),
  inference(subsumption_resolution,[],[f864,f1336])).
fof(f864,plain,(
  ( ! [X2,X0,X1] : (sP10(X0,X1) | ~p(s(bool,'T_0')) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X0) | s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2)))))) )),
  inference(cnf_transformation,[],[f621])).
fof(f13313,plain,(
  $false | ($spl0 | $spl84)),
  inference(subsumption_resolution,[],[f13312,f835])).
fof(f13312,plain,(
  ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28)))) | ($spl0 | $spl84)),
  inference(subsumption_resolution,[],[f12323,f1340])).
fof(f12323,plain,(
  s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',sK31))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),sK33('const.ast.Tword64_0',sK30,sK29,sK28,sK31)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28)))) | $spl84),
  inference(resolution,[],[f12100,f839])).
fof(f12100,plain,(
  p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',sK29),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),sK30),s('type.semanticPrimitives.v',sK31),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | $spl84),
  inference(forward_demodulation,[],[f836,f2338])).
fof(f2338,plain,(
  s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t',sK32) | $spl84),
  inference(cnf_transformation,[],[f2338_D])).
fof(f2338_D,plain,(
  s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t',sK32) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f12099,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X2) | s('type.ast.t',X0) = s('type.ast.t',X2)) ) | $spl540),
  inference(cnf_transformation,[],[f12099_D])).
fof(f12099_D,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X2) | s('type.ast.t',X0) = s('type.ast.t',X2)) ) <=> ~$spl540),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl540])])).
fof(f12095,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP9(X0,X1) | s('type.ast.t',X0) = s('type.ast.t',X2) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X2) | s('type.semanticPrimitives.v',X3) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X4)))))) )),
  inference(resolution,[],[f3521,f3057])).
fof(f3521,plain,(
  ( ! [X2,X0,X3,X1] : (~sP9(X0,X3) | ~sP9(X1,X2) | s('type.ast.t',X0) = s('type.ast.t',X1)) )),
  inference(superposition,[],[f866,f866])).
fof(f12094,plain,(
  ( ! [X2,X0,X1] : (~sP10(X0,X1) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X2) | s('type.ast.t',X0) = s('type.ast.t',X2)) ) | $spl538),
  inference(cnf_transformation,[],[f12094_D])).
fof(f12094_D,plain,(
  ( ! [X2,X0,X1] : (~sP10(X0,X1) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X2) | s('type.ast.t',X0) = s('type.ast.t',X2)) ) <=> ~$spl538),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl538])])).
fof(f12090,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP10(X0,X1) | s('type.ast.t',X0) = s('type.ast.t',X2) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X2) | s('type.semanticPrimitives.v',X3) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X4)))))) )),
  inference(resolution,[],[f3089,f2998])).
fof(f3089,plain,(
  ( ! [X2,X0,X3,X1] : (~sP10(X0,X3) | ~sP10(X1,X2) | s('type.ast.t',X0) = s('type.ast.t',X1)) )),
  inference(superposition,[],[f862,f862])).
fof(f12087,plain,(
  ( ! [X0] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X0) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',sK66(X0,'type.ast.t'))) ) | $spl536),
  inference(cnf_transformation,[],[f12087_D])).
fof(f12087_D,plain,(
  ( ! [X0] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X0) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',sK66(X0,'type.ast.t'))) ) <=> ~$spl536),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl536])])).
fof(f12083,plain,(
  ( ! [X2,X0,X1] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X0) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',sK66(X0,'type.ast.t')) | s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))) )),
  inference(resolution,[],[f3565,f3057])).
fof(f3565,plain,(
  ( ! [X136,X137] : (~sP9(sK66(X136,'type.ast.t'),X137) | s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X136)) )),
  inference(superposition,[],[f866,f963])).
fof(f963,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,sK66(X1,X0))) )),
  inference(cnf_transformation,[],[f668])).
fof(f668,plain,(
  ! [X0,X1] : s(X0,X1) = s(X0,sK66(X1,X0))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK66])],[f324])).
fof(f324,plain,(
  ! [X0,X1] : ? [X2] : s(X0,X1) = s(X0,X2)),
  inference(flattening,[],[f323])).
fof(f323,plain,(
  ! [X0] : ! [X1] : ? [X2] : s(X0,X1) = s(X0,X2)),
  inference(rectify,[],[f151])).
fof(f151,axiom,(
  ! [X14] : ! [X12] : ? [X22] : s(X14,X12) = s(X14,X22)),
  file('thm.typeSound.canonical_values_thm|split|9','thm.bool.EXISTS_REFL')).
fof(f12081,plain,(
  ( ! [X0] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t',X0) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',sK66(X0,'type.ast.t'))) ) | $spl534),
  inference(cnf_transformation,[],[f12081_D])).
fof(f12081_D,plain,(
  ( ! [X0] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t',X0) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',sK66(X0,'type.ast.t'))) ) <=> ~$spl534),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl534])])).
fof(f12077,plain,(
  ( ! [X2,X0,X1] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t',X0) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',sK66(X0,'type.ast.t')) | s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X2)))))) )),
  inference(resolution,[],[f3131,f2998])).
fof(f3131,plain,(
  ( ! [X125,X126] : (~sP10(sK66(X125,'type.ast.t'),X126) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t',X125)) )),
  inference(superposition,[],[f862,f963])).
fof(f12076,plain,(
  ( ! [X47,X48,X46] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',sK48(X46,X47,X48)) | ~sP3(X48,X47,X46)) ) | $spl532),
  inference(cnf_transformation,[],[f12076_D])).
fof(f12076_D,plain,(
  ( ! [X47,X48,X46] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',sK48(X46,X47,X48)) | ~sP3(X48,X47,X46)) ) <=> ~$spl532),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl532])])).
fof(f12066,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',sK48(X46,X47,X48)) | s('type.semanticPrimitives.v',X49) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X50))))) | ~sP3(X48,X47,X46)) ) | $spl164),
  inference(resolution,[],[f2998,f3468])).
fof(f12075,plain,(
  ( ! [X43,X41,X42] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',sK46(X41,X42,X43)) | ~sP4(X43,X42,X41)) ) | $spl530),
  inference(cnf_transformation,[],[f12075_D])).
fof(f12075_D,plain,(
  ( ! [X43,X41,X42] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',sK46(X41,X42,X43)) | ~sP4(X43,X42,X41)) ) <=> ~$spl530),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl530])])).
fof(f12065,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',sK46(X41,X42,X43)) | s('type.semanticPrimitives.v',X44) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X45))))) | ~sP4(X43,X42,X41)) ) | $spl162),
  inference(resolution,[],[f2998,f3467])).
fof(f3460,plain,(
  ( ! [X339] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X339)))) ) | $spl150),
  inference(cnf_transformation,[],[f3460_D])).
fof(f3460_D,plain,(
  ( ! [X339] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X339)))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f12063,plain,(
  ( ! [X37,X38,X36] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X36))) | s('type.semanticPrimitives.v',X37) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X38)))))) ) | $spl156),
  inference(resolution,[],[f2998,f3464])).
fof(f12071,plain,(
  ( ! [X29] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X29) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X29)) ) | $spl528),
  inference(cnf_transformation,[],[f12071_D])).
fof(f12071_D,plain,(
  ( ! [X29] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X29) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X29)) ) <=> ~$spl528),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl528])])).
fof(f12060,plain,(
  ( ! [X30,X31,X29] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X29) | s('type.semanticPrimitives.v',X30) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X31))))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X29)) ) | $spl169),
  inference(resolution,[],[f2998,f9360])).
fof(f9360,plain,(
  ( ! [X0,X1] : (~sP10(X0,X1) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X0)) ) | $spl169),
  inference(superposition,[],[f3863,f862])).
fof(f12070,plain,(
  ( ! [X28,X25] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X25) | ~sP9(X25,X28)) ) | $spl526),
  inference(cnf_transformation,[],[f12070_D])).
fof(f12070_D,plain,(
  ( ! [X28,X25] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X25) | ~sP9(X25,X28)) ) <=> ~$spl526),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl526])])).
fof(f12059,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X25) | s('type.semanticPrimitives.v',X26) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X27))))) | ~sP9(X25,X28)) ) | $spl166),
  inference(resolution,[],[f2998,f3862])).
fof(f12069,plain,(
  ( ! [X22] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X22) | s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t',X22)) ) | $spl524),
  inference(cnf_transformation,[],[f12069_D])).
fof(f12069_D,plain,(
  ( ! [X22] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X22) | s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t',X22)) ) <=> ~$spl524),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl524])])).
fof(f12058,plain,(
  ( ! [X24,X23,X22] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X22) | s('type.semanticPrimitives.v',X23) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X24))))) | s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t',X22)) ) | $spl120),
  inference(resolution,[],[f2998,f3437])).
fof(f12068,plain,(
  ( ! [X21,X18] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X18) | ~sP7(X18,X21)) ) | $spl522),
  inference(cnf_transformation,[],[f12068_D])).
fof(f12068_D,plain,(
  ( ! [X21,X18] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X18) | ~sP7(X18,X21)) ) <=> ~$spl522),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl522])])).
fof(f12057,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X18) | s('type.semanticPrimitives.v',X19) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X20))))) | ~sP7(X18,X21)) ) | $spl21),
  inference(resolution,[],[f2998,f3425])).
fof(f3425,plain,(
  ( ! [X2,X3,X1] : (~sP10(X1,X2) | ~sP7(X1,X3)) ) | $spl21),
  inference(subsumption_resolution,[],[f3103,f1479])).
fof(f3103,plain,(
  ( ! [X2,X3,X1] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP10(X1,X2) | ~sP7(X1,X3)) )),
  inference(superposition,[],[f862,f874])).
fof(f12067,plain,(
  ( ! [X15] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X15) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X15)) ) | $spl520),
  inference(cnf_transformation,[],[f12067_D])).
fof(f12067_D,plain,(
  ( ! [X15] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X15) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X15)) ) <=> ~$spl520),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl520])])).
fof(f12056,plain,(
  ( ! [X17,X15,X16] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X15) | s('type.semanticPrimitives.v',X16) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X17))))) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X15)) ) | $spl21),
  inference(resolution,[],[f2998,f3134])).
fof(f3134,plain,(
  ( ! [X0,X1] : (~sP10(X0,X1) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X0)) ) | $spl21),
  inference(superposition,[],[f1479,f862])).
fof(f7556,plain,(
  ( ! [X231,X229,X227,X230,X228,X226] : (sP3(X228,X229,X230) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X226) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X227) | s('type.semanticPrimitives.v',X230) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X231))) | s('type.ast.t',X229) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X226),s('type.ast.tctor',X227))))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X228),s('type.num.num',X231))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X226),s('type.ast.tctor',X227)))))))) ) | $spl450),
  inference(cnf_transformation,[],[f7556_D])).
fof(f7556_D,plain,(
  ( ! [X231,X229,X227,X230,X228,X226] : (sP3(X228,X229,X230) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X226) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X227) | s('type.semanticPrimitives.v',X230) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X231))) | s('type.ast.t',X229) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X226),s('type.ast.tctor',X227))))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X228),s('type.num.num',X231))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X226),s('type.ast.tctor',X227)))))))) ) <=> ~$spl450),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl450])])).
fof(f3441,plain,(
  ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | $spl123),
  inference(cnf_transformation,[],[f3441_D])).
fof(f3441_D,plain,(
  ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) <=> ~$spl123),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl123])])).
fof(f11851,plain,(
  ( ! [X218,X216,X220,X219,X217,X221] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | sP3(X218,X219,X220) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X218),s('type.num.num',X221))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X216),s('type.ast.tctor',X217))))))) | s('type.ast.t',X219) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X216),s('type.ast.tctor',X217))))) | s('type.semanticPrimitives.v',X220) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X221))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X217) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X216)) )),
  inference(superposition,[],[f895,f1011])).
fof(f895,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP3(X0,X1,X2) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X4))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.num.num',X3))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X4)))) | s('type.ast.t',X1) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X4))) | s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f642])).
fof(f642,plain,(
  ! [X0,X1,X2] : ((~sP3(X0,X1,X2) | (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',sK47(X2,X1,X0)))) & s('type.ast.t',X1) = s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',sK48(X2,X1,X0)))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK48(X2,X1,X0))))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',sK48(X2,X1,X0)))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.num.num',sK47(X2,X1,X0)))))) & (! [X3,X4] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X3))) | s('type.ast.t',X1) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X4))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X4)))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X4))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.num.num',X3)))) | sP3(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK47,sK48])],[f641])).
fof(f641,plain,(
  ! [X0,X1,X2] : ((~sP3(X0,X1,X2) | ? [X5,X6] : (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X5))) & s('type.ast.t',X1) = s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X6))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X6))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.num.num',X5))))) & (! [X3,X4] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X3))) | s('type.ast.t',X1) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X4))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X4)))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X4))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X0),s('type.num.num',X3)))) | sP3(X0,X1,X2)))),
  inference(rectify,[],[f640])).
fof(f640,plain,(
  ! [X2,X4,X3] : ((~sP3(X2,X4,X3) | ? [X10,X11] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X10))) & s('type.ast.t',X4) = s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X11))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X11)))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X11))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',X10))))) & (! [X10,X11] : (s('type.semanticPrimitives.v',X3) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X10))) | s('type.ast.t',X4) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X11))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X11)))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X11))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',X10)))) | sP3(X2,X4,X3)))),
  inference(nnf_transformation,[],[f575])).
fof(f575,plain,(
  ! [X2,X4,X3] : (sP3(X2,X4,X3) <=> ? [X10,X11] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X10))) & s('type.ast.t',X4) = s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X11))) & p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X11)))) & s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X11))))) = s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',X10)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f7555,plain,(
  ( ! [X218,X216,X215,X219,X217,X214] : (sP4(X216,X217,X218) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X214) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X215) | s('type.semanticPrimitives.v',X218) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X219))) | s('type.ast.t',X217) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X214),s('type.ast.tctor',X215))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X216),s('type.num.num',X219))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X214),s('type.ast.tctor',X215)))))))) ) | $spl448),
  inference(cnf_transformation,[],[f7555_D])).
fof(f7555_D,plain,(
  ( ! [X218,X216,X215,X219,X217,X214] : (sP4(X216,X217,X218) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X214) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X215) | s('type.semanticPrimitives.v',X218) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X219))) | s('type.ast.t',X217) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X214),s('type.ast.tctor',X215))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X216),s('type.num.num',X219))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X214),s('type.ast.tctor',X215)))))))) ) <=> ~$spl448),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl448])])).
fof(f11849,plain,(
  ( ! [X208,X206,X204,X209,X207,X205] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | sP4(X206,X207,X208) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X206),s('type.num.num',X209))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X204),s('type.ast.tctor',X205))))))) | s('type.ast.t',X207) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X204),s('type.ast.tctor',X205))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.semanticPrimitives.v',X208) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X209))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X205) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X204)) )),
  inference(superposition,[],[f890,f1011])).
fof(f7554,plain,(
  ( ! [X191,X189,X194,X192,X190,X188,X195,X193] : (sP5(X190,X191,X192,X193,X194) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X188) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X189) | s('type.semanticPrimitives.v',X194) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X195))) | s('type.ast.t',X193) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X188),s('type.ast.tctor',X189))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X190),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X191),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X192))),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X188),s('type.ast.tctor',X189))))),s('type.list.list'('type.semanticPrimitives.v'),X195))))) ) | $spl446),
  inference(cnf_transformation,[],[f7554_D])).
fof(f7554_D,plain,(
  ( ! [X191,X189,X194,X192,X190,X188,X195,X193] : (sP5(X190,X191,X192,X193,X194) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X188) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X189) | s('type.semanticPrimitives.v',X194) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X195))) | s('type.ast.t',X193) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X188),s('type.ast.tctor',X189))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X190),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X191),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X192))),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X188),s('type.ast.tctor',X189))))),s('type.list.list'('type.semanticPrimitives.v'),X195))))) ) <=> ~$spl446),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl446])])).
fof(f11845,plain,(
  ( ! [X185,X182,X180,X178,X184,X183,X181,X179] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | sP5(X180,X181,X182,X183,X184) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X180),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X181),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X182))),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X178),s('type.ast.tctor',X179))))),s('type.list.list'('type.semanticPrimitives.v'),X185)))) | s('type.ast.t',X183) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X178),s('type.ast.tctor',X179))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | s('type.semanticPrimitives.v',X184) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X185))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X179) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X178)) )),
  inference(superposition,[],[f885,f1011])).
fof(f7535,plain,(
  ( ! [X12] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X12) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X12)) ) | $spl432),
  inference(cnf_transformation,[],[f7535_D])).
fof(f7535_D,plain,(
  ( ! [X12] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X12) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X12)) ) <=> ~$spl432),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl432])])).
fof(f11987,plain,(
  ( ! [X59,X60] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X60) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X59) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X60)) ) | $spl169),
  inference(subsumption_resolution,[],[f11948,f3863])).
fof(f11948,plain,(
  ( ! [X59,X60] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X60) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X59) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X60)) )),
  inference(duplicate_literal_removal,[],[f11821])).
fof(f11821,plain,(
  ( ! [X59,X60] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X60) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X59) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X60) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X59)) )),
  inference(superposition,[],[f1014,f1011])).
fof(f7533,plain,(
  ( ! [X10,X9] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10)))) ) | $spl430),
  inference(cnf_transformation,[],[f7533_D])).
fof(f7533_D,plain,(
  ( ! [X10,X9] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10)))) ) <=> ~$spl430),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl430])])).
fof(f11949,plain,(
  ( ! [X50,X48,X49] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X50))) | s('type.ast.tctor',X49) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X50))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X48) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X49)) )),
  inference(duplicate_literal_removal,[],[f11816])).
fof(f11816,plain,(
  ( ! [X50,X48,X49] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X50))) | s('type.ast.tctor',X49) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X50))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X48) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X49) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X48)) )),
  inference(superposition,[],[f1002,f1011])).
fof(f7548,plain,(
  ( ! [X47,X46] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X47))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X46) | s('type.ast.tctor',X46) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X47)))) ) | $spl444),
  inference(cnf_transformation,[],[f7548_D])).
fof(f7548_D,plain,(
  ( ! [X47,X46] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X47))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X46) | s('type.ast.tctor',X46) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X47)))) ) <=> ~$spl444),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl444])])).
fof(f11815,plain,(
  ( ! [X47,X45,X46] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X47))) | s('type.ast.tctor',X46) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X47))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X46) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X45)) )),
  inference(superposition,[],[f1001,f1011])).
fof(f1001,plain,(
  ( ! [X2,X0,X1] : (s('type.ast.tctor',X2) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X0))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X0))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X2)))) )),
  inference(cnf_transformation,[],[f685])).
fof(f7547,plain,(
  ( ! [X28,X29,X27] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X28),s('type.ast.tctor',X29))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X27) | s('type.ast.tctor',X27) = s('type.ast.tctor',X29)) ) | $spl442),
  inference(cnf_transformation,[],[f7547_D])).
fof(f7547_D,plain,(
  ( ! [X28,X29,X27] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X28),s('type.ast.tctor',X29))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X27) | s('type.ast.tctor',X27) = s('type.ast.tctor',X29)) ) <=> ~$spl442),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl442])])).
fof(f11811,plain,(
  ( ! [X30,X33,X31,X32] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X32),s('type.ast.tctor',X33))) | s('type.ast.tctor',X31) = s('type.ast.tctor',X33) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X31) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X30)) )),
  inference(superposition,[],[f998,f1011])).
fof(f998,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ast.tctor',X1) = s('type.ast.tctor',X3) | s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X0),s('type.ast.tctor',X1))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X2),s('type.ast.tctor',X3)))) )),
  inference(cnf_transformation,[],[f683])).
fof(f683,plain,(
  ! [X0,X1,X2,X3] : ((s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X0),s('type.ast.tctor',X1))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X2),s('type.ast.tctor',X3))) | (s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),X2) & s('type.ast.tctor',X1) = s('type.ast.tctor',X3))) & (s('type.list.list'('type.ast.t'),X0) != s('type.list.list'('type.ast.t'),X2) | s('type.ast.tctor',X1) != s('type.ast.tctor',X3) | s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X0),s('type.ast.tctor',X1))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X2),s('type.ast.tctor',X3)))))),
  inference(flattening,[],[f682])).
fof(f682,plain,(
  ! [X0,X1,X2,X3] : ((s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X0),s('type.ast.tctor',X1))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X2),s('type.ast.tctor',X3))) | (s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),X2) & s('type.ast.tctor',X1) = s('type.ast.tctor',X3))) & ((s('type.list.list'('type.ast.t'),X0) != s('type.list.list'('type.ast.t'),X2) | s('type.ast.tctor',X1) != s('type.ast.tctor',X3)) | s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X0),s('type.ast.tctor',X1))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X2),s('type.ast.tctor',X3)))))),
  inference(nnf_transformation,[],[f345])).
fof(f345,plain,(
  ! [X0,X1,X2,X3] : (s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X0),s('type.ast.tctor',X1))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X2),s('type.ast.tctor',X3))) <=> (s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),X2) & s('type.ast.tctor',X1) = s('type.ast.tctor',X3)))),
  inference(rectify,[],[f106])).
fof(f106,axiom,(
  ! [X15,X16,X17,X18] : (s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor',X16))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X17),s('type.ast.tctor',X18))) <=> (s('type.list.list'('type.ast.t'),X15) = s('type.list.list'('type.ast.t'),X17) & s('type.ast.tctor',X16) = s('type.ast.tctor',X18)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.ast.t_|49||49||split|2')).
fof(f11810,plain,(
  ( ! [X28,X26,X29,X27] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X28),s('type.ast.tctor',X29))) | s('type.ast.tctor',X27) = s('type.ast.tctor',X29) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X27) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X26)) )),
  inference(superposition,[],[f998,f1011])).
fof(f7537,plain,(
  ( ! [X14] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14)) ) | $spl434),
  inference(cnf_transformation,[],[f7537_D])).
fof(f7537_D,plain,(
  ( ! [X14] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14)) ) <=> ~$spl434),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl434])])).
fof(f7546,plain,(
  ( ! [X21,X20,X18] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X21))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X18) | s('type.list.list'('type.ast.t'),X18) = s('type.list.list'('type.ast.t'),X20)) ) | $spl440),
  inference(cnf_transformation,[],[f7546_D])).
fof(f7546_D,plain,(
  ( ! [X21,X20,X18] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X21))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X18) | s('type.list.list'('type.ast.t'),X18) = s('type.list.list'('type.ast.t'),X20)) ) <=> ~$spl440),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl440])])).
fof(f11809,plain,(
  ( ! [X24,X23,X25,X22] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X24),s('type.ast.tctor',X25))) | s('type.list.list'('type.ast.t'),X22) = s('type.list.list'('type.ast.t'),X24) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X23) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X22)) )),
  inference(superposition,[],[f997,f1011])).
fof(f997,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),X2) | s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X0),s('type.ast.tctor',X1))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X2),s('type.ast.tctor',X3)))) )),
  inference(cnf_transformation,[],[f683])).
fof(f11808,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X21))) | s('type.list.list'('type.ast.t'),X18) = s('type.list.list'('type.ast.t'),X20) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X19) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X18)) )),
  inference(superposition,[],[f997,f1011])).
fof(f7543,plain,(
  ( ! [X66] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),X66)))) ) | $spl438),
  inference(cnf_transformation,[],[f7543_D])).
fof(f7543_D,plain,(
  ( ! [X66] : (s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),X66)))) ) <=> ~$spl438),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl438])])).
fof(f7516,plain,(
  ( ! [X1] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X1))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X1)) ) | $spl416),
  inference(cnf_transformation,[],[f7516_D])).
fof(f7516_D,plain,(
  ( ! [X1] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X1))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X1)) ) <=> ~$spl416),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl416])])).
fof(f11950,plain,(
  ( ! [X54,X55] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X55))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X55) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),X54)))) )),
  inference(trivial_inequality_removal,[],[f11788])).
fof(f11788,plain,(
  ( ! [X54,X55] : (s('type.list.list'('type.ast.t'),X54) != s('type.list.list'('type.ast.t'),X54) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X55))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X55) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),X54)))) )),
  inference(superposition,[],[f1011,f1089])).
fof(f7515,plain,(
  ( ! [X4,X2,X0,X5,X3] : (sP17(X2,X3,X4,X0,X5) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X4),s('type.list.list'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.t'),X0))))) ) | $spl414),
  inference(cnf_transformation,[],[f7515_D])).
fof(f7515_D,plain,(
  ( ! [X4,X2,X0,X5,X3] : (sP17(X2,X3,X4,X0,X5) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X4),s('type.list.list'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.t'),X0))))) ) <=> ~$spl414),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl414])])).
fof(f11951,plain,(
  ( ! [X52,X50,X48,X53,X51,X49] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X49))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X49) | sP17(X50,X51,X52,X48,X53) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X50),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X51),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X52),s('type.list.list'('type.semanticPrimitives.v'),X53),s('type.list.list'('type.ast.t'),X48))))) )),
  inference(trivial_inequality_removal,[],[f11787])).
fof(f11787,plain,(
  ( ! [X52,X50,X48,X53,X51,X49] : (s('type.list.list'('type.ast.t'),X48) != s('type.list.list'('type.ast.t'),X48) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X49))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X49) | sP17(X50,X51,X52,X48,X53) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X50),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X51),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X52),s('type.list.list'('type.semanticPrimitives.v'),X53),s('type.list.list'('type.ast.t'),X48))))) )),
  inference(superposition,[],[f1011,f982])).
fof(f7518,plain,(
  ( ! [X19,X18,X16] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X18))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X19)))) ) | $spl418),
  inference(cnf_transformation,[],[f7518_D])).
fof(f7518_D,plain,(
  ( ! [X19,X18,X16] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X18))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X19)))) ) <=> ~$spl418),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl418])])).
fof(f11952,plain,(
  ( ! [X47,X45,X46,X44] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X45))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X45) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X46))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X47)))) )),
  inference(trivial_inequality_removal,[],[f11786])).
fof(f11786,plain,(
  ( ! [X47,X45,X46,X44] : (s('type.list.list'('type.ast.t'),X44) != s('type.list.list'('type.ast.t'),X44) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X45))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X45) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X46))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X47)))) )),
  inference(superposition,[],[f1011,f1000])).
fof(f5340,plain,(
  ( ! [X90,X88] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X90),s('type.ast.tctor',X88)))) ) | $spl350),
  inference(cnf_transformation,[],[f5340_D])).
fof(f5340_D,plain,(
  ( ! [X90,X88] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X90),s('type.ast.tctor',X88)))) ) <=> ~$spl350),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl350])])).
fof(f11953,plain,(
  ( ! [X43,X41,X42] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X42))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X42) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X41),s('type.ast.tctor',X43)))) )),
  inference(trivial_inequality_removal,[],[f11785])).
fof(f11785,plain,(
  ( ! [X43,X41,X42] : (s('type.list.list'('type.ast.t'),X41) != s('type.list.list'('type.ast.t'),X41) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X42))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X42) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X41),s('type.ast.tctor',X43)))) )),
  inference(superposition,[],[f1011,f1012])).
fof(f4811,plain,(
  ( ! [X102,X104] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X104),s('type.ast.tctor',X102)))) ) | $spl282),
  inference(cnf_transformation,[],[f4811_D])).
fof(f4811_D,plain,(
  ( ! [X102,X104] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X104),s('type.ast.tctor',X102)))) ) <=> ~$spl282),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl282])])).
fof(f11954,plain,(
  ( ! [X39,X38,X40] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X39))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X39) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X38),s('type.ast.tctor',X40)))) )),
  inference(trivial_inequality_removal,[],[f11784])).
fof(f11784,plain,(
  ( ! [X39,X38,X40] : (s('type.list.list'('type.ast.t'),X38) != s('type.list.list'('type.ast.t'),X38) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X39))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X39) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X38),s('type.ast.tctor',X40)))) )),
  inference(superposition,[],[f1011,f1009])).
fof(f7530,plain,(
  ( ! [X18] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X18),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X18)) ) | $spl428),
  inference(cnf_transformation,[],[f7530_D])).
fof(f7530_D,plain,(
  ( ! [X18] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X18),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X18)) ) <=> ~$spl428),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl428])])).
fof(f11960,plain,(
  ( ! [X28,X29,X27] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X28),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X28) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X29),s('type.ast.tctor',X27)))) )),
  inference(trivial_inequality_removal,[],[f11736])).
fof(f11736,plain,(
  ( ! [X28,X29,X27] : (s('type.ast.tctor',X27) != s('type.ast.tctor',X27) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X28),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X28) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X29),s('type.ast.tctor',X27)))) )),
  inference(superposition,[],[f1011,f1010])).
fof(f5318,plain,(
  ( ! [X31] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X31),s('type.ast.tctor','const.ast.TC_word64_0')))) ) | $spl326),
  inference(cnf_transformation,[],[f5318_D])).
fof(f5318_D,plain,(
  ( ! [X31] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X31),s('type.ast.tctor','const.ast.TC_word64_0')))) ) <=> ~$spl326),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl326])])).
fof(f11718,plain,(
  ( ! [X19,X20,X18] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X18) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X19),s('type.ast.tctor',X18))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X19) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor','const.ast.TC_word64_0')))) )),
  inference(superposition,[],[f1011,f1013])).
fof(f11980,plain,(
  ( ! [X14,X13] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X13) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X14)) ) | $spl169),
  inference(subsumption_resolution,[],[f11964,f3863])).
fof(f11964,plain,(
  ( ! [X14,X13] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X13) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X14)) )),
  inference(duplicate_literal_removal,[],[f11693])).
fof(f11693,plain,(
  ( ! [X14,X13] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X13) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X14) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X13)) )),
  inference(superposition,[],[f1011,f1014])).
fof(f11965,plain,(
  ( ! [X10,X8,X9] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X9) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X8) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10)))) )),
  inference(duplicate_literal_removal,[],[f11692])).
fof(f11692,plain,(
  ( ! [X10,X8,X9] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X9) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X8) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X8)) )),
  inference(superposition,[],[f1011,f1002])).
fof(f5348,plain,(
  ( ! [X94,X92] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X92) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X94),s('type.ast.tctor',X92)))) ) | $spl358),
  inference(cnf_transformation,[],[f5348_D])).
fof(f5348_D,plain,(
  ( ! [X94,X92] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X92) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X94),s('type.ast.tctor',X92)))) ) <=> ~$spl358),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl358])])).
fof(f11671,plain,(
  ( ! [X19,X17,X18] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X18),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X17) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X18) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X19),s('type.ast.tctor',X17)))) )),
  inference(superposition,[],[f1011,f1013])).
fof(f11978,plain,(
  ( ! [X14,X15,X16] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X15) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X14)))) )),
  inference(subsumption_resolution,[],[f11670,f1010])).
fof(f11670,plain,(
  ( ! [X14,X15,X16] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X15) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X14)))) )),
  inference(superposition,[],[f1011,f1010])).
fof(f11976,plain,(
  ( ! [X26,X27] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X27))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X27) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X26)) )),
  inference(subsumption_resolution,[],[f11642,f1090])).
fof(f1090,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),X1)) )),
  inference(cnf_transformation,[],[f715])).
fof(f11642,plain,(
  ( ! [X26,X27] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X27))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X27) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X26) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),X26)))) )),
  inference(superposition,[],[f1011,f1089])).
fof(f11975,plain,(
  ( ! [X24,X23,X25] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X24))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X24) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X23),s('type.ast.tctor',X25)))) )),
  inference(subsumption_resolution,[],[f11641,f1012])).
fof(f11641,plain,(
  ( ! [X24,X23,X25] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X24))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X24) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X23) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X23),s('type.ast.tctor',X25)))) )),
  inference(superposition,[],[f1011,f1012])).
fof(f11974,plain,(
  ( ! [X21,X22,X20] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X21))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X21) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X22)))) )),
  inference(subsumption_resolution,[],[f11640,f1009])).
fof(f11640,plain,(
  ( ! [X21,X22,X20] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X21))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X21) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X20) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X22)))) )),
  inference(superposition,[],[f1011,f1009])).
fof(f11973,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X17))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X17) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X18))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X19)))) )),
  inference(subsumption_resolution,[],[f11639,f1000])).
fof(f11639,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X17))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X17) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X16) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X18))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X19)))) )),
  inference(superposition,[],[f1011,f1000])).
fof(f11972,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X1))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X1) | sP17(X2,X3,X4,X0,X5) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X4),s('type.list.list'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.t'),X0))))) )),
  inference(subsumption_resolution,[],[f11636,f982])).
fof(f11636,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X1))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X1) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X0) | sP17(X2,X3,X4,X0,X5) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X4),s('type.list.list'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.t'),X0))))) )),
  inference(superposition,[],[f1011,f982])).
fof(f11301,plain,(
  $false | ($spl97 | $spl114 | $spl490)),
  inference(subsumption_resolution,[],[f11161,f3022])).
fof(f11161,plain,(
  s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | ($spl114 | $spl490)),
  inference(backward_demodulation,[],[f8957,f3432])).
fof(f11145,plain,(
  ( ! [X0] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X0) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X0)) ) | $spl518),
  inference(cnf_transformation,[],[f11145_D])).
fof(f11145_D,plain,(
  ( ! [X0] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X0) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X0)) ) <=> ~$spl518),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl518])])).
fof(f11154,plain,(
  ( ! [X2,X0,X1] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X0) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X0) | s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X2)))))) ) | $spl412),
  inference(subsumption_resolution,[],[f11150,f1336])).
fof(f11150,plain,(
  ( ! [X2,X0,X1] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X0) | ~p(s(bool,'T_0')) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X0) | s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X2)))))) ) | $spl412),
  inference(resolution,[],[f7069,f876])).
fof(f11141,plain,(
  ( ! [X2,X0,X1] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X0) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X0) | s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2)))))) ) | $spl17),
  inference(resolution,[],[f3568,f3057])).
fof(f3568,plain,(
  ( ! [X0,X1] : (~sP9(X0,X1) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X0)) ) | $spl17),
  inference(superposition,[],[f1476,f866])).
fof(f11134,plain,(
  ( ! [X2,X0,X1] : (~sP3(X0,X1,X2) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',sK48(X2,X1,X0))) ) | $spl516),
  inference(cnf_transformation,[],[f11134_D])).
fof(f11134_D,plain,(
  ( ! [X2,X0,X1] : (~sP3(X0,X1,X2) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',sK48(X2,X1,X0))) ) <=> ~$spl516),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl516])])).
fof(f11130,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP3(X0,X1,X2) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',sK48(X2,X1,X0)) | s('type.semanticPrimitives.v',X3) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X4)))))) ) | $spl236),
  inference(resolution,[],[f3913,f3057])).
fof(f11126,plain,(
  ( ! [X2,X0,X1] : (~sP4(X0,X1,X2) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',sK46(X2,X1,X0))) ) | $spl514),
  inference(cnf_transformation,[],[f11126_D])).
fof(f11126_D,plain,(
  ( ! [X2,X0,X1] : (~sP4(X0,X1,X2) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',sK46(X2,X1,X0))) ) <=> ~$spl514),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl514])])).
fof(f11122,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP4(X0,X1,X2) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',sK46(X2,X1,X0)) | s('type.semanticPrimitives.v',X3) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X4)))))) ) | $spl234),
  inference(resolution,[],[f3912,f3057])).
fof(f8625,plain,(
  ( ! [X1] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X1))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X1)) ) | $spl460),
  inference(cnf_transformation,[],[f8625_D])).
fof(f8625_D,plain,(
  ( ! [X1] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X1))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X1)) ) <=> ~$spl460),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl460])])).
fof(f11073,plain,(
  ( ! [X233,X234,X232] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X233))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X233) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X232),s('type.ast.tctor',X234)))) )),
  inference(subsumption_resolution,[],[f10852,f1009])).
fof(f10852,plain,(
  ( ! [X233,X234,X232] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X233))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X233) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X232) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X232),s('type.ast.tctor',X234)))) )),
  inference(superposition,[],[f1014,f1009])).
fof(f6117,plain,(
  ( ! [X368,X369] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X368))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X369))) | s('type.ast.tctor',X369) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X368)))) ) | $spl406),
  inference(cnf_transformation,[],[f6117_D])).
fof(f6117_D,plain,(
  ( ! [X368,X369] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X368))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X369))) | s('type.ast.tctor',X369) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X368)))) ) <=> ~$spl406),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl406])])).
fof(f11072,plain,(
  ( ! [X216,X215,X217,X214] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X215))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X216))) | s('type.ast.tctor',X216) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X215))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X214),s('type.ast.tctor',X217)))) )),
  inference(subsumption_resolution,[],[f10847,f1009])).
fof(f10847,plain,(
  ( ! [X216,X215,X217,X214] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X215))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X216))) | s('type.ast.tctor',X216) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X215))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X214) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X214),s('type.ast.tctor',X217)))) )),
  inference(superposition,[],[f1002,f1009])).
fof(f6116,plain,(
  ( ! [X294,X296,X295,X297] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X294),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X295),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X296),s('type.list.list'('type.semanticPrimitives.v'),X297),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X297)) ) | $spl404),
  inference(cnf_transformation,[],[f6116_D])).
fof(f6116_D,plain,(
  ( ! [X294,X296,X295,X297] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X294),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X295),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X296),s('type.list.list'('type.semanticPrimitives.v'),X297),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X297)) ) <=> ~$spl404),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl404])])).
fof(f11070,plain,(
  ( ! [X142,X140,X138,X141,X139,X137] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X138),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X139),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X140),s('type.list.list'('type.semanticPrimitives.v'),X141),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X141) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X137),s('type.ast.tctor',X142)))) )),
  inference(subsumption_resolution,[],[f11069,f1336])).
fof(f11069,plain,(
  ( ! [X142,X140,X138,X141,X139,X137] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X138),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X139),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X140),s('type.list.list'('type.semanticPrimitives.v'),X141),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | ~p(s(bool,'T_0')) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X141) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X137),s('type.ast.tctor',X142)))) )),
  inference(subsumption_resolution,[],[f10832,f1009])).
fof(f10832,plain,(
  ( ! [X142,X140,X138,X141,X139,X137] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X138),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X139),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X140),s('type.list.list'('type.semanticPrimitives.v'),X141),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | ~p(s(bool,'T_0')) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X137) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X141) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X137),s('type.ast.tctor',X142)))) )),
  inference(superposition,[],[f984,f1009])).
fof(f984,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X1),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.list.list'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.t'),X4)))) | ~p(s(bool,'T_0')) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X4) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X3)) )),
  inference(cnf_transformation,[],[f676])).
fof(f11040,plain,(
  ( ! [X385,X384,X386] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X385))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X385) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X384),s('type.ast.tctor',X386)))) )),
  inference(trivial_inequality_removal,[],[f10727])).
fof(f10727,plain,(
  ( ! [X385,X384,X386] : (s('type.list.list'('type.ast.t'),X384) != s('type.list.list'('type.ast.t'),X384) | s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X385))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X385) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X384),s('type.ast.tctor',X386)))) )),
  inference(superposition,[],[f1014,f1009])).
fof(f11042,plain,(
  ( ! [X368,X370,X369,X371] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X369))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X370))) | s('type.ast.tctor',X370) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X369))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X368),s('type.ast.tctor',X371)))) )),
  inference(trivial_inequality_removal,[],[f10722])).
fof(f10722,plain,(
  ( ! [X368,X370,X369,X371] : (s('type.list.list'('type.ast.t'),X368) != s('type.list.list'('type.ast.t'),X368) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X369))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X370))) | s('type.ast.tctor',X370) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X369))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X368),s('type.ast.tctor',X371)))) )),
  inference(superposition,[],[f1002,f1009])).
fof(f11065,plain,(
  ( ! [X294,X296,X298,X295,X297,X299] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X295),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X296),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X297),s('type.list.list'('type.semanticPrimitives.v'),X298),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X298) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X294),s('type.ast.tctor',X299)))) )),
  inference(subsumption_resolution,[],[f11044,f1336])).
fof(f11044,plain,(
  ( ! [X294,X296,X298,X295,X297,X299] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X295),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X296),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X297),s('type.list.list'('type.semanticPrimitives.v'),X298),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | ~p(s(bool,'T_0')) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X298) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X294),s('type.ast.tctor',X299)))) )),
  inference(trivial_inequality_removal,[],[f10707])).
fof(f10707,plain,(
  ( ! [X294,X296,X298,X295,X297,X299] : (s('type.list.list'('type.ast.t'),X294) != s('type.list.list'('type.ast.t'),X294) | p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X295),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X296),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X297),s('type.list.list'('type.semanticPrimitives.v'),X298),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | ~p(s(bool,'T_0')) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X298) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X294),s('type.ast.tctor',X299)))) )),
  inference(superposition,[],[f984,f1009])).
fof(f4838,plain,(
  ( ! [X194] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X194),s('type.ast.tctor','const.ast.TC_array_0')))) ) | $spl320),
  inference(cnf_transformation,[],[f4838_D])).
fof(f4838_D,plain,(
  ( ! [X194] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X194),s('type.ast.tctor','const.ast.TC_array_0')))) ) <=> ~$spl320),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl320])])).
fof(f4840,plain,(
  ( ! [X198,X196,X199,X197,X195] : (s('type.ast.t',X195) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X196),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.semanticPrimitives.v',X198) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X199))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X196)))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X196))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X197),s('type.num.num',X199))) | sP4(X197,X195,X198)) ) | $spl324),
  inference(cnf_transformation,[],[f4840_D])).
fof(f4840_D,plain,(
  ( ! [X198,X196,X199,X197,X195] : (s('type.ast.t',X195) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X196),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.semanticPrimitives.v',X198) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X199))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X196)))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X196))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X197),s('type.num.num',X199))) | sP4(X197,X195,X198)) ) <=> ~$spl324),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl324])])).
fof(f9874,plain,(
  ( ! [X196,X194,X192,X197,X195,X193] : (s('type.ast.t',X192) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X193),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0'))) | sP4(X194,X192,X195) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X193))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X194),s('type.num.num',X196))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X193)))) | s('type.semanticPrimitives.v',X195) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X196))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X197),s('type.ast.tctor','const.ast.TC_array_0')))) )),
  inference(superposition,[],[f890,f1010])).
fof(f4839,plain,(
  ( ! [X191,X192,X193] : (s('type.ast.t',X191) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK46(X192,X191,X193)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0'))) | ~sP4(X193,X191,X192)) ) | $spl322),
  inference(cnf_transformation,[],[f4839_D])).
fof(f4839_D,plain,(
  ( ! [X191,X192,X193] : (s('type.ast.t',X191) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK46(X192,X191,X193)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0'))) | ~sP4(X193,X191,X192)) ) <=> ~$spl322),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl322])])).
fof(f9873,plain,(
  ( ! [X191,X189,X190,X188] : (s('type.ast.t',X188) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK46(X189,X188,X190)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0'))) | ~sP4(X190,X188,X189) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X191),s('type.ast.tctor','const.ast.TC_array_0')))) )),
  inference(superposition,[],[f887,f1010])).
fof(f4835,plain,(
  ( ! [X181] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X181),s('type.ast.tctor','const.ast.TC_vector_0')))) ) | $spl314),
  inference(cnf_transformation,[],[f4835_D])).
fof(f4835_D,plain,(
  ( ! [X181] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X181),s('type.ast.tctor','const.ast.TC_vector_0')))) ) <=> ~$spl314),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl314])])).
fof(f4837,plain,(
  ( ! [X187,X185,X182,X188,X186,X184,X183] : (s('type.ast.t',X182) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X183),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.semanticPrimitives.v',X187) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X188))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X183)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X184),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X185),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X186))),s('type.ast.t',X183))),s('type.list.list'('type.semanticPrimitives.v'),X188)))) | sP5(X184,X185,X186,X182,X187)) ) | $spl318),
  inference(cnf_transformation,[],[f4837_D])).
fof(f4837_D,plain,(
  ( ! [X187,X185,X182,X188,X186,X184,X183] : (s('type.ast.t',X182) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X183),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.semanticPrimitives.v',X187) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X188))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X183)))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X184),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X185),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X186))),s('type.ast.t',X183))),s('type.list.list'('type.semanticPrimitives.v'),X188)))) | sP5(X184,X185,X186,X182,X187)) ) <=> ~$spl318),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl318])])).
fof(f9870,plain,(
  ( ! [X177,X182,X180,X178,X184,X183,X181,X179] : (s('type.ast.t',X177) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X178),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0'))) | sP5(X179,X180,X181,X177,X182) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X179),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X180),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X181))),s('type.ast.t',X178))),s('type.list.list'('type.semanticPrimitives.v'),X183)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X178)))) | s('type.semanticPrimitives.v',X182) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X183))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X184),s('type.ast.tctor','const.ast.TC_vector_0')))) )),
  inference(superposition,[],[f885,f1010])).
fof(f4836,plain,(
  ( ! [X177,X180,X178,X176,X179] : (s('type.ast.t',X176) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK44(X177,X176,X178,X179,X180)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0'))) | ~sP5(X180,X179,X178,X176,X177)) ) | $spl316),
  inference(cnf_transformation,[],[f4836_D])).
fof(f4836_D,plain,(
  ( ! [X177,X180,X178,X176,X179] : (s('type.ast.t',X176) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK44(X177,X176,X178,X179,X180)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0'))) | ~sP5(X180,X179,X178,X176,X177)) ) <=> ~$spl316),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl316])])).
fof(f9869,plain,(
  ( ! [X175,X173,X171,X176,X174,X172] : (s('type.ast.t',X171) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK44(X172,X171,X173,X174,X175)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0'))) | ~sP5(X175,X174,X173,X171,X172) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X176),s('type.ast.tctor','const.ast.TC_vector_0')))) )),
  inference(superposition,[],[f882,f1010])).
fof(f4832,plain,(
  ( ! [X165] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X165),s('type.ast.tctor','const.ast.TC_tup_0')))) ) | $spl308),
  inference(cnf_transformation,[],[f4832_D])).
fof(f4832_D,plain,(
  ( ! [X165] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X165),s('type.ast.tctor','const.ast.TC_tup_0')))) ) <=> ~$spl308),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl308])])).
fof(f4834,plain,(
  ( ! [X167,X171,X169,X166,X172,X170,X168] : (s('type.ast.t',X166) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X167),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.semanticPrimitives.v',X171) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X172))) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X168),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X169),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X170),s('type.list.list'('type.semanticPrimitives.v'),X172),s('type.list.list'('type.ast.t'),X167)))) | sP11(X168,X169,X170,X166,X171)) ) | $spl312),
  inference(cnf_transformation,[],[f4834_D])).
fof(f4834_D,plain,(
  ( ! [X167,X171,X169,X166,X172,X170,X168] : (s('type.ast.t',X166) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X167),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.semanticPrimitives.v',X171) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X172))) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X168),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X169),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X170),s('type.list.list'('type.semanticPrimitives.v'),X172),s('type.list.list'('type.ast.t'),X167)))) | sP11(X168,X169,X170,X166,X171)) ) <=> ~$spl312),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl312])])).
fof(f9864,plain,(
  ( ! [X158,X163,X161,X159,X157,X164,X162,X160] : (s('type.ast.t',X157) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X158),s('type.ast.tctor','const.ast.TC_word64_0'))) | sP11(X159,X160,X161,X157,X162) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X159),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X160),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X161),s('type.list.list'('type.semanticPrimitives.v'),X163),s('type.list.list'('type.ast.t'),X158)))) | s('type.semanticPrimitives.v',X162) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X163))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X164),s('type.ast.tctor','const.ast.TC_tup_0')))) )),
  inference(superposition,[],[f860,f1010])).
fof(f4833,plain,(
  ( ! [X163,X161,X164,X162,X160] : (s('type.ast.t',X160) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK37(X161,X160,X162,X163,X164)),s('type.ast.tctor','const.ast.TC_word64_0'))) | ~sP11(X164,X163,X162,X160,X161)) ) | $spl310),
  inference(cnf_transformation,[],[f4833_D])).
fof(f4833_D,plain,(
  ( ! [X163,X161,X164,X162,X160] : (s('type.ast.t',X160) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK37(X161,X160,X162,X163,X164)),s('type.ast.tctor','const.ast.TC_word64_0'))) | ~sP11(X164,X163,X162,X160,X161)) ) <=> ~$spl310),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl310])])).
fof(f9863,plain,(
  ( ! [X156,X154,X152,X151,X155,X153] : (s('type.ast.t',X151) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK37(X152,X151,X153,X154,X155)),s('type.ast.tctor','const.ast.TC_word64_0'))) | ~sP11(X155,X154,X153,X151,X152) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X156),s('type.ast.tctor','const.ast.TC_tup_0')))) )),
  inference(superposition,[],[f858,f1010])).
fof(f4830,plain,(
  ( ! [X158] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X158),s('type.ast.tctor','const.ast.TC_fn_0')))) ) | $spl304),
  inference(cnf_transformation,[],[f4830_D])).
fof(f4830_D,plain,(
  ( ! [X158] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X158),s('type.ast.tctor','const.ast.TC_fn_0')))) ) <=> ~$spl304),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl304])])).
fof(f4831,plain,(
  ( ! [X156,X157] : (s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X156),s('type.ast.t',X157))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X156),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X157),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))))),s('type.ast.tctor','const.ast.TC_word64_0')))) ) | $spl306),
  inference(cnf_transformation,[],[f4831_D])).
fof(f4831_D,plain,(
  ( ! [X156,X157] : (s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X156),s('type.ast.t',X157))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X156),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X157),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))))),s('type.ast.tctor','const.ast.TC_word64_0')))) ) <=> ~$spl306),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl306])])).
fof(f9860,plain,(
  ( ! [X146,X147,X145] : (s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X145),s('type.ast.t',X146))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X145),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X146),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))))),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X147),s('type.ast.tctor','const.ast.TC_fn_0')))) )),
  inference(superposition,[],[f1015,f1010])).
fof(f4816,plain,(
  ( ! [X107,X105,X108,X106,X104] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X104),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X105),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X106),s('type.semanticPrimitives.v',X107),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X108),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0')))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X105)))) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X108) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X107))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34(X108,X106,X104,X105,X107))))) ) | $spl290),
  inference(cnf_transformation,[],[f4816_D])).
fof(f4816_D,plain,(
  ( ! [X107,X105,X108,X106,X104] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X104),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X105),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X106),s('type.semanticPrimitives.v',X107),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X108),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0')))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X105)))) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X108) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X107))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34(X108,X106,X104,X105,X107))))) ) <=> ~$spl290),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl290])])).
fof(f9834,plain,(
  ( ! [X94,X92,X95,X93,X91,X96] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X91),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X92),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X93),s('type.semanticPrimitives.v',X94),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X95),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0')))))) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X94))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34(X95,X93,X91,X92,X94)))) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X95) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X92)))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X96),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) )),
  inference(superposition,[],[f840,f1010])).
fof(f4815,plain,(
  ( ! [X101,X99,X102,X100,X98] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X98),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X99),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X100),s('type.semanticPrimitives.v',X101),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X102),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0')))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X99)))) | s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X101))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),sK33(X102,X100,X98,X99,X101))))) ) | $spl288),
  inference(cnf_transformation,[],[f4815_D])).
fof(f4815_D,plain,(
  ( ! [X101,X99,X102,X100,X98] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X98),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X99),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X100),s('type.semanticPrimitives.v',X101),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X102),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0')))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X99)))) | s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X101))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),sK33(X102,X100,X98,X99,X101))))) ) <=> ~$spl288),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl288])])).
fof(f9833,plain,(
  ( ! [X90,X88,X87,X85,X89,X86] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X85),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X86),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X87),s('type.semanticPrimitives.v',X88),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X89),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0')))))) | s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X88))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),sK33(X89,X87,X85,X86,X88)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X86)))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X90),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) )),
  inference(superposition,[],[f839,f1010])).
fof(f4810,plain,(
  ( ! [X92,X90] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X90) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X92),s('type.ast.tctor',X90)))) ) | $spl280),
  inference(cnf_transformation,[],[f4810_D])).
fof(f4810_D,plain,(
  ( ! [X92,X90] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X90) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X92),s('type.ast.tctor',X90)))) ) <=> ~$spl280),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl280])])).
fof(f8632,plain,(
  ( ! [X15] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X15)) ) | $spl462),
  inference(cnf_transformation,[],[f8632_D])).
fof(f8632_D,plain,(
  ( ! [X15] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X15)) ) <=> ~$spl462),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl462])])).
fof(f9831,plain,(
  ( ! [X80,X81,X79] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X80),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X79) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X80) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X81),s('type.ast.tctor',X79)))) )),
  inference(superposition,[],[f1014,f1010])).
fof(f9829,plain,(
  ( ! [X74,X75,X73] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X74),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X73) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X75),s('type.ast.tctor',X73)))) )),
  inference(superposition,[],[f1013,f1010])).
fof(f9739,plain,(
  ( ! [X97,X98,X96] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X96) | s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X97),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X97) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X98),s('type.ast.tctor',X96)))) )),
  inference(superposition,[],[f1014,f1010])).
fof(f9737,plain,(
  ( ! [X92,X90,X91] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X90) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X91),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X92),s('type.ast.tctor',X90)))) )),
  inference(superposition,[],[f1013,f1010])).
fof(f4794,plain,(
  ( ! [X10,X9] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10)))) ) | $spl256),
  inference(cnf_transformation,[],[f4794_D])).
fof(f4794_D,plain,(
  ( ! [X10,X9] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10)))) ) <=> ~$spl256),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl256])])).
fof(f9694,plain,(
  ( ! [X10,X8,X9] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X8)) )),
  inference(superposition,[],[f1010,f1002])).
fof(f5345,plain,(
  ( ! [X88,X86] : (s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X86) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X88),s('type.ast.tctor',X86)))) ) | $spl354),
  inference(cnf_transformation,[],[f5345_D])).
fof(f5345_D,plain,(
  ( ! [X88,X86] : (s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X86) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X88),s('type.ast.tctor',X86)))) ) <=> ~$spl354),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl354])])).
fof(f9673,plain,(
  ( ! [X19,X17,X18] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X18),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X17) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X19),s('type.ast.tctor',X17)))) )),
  inference(superposition,[],[f1010,f1013])).
fof(f9609,plain,(
  ( ! [X19,X20,X18] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X18) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X19),s('type.ast.tctor',X18))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor','const.ast.TC_word64_0')))) )),
  inference(superposition,[],[f1010,f1013])).
fof(f1496,plain,(
  ( ! [X19,X17,X20,X18,X16] : (sP12(X16,X17,X18,sK32,X19) | s('type.semanticPrimitives.v',X19) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X20))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18),s('type.num.num',X20)))) ) | $spl26),
  inference(cnf_transformation,[],[f1496_D])).
fof(f1496_D,plain,(
  ( ! [X19,X17,X20,X18,X16] : (sP12(X16,X17,X18,sK32,X19) | s('type.semanticPrimitives.v',X19) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X20))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18),s('type.num.num',X20)))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f3022,plain,(
  s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword64_0') | $spl97),
  inference(cnf_transformation,[],[f3022_D])).
fof(f3022_D,plain,(
  s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword64_0') <=> ~$spl97),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl97])])).
fof(f9395,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword64_0') | sP12(X16,X17,X18,sK32,X19) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18),s('type.num.num',X20))) | s('type.semanticPrimitives.v',X19) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X20)))) ) | $spl84),
  inference(superposition,[],[f854,f2338])).
fof(f854,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP12(X0,X1,X2,X3,X4) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X2),s('type.num.num',X5))) | s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t',X3) | s('type.semanticPrimitives.v',X4) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X5)))) )),
  inference(cnf_transformation,[],[f615])).
fof(f4332,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,sK32,X7) | ~sP12(X4,X5,X6,sK32,X7) | sP6(sK32,X7) | sP8(sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP1(X4,X5,X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP3(X6,sK32,X7) | sP4(X6,sK32,X7)) ) | $spl240),
  inference(cnf_transformation,[],[f4332_D])).
fof(f4332_D,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,sK32,X7) | ~sP12(X4,X5,X6,sK32,X7) | sP6(sK32,X7) | sP8(sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP1(X4,X5,X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP3(X6,sK32,X7) | sP4(X6,sK32,X7)) ) <=> ~$spl240),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl240])])).
fof(f3023,plain,(
  s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | $spl96),
  inference(cnf_transformation,[],[f3023_D])).
fof(f3023_D,plain,(
  s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f9508,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X12,X13,X14,sK32,X15) | sP4(X14,sK32,X15) | sP3(X14,sK32,X15) | sP0(sK32,X12,X13,X14,X15) | sP1(X12,X13,X14,sK32,X15) | sP11(X12,X13,X14,sK32,X15) | sP2(X13,X12,X14,sK32,X15) | sP8(sK32,X15) | sP6(sK32,X15) | ~sP12(X12,X13,X14,sK32,X15)) ) | ($spl5 | $spl18 | $spl84 | $spl87)),
  inference(subsumption_resolution,[],[f9507,f2357])).
fof(f2357,plain,(
  ( ! [X0] : (~sP7(sK32,X0)) ) | $spl5),
  inference(trivial_inequality_removal,[],[f2343])).
fof(f2343,plain,(
  ( ! [X0] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tchar_0') | ~sP7(sK32,X0)) ) | $spl5),
  inference(superposition,[],[f1342,f874])).
fof(f9507,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X12,X13,X14,sK32,X15) | sP4(X14,sK32,X15) | sP3(X14,sK32,X15) | sP0(sK32,X12,X13,X14,X15) | sP1(X12,X13,X14,sK32,X15) | sP11(X12,X13,X14,sK32,X15) | sP2(X13,X12,X14,sK32,X15) | sP8(sK32,X15) | sP7(sK32,X15) | sP6(sK32,X15) | ~sP12(X12,X13,X14,sK32,X15)) ) | ($spl18 | $spl84 | $spl87)),
  inference(subsumption_resolution,[],[f9506,f4322])).
fof(f4322,plain,(
  ( ! [X0] : (~sP9(sK32,X0)) ) | $spl87),
  inference(trivial_inequality_removal,[],[f4308])).
fof(f4308,plain,(
  ( ! [X0] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword8_0') | ~sP9(sK32,X0)) ) | $spl87),
  inference(superposition,[],[f2341,f866])).
fof(f9506,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X12,X13,X14,sK32,X15) | sP4(X14,sK32,X15) | sP3(X14,sK32,X15) | sP0(sK32,X12,X13,X14,X15) | sP1(X12,X13,X14,sK32,X15) | sP11(X12,X13,X14,sK32,X15) | sP2(X13,X12,X14,sK32,X15) | sP9(sK32,X15) | sP8(sK32,X15) | sP7(sK32,X15) | sP6(sK32,X15) | ~sP12(X12,X13,X14,sK32,X15)) ) | ($spl18 | $spl84)),
  inference(subsumption_resolution,[],[f9394,f1478])).
fof(f9394,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X12,X13,X14,sK32,X15) | sP4(X14,sK32,X15) | sP3(X14,sK32,X15) | sP0(sK32,X12,X13,X14,X15) | sP1(X12,X13,X14,sK32,X15) | sP11(X12,X13,X14,sK32,X15) | sP2(X13,X12,X14,sK32,X15) | sP10(sK32,X15) | sP9(sK32,X15) | sP8(sK32,X15) | sP7(sK32,X15) | sP6(sK32,X15) | ~sP12(X12,X13,X14,sK32,X15)) ) | $spl84),
  inference(superposition,[],[f842,f2338])).
fof(f9495,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X2,X3,X4,sK32,X5) | sP4(X4,sK32,X5) | sP3(X4,sK32,X5) | sP0(sK32,X2,X3,X4,X5) | sP1(X2,X3,X4,sK32,X5) | sP11(X2,X3,X4,sK32,X5) | sP2(X3,X2,X4,sK32,X5) | sP8(sK32,X5) | sP6(sK32,X5) | ~sP12(X2,X3,X4,sK32,X5)) ) | ($spl5 | $spl18 | $spl84 | $spl87)),
  inference(subsumption_resolution,[],[f9494,f2357])).
fof(f9494,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X2,X3,X4,sK32,X5) | sP4(X4,sK32,X5) | sP3(X4,sK32,X5) | sP0(sK32,X2,X3,X4,X5) | sP1(X2,X3,X4,sK32,X5) | sP11(X2,X3,X4,sK32,X5) | sP2(X3,X2,X4,sK32,X5) | sP8(sK32,X5) | sP7(sK32,X5) | sP6(sK32,X5) | ~sP12(X2,X3,X4,sK32,X5)) ) | ($spl18 | $spl84 | $spl87)),
  inference(subsumption_resolution,[],[f9493,f4322])).
fof(f9493,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X2,X3,X4,sK32,X5) | sP4(X4,sK32,X5) | sP3(X4,sK32,X5) | sP0(sK32,X2,X3,X4,X5) | sP1(X2,X3,X4,sK32,X5) | sP11(X2,X3,X4,sK32,X5) | sP2(X3,X2,X4,sK32,X5) | sP9(sK32,X5) | sP8(sK32,X5) | sP7(sK32,X5) | sP6(sK32,X5) | ~sP12(X2,X3,X4,sK32,X5)) ) | ($spl18 | $spl84)),
  inference(subsumption_resolution,[],[f9378,f1478])).
fof(f9378,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X2,X3,X4,sK32,X5) | sP4(X4,sK32,X5) | sP3(X4,sK32,X5) | sP0(sK32,X2,X3,X4,X5) | sP1(X2,X3,X4,sK32,X5) | sP11(X2,X3,X4,sK32,X5) | sP2(X3,X2,X4,sK32,X5) | sP10(sK32,X5) | sP9(sK32,X5) | sP8(sK32,X5) | sP7(sK32,X5) | sP6(sK32,X5) | ~sP12(X2,X3,X4,sK32,X5)) ) | $spl84),
  inference(superposition,[],[f2338,f842])).
fof(f8321,plain,(
  ( ! [X14,X15,X16] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X14) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X15) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X14)))) )),
  inference(superposition,[],[f1014,f1010])).
fof(f8387,plain,(
  ( ! [X30,X31,X29] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X29) | s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X30),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X30) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X31),s('type.ast.tctor',X29)))) )),
  inference(superposition,[],[f1014,f1010])).
fof(f7578,plain,(
  s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | $spl452),
  inference(cnf_transformation,[],[f7578_D])).
fof(f7578_D,plain,(
  s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) <=> ~$spl452),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl452])])).
fof(f7579,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X6,X7,X8,X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9)) ) | $spl454),
  inference(cnf_transformation,[],[f7579_D])).
fof(f7579_D,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X6,X7,X8,X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9)) ) <=> ~$spl454),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl454])])).
fof(f9355,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9)) ) | ($spl156 | $spl488)),
  inference(subsumption_resolution,[],[f9339,f3464])).
fof(f9339,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP10('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9)) ) | $spl488),
  inference(resolution,[],[f8935,f842])).
fof(f9357,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X6,X7,X8,X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9)) ) | $spl512),
  inference(cnf_transformation,[],[f9357_D])).
fof(f9357_D,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X6,X7,X8,X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9)) ) <=> ~$spl512),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl512])])).
fof(f9356,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9)) ) | ($spl21 | $spl110 | $spl156 | $spl488)),
  inference(subsumption_resolution,[],[f9355,f7772])).
fof(f7772,plain,(
  ( ! [X5] : (~sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X5)) ) | ($spl21 | $spl110)),
  inference(subsumption_resolution,[],[f7647,f1479])).
fof(f7647,plain,(
  ( ! [X5] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X5)) ) | $spl110),
  inference(superposition,[],[f3429,f874])).
fof(f9337,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1)))))) ) | $spl488),
  inference(resolution,[],[f8935,f3057])).
fof(f9336,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X45) | ~sP12(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP2(X47,X46,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP11(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP1(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X46,X47,X48,X49) | sP3(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP4(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP5(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49)) ) | $spl510),
  inference(cnf_transformation,[],[f9336_D])).
fof(f9336_D,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X45) | ~sP12(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP2(X47,X46,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP11(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP1(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X46,X47,X48,X49) | sP3(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP4(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP5(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49)) ) <=> ~$spl510),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl510])])).
fof(f4517,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X45) | sP5(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP4(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP3(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X46,X47,X48,X49) | sP1(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP11(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP2(X47,X46,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | ~sP12(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49)) )),
  inference(superposition,[],[f1010,f842])).
fof(f9335,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X44) | ~sP12(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP2(X47,X46,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP11(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP1(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X46,X47,X48,X49) | sP3(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP4(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP5(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49)) ) | $spl508),
  inference(cnf_transformation,[],[f9335_D])).
fof(f9335_D,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X44) | ~sP12(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP2(X47,X46,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP11(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP1(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X46,X47,X48,X49) | sP3(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP4(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP5(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49)) ) <=> ~$spl508),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl508])])).
fof(f5684,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X44) | sP5(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP4(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP3(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X46,X47,X48,X49) | sP1(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP11(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP2(X47,X46,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | ~sP12(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49)) )),
  inference(superposition,[],[f1009,f842])).
fof(f9334,plain,(
  ( ! [X134,X132,X136,X135,X133,X131] : (sP5(X133,X134,X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X131) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X132) | ~sP12(X133,X134,X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP2(X134,X133,X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP11(X133,X134,X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP1(X133,X134,X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X133,X134,X135,X136) | sP3(X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP4(X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136)) ) | $spl506),
  inference(cnf_transformation,[],[f9334_D])).
fof(f9334_D,plain,(
  ( ! [X134,X132,X136,X135,X133,X131] : (sP5(X133,X134,X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X131) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X132) | ~sP12(X133,X134,X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP2(X134,X133,X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP11(X133,X134,X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP1(X133,X134,X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X133,X134,X135,X136) | sP3(X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP4(X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136)) ) <=> ~$spl506),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl506])])).
fof(f7215,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X46) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X45) | sP5(X47,X48,X49,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X45),s('type.ast.tctor',X46)),X50) | sP4(X49,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X45),s('type.ast.tctor',X46)),X50) | sP3(X49,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X45),s('type.ast.tctor',X46)),X50) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X45),s('type.ast.tctor',X46)),X47,X48,X49,X50) | sP1(X47,X48,X49,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X45),s('type.ast.tctor',X46)),X50) | sP11(X47,X48,X49,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X45),s('type.ast.tctor',X46)),X50) | sP2(X48,X47,X49,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X45),s('type.ast.tctor',X46)),X50) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X45),s('type.ast.tctor',X46)),X50) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X45),s('type.ast.tctor',X46)),X50) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X45),s('type.ast.tctor',X46)),X50) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X45),s('type.ast.tctor',X46)),X50) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X45),s('type.ast.tctor',X46)),X50) | ~sP12(X47,X48,X49,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X45),s('type.ast.tctor',X46)),X50)) )),
  inference(superposition,[],[f1011,f842])).
fof(f7367,plain,(
  ( ! [X134,X132,X136,X135,X133,X131] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X133,X134,X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP4(X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP3(X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X133,X134,X135,X136) | sP1(X133,X134,X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP11(X133,X134,X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP2(X134,X133,X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | ~sP12(X133,X134,X135,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor',X132)),X136) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X132) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X131)) )),
  inference(superposition,[],[f842,f1011])).
fof(f9333,plain,(
  ( ! [X142,X140,X138,X143,X141,X139,X137] : (sP12(X139,X140,X141,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X137),s('type.ast.tctor',X138)),X142) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X137) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X138) | s('type.semanticPrimitives.v',X142) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X143))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X141),s('type.num.num',X143)))) ) | $spl504),
  inference(cnf_transformation,[],[f9333_D])).
fof(f9333_D,plain,(
  ( ! [X142,X140,X138,X143,X141,X139,X137] : (sP12(X139,X140,X141,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X137),s('type.ast.tctor',X138)),X142) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X137) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X138) | s('type.semanticPrimitives.v',X142) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X143))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X141),s('type.num.num',X143)))) ) <=> ~$spl504),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl504])])).
fof(f7368,plain,(
  ( ! [X142,X140,X138,X143,X141,X139,X137] : (s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword64_0') | sP12(X139,X140,X141,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X137),s('type.ast.tctor',X138)),X142) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X141),s('type.num.num',X143))) | s('type.semanticPrimitives.v',X142) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X143))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X138) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X137)) )),
  inference(superposition,[],[f854,f1011])).
fof(f8892,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X6,X7,X8,X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9)) ) | $spl486),
  inference(cnf_transformation,[],[f8892_D])).
fof(f8892_D,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X6,X7,X8,X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9)) ) <=> ~$spl486),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl486])])).
fof(f9332,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9)) ) | ($spl21 | $spl110 | $spl156)),
  inference(subsumption_resolution,[],[f9331,f7772])).
fof(f9331,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9)) ) | ($spl110 | $spl156)),
  inference(subsumption_resolution,[],[f7648,f3464])).
fof(f7648,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP10('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9)) ) | $spl110),
  inference(superposition,[],[f3429,f842])).
fof(f9330,plain,(
  ( ! [X24,X23,X25,X22] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP4(X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP3(X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X22,X23,X24,X25) | sP1(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP11(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP2(X23,X22,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | ~sP12(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25)) ) | ($spl21 | $spl110 | $spl156)),
  inference(subsumption_resolution,[],[f9329,f7772])).
fof(f9329,plain,(
  ( ! [X24,X23,X25,X22] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP4(X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP3(X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X22,X23,X24,X25) | sP1(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP11(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP2(X23,X22,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | ~sP12(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25)) ) | ($spl110 | $spl156)),
  inference(subsumption_resolution,[],[f7668,f3464])).
fof(f7668,plain,(
  ( ! [X24,X23,X25,X22] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP4(X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP3(X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X22,X23,X24,X25) | sP1(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP11(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP2(X23,X22,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP10('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25) | ~sP12(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X25)) ) | $spl110),
  inference(superposition,[],[f842,f3429])).
fof(f9328,plain,(
  ( ! [X30,X28,X26,X29,X27] : (sP12(X26,X27,X28,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X29) | s('type.semanticPrimitives.v',X29) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X30))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X28),s('type.num.num',X30)))) ) | $spl502),
  inference(cnf_transformation,[],[f9328_D])).
fof(f9328_D,plain,(
  ( ! [X30,X28,X26,X29,X27] : (sP12(X26,X27,X28,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X29) | s('type.semanticPrimitives.v',X29) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X30))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X28),s('type.num.num',X30)))) ) <=> ~$spl502),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl502])])).
fof(f7669,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword64_0') | sP12(X26,X27,X28,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X29) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X28),s('type.num.num',X30))) | s('type.semanticPrimitives.v',X29) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X30)))) ) | $spl110),
  inference(superposition,[],[f854,f3429])).
fof(f7971,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X45) | sP5(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP4(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP3(X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP0('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X46,X47,X48,X49) | sP1(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP11(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP2(X47,X46,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP8('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP7('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | sP6('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49) | ~sP12(X46,X47,X48,'const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X45)),X49)) ) | $spl110),
  inference(superposition,[],[f7630,f842])).
fof(f7630,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X0)) ) | $spl110),
  inference(backward_demodulation,[],[f3429,f1004])).
fof(f8958,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X6,X7,X8,X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9)) ) | $spl492),
  inference(cnf_transformation,[],[f8958_D])).
fof(f8958_D,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X6,X7,X8,X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9)) ) <=> ~$spl492),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl492])])).
fof(f9326,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9)) ) | ($spl21 | $spl114 | $spl156 | $spl169)),
  inference(subsumption_resolution,[],[f9325,f8138])).
fof(f8138,plain,(
  ( ! [X5] : (~sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X5)) ) | ($spl21 | $spl114)),
  inference(subsumption_resolution,[],[f8013,f1479])).
fof(f8013,plain,(
  ( ! [X5] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X5)) ) | $spl114),
  inference(superposition,[],[f3432,f874])).
fof(f9325,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9)) ) | ($spl114 | $spl156 | $spl169)),
  inference(subsumption_resolution,[],[f9324,f8137])).
fof(f8137,plain,(
  ( ! [X4] : (~sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X4)) ) | ($spl114 | $spl169)),
  inference(subsumption_resolution,[],[f8012,f3863])).
fof(f9324,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9)) ) | ($spl114 | $spl156)),
  inference(subsumption_resolution,[],[f8014,f3464])).
fof(f8014,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP10('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9)) ) | $spl114),
  inference(superposition,[],[f3432,f842])).
fof(f9323,plain,(
  ( ! [X24,X23,X25,X22] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP4(X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP3(X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X22,X23,X24,X25) | sP1(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP11(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP2(X23,X22,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | ~sP12(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25)) ) | ($spl21 | $spl114 | $spl156 | $spl169)),
  inference(subsumption_resolution,[],[f9322,f8138])).
fof(f9322,plain,(
  ( ! [X24,X23,X25,X22] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP4(X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP3(X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X22,X23,X24,X25) | sP1(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP11(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP2(X23,X22,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | ~sP12(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25)) ) | ($spl114 | $spl156 | $spl169)),
  inference(subsumption_resolution,[],[f9321,f8137])).
fof(f9321,plain,(
  ( ! [X24,X23,X25,X22] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP4(X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP3(X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X22,X23,X24,X25) | sP1(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP11(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP2(X23,X22,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | ~sP12(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25)) ) | ($spl114 | $spl156)),
  inference(subsumption_resolution,[],[f8033,f3464])).
fof(f8033,plain,(
  ( ! [X24,X23,X25,X22] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP4(X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP3(X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X22,X23,X24,X25) | sP1(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP11(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP2(X23,X22,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP10('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25) | ~sP12(X22,X23,X24,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X25)) ) | $spl114),
  inference(superposition,[],[f842,f3432])).
fof(f9320,plain,(
  ( ! [X30,X28,X26,X29,X27] : (sP12(X26,X27,X28,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X29) | s('type.semanticPrimitives.v',X29) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X30))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X28),s('type.num.num',X30)))) ) | $spl498),
  inference(cnf_transformation,[],[f9320_D])).
fof(f9320_D,plain,(
  ( ! [X30,X28,X26,X29,X27] : (sP12(X26,X27,X28,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X29) | s('type.semanticPrimitives.v',X29) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X30))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X28),s('type.num.num',X30)))) ) <=> ~$spl498),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl498])])).
fof(f8034,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword64_0') | sP12(X26,X27,X28,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X29) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X28),s('type.num.num',X30))) | s('type.semanticPrimitives.v',X29) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X30)))) ) | $spl114),
  inference(superposition,[],[f854,f3432])).
fof(f9319,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9)) ) | ($spl21 | $spl114 | $spl156 | $spl169)),
  inference(subsumption_resolution,[],[f8255,f8137])).
fof(f8255,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9)) ) | ($spl21 | $spl114 | $spl156)),
  inference(forward_demodulation,[],[f8254,f3432])).
fof(f8254,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9)) ) | ($spl21 | $spl114 | $spl156)),
  inference(subsumption_resolution,[],[f8239,f3464])).
fof(f8239,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP10('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9)) ) | ($spl21 | $spl114)),
  inference(resolution,[],[f8138,f842])).
fof(f3466,plain,(
  ( ! [X492,X494,X490,X493,X489,X491] : (~sP5(X493,X492,X491,X490,X489) | ~sP10(sK44(X489,X490,X491,X492,X493),X494)) ) | $spl160),
  inference(cnf_transformation,[],[f3466_D])).
fof(f3466_D,plain,(
  ( ! [X492,X494,X490,X493,X489,X491] : (~sP5(X493,X492,X491,X490,X489) | ~sP10(sK44(X489,X490,X491,X492,X493),X494)) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f3440,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | $spl122),
  inference(cnf_transformation,[],[f3440_D])).
fof(f3440_D,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f9193,plain,(
  ( ! [X478,X480,X482,X477,X479,X481] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | ~sP5(X481,X480,X479,X478,X477) | ~sP10(sK44(X477,X478,X479,X480,X481),X482)) )),
  inference(superposition,[],[f883,f862])).
fof(f883,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK44(X4,X3,X2,X1,X0))))) | ~sP5(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f636])).
fof(f3427,plain,(
  ( ! [X26,X24,X25] : (~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X24),s('type.ast.tctor',X25)),X26) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X24) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X25)) ) | $spl108),
  inference(cnf_transformation,[],[f3427_D])).
fof(f3427_D,plain,(
  ( ! [X26,X24,X25] : (~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X24),s('type.ast.tctor',X25)),X26) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X24) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X25)) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f3864,plain,(
  s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | $spl168),
  inference(cnf_transformation,[],[f3864_D])).
fof(f3864_D,plain,(
  s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f9165,plain,(
  ( ! [X358,X360,X359] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X359) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X358) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X358),s('type.ast.tctor',X359)),X360)) )),
  inference(superposition,[],[f1014,f862])).
fof(f3863,plain,(
  s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword64_0') | $spl169),
  inference(cnf_transformation,[],[f3863_D])).
fof(f3863_D,plain,(
  s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword64_0') <=> ~$spl169),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl169])])).
fof(f9164,plain,(
  ( ! [X356,X357,X355] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X356) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X355),s('type.ast.tctor',X356)),X357)) )),
  inference(superposition,[],[f1013,f862])).
fof(f3459,plain,(
  ( ! [X337,X340,X338] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X337) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X337),s('type.ast.tctor',X338)),X340)) ) | $spl148),
  inference(cnf_transformation,[],[f3459_D])).
fof(f3459_D,plain,(
  ( ! [X337,X340,X338] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X337) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X337),s('type.ast.tctor',X338)),X340)) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f9163,plain,(
  ( ! [X352,X354,X353] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X352) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X352),s('type.ast.tctor',X353)),X354)) )),
  inference(superposition,[],[f1012,f862])).
fof(f9160,plain,(
  ( ! [X341,X343,X340,X342] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X342))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X340) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X340),s('type.ast.tctor',X341)),X343)) )),
  inference(superposition,[],[f1000,f862])).
fof(f3456,plain,(
  ( ! [X111,X109,X112,X110,X108,X113] : (sP3(X109,X110,X111) | ~sP10(X108,X113) | s('type.semanticPrimitives.v',X111) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X112))) | s('type.ast.t',X110) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X108))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X108))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X109),s('type.num.num',X112)))) ) | $spl146),
  inference(cnf_transformation,[],[f3456_D])).
fof(f3456_D,plain,(
  ( ! [X111,X109,X112,X110,X108,X113] : (sP3(X109,X110,X111) | ~sP10(X108,X113) | s('type.semanticPrimitives.v',X111) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X112))) | s('type.ast.t',X110) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X108))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X108))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X109),s('type.num.num',X112)))) ) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f9132,plain,(
  ( ! [X111,X116,X114,X112,X115,X113] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | sP3(X112,X113,X114) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X111))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X112),s('type.num.num',X115))) | s('type.ast.t',X113) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X111))) | s('type.semanticPrimitives.v',X114) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X115))) | ~sP10(X111,X116)) )),
  inference(superposition,[],[f895,f862])).
fof(f3455,plain,(
  ( ! [X101,X99,X97,X100,X98,X96] : (sP4(X97,X98,X99) | ~sP10(X96,X101) | s('type.semanticPrimitives.v',X99) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X100))) | s('type.ast.t',X98) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X96),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X96))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X97),s('type.num.num',X100)))) ) | $spl144),
  inference(cnf_transformation,[],[f3455_D])).
fof(f3455_D,plain,(
  ( ! [X101,X99,X97,X100,X98,X96] : (sP4(X97,X98,X99) | ~sP10(X96,X101) | s('type.semanticPrimitives.v',X99) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X100))) | s('type.ast.t',X98) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X96),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X96))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X97),s('type.num.num',X100)))) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f9130,plain,(
  ( ! [X103,X101,X99,X102,X100,X104] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | sP4(X100,X101,X102) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X99))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X100),s('type.num.num',X103))) | s('type.ast.t',X101) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X99),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.semanticPrimitives.v',X102) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X103))) | ~sP10(X99,X104)) )),
  inference(superposition,[],[f890,f862])).
fof(f3454,plain,(
  ( ! [X70,X76,X74,X72,X71,X77,X75,X73] : (sP5(X71,X72,X73,X74,X75) | ~sP10(X70,X77) | s('type.semanticPrimitives.v',X75) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X76))) | s('type.ast.t',X74) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X70),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X71),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X72),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X73))),s('type.ast.t',X70))),s('type.list.list'('type.semanticPrimitives.v'),X76))))) ) | $spl142),
  inference(cnf_transformation,[],[f3454_D])).
fof(f3454_D,plain,(
  ( ! [X70,X76,X74,X72,X71,X77,X75,X73] : (sP5(X71,X72,X73,X74,X75) | ~sP10(X70,X77) | s('type.semanticPrimitives.v',X75) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X76))) | s('type.ast.t',X74) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X70),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X71),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X72),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X73))),s('type.ast.t',X70))),s('type.list.list'('type.semanticPrimitives.v'),X76))))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f9126,plain,(
  ( ! [X80,X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | sP5(X74,X75,X76,X77,X78) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X74),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X75),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X76))),s('type.ast.t',X73))),s('type.list.list'('type.semanticPrimitives.v'),X79)))) | s('type.ast.t',X77) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X73),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | s('type.semanticPrimitives.v',X78) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X79))) | ~sP10(X73,X80)) )),
  inference(superposition,[],[f885,f862])).
fof(f3452,plain,(
  ( ! [X30,X28,X26,X24,X29,X27,X25] : (sP12(X25,X26,X27,X24,X28) | ~sP10(X24,X30) | s('type.semanticPrimitives.v',X28) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X29))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X27),s('type.num.num',X29)))) ) | $spl140),
  inference(cnf_transformation,[],[f3452_D])).
fof(f3452_D,plain,(
  ( ! [X30,X28,X26,X24,X29,X27,X25] : (sP12(X25,X26,X27,X24,X28) | ~sP10(X24,X30) | s('type.semanticPrimitives.v',X28) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X29))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X27),s('type.num.num',X29)))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f9118,plain,(
  ( ! [X30,X28,X26,X24,X29,X27,X25] : (s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword64_0') | sP12(X25,X26,X27,X24,X28) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X27),s('type.num.num',X29))) | s('type.semanticPrimitives.v',X28) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X29))) | ~sP10(X24,X30)) )),
  inference(superposition,[],[f854,f862])).
fof(f9307,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (~sP10(X7,X8) | ~sP12(X9,X10,X11,X7,X12) | sP6(X7,X12) | sP8(X7,X12) | sP10(X7,X12) | sP2(X10,X9,X11,X7,X12) | sP11(X9,X10,X11,X7,X12) | sP1(X9,X10,X11,X7,X12) | sP0(X7,X9,X10,X11,X12) | sP3(X11,X7,X12) | sP4(X11,X7,X12) | sP5(X9,X10,X11,X7,X12)) ) | $spl496),
  inference(cnf_transformation,[],[f9307_D])).
fof(f9307_D,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (~sP10(X7,X8) | ~sP12(X9,X10,X11,X7,X12) | sP6(X7,X12) | sP8(X7,X12) | sP10(X7,X12) | sP2(X10,X9,X11,X7,X12) | sP11(X9,X10,X11,X7,X12) | sP1(X9,X10,X11,X7,X12) | sP0(X7,X9,X10,X11,X12) | sP3(X11,X7,X12) | sP4(X11,X7,X12) | sP5(X9,X10,X11,X7,X12)) ) <=> ~$spl496),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl496])])).
fof(f9316,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X19,X20,X21,X18,X22) | sP4(X21,X18,X22) | sP3(X21,X18,X22) | sP0(X18,X19,X20,X21,X22) | sP1(X19,X20,X21,X18,X22) | sP11(X19,X20,X21,X18,X22) | sP2(X20,X19,X21,X18,X22) | sP10(X18,X22) | sP8(X18,X22) | sP6(X18,X22) | ~sP12(X19,X20,X21,X18,X22) | ~sP10(X18,X23)) ) | ($spl21 | $spl166)),
  inference(subsumption_resolution,[],[f9315,f3862])).
fof(f9315,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X19,X20,X21,X18,X22) | sP4(X21,X18,X22) | sP3(X21,X18,X22) | sP0(X18,X19,X20,X21,X22) | sP1(X19,X20,X21,X18,X22) | sP11(X19,X20,X21,X18,X22) | sP2(X20,X19,X21,X18,X22) | sP10(X18,X22) | sP9(X18,X22) | sP8(X18,X22) | sP6(X18,X22) | ~sP12(X19,X20,X21,X18,X22) | ~sP10(X18,X23)) ) | $spl21),
  inference(subsumption_resolution,[],[f9117,f3425])).
fof(f9117,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X19,X20,X21,X18,X22) | sP4(X21,X18,X22) | sP3(X21,X18,X22) | sP0(X18,X19,X20,X21,X22) | sP1(X19,X20,X21,X18,X22) | sP11(X19,X20,X21,X18,X22) | sP2(X20,X19,X21,X18,X22) | sP10(X18,X22) | sP9(X18,X22) | sP8(X18,X22) | sP7(X18,X22) | sP6(X18,X22) | ~sP12(X19,X20,X21,X18,X22) | ~sP10(X18,X23)) )),
  inference(superposition,[],[f842,f862])).
fof(f3449,plain,(
  ( ! [X94,X99,X97,X95,X98,X96] : (s('type.ast.t',X95) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X94))) | ~sP10(X94,X99) | s('type.semanticPrimitives.v',X97) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X98))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tword64_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X96),s('type.num.num',X98))) | sP3(X96,X95,X97)) ) | $spl138),
  inference(cnf_transformation,[],[f3449_D])).
fof(f3449_D,plain,(
  ( ! [X94,X99,X97,X95,X98,X96] : (s('type.ast.t',X95) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X94))) | ~sP10(X94,X99) | s('type.semanticPrimitives.v',X97) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X98))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tword64_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X96),s('type.num.num',X98))) | sP3(X96,X95,X97)) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f9026,plain,(
  ( ! [X101,X99,X97,X102,X100,X98] : (s('type.ast.t',X98) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X97))) | sP3(X99,X98,X100) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tword64_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X99),s('type.num.num',X101))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | s('type.semanticPrimitives.v',X100) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X101))) | ~sP10(X97,X102)) )),
  inference(superposition,[],[f895,f862])).
fof(f3448,plain,(
  ( ! [X92,X90,X91,X89] : (sP3(X89,X90,X91) | s('type.semanticPrimitives.v',X91) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X92))) | s('type.ast.t',X90) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t','const.ast.Tword64_0'))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tword64_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X89),s('type.num.num',X92)))) ) | $spl136),
  inference(cnf_transformation,[],[f3448_D])).
fof(f3448_D,plain,(
  ( ! [X92,X90,X91,X89] : (sP3(X89,X90,X91) | s('type.semanticPrimitives.v',X91) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X92))) | s('type.ast.t',X90) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t','const.ast.Tword64_0'))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tword64_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X89),s('type.num.num',X92)))) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f3445,plain,(
  ( ! [X60,X67] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X60)))) | ~sP10(X60,X67)) ) | $spl130),
  inference(cnf_transformation,[],[f3445_D])).
fof(f3445_D,plain,(
  ( ! [X60,X67] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X60)))) | ~sP10(X60,X67)) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f9025,plain,(
  ( ! [X94,X92,X95,X93,X91,X96] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X91)))) | sP3(X92,X93,X94) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tword64_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X92),s('type.num.num',X95))) | s('type.ast.t',X93) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t','const.ast.Tword64_0'))) | s('type.semanticPrimitives.v',X94) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X95))) | ~sP10(X91,X96)) )),
  inference(superposition,[],[f895,f862])).
fof(f3447,plain,(
  ( ! [X80,X83,X81,X82] : (sP4(X80,X81,X82) | s('type.semanticPrimitives.v',X82) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X83))) | s('type.ast.t',X81) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tword64_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X80),s('type.num.num',X83)))) ) | $spl134),
  inference(cnf_transformation,[],[f3447_D])).
fof(f3447_D,plain,(
  ( ! [X80,X83,X81,X82] : (sP4(X80,X81,X82) | s('type.semanticPrimitives.v',X82) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X83))) | s('type.ast.t',X81) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tword64_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X80),s('type.num.num',X83)))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f9024,plain,(
  ( ! [X87,X85,X83,X86,X84,X82] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X82)))) | sP4(X83,X84,X85) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tword64_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X83),s('type.num.num',X86))) | s('type.ast.t',X84) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.semanticPrimitives.v',X85) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X86))) | ~sP10(X82,X87)) )),
  inference(superposition,[],[f890,f862])).
fof(f3446,plain,(
  ( ! [X76,X74,X72,X71,X75,X73] : (s('type.ast.t',X72) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X71),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | ~sP10(X71,X76) | s('type.semanticPrimitives.v',X74) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X75))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tword64_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X73),s('type.num.num',X75))) | sP4(X73,X72,X74)) ) | $spl132),
  inference(cnf_transformation,[],[f3446_D])).
fof(f3446_D,plain,(
  ( ! [X76,X74,X72,X71,X75,X73] : (s('type.ast.t',X72) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X71),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | ~sP10(X71,X76) | s('type.semanticPrimitives.v',X74) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X75))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tword64_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X73),s('type.num.num',X75))) | sP4(X73,X72,X74)) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f9023,plain,(
  ( ! [X78,X76,X74,X79,X77,X75] : (s('type.ast.t',X75) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X74),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | sP4(X76,X75,X77) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tword64_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X76),s('type.num.num',X78))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | s('type.semanticPrimitives.v',X77) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X78))) | ~sP10(X74,X79)) )),
  inference(superposition,[],[f890,f862])).
fof(f3444,plain,(
  ( ! [X61,X66,X64,X62,X65,X63] : (sP5(X61,X62,X63,X64,X65) | s('type.semanticPrimitives.v',X65) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X66))) | s('type.ast.t',X64) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X61),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X62),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X63))),s('type.ast.t','const.ast.Tword64_0'))),s('type.list.list'('type.semanticPrimitives.v'),X66))))) ) | $spl128),
  inference(cnf_transformation,[],[f3444_D])).
fof(f3444_D,plain,(
  ( ! [X61,X66,X64,X62,X65,X63] : (sP5(X61,X62,X63,X64,X65) | s('type.semanticPrimitives.v',X65) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X66))) | s('type.ast.t',X64) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X61),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X62),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X63))),s('type.ast.t','const.ast.Tword64_0'))),s('type.list.list'('type.semanticPrimitives.v'),X66))))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f9022,plain,(
  ( ! [X70,X68,X66,X64,X69,X67,X65,X63] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X63)))) | sP5(X64,X65,X66,X67,X68) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X64),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X65),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X66))),s('type.ast.t','const.ast.Tword64_0'))),s('type.list.list'('type.semanticPrimitives.v'),X69)))) | s('type.ast.t',X67) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | s('type.semanticPrimitives.v',X68) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X69))) | ~sP10(X63,X70)) )),
  inference(superposition,[],[f885,f862])).
fof(f3443,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51] : (s('type.ast.t',X51) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X50),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~sP10(X50,X57) | s('type.semanticPrimitives.v',X55) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X56))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X52),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X53),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X54))),s('type.ast.t','const.ast.Tword64_0'))),s('type.list.list'('type.semanticPrimitives.v'),X56)))) | sP5(X52,X53,X54,X51,X55)) ) | $spl126),
  inference(cnf_transformation,[],[f3443_D])).
fof(f3443_D,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51] : (s('type.ast.t',X51) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X50),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~sP10(X50,X57) | s('type.semanticPrimitives.v',X55) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X56))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X52),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X53),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X54))),s('type.ast.t','const.ast.Tword64_0'))),s('type.list.list'('type.semanticPrimitives.v'),X56)))) | sP5(X52,X53,X54,X51,X55)) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f9021,plain,(
  ( ! [X59,X57,X54,X60,X58,X56,X55,X53] : (s('type.ast.t',X54) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X53),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | sP5(X55,X56,X57,X54,X58) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X55),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X56),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X57))),s('type.ast.t','const.ast.Tword64_0'))),s('type.list.list'('type.semanticPrimitives.v'),X59)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | s('type.semanticPrimitives.v',X58) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X59))) | ~sP10(X53,X60)) )),
  inference(superposition,[],[f885,f862])).
fof(f3442,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42,X49] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X43),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X44),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X45))),s('type.ast.t',X42))),s('type.list.list'('type.semanticPrimitives.v'),X46)))) | ~sP10(X42,X49) | s('type.semanticPrimitives.v',X48) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X46))) | s('type.ast.t',X47) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | sP5(X43,X44,X45,X47,X48)) ) | $spl124),
  inference(cnf_transformation,[],[f3442_D])).
fof(f3442_D,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42,X49] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X43),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X44),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X45))),s('type.ast.t',X42))),s('type.list.list'('type.semanticPrimitives.v'),X46)))) | ~sP10(X42,X49) | s('type.semanticPrimitives.v',X48) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X46))) | s('type.ast.t',X47) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | sP5(X43,X44,X45,X47,X48)) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f9020,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X51,X49] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X46),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X47),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X48))),s('type.ast.t',X45))),s('type.list.list'('type.semanticPrimitives.v'),X49)))) | sP5(X46,X47,X48,X50,X51) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | s('type.ast.t',X50) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | s('type.semanticPrimitives.v',X51) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X49))) | ~sP10(X45,X52)) )),
  inference(superposition,[],[f885,f862])).
fof(f3435,plain,(
  ( ! [X14,X19] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X14) | ~sP10(X14,X19)) ) | $spl118),
  inference(cnf_transformation,[],[f3435_D])).
fof(f3435_D,plain,(
  ( ! [X14,X19] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X14) | ~sP10(X14,X19)) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f9312,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X41) | s('type.semanticPrimitives.v',X42) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X43))))) | ~sP10(X41,X44)) ) | $spl21),
  inference(subsumption_resolution,[],[f9311,f3017])).
fof(f3017,plain,(
  ( ! [X0] : (~sP7('const.ast.Tword64_0',X0)) ) | $spl21),
  inference(trivial_inequality_removal,[],[f3005])).
fof(f3005,plain,(
  ( ! [X0] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tchar_0') | ~sP7('const.ast.Tword64_0',X0)) ) | $spl21),
  inference(superposition,[],[f1479,f874])).
fof(f9311,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X41) | sP7('const.ast.Tword64_0',X42) | s('type.semanticPrimitives.v',X42) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X43))))) | ~sP10(X41,X44)) )),
  inference(subsumption_resolution,[],[f9019,f1336])).
fof(f9019,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X41) | sP7('const.ast.Tword64_0',X42) | ~p(s(bool,'T_0')) | s('type.semanticPrimitives.v',X42) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X43))))) | ~sP10(X41,X44)) )),
  inference(superposition,[],[f876,f862])).
fof(f9304,plain,(
  ( ! [X14,X13] : (~sP10(X13,X14)) ) | $spl494),
  inference(cnf_transformation,[],[f9304_D])).
fof(f9304_D,plain,(
  ( ! [X14,X13] : (~sP10(X13,X14)) ) <=> ~$spl494),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl494])])).
fof(f3924,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,'const.ast.Tword64_0',X7) | ~sP12(X4,X5,X6,'const.ast.Tword64_0',X7) | sP6('const.ast.Tword64_0',X7) | sP8('const.ast.Tword64_0',X7) | sP10('const.ast.Tword64_0',X7) | sP2(X5,X4,X6,'const.ast.Tword64_0',X7) | sP11(X4,X5,X6,'const.ast.Tword64_0',X7) | sP1(X4,X5,X6,'const.ast.Tword64_0',X7) | sP0('const.ast.Tword64_0',X4,X5,X6,X7) | sP3(X6,'const.ast.Tword64_0',X7) | sP4(X6,'const.ast.Tword64_0',X7)) ) | $spl238),
  inference(cnf_transformation,[],[f3924_D])).
fof(f3924_D,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,'const.ast.Tword64_0',X7) | ~sP12(X4,X5,X6,'const.ast.Tword64_0',X7) | sP6('const.ast.Tword64_0',X7) | sP8('const.ast.Tword64_0',X7) | sP10('const.ast.Tword64_0',X7) | sP2(X5,X4,X6,'const.ast.Tword64_0',X7) | sP11(X4,X5,X6,'const.ast.Tword64_0',X7) | sP1(X4,X5,X6,'const.ast.Tword64_0',X7) | sP0('const.ast.Tword64_0',X4,X5,X6,X7) | sP3(X6,'const.ast.Tword64_0',X7) | sP4(X6,'const.ast.Tword64_0',X7)) ) <=> ~$spl238),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl238])])).
fof(f9310,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (sP5(X21,X22,X23,'const.ast.Tword64_0',X24) | sP4(X23,'const.ast.Tword64_0',X24) | sP3(X23,'const.ast.Tword64_0',X24) | sP0('const.ast.Tword64_0',X21,X22,X23,X24) | sP1(X21,X22,X23,'const.ast.Tword64_0',X24) | sP11(X21,X22,X23,'const.ast.Tword64_0',X24) | sP2(X22,X21,X23,'const.ast.Tword64_0',X24) | sP10('const.ast.Tword64_0',X24) | sP8('const.ast.Tword64_0',X24) | sP6('const.ast.Tword64_0',X24) | ~sP12(X21,X22,X23,'const.ast.Tword64_0',X24) | ~sP10(X20,X25)) ) | ($spl21 | $spl120 | $spl184)),
  inference(subsumption_resolution,[],[f9309,f3017])).
fof(f9309,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (sP5(X21,X22,X23,'const.ast.Tword64_0',X24) | sP4(X23,'const.ast.Tword64_0',X24) | sP3(X23,'const.ast.Tword64_0',X24) | sP0('const.ast.Tword64_0',X21,X22,X23,X24) | sP1(X21,X22,X23,'const.ast.Tword64_0',X24) | sP11(X21,X22,X23,'const.ast.Tword64_0',X24) | sP2(X22,X21,X23,'const.ast.Tword64_0',X24) | sP10('const.ast.Tword64_0',X24) | sP8('const.ast.Tword64_0',X24) | sP7('const.ast.Tword64_0',X24) | sP6('const.ast.Tword64_0',X24) | ~sP12(X21,X22,X23,'const.ast.Tword64_0',X24) | ~sP10(X20,X25)) ) | ($spl120 | $spl184)),
  inference(subsumption_resolution,[],[f9308,f3877])).
fof(f9308,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (sP5(X21,X22,X23,'const.ast.Tword64_0',X24) | sP4(X23,'const.ast.Tword64_0',X24) | sP3(X23,'const.ast.Tword64_0',X24) | sP0('const.ast.Tword64_0',X21,X22,X23,X24) | sP1(X21,X22,X23,'const.ast.Tword64_0',X24) | sP11(X21,X22,X23,'const.ast.Tword64_0',X24) | sP2(X22,X21,X23,'const.ast.Tword64_0',X24) | sP10('const.ast.Tword64_0',X24) | sP9('const.ast.Tword64_0',X24) | sP8('const.ast.Tword64_0',X24) | sP7('const.ast.Tword64_0',X24) | sP6('const.ast.Tword64_0',X24) | ~sP12(X21,X22,X23,'const.ast.Tword64_0',X24) | ~sP10(X20,X25)) ) | $spl120),
  inference(subsumption_resolution,[],[f9015,f3437])).
fof(f9015,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X20) | sP5(X21,X22,X23,'const.ast.Tword64_0',X24) | sP4(X23,'const.ast.Tword64_0',X24) | sP3(X23,'const.ast.Tword64_0',X24) | sP0('const.ast.Tword64_0',X21,X22,X23,X24) | sP1(X21,X22,X23,'const.ast.Tword64_0',X24) | sP11(X21,X22,X23,'const.ast.Tword64_0',X24) | sP2(X22,X21,X23,'const.ast.Tword64_0',X24) | sP10('const.ast.Tword64_0',X24) | sP9('const.ast.Tword64_0',X24) | sP8('const.ast.Tword64_0',X24) | sP7('const.ast.Tword64_0',X24) | sP6('const.ast.Tword64_0',X24) | ~sP12(X21,X22,X23,'const.ast.Tword64_0',X24) | ~sP10(X20,X25)) )),
  inference(superposition,[],[f842,f862])).
fof(f3434,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X15))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tword64_0',X16,X17,X18,X15)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X18)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X18),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X16),s('type.semanticPrimitives.v',X15),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))) ) | $spl116),
  inference(cnf_transformation,[],[f3434_D])).
fof(f3434_D,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X15))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tword64_0',X16,X17,X18,X15)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X18)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X18),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X16),s('type.semanticPrimitives.v',X15),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f9014,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X14) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X15))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tword64_0',X16,X17,X18,X15)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X18),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X16),s('type.semanticPrimitives.v',X15),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X18)))) | ~sP10(X14,X19)) )),
  inference(superposition,[],[f840,f862])).
fof(f8985,plain,(
  ( ! [X28,X29,X27] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X27),s('type.ast.tctor',X28)),X29) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X28) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X27)) )),
  inference(superposition,[],[f862,f1014])).
fof(f9306,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP10(X7,X8) | sP5(X9,X10,X11,X7,X12) | sP4(X11,X7,X12) | sP3(X11,X7,X12) | sP0(X7,X9,X10,X11,X12) | sP1(X9,X10,X11,X7,X12) | sP11(X9,X10,X11,X7,X12) | sP2(X10,X9,X11,X7,X12) | sP10(X7,X12) | sP8(X7,X12) | sP6(X7,X12) | ~sP12(X9,X10,X11,X7,X12)) ) | ($spl21 | $spl166)),
  inference(subsumption_resolution,[],[f9305,f3862])).
fof(f9305,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP10(X7,X8) | sP5(X9,X10,X11,X7,X12) | sP4(X11,X7,X12) | sP3(X11,X7,X12) | sP0(X7,X9,X10,X11,X12) | sP1(X9,X10,X11,X7,X12) | sP11(X9,X10,X11,X7,X12) | sP2(X10,X9,X11,X7,X12) | sP10(X7,X12) | sP9(X7,X12) | sP8(X7,X12) | sP6(X7,X12) | ~sP12(X9,X10,X11,X7,X12)) ) | $spl21),
  inference(subsumption_resolution,[],[f8981,f3425])).
fof(f8981,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP10(X7,X8) | sP5(X9,X10,X11,X7,X12) | sP4(X11,X7,X12) | sP3(X11,X7,X12) | sP0(X7,X9,X10,X11,X12) | sP1(X9,X10,X11,X7,X12) | sP11(X9,X10,X11,X7,X12) | sP2(X10,X9,X11,X7,X12) | sP10(X7,X12) | sP9(X7,X12) | sP8(X7,X12) | sP7(X7,X12) | sP6(X7,X12) | ~sP12(X9,X10,X11,X7,X12)) )),
  inference(superposition,[],[f862,f842])).
fof(f9303,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (~sP10(X13,X14) | sP5(X15,X16,X17,'const.ast.Tword64_0',X18) | sP4(X17,'const.ast.Tword64_0',X18) | sP3(X17,'const.ast.Tword64_0',X18) | sP0('const.ast.Tword64_0',X15,X16,X17,X18) | sP1(X15,X16,X17,'const.ast.Tword64_0',X18) | sP11(X15,X16,X17,'const.ast.Tword64_0',X18) | sP2(X16,X15,X17,'const.ast.Tword64_0',X18) | sP10('const.ast.Tword64_0',X18) | sP8('const.ast.Tword64_0',X18) | sP6('const.ast.Tword64_0',X18) | ~sP12(X15,X16,X17,'const.ast.Tword64_0',X18)) ) | ($spl21 | $spl120 | $spl184)),
  inference(subsumption_resolution,[],[f9302,f3017])).
fof(f9302,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (~sP10(X13,X14) | sP5(X15,X16,X17,'const.ast.Tword64_0',X18) | sP4(X17,'const.ast.Tword64_0',X18) | sP3(X17,'const.ast.Tword64_0',X18) | sP0('const.ast.Tword64_0',X15,X16,X17,X18) | sP1(X15,X16,X17,'const.ast.Tword64_0',X18) | sP11(X15,X16,X17,'const.ast.Tword64_0',X18) | sP2(X16,X15,X17,'const.ast.Tword64_0',X18) | sP10('const.ast.Tword64_0',X18) | sP8('const.ast.Tword64_0',X18) | sP7('const.ast.Tword64_0',X18) | sP6('const.ast.Tword64_0',X18) | ~sP12(X15,X16,X17,'const.ast.Tword64_0',X18)) ) | ($spl120 | $spl184)),
  inference(subsumption_resolution,[],[f9301,f3877])).
fof(f9301,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (~sP10(X13,X14) | sP5(X15,X16,X17,'const.ast.Tword64_0',X18) | sP4(X17,'const.ast.Tword64_0',X18) | sP3(X17,'const.ast.Tword64_0',X18) | sP0('const.ast.Tword64_0',X15,X16,X17,X18) | sP1(X15,X16,X17,'const.ast.Tword64_0',X18) | sP11(X15,X16,X17,'const.ast.Tword64_0',X18) | sP2(X16,X15,X17,'const.ast.Tword64_0',X18) | sP10('const.ast.Tword64_0',X18) | sP9('const.ast.Tword64_0',X18) | sP8('const.ast.Tword64_0',X18) | sP7('const.ast.Tword64_0',X18) | sP6('const.ast.Tword64_0',X18) | ~sP12(X15,X16,X17,'const.ast.Tword64_0',X18)) ) | $spl120),
  inference(subsumption_resolution,[],[f8968,f3437])).
fof(f8968,plain,(
  ( ! [X14,X17,X15,X13,X18,X16] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X13) | ~sP10(X13,X14) | sP5(X15,X16,X17,'const.ast.Tword64_0',X18) | sP4(X17,'const.ast.Tword64_0',X18) | sP3(X17,'const.ast.Tword64_0',X18) | sP0('const.ast.Tword64_0',X15,X16,X17,X18) | sP1(X15,X16,X17,'const.ast.Tword64_0',X18) | sP11(X15,X16,X17,'const.ast.Tword64_0',X18) | sP2(X16,X15,X17,'const.ast.Tword64_0',X18) | sP10('const.ast.Tword64_0',X18) | sP9('const.ast.Tword64_0',X18) | sP8('const.ast.Tword64_0',X18) | sP7('const.ast.Tword64_0',X18) | sP6('const.ast.Tword64_0',X18) | ~sP12(X15,X16,X17,'const.ast.Tword64_0',X18)) )),
  inference(superposition,[],[f862,f842])).
fof(f8957,plain,(
  s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | $spl490),
  inference(cnf_transformation,[],[f8957_D])).
fof(f8957_D,plain,(
  s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) <=> ~$spl490),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl490])])).
fof(f8955,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9)) ) | ($spl21 | $spl114 | $spl156 | $spl169)),
  inference(subsumption_resolution,[],[f8954,f8138])).
fof(f8954,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9)) ) | ($spl114 | $spl156 | $spl169)),
  inference(subsumption_resolution,[],[f8938,f3464])).
fof(f8938,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP10('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X9)) ) | ($spl114 | $spl169)),
  inference(resolution,[],[f8137,f842])).
fof(f3871,plain,(
  s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | $spl179),
  inference(cnf_transformation,[],[f3871_D])).
fof(f3871_D,plain,(
  s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) <=> ~$spl179),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl179])])).
fof(f8936,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1)))))) ) | ($spl114 | $spl169)),
  inference(resolution,[],[f8137,f3057])).
fof(f8935,plain,(
  ( ! [X4] : (~sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X4)) ) | $spl488),
  inference(cnf_transformation,[],[f8935_D])).
fof(f8935_D,plain,(
  ( ! [X4] : (~sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X4)) ) <=> ~$spl488),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl488])])).
fof(f7670,plain,(
  ( ! [X32] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X32)) ) | $spl110),
  inference(superposition,[],[f866,f3429])).
fof(f7646,plain,(
  ( ! [X4] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X4)) ) | $spl110),
  inference(superposition,[],[f3429,f866])).
fof(f8934,plain,(
  $false | ($spl84 | $spl87 | $spl168)),
  inference(subsumption_resolution,[],[f8933,f2341])).
fof(f8933,plain,(
  s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',sK32) | ($spl84 | $spl168)),
  inference(forward_demodulation,[],[f2338,f3864])).
fof(f8930,plain,(
  $false | $spl468),
  inference(equality_resolution,[],[f8645])).
fof(f7890,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9)) ) | ($spl21 | $spl110 | $spl156)),
  inference(subsumption_resolution,[],[f7874,f3464])).
fof(f7874,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP10('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9)) ) | ($spl21 | $spl110)),
  inference(resolution,[],[f7772,f842])).
fof(f8797,plain,(
  $false | ($spl110 | $spl168 | $spl175)),
  inference(subsumption_resolution,[],[f8680,f3868])).
fof(f8680,plain,(
  s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | ($spl110 | $spl168)),
  inference(backward_demodulation,[],[f3864,f3429])).
fof(f8672,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,sK32,X7) | sP4(X6,sK32,X7) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP1(X4,X5,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP8(sK32,X7) | sP6(sK32,X7) | ~sP12(X4,X5,X6,sK32,X7)) ) | ($spl5 | $spl18 | $spl87)),
  inference(subsumption_resolution,[],[f8671,f2357])).
fof(f8671,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,sK32,X7) | sP4(X6,sK32,X7) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP1(X4,X5,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP8(sK32,X7) | sP7(sK32,X7) | sP6(sK32,X7) | ~sP12(X4,X5,X6,sK32,X7)) ) | ($spl18 | $spl87)),
  inference(subsumption_resolution,[],[f8667,f4322])).
fof(f1478,plain,(
  ( ! [X3] : (~sP10(sK32,X3)) ) | $spl18),
  inference(cnf_transformation,[],[f1478_D])).
fof(f1478_D,plain,(
  ( ! [X3] : (~sP10(sK32,X3)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f4309,plain,(
  ( ! [X1] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword64_0') | ~sP10(sK32,X1)) ) | $spl87),
  inference(superposition,[],[f2341,f862])).
fof(f3905,plain,(
  ( ! [X364,X366,X365] : (s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X365) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X364),s('type.ast.tctor',X365)),X366)) ) | $spl224),
  inference(cnf_transformation,[],[f3905_D])).
fof(f3905_D,plain,(
  ( ! [X364,X366,X365] : (s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X365) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X364),s('type.ast.tctor',X365)),X366)) ) <=> ~$spl224),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl224])])).
fof(f4514,plain,(
  ( ! [X37,X35,X36] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X36) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X35),s('type.ast.tctor',X36)),X37)) )),
  inference(superposition,[],[f1010,f866])).
fof(f5038,plain,(
  ( ! [X39,X38,X40] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X39) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X38),s('type.ast.tctor',X39)),X40)) )),
  inference(superposition,[],[f1013,f862])).
fof(f3902,plain,(
  ( ! [X341,X343,X340] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X340) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X340),s('type.ast.tctor',X341)),X343)) ) | $spl218),
  inference(cnf_transformation,[],[f3902_D])).
fof(f3902_D,plain,(
  ( ! [X341,X343,X340] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X340) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X340),s('type.ast.tctor',X341)),X343)) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f5681,plain,(
  ( ! [X37,X35,X36] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X35) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X35),s('type.ast.tctor',X36)),X37)) )),
  inference(superposition,[],[f1009,f866])).
fof(f6399,plain,(
  ( ! [X39,X38,X40] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X38) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X38),s('type.ast.tctor',X39)),X40)) )),
  inference(superposition,[],[f1012,f862])).
fof(f7067,plain,(
  ( ! [X26,X25] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.semanticPrimitives.v',X25) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X26)))))) ) | $spl184),
  inference(resolution,[],[f3057,f3877])).
fof(f3870,plain,(
  ( ! [X30,X31,X32] : (~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X30),s('type.ast.tctor',X31)),X32) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X30) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X31)) ) | $spl176),
  inference(cnf_transformation,[],[f3870_D])).
fof(f3870_D,plain,(
  ( ! [X30,X31,X32] : (~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X30),s('type.ast.tctor',X31)),X32) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X30) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X31)) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f7213,plain,(
  ( ! [X39,X37,X38] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X38) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X37) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X37),s('type.ast.tctor',X38)),X39)) )),
  inference(superposition,[],[f1011,f866])).
fof(f7352,plain,(
  ( ! [X70,X69] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X70) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X70) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X69)) )),
  inference(superposition,[],[f1013,f1011])).
fof(f7370,plain,(
  ( ! [X156,X154,X155] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X154),s('type.ast.tctor',X155)),X156) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X155) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X154)) )),
  inference(superposition,[],[f866,f1011])).
fof(f7968,plain,(
  ( ! [X37,X35,X36] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X36) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X35),s('type.ast.tctor',X36)),X37)) ) | $spl110),
  inference(superposition,[],[f7630,f866])).
fof(f8665,plain,(
  ( ! [X32] : (~sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X32)) ) | $spl484),
  inference(cnf_transformation,[],[f8665_D])).
fof(f8665_D,plain,(
  ( ! [X32] : (~sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X32)) ) <=> ~$spl484),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl484])])).
fof(f8012,plain,(
  ( ! [X4] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X4)) ) | $spl114),
  inference(superposition,[],[f3432,f866])).
fof(f8035,plain,(
  ( ! [X32] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0')),X32)) ) | $spl114),
  inference(superposition,[],[f866,f3432])).
fof(f8616,plain,(
  ( ! [X12,X11] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X12) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X11) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X12)) )),
  inference(duplicate_literal_removal,[],[f8344])).
fof(f8344,plain,(
  ( ! [X12,X11] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X12) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X11) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X12) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X11)) )),
  inference(superposition,[],[f1014,f1011])).
fof(f8352,plain,(
  ( ! [X39,X37,X38] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X38) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X37) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X37),s('type.ast.tctor',X38)),X39)) )),
  inference(superposition,[],[f1014,f862])).
fof(f4795,plain,(
  ( ! [X12] : (s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X12) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X12)) ) | $spl258),
  inference(cnf_transformation,[],[f4795_D])).
fof(f4795_D,plain,(
  ( ! [X12] : (s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X12) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X12)) ) <=> ~$spl258),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl258])])).
fof(f8469,plain,(
  ( ! [X54,X53] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X54) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X54) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X53)) )),
  inference(superposition,[],[f1010,f1014])).
fof(f8600,plain,(
  ( ! [X56,X55] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X56) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X55) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X56)) )),
  inference(duplicate_literal_removal,[],[f8470])).
fof(f8470,plain,(
  ( ! [X56,X55] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X56) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X55) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X56) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X55)) )),
  inference(superposition,[],[f1011,f1014])).
fof(f8491,plain,(
  ( ! [X146,X144,X145] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X144),s('type.ast.tctor',X145)),X146) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X145) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X144)) )),
  inference(superposition,[],[f862,f1014])).
fof(f8660,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,sK32,X7) | ~sP12(X4,X5,X6,sK32,X7) | sP6(sK32,X7) | sP8(sK32,X7) | sP10(sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP1(X4,X5,X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP3(X6,sK32,X7) | sP4(X6,sK32,X7)) ) | $spl482),
  inference(cnf_transformation,[],[f8660_D])).
fof(f8660_D,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,sK32,X7) | ~sP12(X4,X5,X6,sK32,X7) | sP6(sK32,X7) | sP8(sK32,X7) | sP10(sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP1(X4,X5,X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP3(X6,sK32,X7) | sP4(X6,sK32,X7)) ) <=> ~$spl482),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl482])])).
fof(f8663,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP10(sK32,X9) | sP8(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl5 | $spl87)),
  inference(subsumption_resolution,[],[f3060,f4322])).
fof(f3060,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP10(sK32,X9) | sP9(sK32,X9) | sP8(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | $spl5),
  inference(resolution,[],[f2357,f842])).
fof(f8659,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,sK32,X7) | sP4(X6,sK32,X7) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP1(X4,X5,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP10(sK32,X7) | sP8(sK32,X7) | sP6(sK32,X7) | ~sP12(X4,X5,X6,sK32,X7)) ) | ($spl5 | $spl87)),
  inference(subsumption_resolution,[],[f4326,f2357])).
fof(f4326,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,sK32,X7) | sP4(X6,sK32,X7) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP1(X4,X5,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP10(sK32,X7) | sP8(sK32,X7) | sP7(sK32,X7) | sP6(sK32,X7) | ~sP12(X4,X5,X6,sK32,X7)) ) | $spl87),
  inference(resolution,[],[f4322,f842])).
fof(f8655,plain,(
  ( ! [X218,X222,X220,X219,X223,X221] : (sP3(X220,X221,X222) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X218) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X219) | s('type.semanticPrimitives.v',X222) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X223))) | s('type.ast.t',X221) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X218),s('type.ast.tctor',X219))))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X220),s('type.num.num',X223))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X218),s('type.ast.tctor',X219)))))))) ) | $spl480),
  inference(cnf_transformation,[],[f8655_D])).
fof(f8655_D,plain,(
  ( ! [X218,X222,X220,X219,X223,X221] : (sP3(X220,X221,X222) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X218) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X219) | s('type.semanticPrimitives.v',X222) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X223))) | s('type.ast.t',X221) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X218),s('type.ast.tctor',X219))))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X220),s('type.num.num',X223))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X218),s('type.ast.tctor',X219)))))))) ) <=> ~$spl480),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl480])])).
fof(f3884,plain,(
  ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) | $spl193),
  inference(cnf_transformation,[],[f3884_D])).
fof(f3884_D,plain,(
  ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) <=> ~$spl193),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl193])])).
fof(f8503,plain,(
  ( ! [X218,X222,X220,X219,X223,X221] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) | sP3(X220,X221,X222) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X220),s('type.num.num',X223))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X218),s('type.ast.tctor',X219))))))) | s('type.ast.t',X221) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X218),s('type.ast.tctor',X219))))) | s('type.semanticPrimitives.v',X222) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X223))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X219) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X218)) )),
  inference(superposition,[],[f895,f1014])).
fof(f8654,plain,(
  ( ! [X210,X208,X206,X211,X209,X207] : (sP4(X208,X209,X210) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X206) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X207) | s('type.semanticPrimitives.v',X210) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X211))) | s('type.ast.t',X209) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X206),s('type.ast.tctor',X207))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X208),s('type.num.num',X211))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X206),s('type.ast.tctor',X207)))))))) ) | $spl478),
  inference(cnf_transformation,[],[f8654_D])).
fof(f8654_D,plain,(
  ( ! [X210,X208,X206,X211,X209,X207] : (sP4(X208,X209,X210) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X206) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X207) | s('type.semanticPrimitives.v',X210) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X211))) | s('type.ast.t',X209) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X206),s('type.ast.tctor',X207))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X208),s('type.num.num',X211))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X206),s('type.ast.tctor',X207)))))))) ) <=> ~$spl478),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl478])])).
fof(f8501,plain,(
  ( ! [X210,X208,X206,X211,X209,X207] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) | sP4(X208,X209,X210) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X208),s('type.num.num',X211))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X206),s('type.ast.tctor',X207))))))) | s('type.ast.t',X209) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X206),s('type.ast.tctor',X207))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.semanticPrimitives.v',X210) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X211))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X207) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X206)) )),
  inference(superposition,[],[f890,f1014])).
fof(f8653,plain,(
  ( ! [X187,X185,X182,X180,X186,X184,X183,X181] : (sP5(X182,X183,X184,X185,X186) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X180) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X181) | s('type.semanticPrimitives.v',X186) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X187))) | s('type.ast.t',X185) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X180),s('type.ast.tctor',X181))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X182),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X183),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X184))),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X180),s('type.ast.tctor',X181))))),s('type.list.list'('type.semanticPrimitives.v'),X187))))) ) | $spl476),
  inference(cnf_transformation,[],[f8653_D])).
fof(f8653_D,plain,(
  ( ! [X187,X185,X182,X180,X186,X184,X183,X181] : (sP5(X182,X183,X184,X185,X186) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X180) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X181) | s('type.semanticPrimitives.v',X186) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X187))) | s('type.ast.t',X185) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X180),s('type.ast.tctor',X181))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X182),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X183),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X184))),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X180),s('type.ast.tctor',X181))))),s('type.list.list'('type.semanticPrimitives.v'),X187))))) ) <=> ~$spl476),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl476])])).
fof(f8497,plain,(
  ( ! [X187,X185,X182,X180,X186,X184,X183,X181] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) | sP5(X182,X183,X184,X185,X186) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X182),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X183),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X184))),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X180),s('type.ast.tctor',X181))))),s('type.list.list'('type.semanticPrimitives.v'),X187)))) | s('type.ast.t',X185) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X180),s('type.ast.tctor',X181))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | s('type.semanticPrimitives.v',X186) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X187))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X181) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X180)) )),
  inference(superposition,[],[f885,f1014])).
fof(f8649,plain,(
  ( ! [X56,X55] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X56) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X55) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X56)) ) | $spl169),
  inference(subsumption_resolution,[],[f8600,f3863])).
fof(f8636,plain,(
  ( ! [X10,X9] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10)))) ) | $spl466),
  inference(cnf_transformation,[],[f8636_D])).
fof(f8636_D,plain,(
  ( ! [X10,X9] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10)))) ) <=> ~$spl466),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl466])])).
fof(f8601,plain,(
  ( ! [X50,X48,X49] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X50))) | s('type.ast.tctor',X49) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X50))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X48) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X49)) )),
  inference(duplicate_literal_removal,[],[f8467])).
fof(f8467,plain,(
  ( ! [X50,X48,X49] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X50))) | s('type.ast.tctor',X49) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X50))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X48) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X49) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X48)) )),
  inference(superposition,[],[f1002,f1014])).
fof(f8648,plain,(
  ( ! [X47,X46] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X47))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X46) | s('type.ast.tctor',X46) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X47)))) ) | $spl474),
  inference(cnf_transformation,[],[f8648_D])).
fof(f8648_D,plain,(
  ( ! [X47,X46] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X47))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X46) | s('type.ast.tctor',X46) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X47)))) ) <=> ~$spl474),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl474])])).
fof(f8466,plain,(
  ( ! [X47,X45,X46] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X47))) | s('type.ast.tctor',X46) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X47))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X46) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X45)) )),
  inference(superposition,[],[f1001,f1014])).
fof(f8647,plain,(
  ( ! [X28,X29,X27] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X28),s('type.ast.tctor',X29))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X27) | s('type.ast.tctor',X27) = s('type.ast.tctor',X29)) ) | $spl472),
  inference(cnf_transformation,[],[f8647_D])).
fof(f8647_D,plain,(
  ( ! [X28,X29,X27] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X28),s('type.ast.tctor',X29))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X27) | s('type.ast.tctor',X27) = s('type.ast.tctor',X29)) ) <=> ~$spl472),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl472])])).
fof(f8462,plain,(
  ( ! [X30,X33,X31,X32] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X32),s('type.ast.tctor',X33))) | s('type.ast.tctor',X31) = s('type.ast.tctor',X33) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X31) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X30)) )),
  inference(superposition,[],[f998,f1014])).
fof(f8461,plain,(
  ( ! [X28,X26,X29,X27] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X28),s('type.ast.tctor',X29))) | s('type.ast.tctor',X27) = s('type.ast.tctor',X29) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X27) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X26)) )),
  inference(superposition,[],[f998,f1014])).
fof(f8645,plain,(
  ( ! [X19] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X19)) ) | $spl468),
  inference(cnf_transformation,[],[f8645_D])).
fof(f8645_D,plain,(
  ( ! [X19] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X19)) ) <=> ~$spl468),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl468])])).
fof(f8646,plain,(
  ( ! [X21,X20,X18] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X21))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X18) | s('type.list.list'('type.ast.t'),X18) = s('type.list.list'('type.ast.t'),X20)) ) | $spl470),
  inference(cnf_transformation,[],[f8646_D])).
fof(f8646_D,plain,(
  ( ! [X21,X20,X18] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X21))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X18) | s('type.list.list'('type.ast.t'),X18) = s('type.list.list'('type.ast.t'),X20)) ) <=> ~$spl470),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl470])])).
fof(f8460,plain,(
  ( ! [X24,X23,X25,X22] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X24),s('type.ast.tctor',X25))) | s('type.list.list'('type.ast.t'),X22) = s('type.list.list'('type.ast.t'),X24) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X23) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X22)) )),
  inference(superposition,[],[f997,f1014])).
fof(f8459,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X21))) | s('type.list.list'('type.ast.t'),X18) = s('type.list.list'('type.ast.t'),X20) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X19) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X18)) )),
  inference(superposition,[],[f997,f1014])).
fof(f8602,plain,(
  ( ! [X54,X55] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X55))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X55) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),X54)))) )),
  inference(trivial_inequality_removal,[],[f8439])).
fof(f8439,plain,(
  ( ! [X54,X55] : (s('type.list.list'('type.ast.t'),X54) != s('type.list.list'('type.ast.t'),X54) | s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X55))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X55) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),X54)))) )),
  inference(superposition,[],[f1014,f1089])).
fof(f8603,plain,(
  ( ! [X52,X50,X48,X53,X51,X49] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X49))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X49) | sP17(X50,X51,X52,X48,X53) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X50),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X51),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X52),s('type.list.list'('type.semanticPrimitives.v'),X53),s('type.list.list'('type.ast.t'),X48))))) )),
  inference(trivial_inequality_removal,[],[f8438])).
fof(f8438,plain,(
  ( ! [X52,X50,X48,X53,X51,X49] : (s('type.list.list'('type.ast.t'),X48) != s('type.list.list'('type.ast.t'),X48) | s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X49))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X49) | sP17(X50,X51,X52,X48,X53) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X50),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X51),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X52),s('type.list.list'('type.semanticPrimitives.v'),X53),s('type.list.list'('type.ast.t'),X48))))) )),
  inference(superposition,[],[f1014,f982])).
fof(f8604,plain,(
  ( ! [X47,X45,X46,X44] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X45))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X45) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X46))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X47)))) )),
  inference(trivial_inequality_removal,[],[f8437])).
fof(f8437,plain,(
  ( ! [X47,X45,X46,X44] : (s('type.list.list'('type.ast.t'),X44) != s('type.list.list'('type.ast.t'),X44) | s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X45))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X45) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X46))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X47)))) )),
  inference(superposition,[],[f1014,f1000])).
fof(f8605,plain,(
  ( ! [X43,X41,X42] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X42))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X42) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X41),s('type.ast.tctor',X43)))) )),
  inference(trivial_inequality_removal,[],[f8436])).
fof(f8436,plain,(
  ( ! [X43,X41,X42] : (s('type.list.list'('type.ast.t'),X41) != s('type.list.list'('type.ast.t'),X41) | s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X42))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X42) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X41),s('type.ast.tctor',X43)))) )),
  inference(superposition,[],[f1014,f1009])).
fof(f8606,plain,(
  ( ! [X39,X38,X40] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X39))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X39) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X38),s('type.ast.tctor',X40)))) )),
  inference(trivial_inequality_removal,[],[f8435])).
fof(f8435,plain,(
  ( ! [X39,X38,X40] : (s('type.list.list'('type.ast.t'),X38) != s('type.list.list'('type.ast.t'),X38) | s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X39))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X39) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X38),s('type.ast.tctor',X40)))) )),
  inference(superposition,[],[f1014,f1012])).
fof(f8641,plain,(
  ( ! [X30,X31,X29] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X30),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X30) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X31),s('type.ast.tctor',X29)))) ) | $spl110),
  inference(subsumption_resolution,[],[f8387,f7630])).
fof(f8612,plain,(
  ( ! [X28,X26,X27] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X27),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X27) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X28),s('type.ast.tctor',X26)))) )),
  inference(trivial_inequality_removal,[],[f8386])).
fof(f8386,plain,(
  ( ! [X28,X26,X27] : (s('type.ast.tctor',X26) != s('type.ast.tctor',X26) | s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X27),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X27) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X28),s('type.ast.tctor',X26)))) )),
  inference(superposition,[],[f1014,f1013])).
fof(f8637,plain,(
  ( ! [X12,X11] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X12) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X11) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X12)) ) | $spl169),
  inference(subsumption_resolution,[],[f8616,f3863])).
fof(f8617,plain,(
  ( ! [X10,X8,X9] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X9) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X8) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10)))) )),
  inference(duplicate_literal_removal,[],[f8343])).
fof(f8343,plain,(
  ( ! [X10,X8,X9] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X9) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X8) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X8)) )),
  inference(superposition,[],[f1014,f1002])).
fof(f8633,plain,(
  ( ! [X19,X17,X18] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X18),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X18) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X19),s('type.ast.tctor',X17)))) )),
  inference(subsumption_resolution,[],[f8322,f1013])).
fof(f8322,plain,(
  ( ! [X19,X17,X18] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X18),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X17) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X18) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X19),s('type.ast.tctor',X17)))) )),
  inference(superposition,[],[f1014,f1013])).
fof(f8631,plain,(
  ( ! [X14,X15,X16] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X15) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X14)))) ) | $spl110),
  inference(subsumption_resolution,[],[f8321,f7630])).
fof(f8629,plain,(
  ( ! [X26,X27] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X27))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X27) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X26)) )),
  inference(subsumption_resolution,[],[f8293,f1090])).
fof(f8293,plain,(
  ( ! [X26,X27] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X27))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X27) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X26) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),X26)))) )),
  inference(superposition,[],[f1014,f1089])).
fof(f8628,plain,(
  ( ! [X24,X23,X25] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X24))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X24) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X23),s('type.ast.tctor',X25)))) )),
  inference(subsumption_resolution,[],[f8292,f1012])).
fof(f8292,plain,(
  ( ! [X24,X23,X25] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X24))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X24) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X23) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X23),s('type.ast.tctor',X25)))) )),
  inference(superposition,[],[f1014,f1012])).
fof(f8627,plain,(
  ( ! [X21,X22,X20] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X21))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X21) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X22)))) )),
  inference(subsumption_resolution,[],[f8291,f1009])).
fof(f8291,plain,(
  ( ! [X21,X22,X20] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X21))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X21) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X20) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X22)))) )),
  inference(superposition,[],[f1014,f1009])).
fof(f8626,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X17))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X17) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X18))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X19)))) )),
  inference(subsumption_resolution,[],[f8290,f1000])).
fof(f8290,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X17))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X17) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X16) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X18))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X19)))) )),
  inference(superposition,[],[f1014,f1000])).
fof(f8624,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X1))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X1) | sP17(X2,X3,X4,X0,X5) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X4),s('type.list.list'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.t'),X0))))) )),
  inference(subsumption_resolution,[],[f8287,f982])).
fof(f8287,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X1))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X1) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X0) | sP17(X2,X3,X4,X0,X5) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X4),s('type.list.list'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.t'),X0))))) )),
  inference(superposition,[],[f1014,f982])).
fof(f7983,plain,(
  ( ! [X14,X13] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X14) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X13)) ) | $spl110),
  inference(trivial_inequality_removal,[],[f7960])).
fof(f7960,plain,(
  ( ! [X14,X13] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X14) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X13)) ) | $spl110),
  inference(superposition,[],[f7630,f1011])).
fof(f3431,plain,(
  s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | $spl115),
  inference(cnf_transformation,[],[f3431_D])).
fof(f3431_D,plain,(
  s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) <=> ~$spl115),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl115])])).
fof(f7959,plain,(
  ( ! [X12,X11] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X12) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X12) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X11)) ) | $spl110),
  inference(superposition,[],[f7630,f1008])).
fof(f1008,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X0) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1)) )),
  inference(cnf_transformation,[],[f689])).
fof(f689,plain,(
  ! [X0,X1] : ((s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) | (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X0))) & (s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X0) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0)))))),
  inference(flattening,[],[f688])).
fof(f688,plain,(
  ! [X0,X1] : ((s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) | (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X0))) & ((s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X0)) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0)))))),
  inference(nnf_transformation,[],[f348])).
fof(f348,plain,(
  ! [X0,X1] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) <=> (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) & s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X0)))),
  inference(rectify,[],[f177])).
fof(f177,axiom,(
  ! [X36,X12] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X12),s('type.ast.tctor',X36))) <=> (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X12) & s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X36)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.evalProps.Tword_simp|split|19')).
fof(f7990,plain,(
  ( ! [X10,X9] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10)))) ) | $spl458),
  inference(cnf_transformation,[],[f7990_D])).
fof(f7990_D,plain,(
  ( ! [X10,X9] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10)))) ) <=> ~$spl458),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl458])])).
fof(f7958,plain,(
  ( ! [X10,X8,X9] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X8)) ) | $spl110),
  inference(superposition,[],[f7630,f1002])).
fof(f5319,plain,(
  ( ! [X35,X33] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X33) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X35),s('type.ast.tctor',X33)))) ) | $spl328),
  inference(cnf_transformation,[],[f5319_D])).
fof(f5319_D,plain,(
  ( ! [X35,X33] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X33) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X35),s('type.ast.tctor',X33)))) ) <=> ~$spl328),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl328])])).
fof(f7984,plain,(
  ( ! [X15] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor','const.ast.TC_word64_0')))) ) | $spl456),
  inference(cnf_transformation,[],[f7984_D])).
fof(f7984_D,plain,(
  ( ! [X15] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor','const.ast.TC_word64_0')))) ) <=> ~$spl456),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl456])])).
fof(f7934,plain,(
  ( ! [X14,X15,X16] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X14) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X14)))) ) | $spl110),
  inference(superposition,[],[f7630,f1007])).
fof(f1007,plain,(
  ( ! [X0,X1] : (s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X0) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0)))) )),
  inference(cnf_transformation,[],[f689])).
fof(f3432,plain,(
  s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | $spl114),
  inference(cnf_transformation,[],[f3432_D])).
fof(f3432_D,plain,(
  s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f7502,plain,(
  ( ! [X14,X13] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X13)) )),
  inference(duplicate_literal_removal,[],[f7205])).
fof(f7205,plain,(
  ( ! [X14,X13] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X13) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X13)) )),
  inference(superposition,[],[f1011,f1008])).
fof(f7479,plain,(
  ( ! [X61,X62] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X62) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X61)) )),
  inference(duplicate_literal_removal,[],[f7348])).
fof(f7348,plain,(
  ( ! [X61,X62] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X62) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X61) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X62) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X61)) )),
  inference(superposition,[],[f1008,f1011])).
fof(f7624,plain,(
  $false | $spl434),
  inference(equality_resolution,[],[f7537])).
fof(f7576,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9)) ) | ($spl156 | $spl175)),
  inference(subsumption_resolution,[],[f7561,f3464])).
fof(f7561,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP4(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | sP3(X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP0('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP11(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP2(X7,X6,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP10('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP8('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP7('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | sP6('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9) | ~sP12(X6,X7,X8,'const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X9)) ) | $spl175),
  inference(resolution,[],[f7138,f842])).
fof(f7138,plain,(
  ( ! [X4] : (~sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X4)) ) | $spl175),
  inference(trivial_inequality_removal,[],[f7124])).
fof(f7124,plain,(
  ( ! [X4] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword8_0') | ~sP9('const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0')),X4)) ) | $spl175),
  inference(superposition,[],[f3868,f866])).
fof(f3429,plain,(
  s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | $spl110),
  inference(cnf_transformation,[],[f3429_D])).
fof(f3429_D,plain,(
  s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f7503,plain,(
  ( ! [X12,X11] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X12) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X11) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X12)) )),
  inference(duplicate_literal_removal,[],[f7204])).
fof(f7204,plain,(
  ( ! [X12,X11] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X12) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X11) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X12) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X11)) )),
  inference(superposition,[],[f1011,f1005])).
fof(f1005,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X0) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X1)) )),
  inference(cnf_transformation,[],[f687])).
fof(f7344,plain,(
  ( ! [X54,X53] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X54) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X54) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X53)) )),
  inference(superposition,[],[f1004,f1011])).
fof(f7480,plain,(
  ( ! [X56,X55] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X56) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X55) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X56)) )),
  inference(duplicate_literal_removal,[],[f7345])).
fof(f7345,plain,(
  ( ! [X56,X55] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X56) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X55) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X56) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X55)) )),
  inference(superposition,[],[f1005,f1011])).
fof(f7382,plain,(
  ( ! [X231,X229,X227,X230,X228,X226] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | sP3(X228,X229,X230) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X228),s('type.num.num',X231))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X226),s('type.ast.tctor',X227))))))) | s('type.ast.t',X229) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X226),s('type.ast.tctor',X227))))) | s('type.semanticPrimitives.v',X230) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X231))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X227) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X226)) )),
  inference(superposition,[],[f895,f1011])).
fof(f7380,plain,(
  ( ! [X218,X216,X215,X219,X217,X214] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | sP4(X216,X217,X218) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X216),s('type.num.num',X219))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X214),s('type.ast.tctor',X215))))))) | s('type.ast.t',X217) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X214),s('type.ast.tctor',X215))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.semanticPrimitives.v',X218) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X219))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X215) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X214)) )),
  inference(superposition,[],[f890,f1011])).
fof(f7376,plain,(
  ( ! [X191,X189,X194,X192,X190,X188,X195,X193] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | sP5(X190,X191,X192,X193,X194) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X190),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X191),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X192))),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X188),s('type.ast.tctor',X189))))),s('type.list.list'('type.semanticPrimitives.v'),X195)))) | s('type.ast.t',X193) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X188),s('type.ast.tctor',X189))),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | s('type.semanticPrimitives.v',X194) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X195))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X189) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X188)) )),
  inference(superposition,[],[f885,f1011])).
fof(f7550,plain,(
  ( ! [X61,X62] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X62) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X61)) ) | $spl115),
  inference(subsumption_resolution,[],[f7479,f3431])).
fof(f7549,plain,(
  ( ! [X56,X55] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X56) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X55) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X56)) ) | $spl111),
  inference(subsumption_resolution,[],[f7480,f3428])).
fof(f7481,plain,(
  ( ! [X50,X48,X49] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X50))) | s('type.ast.tctor',X49) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X50))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X48) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X49)) )),
  inference(duplicate_literal_removal,[],[f7342])).
fof(f7342,plain,(
  ( ! [X50,X48,X49] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X50))) | s('type.ast.tctor',X49) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X50))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X48) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X49) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X48)) )),
  inference(superposition,[],[f1002,f1011])).
fof(f7341,plain,(
  ( ! [X47,X45,X46] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X47))) | s('type.ast.tctor',X46) = s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X47))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X46) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X45)) )),
  inference(superposition,[],[f1001,f1011])).
fof(f7337,plain,(
  ( ! [X30,X33,X31,X32] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X32),s('type.ast.tctor',X33))) | s('type.ast.tctor',X31) = s('type.ast.tctor',X33) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X31) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X30)) )),
  inference(superposition,[],[f998,f1011])).
fof(f7336,plain,(
  ( ! [X28,X26,X29,X27] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X28),s('type.ast.tctor',X29))) | s('type.ast.tctor',X27) = s('type.ast.tctor',X29) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X27) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X26)) )),
  inference(superposition,[],[f998,f1011])).
fof(f7335,plain,(
  ( ! [X24,X23,X25,X22] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X24),s('type.ast.tctor',X25))) | s('type.list.list'('type.ast.t'),X22) = s('type.list.list'('type.ast.t'),X24) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X23) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X22)) )),
  inference(superposition,[],[f997,f1011])).
fof(f7334,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X21))) | s('type.list.list'('type.ast.t'),X18) = s('type.list.list'('type.ast.t'),X20) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X19) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X18)) )),
  inference(superposition,[],[f997,f1011])).
fof(f7482,plain,(
  ( ! [X66,X67] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X67))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X67) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),X66)))) )),
  inference(trivial_inequality_removal,[],[f7314])).
fof(f7314,plain,(
  ( ! [X66,X67] : (s('type.list.list'('type.ast.t'),X66) != s('type.list.list'('type.ast.t'),X66) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X67))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X67) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),X66)))) )),
  inference(superposition,[],[f1011,f1089])).
fof(f7483,plain,(
  ( ! [X61,X64,X62,X60,X65,X63] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X61))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X61) | sP17(X62,X63,X64,X60,X65) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X62),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X63),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X64),s('type.list.list'('type.semanticPrimitives.v'),X65),s('type.list.list'('type.ast.t'),X60))))) )),
  inference(trivial_inequality_removal,[],[f7313])).
fof(f7313,plain,(
  ( ! [X61,X64,X62,X60,X65,X63] : (s('type.list.list'('type.ast.t'),X60) != s('type.list.list'('type.ast.t'),X60) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X61))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X61) | sP17(X62,X63,X64,X60,X65) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X62),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X63),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X64),s('type.list.list'('type.semanticPrimitives.v'),X65),s('type.list.list'('type.ast.t'),X60))))) )),
  inference(superposition,[],[f1011,f982])).
fof(f7484,plain,(
  ( ! [X59,X57,X58,X56] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X57))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X57) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X58))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X56),s('type.ast.tctor',X59)))) )),
  inference(trivial_inequality_removal,[],[f7312])).
fof(f7312,plain,(
  ( ! [X59,X57,X58,X56] : (s('type.list.list'('type.ast.t'),X56) != s('type.list.list'('type.ast.t'),X56) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X57))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X57) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X58))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X56),s('type.ast.tctor',X59)))) )),
  inference(superposition,[],[f1011,f1000])).
fof(f7485,plain,(
  ( ! [X54,X55,X53] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X54))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X54) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X53),s('type.ast.tctor',X55)))) )),
  inference(trivial_inequality_removal,[],[f7311])).
fof(f7311,plain,(
  ( ! [X54,X55,X53] : (s('type.list.list'('type.ast.t'),X53) != s('type.list.list'('type.ast.t'),X53) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X54))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X54) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X53),s('type.ast.tctor',X55)))) )),
  inference(superposition,[],[f1011,f1003])).
fof(f1003,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0)))) )),
  inference(cnf_transformation,[],[f687])).
fof(f7522,plain,(
  ( ! [X23,X25] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X23),s('type.ast.tctor',X25)))) ) | $spl422),
  inference(cnf_transformation,[],[f7522_D])).
fof(f7522_D,plain,(
  ( ! [X23,X25] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X23),s('type.ast.tctor',X25)))) ) <=> ~$spl422),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl422])])).
fof(f7486,plain,(
  ( ! [X52,X50,X51] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X51))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X51) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X50),s('type.ast.tctor',X52)))) )),
  inference(trivial_inequality_removal,[],[f7310])).
fof(f7310,plain,(
  ( ! [X52,X50,X51] : (s('type.list.list'('type.ast.t'),X50) != s('type.list.list'('type.ast.t'),X50) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X51))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X51) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X50),s('type.ast.tctor',X52)))) )),
  inference(superposition,[],[f1011,f1006])).
fof(f1006,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X1) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X1),s('type.ast.tctor',X0)))) )),
  inference(cnf_transformation,[],[f689])).
fof(f7487,plain,(
  ( ! [X47,X48,X49] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X48))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X48) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X47),s('type.ast.tctor',X49)))) )),
  inference(trivial_inequality_removal,[],[f7309])).
fof(f7309,plain,(
  ( ! [X47,X48,X49] : (s('type.list.list'('type.ast.t'),X47) != s('type.list.list'('type.ast.t'),X47) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X48))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X48) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X47),s('type.ast.tctor',X49)))) )),
  inference(superposition,[],[f1011,f1009])).
fof(f7488,plain,(
  ( ! [X45,X46,X44] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X45))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X45) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X46)))) )),
  inference(trivial_inequality_removal,[],[f7308])).
fof(f7308,plain,(
  ( ! [X45,X46,X44] : (s('type.list.list'('type.ast.t'),X44) != s('type.list.list'('type.ast.t'),X44) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X45))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X45) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X44),s('type.ast.tctor',X46)))) )),
  inference(superposition,[],[f1011,f1012])).
fof(f7496,plain,(
  ( ! [X39,X37,X38] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X38),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X38) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X39),s('type.ast.tctor',X37)))) )),
  inference(trivial_inequality_removal,[],[f7254])).
fof(f7254,plain,(
  ( ! [X39,X37,X38] : (s('type.ast.tctor',X37) != s('type.ast.tctor',X37) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X38),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X38) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X39),s('type.ast.tctor',X37)))) )),
  inference(superposition,[],[f1011,f1007])).
fof(f7497,plain,(
  ( ! [X35,X36,X34] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X35),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X35) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X36),s('type.ast.tctor',X34)))) )),
  inference(trivial_inequality_removal,[],[f7253])).
fof(f7253,plain,(
  ( ! [X35,X36,X34] : (s('type.ast.tctor',X34) != s('type.ast.tctor',X34) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X35),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X35) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X36),s('type.ast.tctor',X34)))) )),
  inference(superposition,[],[f1011,f1010])).
fof(f7233,plain,(
  ( ! [X30,X28,X29] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X28) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X29),s('type.ast.tctor',X28))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X29) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X30),s('type.ast.tctor','const.ast.TC_word64_0')))) )),
  inference(superposition,[],[f1011,f1013])).
fof(f7230,plain,(
  ( ! [X21,X19,X20] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X19) | s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X19))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X20) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X21),s('type.ast.tctor','const.ast.TC_word64_0')))) )),
  inference(superposition,[],[f1011,f1004])).
fof(f7536,plain,(
  ( ! [X14,X13] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X13)) ) | $spl115),
  inference(subsumption_resolution,[],[f7502,f3431])).
fof(f7534,plain,(
  ( ! [X12,X11] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X12) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X11) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X12)) ) | $spl111),
  inference(subsumption_resolution,[],[f7503,f3428])).
fof(f7504,plain,(
  ( ! [X10,X8,X9] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X9) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X8) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10)))) )),
  inference(duplicate_literal_removal,[],[f7203])).
fof(f7203,plain,(
  ( ! [X10,X8,X9] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X9) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X8) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X8)) )),
  inference(superposition,[],[f1011,f1002])).
fof(f7180,plain,(
  ( ! [X24,X23,X25] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X24),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X23) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X24) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X25),s('type.ast.tctor',X23)))) )),
  inference(superposition,[],[f1011,f1013])).
fof(f7531,plain,(
  ( ! [X21,X22,X20] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X21),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X21) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X22),s('type.ast.tctor',X20)))) )),
  inference(subsumption_resolution,[],[f7179,f1010])).
fof(f7179,plain,(
  ( ! [X21,X22,X20] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X21),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X20) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X21) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X22),s('type.ast.tctor',X20)))) )),
  inference(superposition,[],[f1011,f1010])).
fof(f7529,plain,(
  ( ! [X19,X17,X18] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X18),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X18) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X19),s('type.ast.tctor',X17)))) )),
  inference(subsumption_resolution,[],[f7178,f1007])).
fof(f7178,plain,(
  ( ! [X19,X17,X18] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X18),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X17) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X18) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X19),s('type.ast.tctor',X17)))) )),
  inference(superposition,[],[f1011,f1007])).
fof(f7177,plain,(
  ( ! [X14,X15,X16] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X15) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X14)))) )),
  inference(superposition,[],[f1011,f1004])).
fof(f7525,plain,(
  ( ! [X33,X32] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X33))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X33) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X32)) )),
  inference(subsumption_resolution,[],[f7147,f1090])).
fof(f7147,plain,(
  ( ! [X33,X32] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X33))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X33) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X32) | s('type.num.num','const.num.|48|_0') != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.t'),X32)))) )),
  inference(superposition,[],[f1011,f1089])).
fof(f7524,plain,(
  ( ! [X30,X31,X29] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X30))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X30) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X29),s('type.ast.tctor',X31)))) )),
  inference(subsumption_resolution,[],[f7146,f1012])).
fof(f7146,plain,(
  ( ! [X30,X31,X29] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X30))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X30) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X29) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X29),s('type.ast.tctor',X31)))) )),
  inference(superposition,[],[f1011,f1012])).
fof(f7523,plain,(
  ( ! [X28,X26,X27] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X27))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X27) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X26),s('type.ast.tctor',X28)))) )),
  inference(subsumption_resolution,[],[f7145,f1009])).
fof(f7145,plain,(
  ( ! [X28,X26,X27] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X27))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X27) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X26) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X26),s('type.ast.tctor',X28)))) )),
  inference(superposition,[],[f1011,f1009])).
fof(f7521,plain,(
  ( ! [X24,X23,X25] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X24))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X24) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X23),s('type.ast.tctor',X25)))) )),
  inference(subsumption_resolution,[],[f7144,f1000])).
fof(f7144,plain,(
  ( ! [X24,X23,X25] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X24))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X24) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X23) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X23),s('type.ast.tctor',X25)))) )),
  inference(superposition,[],[f1011,f1006])).
fof(f7519,plain,(
  ( ! [X21,X22,X20] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X21))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X21) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X22)))) )),
  inference(subsumption_resolution,[],[f7143,f1000])).
fof(f7143,plain,(
  ( ! [X21,X22,X20] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X21))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X21) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X20) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X22)))) )),
  inference(superposition,[],[f1011,f1003])).
fof(f7517,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X17))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X17) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X18))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X19)))) )),
  inference(subsumption_resolution,[],[f7142,f1000])).
fof(f7142,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X17))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X17) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X16) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X18))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X19)))) )),
  inference(superposition,[],[f1011,f1000])).
fof(f7514,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X1))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X1) | sP17(X2,X3,X4,X0,X5) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X4),s('type.list.list'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.t'),X0))))) )),
  inference(subsumption_resolution,[],[f7139,f982])).
fof(f7139,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X1))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X1) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X0) | sP17(X2,X3,X4,X0,X5) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X3),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X4),s('type.list.list'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.t'),X0))))) )),
  inference(superposition,[],[f1011,f982])).
fof(f7069,plain,(
  ( ! [X0,X3] : (~sP7(X0,X3) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X0)) ) | $spl412),
  inference(cnf_transformation,[],[f7069_D])).
fof(f7069_D,plain,(
  ( ! [X0,X3] : (~sP7(X0,X3) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X0)) ) <=> ~$spl412),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl412])])).
fof(f7059,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X0) | s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X2))))) | ~sP7(X0,X3)) ) | $spl17),
  inference(resolution,[],[f3057,f3865])).
fof(f3865,plain,(
  ( ! [X6,X4,X5] : (~sP9(X4,X5) | ~sP7(X4,X6)) ) | $spl17),
  inference(subsumption_resolution,[],[f3535,f1476])).
fof(f6119,plain,(
  ( ! [X393] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X393))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X393)) ) | $spl410),
  inference(cnf_transformation,[],[f6119_D])).
fof(f6119_D,plain,(
  ( ! [X393] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X393))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X393)) ) <=> ~$spl410),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl410])])).
fof(f6845,plain,(
  ( ! [X243,X244,X242] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X243))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X243) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X242),s('type.ast.tctor',X244)))) )),
  inference(subsumption_resolution,[],[f6617,f1012])).
fof(f6617,plain,(
  ( ! [X243,X244,X242] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X243))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X243) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X242) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X242),s('type.ast.tctor',X244)))) )),
  inference(superposition,[],[f1008,f1012])).
fof(f6118,plain,(
  ( ! [X381] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X381))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X381)) ) | $spl408),
  inference(cnf_transformation,[],[f6118_D])).
fof(f6118_D,plain,(
  ( ! [X381] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X381))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X381)) ) <=> ~$spl408),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl408])])).
fof(f6844,plain,(
  ( ! [X231,X229,X230] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X230))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X230) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X229),s('type.ast.tctor',X231)))) )),
  inference(subsumption_resolution,[],[f6613,f1012])).
fof(f6613,plain,(
  ( ! [X231,X229,X230] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X230))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X230) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X229) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X229),s('type.ast.tctor',X231)))) )),
  inference(superposition,[],[f1005,f1012])).
fof(f6843,plain,(
  ( ! [X216,X215,X217,X214] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X215))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X216))) | s('type.ast.tctor',X216) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X215))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X214),s('type.ast.tctor',X217)))) )),
  inference(subsumption_resolution,[],[f6609,f1012])).
fof(f6609,plain,(
  ( ! [X216,X215,X217,X214] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X215))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X216))) | s('type.ast.tctor',X216) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X215))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X214) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X214),s('type.ast.tctor',X217)))) )),
  inference(superposition,[],[f1002,f1012])).
fof(f6841,plain,(
  ( ! [X142,X140,X138,X141,X139,X137] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X138),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X139),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X140),s('type.list.list'('type.semanticPrimitives.v'),X141),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X141) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X137),s('type.ast.tctor',X142)))) )),
  inference(subsumption_resolution,[],[f6840,f1336])).
fof(f6840,plain,(
  ( ! [X142,X140,X138,X141,X139,X137] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X138),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X139),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X140),s('type.list.list'('type.semanticPrimitives.v'),X141),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | ~p(s(bool,'T_0')) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X141) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X137),s('type.ast.tctor',X142)))) )),
  inference(subsumption_resolution,[],[f6594,f1012])).
fof(f6594,plain,(
  ( ! [X142,X140,X138,X141,X139,X137] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X138),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X139),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X140),s('type.list.list'('type.semanticPrimitives.v'),X141),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | ~p(s(bool,'T_0')) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X137) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X141) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X137),s('type.ast.tctor',X142)))) )),
  inference(superposition,[],[f984,f1012])).
fof(f6809,plain,(
  ( ! [X397,X396,X398] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X397))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X397) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X396),s('type.ast.tctor',X398)))) )),
  inference(trivial_inequality_removal,[],[f6486])).
fof(f6486,plain,(
  ( ! [X397,X396,X398] : (s('type.list.list'('type.ast.t'),X396) != s('type.list.list'('type.ast.t'),X396) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X397))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X397) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X396),s('type.ast.tctor',X398)))) )),
  inference(superposition,[],[f1008,f1012])).
fof(f6811,plain,(
  ( ! [X385,X384,X386] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X385))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X385) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X384),s('type.ast.tctor',X386)))) )),
  inference(trivial_inequality_removal,[],[f6482])).
fof(f6482,plain,(
  ( ! [X385,X384,X386] : (s('type.list.list'('type.ast.t'),X384) != s('type.list.list'('type.ast.t'),X384) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X385))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X385) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X384),s('type.ast.tctor',X386)))) )),
  inference(superposition,[],[f1005,f1012])).
fof(f6813,plain,(
  ( ! [X372,X374,X373,X371] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X372))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X373))) | s('type.ast.tctor',X373) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X372))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X371),s('type.ast.tctor',X374)))) )),
  inference(trivial_inequality_removal,[],[f6478])).
fof(f6478,plain,(
  ( ! [X372,X374,X373,X371] : (s('type.list.list'('type.ast.t'),X371) != s('type.list.list'('type.ast.t'),X371) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X372))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X373))) | s('type.ast.tctor',X373) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X372))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X371),s('type.ast.tctor',X374)))) )),
  inference(superposition,[],[f1002,f1012])).
fof(f6836,plain,(
  ( ! [X300,X302,X298,X301,X297,X299] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X298),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X299),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X300),s('type.list.list'('type.semanticPrimitives.v'),X301),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X301) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X297),s('type.ast.tctor',X302)))) )),
  inference(subsumption_resolution,[],[f6815,f1336])).
fof(f6815,plain,(
  ( ! [X300,X302,X298,X301,X297,X299] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X298),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X299),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X300),s('type.list.list'('type.semanticPrimitives.v'),X301),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | ~p(s(bool,'T_0')) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X301) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X297),s('type.ast.tctor',X302)))) )),
  inference(trivial_inequality_removal,[],[f6463])).
fof(f6463,plain,(
  ( ! [X300,X302,X298,X301,X297,X299] : (s('type.list.list'('type.ast.t'),X297) != s('type.list.list'('type.ast.t'),X297) | p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X298),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X299),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X300),s('type.list.list'('type.semanticPrimitives.v'),X301),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | ~p(s(bool,'T_0')) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X301) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X297),s('type.ast.tctor',X302)))) )),
  inference(superposition,[],[f984,f1012])).
fof(f6262,plain,(
  $false | $spl254),
  inference(equality_resolution,[],[f4793])).
fof(f6128,plain,(
  ( ! [X243,X244,X242] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X243))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X243) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X242),s('type.ast.tctor',X244)))) )),
  inference(subsumption_resolution,[],[f5898,f1009])).
fof(f5898,plain,(
  ( ! [X243,X244,X242] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X243))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X243) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X242) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X242),s('type.ast.tctor',X244)))) )),
  inference(superposition,[],[f1008,f1009])).
fof(f6127,plain,(
  ( ! [X231,X229,X230] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X230))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X230) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X229),s('type.ast.tctor',X231)))) )),
  inference(subsumption_resolution,[],[f5894,f1009])).
fof(f5894,plain,(
  ( ! [X231,X229,X230] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X230))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X230) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X229) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X229),s('type.ast.tctor',X231)))) )),
  inference(superposition,[],[f1005,f1009])).
fof(f6126,plain,(
  ( ! [X216,X215,X217,X214] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X215))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X216))) | s('type.ast.tctor',X216) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X215))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X214),s('type.ast.tctor',X217)))) )),
  inference(subsumption_resolution,[],[f5890,f1009])).
fof(f5890,plain,(
  ( ! [X216,X215,X217,X214] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X215))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X216))) | s('type.ast.tctor',X216) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X215))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X214) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X214),s('type.ast.tctor',X217)))) )),
  inference(superposition,[],[f1002,f1009])).
fof(f6124,plain,(
  ( ! [X142,X140,X138,X141,X139,X137] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X138),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X139),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X140),s('type.list.list'('type.semanticPrimitives.v'),X141),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X141) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X137),s('type.ast.tctor',X142)))) )),
  inference(subsumption_resolution,[],[f6123,f1336])).
fof(f6123,plain,(
  ( ! [X142,X140,X138,X141,X139,X137] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X138),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X139),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X140),s('type.list.list'('type.semanticPrimitives.v'),X141),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | ~p(s(bool,'T_0')) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X141) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X137),s('type.ast.tctor',X142)))) )),
  inference(subsumption_resolution,[],[f5875,f1009])).
fof(f5875,plain,(
  ( ! [X142,X140,X138,X141,X139,X137] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X138),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X139),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X140),s('type.list.list'('type.semanticPrimitives.v'),X141),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | ~p(s(bool,'T_0')) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X137) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X141) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X137),s('type.ast.tctor',X142)))) )),
  inference(superposition,[],[f984,f1009])).
fof(f6088,plain,(
  ( ! [X393,X392,X394] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X393))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X393) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X392),s('type.ast.tctor',X394)))) )),
  inference(trivial_inequality_removal,[],[f5768])).
fof(f5768,plain,(
  ( ! [X393,X392,X394] : (s('type.list.list'('type.ast.t'),X392) != s('type.list.list'('type.ast.t'),X392) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X393))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X393) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X392),s('type.ast.tctor',X394)))) )),
  inference(superposition,[],[f1008,f1009])).
fof(f6090,plain,(
  ( ! [X380,X382,X381] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X381))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X381) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X380),s('type.ast.tctor',X382)))) )),
  inference(trivial_inequality_removal,[],[f5764])).
fof(f5764,plain,(
  ( ! [X380,X382,X381] : (s('type.list.list'('type.ast.t'),X380) != s('type.list.list'('type.ast.t'),X380) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X381))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X381) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X380),s('type.ast.tctor',X382)))) )),
  inference(superposition,[],[f1005,f1009])).
fof(f6092,plain,(
  ( ! [X368,X370,X367,X369] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X368))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X369))) | s('type.ast.tctor',X369) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X368))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X367),s('type.ast.tctor',X370)))) )),
  inference(trivial_inequality_removal,[],[f5760])).
fof(f5760,plain,(
  ( ! [X368,X370,X367,X369] : (s('type.list.list'('type.ast.t'),X367) != s('type.list.list'('type.ast.t'),X367) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X368))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.NIL_0'),s('type.ast.tctor',X369))) | s('type.ast.tctor',X369) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X368))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X367),s('type.ast.tctor',X370)))) )),
  inference(superposition,[],[f1002,f1009])).
fof(f6115,plain,(
  ( ! [X294,X296,X298,X293,X295,X297] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X294),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X295),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X296),s('type.list.list'('type.semanticPrimitives.v'),X297),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X297) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X293),s('type.ast.tctor',X298)))) )),
  inference(subsumption_resolution,[],[f6094,f1336])).
fof(f6094,plain,(
  ( ! [X294,X296,X298,X293,X295,X297] : (p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X294),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X295),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X296),s('type.list.list'('type.semanticPrimitives.v'),X297),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | ~p(s(bool,'T_0')) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X297) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X293),s('type.ast.tctor',X298)))) )),
  inference(trivial_inequality_removal,[],[f5745])).
fof(f5745,plain,(
  ( ! [X294,X296,X298,X293,X295,X297] : (s('type.list.list'('type.ast.t'),X293) != s('type.list.list'('type.ast.t'),X293) | p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X294),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X295),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X296),s('type.list.list'('type.semanticPrimitives.v'),X297),s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) | ~p(s(bool,'T_0')) | s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0') != s('type.list.list'('type.semanticPrimitives.v'),X297) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X293),s('type.ast.tctor',X298)))) )),
  inference(superposition,[],[f984,f1009])).
fof(f5362,plain,(
  s('type.ast.tctor','const.ast.TC_char_0') != s('type.ast.tctor','const.ast.TC_word8_0') | $spl375),
  inference(cnf_transformation,[],[f5362_D])).
fof(f5362_D,plain,(
  s('type.ast.tctor','const.ast.TC_char_0') != s('type.ast.tctor','const.ast.TC_word8_0') <=> ~$spl375),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl375])])).
fof(f5423,plain,(
  ( ! [X14] : (s('type.ast.tctor','const.ast.TC_char_0') != s('type.ast.tctor','const.ast.TC_word8_0') | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X14),s('type.ast.tctor','const.ast.TC_word64_0')))) ) | $spl299),
  inference(superposition,[],[f4825,f1013])).
fof(f5420,plain,(
  ( ! [X11] : (s('type.ast.tctor','const.ast.TC_char_0') != s('type.ast.tctor','const.ast.TC_word8_0') | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X11),s('type.ast.tctor','const.ast.TC_word64_0')))) ) | $spl299),
  inference(superposition,[],[f4825,f1004])).
fof(f5360,plain,(
  s('type.ast.tctor','const.ast.TC_string_0') != s('type.ast.tctor','const.ast.TC_word8_0') | $spl373),
  inference(cnf_transformation,[],[f5360_D])).
fof(f5360_D,plain,(
  s('type.ast.tctor','const.ast.TC_string_0') != s('type.ast.tctor','const.ast.TC_word8_0') <=> ~$spl373),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl373])])).
fof(f5405,plain,(
  ( ! [X14] : (s('type.ast.tctor','const.ast.TC_string_0') != s('type.ast.tctor','const.ast.TC_word8_0') | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X14),s('type.ast.tctor','const.ast.TC_word64_0')))) ) | $spl297),
  inference(superposition,[],[f4823,f1013])).
fof(f5402,plain,(
  ( ! [X11] : (s('type.ast.tctor','const.ast.TC_string_0') != s('type.ast.tctor','const.ast.TC_word8_0') | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X11),s('type.ast.tctor','const.ast.TC_word64_0')))) ) | $spl297),
  inference(superposition,[],[f4823,f1004])).
fof(f5358,plain,(
  s('type.ast.tctor','const.ast.TC_ref_0') != s('type.ast.tctor','const.ast.TC_word8_0') | $spl371),
  inference(cnf_transformation,[],[f5358_D])).
fof(f5358_D,plain,(
  s('type.ast.tctor','const.ast.TC_ref_0') != s('type.ast.tctor','const.ast.TC_word8_0') <=> ~$spl371),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl371])])).
fof(f5387,plain,(
  ( ! [X14] : (s('type.ast.tctor','const.ast.TC_ref_0') != s('type.ast.tctor','const.ast.TC_word8_0') | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X14),s('type.ast.tctor','const.ast.TC_word64_0')))) ) | $spl295),
  inference(superposition,[],[f4821,f1013])).
fof(f5384,plain,(
  ( ! [X11] : (s('type.ast.tctor','const.ast.TC_ref_0') != s('type.ast.tctor','const.ast.TC_word8_0') | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X11),s('type.ast.tctor','const.ast.TC_word64_0')))) ) | $spl295),
  inference(superposition,[],[f4821,f1004])).
fof(f5376,plain,(
  ( ! [X216] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X216),s('type.ast.tctor','const.ast.TC_array_0')))) ) | $spl398),
  inference(cnf_transformation,[],[f5376_D])).
fof(f5376_D,plain,(
  ( ! [X216] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X216),s('type.ast.tctor','const.ast.TC_array_0')))) ) <=> ~$spl398),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl398])])).
fof(f5210,plain,(
  ( ! [X218,X222,X220,X219,X217,X221] : (s('type.ast.t',X217) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X218),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0'))) | sP4(X219,X217,X220) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X218))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X219),s('type.num.num',X221))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X218)))) | s('type.semanticPrimitives.v',X220) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X221))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X222),s('type.ast.tctor','const.ast.TC_array_0')))) )),
  inference(superposition,[],[f890,f1013])).
fof(f5209,plain,(
  ( ! [X216,X215,X213,X214] : (s('type.ast.t',X213) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK46(X214,X213,X215)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0'))) | ~sP4(X215,X213,X214) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X216),s('type.ast.tctor','const.ast.TC_array_0')))) )),
  inference(superposition,[],[f887,f1013])).
fof(f5373,plain,(
  ( ! [X202] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X202),s('type.ast.tctor','const.ast.TC_vector_0')))) ) | $spl392),
  inference(cnf_transformation,[],[f5373_D])).
fof(f5373_D,plain,(
  ( ! [X202] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X202),s('type.ast.tctor','const.ast.TC_vector_0')))) ) <=> ~$spl392),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl392])])).
fof(f5207,plain,(
  ( ! [X210,X208,X206,X204,X209,X207,X205,X203] : (s('type.ast.t',X203) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X204),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0'))) | sP5(X205,X206,X207,X203,X208) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X205),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X206),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X207))),s('type.ast.t',X204))),s('type.list.list'('type.semanticPrimitives.v'),X209)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X204)))) | s('type.semanticPrimitives.v',X208) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X209))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X210),s('type.ast.tctor','const.ast.TC_vector_0')))) )),
  inference(superposition,[],[f885,f1013])).
fof(f5206,plain,(
  ( ! [X198,X202,X200,X199,X197,X201] : (s('type.ast.t',X197) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK44(X198,X197,X199,X200,X201)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0'))) | ~sP5(X201,X200,X199,X197,X198) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X202),s('type.ast.tctor','const.ast.TC_vector_0')))) )),
  inference(superposition,[],[f882,f1013])).
fof(f5370,plain,(
  ( ! [X185] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X185),s('type.ast.tctor','const.ast.TC_tup_0')))) ) | $spl386),
  inference(cnf_transformation,[],[f5370_D])).
fof(f5370_D,plain,(
  ( ! [X185] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X185),s('type.ast.tctor','const.ast.TC_tup_0')))) ) <=> ~$spl386),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl386])])).
fof(f5204,plain,(
  ( ! [X191,X189,X187,X192,X190,X188,X186,X193] : (s('type.ast.t',X186) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X187),s('type.ast.tctor','const.ast.TC_word8_0'))) | sP11(X188,X189,X190,X186,X191) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X188),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X189),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X190),s('type.list.list'('type.semanticPrimitives.v'),X192),s('type.list.list'('type.ast.t'),X187)))) | s('type.semanticPrimitives.v',X191) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X192))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X193),s('type.ast.tctor','const.ast.TC_tup_0')))) )),
  inference(superposition,[],[f860,f1013])).
fof(f5203,plain,(
  ( ! [X185,X182,X180,X184,X183,X181] : (s('type.ast.t',X180) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK37(X181,X180,X182,X183,X184)),s('type.ast.tctor','const.ast.TC_word8_0'))) | ~sP11(X184,X183,X182,X180,X181) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X185),s('type.ast.tctor','const.ast.TC_tup_0')))) )),
  inference(superposition,[],[f858,f1013])).
fof(f5368,plain,(
  ( ! [X177] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X177),s('type.ast.tctor','const.ast.TC_fn_0')))) ) | $spl382),
  inference(cnf_transformation,[],[f5368_D])).
fof(f5368_D,plain,(
  ( ! [X177] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X177),s('type.ast.tctor','const.ast.TC_fn_0')))) ) <=> ~$spl382),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl382])])).
fof(f5201,plain,(
  ( ! [X177,X175,X176] : (s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X175),s('type.ast.t',X176))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X175),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X176),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))))),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X177),s('type.ast.tctor','const.ast.TC_fn_0')))) )),
  inference(superposition,[],[f1015,f1013])).
fof(f5197,plain,(
  ( ! [X167,X166,X168] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X166) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X167),s('type.ast.tctor',X166))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X168),s('type.ast.tctor','const.ast.TC_word64_0')))) )),
  inference(superposition,[],[f1010,f1013])).
fof(f5367,plain,(
  ( ! [X163,X164] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X163) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X164) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X164),s('type.ast.tctor',X163)))) ) | $spl380),
  inference(cnf_transformation,[],[f5367_D])).
fof(f5367_D,plain,(
  ( ! [X163,X164] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X163) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X164) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X164),s('type.ast.tctor',X163)))) ) <=> ~$spl380),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl380])])).
fof(f5196,plain,(
  ( ! [X165,X163,X164] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X163) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X164),s('type.ast.tctor',X163))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X164) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X165),s('type.ast.tctor','const.ast.TC_word64_0')))) )),
  inference(superposition,[],[f1008,f1013])).
fof(f5195,plain,(
  ( ! [X161,X162,X160] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X160) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X161),s('type.ast.tctor',X160))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X162),s('type.ast.tctor','const.ast.TC_word64_0')))) )),
  inference(superposition,[],[f1007,f1013])).
fof(f5356,plain,(
  ( ! [X130,X131] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X130)))))) ) | $spl368),
  inference(cnf_transformation,[],[f5356_D])).
fof(f5356_D,plain,(
  ( ! [X130,X131] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X130)))))) ) <=> ~$spl368),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl368])])).
fof(f5328,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_vector_0') | $spl335),
  inference(cnf_transformation,[],[f5328_D])).
fof(f5328_D,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_vector_0') <=> ~$spl335),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl335])])).
fof(f5191,plain,(
  ( ! [X151,X150] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_vector_0') | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X151),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X150)))))) )),
  inference(superposition,[],[f1030,f1013])).
fof(f1030,plain,(
  ( ! [X0] : (s('type.ast.tctor','const.ast.TC_vector_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))) )),
  inference(cnf_transformation,[],[f376])).
fof(f376,plain,(
  ! [X0] : s('type.ast.tctor','const.ast.TC_vector_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(flattening,[],[f375])).
fof(f375,plain,(
  ! [X0] : ~s('type.ast.tctor','const.ast.TC_vector_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X12] : ~s('type.ast.tctor','const.ast.TC_vector_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X12)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.ast.tctor_distinct|split|10')).
fof(f5366,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_word8array_0') | $spl379),
  inference(cnf_transformation,[],[f5366_D])).
fof(f5366_D,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_word8array_0') <=> ~$spl379),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl379])])).
fof(f5189,plain,(
  ( ! [X146,X147] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_word8array_0') | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X147),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X146)))))) )),
  inference(superposition,[],[f1028,f1013])).
fof(f1028,plain,(
  ( ! [X0] : (s('type.ast.tctor','const.ast.TC_word8array_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))) )),
  inference(cnf_transformation,[],[f372])).
fof(f372,plain,(
  ! [X0] : s('type.ast.tctor','const.ast.TC_word8array_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(flattening,[],[f371])).
fof(f371,plain,(
  ! [X0] : ~s('type.ast.tctor','const.ast.TC_word8array_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X12] : ~s('type.ast.tctor','const.ast.TC_word8array_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X12)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.ast.tctor_distinct|split|6')).
fof(f5188,plain,(
  ( ! [X144,X145] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_fn_0') | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X145),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X144)))))) )),
  inference(superposition,[],[f1027,f1013])).
fof(f5337,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_tup_0') | $spl347),
  inference(cnf_transformation,[],[f5337_D])).
fof(f5337_D,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_tup_0') <=> ~$spl347),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl347])])).
fof(f5187,plain,(
  ( ! [X142,X143] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_tup_0') | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X143),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X142)))))) )),
  inference(superposition,[],[f1026,f1013])).
fof(f1026,plain,(
  ( ! [X0] : (s('type.ast.tctor','const.ast.TC_tup_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))) )),
  inference(cnf_transformation,[],[f368])).
fof(f368,plain,(
  ! [X0] : s('type.ast.tctor','const.ast.TC_tup_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(flattening,[],[f367])).
fof(f367,plain,(
  ! [X0] : ~s('type.ast.tctor','const.ast.TC_tup_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X12] : ~s('type.ast.tctor','const.ast.TC_tup_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X12)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.ast.tctor_distinct|split|8')).
fof(f5364,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_exn_0') | $spl377),
  inference(cnf_transformation,[],[f5364_D])).
fof(f5364_D,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_exn_0') <=> ~$spl377),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl377])])).
fof(f5186,plain,(
  ( ! [X140,X141] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_exn_0') | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X141),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X140)))))) )),
  inference(superposition,[],[f1025,f1013])).
fof(f1025,plain,(
  ( ! [X0] : (s('type.ast.tctor','const.ast.TC_exn_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))) )),
  inference(cnf_transformation,[],[f366])).
fof(f366,plain,(
  ! [X0] : s('type.ast.tctor','const.ast.TC_exn_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(flattening,[],[f365])).
fof(f365,plain,(
  ! [X0] : ~s('type.ast.tctor','const.ast.TC_exn_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X12] : ~s('type.ast.tctor','const.ast.TC_exn_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X12)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.ast.tctor_distinct|split|9')).
fof(f5331,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_array_0') | $spl339),
  inference(cnf_transformation,[],[f5331_D])).
fof(f5331_D,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_array_0') <=> ~$spl339),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl339])])).
fof(f5185,plain,(
  ( ! [X138,X139] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_array_0') | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X139),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X138)))))) )),
  inference(superposition,[],[f1024,f1013])).
fof(f1024,plain,(
  ( ! [X0] : (s('type.ast.tctor','const.ast.TC_array_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))) )),
  inference(cnf_transformation,[],[f364])).
fof(f364,plain,(
  ! [X0] : s('type.ast.tctor','const.ast.TC_array_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(flattening,[],[f363])).
fof(f363,plain,(
  ! [X0] : ~s('type.ast.tctor','const.ast.TC_array_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X12] : ~s('type.ast.tctor','const.ast.TC_array_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X12)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.ast.tctor_distinct|split|11')).
fof(f5183,plain,(
  ( ! [X134,X135] : (s('type.ast.tctor','const.ast.TC_char_0') != s('type.ast.tctor','const.ast.TC_word8_0') | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X135),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X134)))))) )),
  inference(superposition,[],[f1022,f1013])).
fof(f1022,plain,(
  ( ! [X0] : (s('type.ast.tctor','const.ast.TC_char_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))) )),
  inference(cnf_transformation,[],[f360])).
fof(f360,plain,(
  ! [X0] : s('type.ast.tctor','const.ast.TC_char_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(flattening,[],[f359])).
fof(f359,plain,(
  ! [X0] : ~s('type.ast.tctor','const.ast.TC_char_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X12] : ~s('type.ast.tctor','const.ast.TC_char_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X12)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.ast.tctor_distinct|split|1')).
fof(f5182,plain,(
  ( ! [X132,X133] : (s('type.ast.tctor','const.ast.TC_string_0') != s('type.ast.tctor','const.ast.TC_word8_0') | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X133),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X132)))))) )),
  inference(superposition,[],[f1021,f1013])).
fof(f1021,plain,(
  ( ! [X0] : (s('type.ast.tctor','const.ast.TC_string_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))) )),
  inference(cnf_transformation,[],[f358])).
fof(f358,plain,(
  ! [X0] : s('type.ast.tctor','const.ast.TC_string_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(flattening,[],[f357])).
fof(f357,plain,(
  ! [X0] : ~s('type.ast.tctor','const.ast.TC_string_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X12] : ~s('type.ast.tctor','const.ast.TC_string_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X12)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.ast.tctor_distinct|split|2')).
fof(f5181,plain,(
  ( ! [X130,X131] : (s('type.ast.tctor','const.ast.TC_ref_0') != s('type.ast.tctor','const.ast.TC_word8_0') | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X131),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X130)))))) )),
  inference(superposition,[],[f1020,f1013])).
fof(f1020,plain,(
  ( ! [X0] : (s('type.ast.tctor','const.ast.TC_ref_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))) )),
  inference(cnf_transformation,[],[f356])).
fof(f356,plain,(
  ! [X0] : s('type.ast.tctor','const.ast.TC_ref_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(flattening,[],[f355])).
fof(f355,plain,(
  ! [X0] : ~s('type.ast.tctor','const.ast.TC_ref_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X12] : ~s('type.ast.tctor','const.ast.TC_ref_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X12)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.ast.tctor_distinct|split|3')).
fof(f5175,plain,(
  ( ! [X111,X114,X112,X110,X115,X113] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X110),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X111),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X112),s('type.semanticPrimitives.v',X113),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X114),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0')))))) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X113))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34(X114,X112,X110,X111,X113)))) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X114) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X111)))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X115),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) )),
  inference(superposition,[],[f840,f1013])).
fof(f5174,plain,(
  ( ! [X109,X107,X105,X108,X106,X104] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X104),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X105),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X106),s('type.semanticPrimitives.v',X107),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X108),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word8_0')))))) | s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X107))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),sK33(X108,X106,X104,X105,X107)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X105)))) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X109),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) )),
  inference(superposition,[],[f839,f1013])).
fof(f5172,plain,(
  ( ! [X99,X100,X98] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X99),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X98) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X100),s('type.ast.tctor',X98)))) )),
  inference(superposition,[],[f1010,f1013])).
fof(f5349,plain,(
  ( ! [X93] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X93),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X93)) ) | $spl360),
  inference(cnf_transformation,[],[f5349_D])).
fof(f5349_D,plain,(
  ( ! [X93] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X93),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X93)) ) <=> ~$spl360),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl360])])).
fof(f5170,plain,(
  ( ! [X94,X92,X93] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X93),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X92) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X93) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X94),s('type.ast.tctor',X92)))) )),
  inference(superposition,[],[f1008,f1013])).
fof(f5346,plain,(
  ( ! [X87] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X87),s('type.ast.tctor','const.ast.TC_word8_0')))) ) | $spl356),
  inference(cnf_transformation,[],[f5346_D])).
fof(f5346_D,plain,(
  ( ! [X87] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X87),s('type.ast.tctor','const.ast.TC_word8_0')))) ) <=> ~$spl356),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl356])])).
fof(f5168,plain,(
  ( ! [X88,X87,X86] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X87),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X86) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X88),s('type.ast.tctor',X86)))) )),
  inference(superposition,[],[f1007,f1013])).
fof(f5341,plain,(
  ( ! [X89] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X89),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X89)) ) | $spl352),
  inference(cnf_transformation,[],[f5341_D])).
fof(f5341_D,plain,(
  ( ! [X89] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X89),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X89)) ) <=> ~$spl352),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl352])])).
fof(f5344,plain,(
  ( ! [X78,X79,X77] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X78),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X78) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X79),s('type.ast.tctor',X77)))) )),
  inference(subsumption_resolution,[],[f5165,f1013])).
fof(f5165,plain,(
  ( ! [X78,X79,X77] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X78),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X77) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X78) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X79),s('type.ast.tctor',X77)))) )),
  inference(superposition,[],[f1005,f1013])).
fof(f5311,plain,(
  ( ! [X90,X88,X89] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X89),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X89) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X90),s('type.ast.tctor',X88)))) )),
  inference(trivial_inequality_removal,[],[f5070])).
fof(f5070,plain,(
  ( ! [X90,X88,X89] : (s('type.ast.tctor',X88) != s('type.ast.tctor',X88) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X89),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X89) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X90),s('type.ast.tctor',X88)))) )),
  inference(superposition,[],[f1005,f1013])).
fof(f5338,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_tup_0') | $spl346),
  inference(cnf_transformation,[],[f5338_D])).
fof(f5338_D,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_tup_0') <=> ~$spl346),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl346])])).
fof(f5339,plain,(
  ( ! [X28,X26,X29,X27,X25] : (~sP11(X29,X28,X27,X26,X25) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X26)) ) | $spl348),
  inference(cnf_transformation,[],[f5339_D])).
fof(f5339_D,plain,(
  ( ! [X28,X26,X29,X27,X25] : (~sP11(X29,X28,X27,X26,X25) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X26)) ) <=> ~$spl348),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl348])])).
fof(f5035,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X26) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_tup_0') | ~sP11(X29,X28,X27,X26,X25)) )),
  inference(superposition,[],[f1013,f858])).
fof(f5336,plain,(
  ( ! [X24,X23] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X23),s('type.ast.t',X24)))) ) | $spl344),
  inference(cnf_transformation,[],[f5336_D])).
fof(f5336_D,plain,(
  ( ! [X24,X23] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X23),s('type.ast.t',X24)))) ) <=> ~$spl344),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl344])])).
fof(f5034,plain,(
  ( ! [X24,X23] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X23),s('type.ast.t',X24))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_fn_0')) )),
  inference(superposition,[],[f1013,f1015])).
fof(f5332,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_array_0') | $spl338),
  inference(cnf_transformation,[],[f5332_D])).
fof(f5332_D,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_array_0') <=> ~$spl338),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl338])])).
fof(f5333,plain,(
  ( ! [X21,X22,X20] : (~sP4(X22,X21,X20) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X21)) ) | $spl340),
  inference(cnf_transformation,[],[f5333_D])).
fof(f5333_D,plain,(
  ( ! [X21,X22,X20] : (~sP4(X22,X21,X20) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X21)) ) <=> ~$spl340),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl340])])).
fof(f5033,plain,(
  ( ! [X21,X22,X20] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X21) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_array_0') | ~sP4(X22,X21,X20)) )),
  inference(superposition,[],[f1013,f887])).
fof(f5329,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_vector_0') | $spl334),
  inference(cnf_transformation,[],[f5329_D])).
fof(f5329_D,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_vector_0') <=> ~$spl334),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl334])])).
fof(f5330,plain,(
  ( ! [X19,X17,X15,X18,X16] : (~sP5(X19,X18,X17,X16,X15) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X16)) ) | $spl336),
  inference(cnf_transformation,[],[f5330_D])).
fof(f5330_D,plain,(
  ( ! [X19,X17,X15,X18,X16] : (~sP5(X19,X18,X17,X16,X15) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X16)) ) <=> ~$spl336),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl336])])).
fof(f5032,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X16) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_vector_0') | ~sP5(X19,X18,X17,X16,X15)) )),
  inference(superposition,[],[f1013,f882])).
fof(f5029,plain,(
  ( ! [X14,X13] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X14) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X14) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X13)) )),
  inference(superposition,[],[f1013,f1008])).
fof(f5326,plain,(
  ( ! [X10,X9] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10)))) ) | $spl330),
  inference(cnf_transformation,[],[f5326_D])).
fof(f5326_D,plain,(
  ( ! [X10,X9] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10)))) ) <=> ~$spl330),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl330])])).
fof(f5027,plain,(
  ( ! [X10,X8,X9] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X8)) )),
  inference(superposition,[],[f1013,f1002])).
fof(f5003,plain,(
  ( ! [X21,X22,X20] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X21),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X20) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X22),s('type.ast.tctor',X20)))) )),
  inference(superposition,[],[f1013,f1010])).
fof(f5002,plain,(
  ( ! [X19,X17,X18] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X18),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X17) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X19),s('type.ast.tctor',X17)))) )),
  inference(superposition,[],[f1013,f1007])).
fof(f4952,plain,(
  ( ! [X35,X33,X34] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X33) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X34),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X35),s('type.ast.tctor',X33)))) )),
  inference(superposition,[],[f1013,f1007])).
fof(f4951,plain,(
  ( ! [X30,X31,X32] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X30) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X31),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X32),s('type.ast.tctor',X30)))) )),
  inference(superposition,[],[f1013,f1010])).
fof(f4677,plain,(
  ( ! [X198,X196,X200,X199,X197,X195] : (s('type.ast.t',X195) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X196),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0'))) | sP4(X197,X195,X198) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X196))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X197),s('type.num.num',X199))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X196)))) | s('type.semanticPrimitives.v',X198) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X199))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X200),s('type.ast.tctor','const.ast.TC_array_0')))) )),
  inference(superposition,[],[f890,f1010])).
fof(f4676,plain,(
  ( ! [X191,X194,X192,X193] : (s('type.ast.t',X191) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK46(X192,X191,X193)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0'))) | ~sP4(X193,X191,X192) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X194),s('type.ast.tctor','const.ast.TC_array_0')))) )),
  inference(superposition,[],[f887,f1010])).
fof(f4675,plain,(
  ( ! [X189,X187,X185,X182,X188,X186,X184,X183] : (s('type.ast.t',X182) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X183),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0'))) | sP5(X184,X185,X186,X182,X187) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X184),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X185),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X186))),s('type.ast.t',X183))),s('type.list.list'('type.semanticPrimitives.v'),X188)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X183)))) | s('type.semanticPrimitives.v',X187) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X188))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X189),s('type.ast.tctor','const.ast.TC_vector_0')))) )),
  inference(superposition,[],[f885,f1010])).
fof(f4674,plain,(
  ( ! [X177,X180,X178,X176,X181,X179] : (s('type.ast.t',X176) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',sK44(X177,X176,X178,X179,X180)),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0'))) | ~sP5(X180,X179,X178,X176,X177) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X181),s('type.ast.tctor','const.ast.TC_vector_0')))) )),
  inference(superposition,[],[f882,f1010])).
fof(f4673,plain,(
  ( ! [X167,X173,X171,X169,X166,X172,X170,X168] : (s('type.ast.t',X166) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X167),s('type.ast.tctor','const.ast.TC_word64_0'))) | sP11(X168,X169,X170,X166,X171) | ~p(s(bool,'const.typeSoundInvariants.type_vs_5'(s('type.num.num',X168),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X169),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X170),s('type.list.list'('type.semanticPrimitives.v'),X172),s('type.list.list'('type.ast.t'),X167)))) | s('type.semanticPrimitives.v',X171) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),X172))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X173),s('type.ast.tctor','const.ast.TC_tup_0')))) )),
  inference(superposition,[],[f860,f1010])).
fof(f4672,plain,(
  ( ! [X165,X163,X161,X164,X162,X160] : (s('type.ast.t',X160) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),sK37(X161,X160,X162,X163,X164)),s('type.ast.tctor','const.ast.TC_word64_0'))) | ~sP11(X164,X163,X162,X160,X161) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X165),s('type.ast.tctor','const.ast.TC_tup_0')))) )),
  inference(superposition,[],[f858,f1010])).
fof(f4671,plain,(
  ( ! [X158,X156,X157] : (s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X156),s('type.ast.t',X157))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X156),s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X157),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))))),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X158),s('type.ast.tctor','const.ast.TC_fn_0')))) )),
  inference(superposition,[],[f1015,f1010])).
fof(f4819,plain,(
  ( ! [X123,X122] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X123),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X122)))))) ) | $spl292),
  inference(cnf_transformation,[],[f4819_D])).
fof(f4819_D,plain,(
  ( ! [X123,X122] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X123),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X122)))))) ) <=> ~$spl292),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl292])])).
fof(f4796,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_vector_0') | $spl261),
  inference(cnf_transformation,[],[f4796_D])).
fof(f4796_D,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_vector_0') <=> ~$spl261),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl261])])).
fof(f4667,plain,(
  ( ! [X144,X145] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_vector_0') | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X145),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X144)))))) )),
  inference(superposition,[],[f1030,f1010])).
fof(f4829,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_word8array_0') | $spl303),
  inference(cnf_transformation,[],[f4829_D])).
fof(f4829_D,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_word8array_0') <=> ~$spl303),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl303])])).
fof(f4665,plain,(
  ( ! [X140,X141] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_word8array_0') | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X141),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X140)))))) )),
  inference(superposition,[],[f1028,f1010])).
fof(f4802,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_fn_0') | $spl269),
  inference(cnf_transformation,[],[f4802_D])).
fof(f4802_D,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_fn_0') <=> ~$spl269),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl269])])).
fof(f4664,plain,(
  ( ! [X138,X139] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_fn_0') | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X139),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X138)))))) )),
  inference(superposition,[],[f1027,f1010])).
fof(f4805,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_tup_0') | $spl273),
  inference(cnf_transformation,[],[f4805_D])).
fof(f4805_D,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_tup_0') <=> ~$spl273),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl273])])).
fof(f4663,plain,(
  ( ! [X136,X137] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_tup_0') | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X137),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X136)))))) )),
  inference(superposition,[],[f1026,f1010])).
fof(f4827,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_exn_0') | $spl301),
  inference(cnf_transformation,[],[f4827_D])).
fof(f4827_D,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_exn_0') <=> ~$spl301),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl301])])).
fof(f4662,plain,(
  ( ! [X134,X135] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_exn_0') | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X135),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X134)))))) )),
  inference(superposition,[],[f1025,f1010])).
fof(f4799,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_array_0') | $spl265),
  inference(cnf_transformation,[],[f4799_D])).
fof(f4799_D,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_array_0') <=> ~$spl265),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl265])])).
fof(f4661,plain,(
  ( ! [X132,X133] : (s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor','const.ast.TC_array_0') | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X133),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X132)))))) )),
  inference(superposition,[],[f1024,f1010])).
fof(f4825,plain,(
  s('type.ast.tctor','const.ast.TC_char_0') != s('type.ast.tctor','const.ast.TC_word64_0') | $spl299),
  inference(cnf_transformation,[],[f4825_D])).
fof(f4825_D,plain,(
  s('type.ast.tctor','const.ast.TC_char_0') != s('type.ast.tctor','const.ast.TC_word64_0') <=> ~$spl299),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl299])])).
fof(f4659,plain,(
  ( ! [X128,X129] : (s('type.ast.tctor','const.ast.TC_char_0') != s('type.ast.tctor','const.ast.TC_word64_0') | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X129),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X128)))))) )),
  inference(superposition,[],[f1022,f1010])).
fof(f4823,plain,(
  s('type.ast.tctor','const.ast.TC_string_0') != s('type.ast.tctor','const.ast.TC_word64_0') | $spl297),
  inference(cnf_transformation,[],[f4823_D])).
fof(f4823_D,plain,(
  s('type.ast.tctor','const.ast.TC_string_0') != s('type.ast.tctor','const.ast.TC_word64_0') <=> ~$spl297),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl297])])).
fof(f4658,plain,(
  ( ! [X127,X126] : (s('type.ast.tctor','const.ast.TC_string_0') != s('type.ast.tctor','const.ast.TC_word64_0') | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X127),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X126)))))) )),
  inference(superposition,[],[f1021,f1010])).
fof(f4821,plain,(
  s('type.ast.tctor','const.ast.TC_ref_0') != s('type.ast.tctor','const.ast.TC_word64_0') | $spl295),
  inference(cnf_transformation,[],[f4821_D])).
fof(f4821_D,plain,(
  s('type.ast.tctor','const.ast.TC_ref_0') != s('type.ast.tctor','const.ast.TC_word64_0') <=> ~$spl295),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl295])])).
fof(f4657,plain,(
  ( ! [X125,X124] : (s('type.ast.tctor','const.ast.TC_ref_0') != s('type.ast.tctor','const.ast.TC_word64_0') | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X125),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X124)))))) )),
  inference(superposition,[],[f1020,f1010])).
fof(f4783,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_word64_0') | $spl249),
  inference(cnf_transformation,[],[f4783_D])).
fof(f4783_D,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_word64_0') <=> ~$spl249),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl249])])).
fof(f4656,plain,(
  ( ! [X123,X122] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_word64_0') | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X123),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X122)))))) )),
  inference(superposition,[],[f1019,f1010])).
fof(f1019,plain,(
  ( ! [X0] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))) )),
  inference(cnf_transformation,[],[f354])).
fof(f354,plain,(
  ! [X0] : s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(flattening,[],[f353])).
fof(f353,plain,(
  ! [X0] : ~s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X12] : ~s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),X12)))),
  file('thm.typeSound.canonical_values_thm|split|9','thm.ast.tctor_distinct|split|4')).
fof(f4651,plain,(
  ( ! [X109,X107,X105,X108,X106,X104] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X104),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X105),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X106),s('type.semanticPrimitives.v',X107),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X108),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0')))))) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X107))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34(X108,X106,X104,X105,X107)))) | s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X108) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X105)))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X109),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) )),
  inference(superposition,[],[f840,f1010])).
fof(f4650,plain,(
  ( ! [X103,X101,X99,X102,X100,X98] : (~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X98),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X99),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X100),s('type.semanticPrimitives.v',X101),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X102),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_word64_0')))))) | s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',X101))) = s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),sK33(X102,X100,X98,X99,X101)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X99)))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X103),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))) )),
  inference(superposition,[],[f839,f1010])).
fof(f4812,plain,(
  ( ! [X103] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X103),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X103)) ) | $spl284),
  inference(cnf_transformation,[],[f4812_D])).
fof(f4812_D,plain,(
  ( ! [X103] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X103),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X103)) ) <=> ~$spl284),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl284])])).
fof(f4813,plain,(
  ( ! [X94,X92,X93] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X93),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X93) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X94),s('type.ast.tctor',X92)))) )),
  inference(subsumption_resolution,[],[f4648,f1010])).
fof(f4648,plain,(
  ( ! [X94,X92,X93] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X93),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X92) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X93) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X94),s('type.ast.tctor',X92)))) )),
  inference(superposition,[],[f1008,f1010])).
fof(f4808,plain,(
  ( ! [X88,X87,X89] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X88),s('type.ast.tctor',X87))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X89),s('type.ast.tctor',X87))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X88)) ) | $spl276),
  inference(cnf_transformation,[],[f4808_D])).
fof(f4808_D,plain,(
  ( ! [X88,X87,X89] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X88),s('type.ast.tctor',X87))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X89),s('type.ast.tctor',X87))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X88)) ) <=> ~$spl276),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl276])])).
fof(f4645,plain,(
  ( ! [X83,X84,X82] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_word64_0') | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X83),s('type.ast.tctor',X82))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X83) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X84),s('type.ast.tctor',X82)))) )),
  inference(superposition,[],[f1005,f1010])).
fof(f4809,plain,(
  ( ! [X91] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X91),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X91)) ) | $spl278),
  inference(cnf_transformation,[],[f4809_D])).
fof(f4809_D,plain,(
  ( ! [X91] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X91),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X91)) ) <=> ~$spl278),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl278])])).
fof(f4644,plain,(
  ( ! [X80,X81,X79] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X80),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X79) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X80) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X81),s('type.ast.tctor',X79)))) )),
  inference(superposition,[],[f1005,f1010])).
fof(f4782,plain,(
  ( ! [X14,X15,X16] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor',X14))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X14)))) ) | $spl246),
  inference(cnf_transformation,[],[f4782_D])).
fof(f4782_D,plain,(
  ( ! [X14,X15,X16] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor',X14))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X14)))) ) <=> ~$spl246),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl246])])).
fof(f4784,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_word64_0') | $spl248),
  inference(cnf_transformation,[],[f4784_D])).
fof(f4784_D,plain,(
  s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_word64_0') <=> ~$spl248),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl248])])).
fof(f4643,plain,(
  ( ! [X78,X76,X77] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_word64_0') | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X77),s('type.ast.tctor',X76))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X78),s('type.ast.tctor',X76)))) )),
  inference(superposition,[],[f1004,f1010])).
fof(f4642,plain,(
  ( ! [X74,X75,X73] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X74),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X73) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X75),s('type.ast.tctor',X73)))) )),
  inference(superposition,[],[f1004,f1010])).
fof(f4777,plain,(
  ( ! [X103,X102,X104] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X103),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X103) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X104),s('type.ast.tctor',X102)))) )),
  inference(trivial_inequality_removal,[],[f4552])).
fof(f4552,plain,(
  ( ! [X103,X102,X104] : (s('type.ast.tctor',X102) != s('type.ast.tctor',X102) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X103),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X103) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X104),s('type.ast.tctor',X102)))) )),
  inference(superposition,[],[f1008,f1010])).
fof(f4548,plain,(
  ( ! [X92,X90,X91] : (s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X90) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X91),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X91) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X92),s('type.ast.tctor',X90)))) )),
  inference(superposition,[],[f1005,f1010])).
fof(f4547,plain,(
  ( ! [X88,X87,X89] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) = s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X88),s('type.ast.tctor',X87))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor','const.ast.TC_word64_0') | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X88) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X89),s('type.ast.tctor',X87)))) )),
  inference(superposition,[],[f1005,f1010])).
fof(f4546,plain,(
  ( ! [X85,X86,X84] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X84) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X85),s('type.ast.tctor','const.ast.TC_word64_0'))) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X86),s('type.ast.tctor',X84)))) )),
  inference(superposition,[],[f1004,f1010])).
fof(f4545,plain,(
  ( ! [X83,X81,X82] : (s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X82),s('type.ast.tctor',X81))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_word64_0') | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X83),s('type.ast.tctor',X81)))) )),
  inference(superposition,[],[f1004,f1010])).
fof(f4806,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor','const.ast.TC_tup_0') | $spl272),
  inference(cnf_transformation,[],[f4806_D])).
fof(f4806_D,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor','const.ast.TC_tup_0') <=> ~$spl272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl272])])).
fof(f4807,plain,(
  ( ! [X28,X26,X29,X27,X25] : (~sP11(X29,X28,X27,X26,X25) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X26)) ) | $spl274),
  inference(cnf_transformation,[],[f4807_D])).
fof(f4807_D,plain,(
  ( ! [X28,X26,X29,X27,X25] : (~sP11(X29,X28,X27,X26,X25) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X26)) ) <=> ~$spl274),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl274])])).
fof(f4512,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X26) | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor','const.ast.TC_tup_0') | ~sP11(X29,X28,X27,X26,X25)) )),
  inference(superposition,[],[f1010,f858])).
fof(f4803,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor','const.ast.TC_fn_0') | $spl268),
  inference(cnf_transformation,[],[f4803_D])).
fof(f4803_D,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor','const.ast.TC_fn_0') <=> ~$spl268),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl268])])).
fof(f4804,plain,(
  ( ! [X24,X23] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X23),s('type.ast.t',X24)))) ) | $spl270),
  inference(cnf_transformation,[],[f4804_D])).
fof(f4804_D,plain,(
  ( ! [X24,X23] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X23),s('type.ast.t',X24)))) ) <=> ~$spl270),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl270])])).
fof(f4511,plain,(
  ( ! [X24,X23] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tfn_2'(s('type.ast.t',X23),s('type.ast.t',X24))) | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor','const.ast.TC_fn_0')) )),
  inference(superposition,[],[f1010,f1015])).
fof(f4800,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor','const.ast.TC_array_0') | $spl264),
  inference(cnf_transformation,[],[f4800_D])).
fof(f4800_D,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor','const.ast.TC_array_0') <=> ~$spl264),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl264])])).
fof(f4801,plain,(
  ( ! [X21,X22,X20] : (~sP4(X22,X21,X20) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X21)) ) | $spl266),
  inference(cnf_transformation,[],[f4801_D])).
fof(f4801_D,plain,(
  ( ! [X21,X22,X20] : (~sP4(X22,X21,X20) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X21)) ) <=> ~$spl266),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl266])])).
fof(f4510,plain,(
  ( ! [X21,X22,X20] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X21) | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor','const.ast.TC_array_0') | ~sP4(X22,X21,X20)) )),
  inference(superposition,[],[f1010,f887])).
fof(f4797,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor','const.ast.TC_vector_0') | $spl260),
  inference(cnf_transformation,[],[f4797_D])).
fof(f4797_D,plain,(
  s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor','const.ast.TC_vector_0') <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f4798,plain,(
  ( ! [X19,X17,X15,X18,X16] : (~sP5(X19,X18,X17,X16,X15) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X16)) ) | $spl262),
  inference(cnf_transformation,[],[f4798_D])).
fof(f4798_D,plain,(
  ( ! [X19,X17,X15,X18,X16] : (~sP5(X19,X18,X17,X16,X15) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X16)) ) <=> ~$spl262),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl262])])).
fof(f4509,plain,(
  ( ! [X19,X17,X15,X18,X16] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',X16) | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor','const.ast.TC_vector_0') | ~sP5(X19,X18,X17,X16,X15)) )),
  inference(superposition,[],[f1010,f882])).
fof(f4505,plain,(
  ( ! [X12,X11] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X12) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X12) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X11)) )),
  inference(superposition,[],[f1010,f1005])).
fof(f4504,plain,(
  ( ! [X10,X8,X9] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X10))) | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X9) | s('type.ast.tctor',X9) != s('type.ast.tctor','const.ast.TC_word_1'(s('type.ast.word_size',X10))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X8)) )),
  inference(superposition,[],[f1010,f1002])).
fof(f4485,plain,(
  ( ! [X30,X31,X29] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X30),s('type.ast.tctor',X29))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_word64_0') | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X31),s('type.ast.tctor',X29)))) )),
  inference(superposition,[],[f1010,f1004])).
fof(f4480,plain,(
  ( ! [X14,X15,X16] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor','const.ast.TC_word8_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X14) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X14)))) )),
  inference(superposition,[],[f1010,f1004])).
fof(f4429,plain,(
  ( ! [X14,X15,X16] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor','const.ast.TC_word64_0') | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X15),s('type.ast.tctor',X14))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X16),s('type.ast.tctor',X14)))) )),
  inference(superposition,[],[f1010,f1004])).
fof(f4413,plain,(
  ( ! [X21,X19,X20] : (s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X19) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X20),s('type.ast.tctor',X19))) | s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X21),s('type.ast.tctor','const.ast.TC_word64_0')))) )),
  inference(superposition,[],[f1010,f1004])).
fof(f4331,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,sK32,X7) | sP4(X6,sK32,X7) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP1(X4,X5,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP8(sK32,X7) | sP6(sK32,X7) | ~sP12(X4,X5,X6,sK32,X7)) ) | ($spl5 | $spl18 | $spl87)),
  inference(subsumption_resolution,[],[f4330,f2357])).
fof(f4330,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,sK32,X7) | sP4(X6,sK32,X7) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP1(X4,X5,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP8(sK32,X7) | sP7(sK32,X7) | sP6(sK32,X7) | ~sP12(X4,X5,X6,sK32,X7)) ) | ($spl18 | $spl87)),
  inference(subsumption_resolution,[],[f4326,f1478])).
fof(f2333,plain,(
  s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword8array_0') | $spl79),
  inference(cnf_transformation,[],[f2333_D])).
fof(f2333_D,plain,(
  s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword8array_0') <=> ~$spl79),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl79])])).
fof(f4324,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword8array_0') | sP5(X3,X4,X5,sK32,X6) | sP4(X5,sK32,X6) | sP3(X5,sK32,X6) | sP0(sK32,X3,X4,X5,X6) | sP1(X3,X4,X5,sK32,X6) | sP11(X3,X4,X5,sK32,X6) | sP2(X4,X3,X5,sK32,X6) | sP9(sK32,X6) | sP8(sK32,X6) | sP6(sK32,X6) | ~sP12(X3,X4,X5,sK32,X6)) ) | ($spl5 | $spl18 | $spl87)),
  inference(subsumption_resolution,[],[f4323,f2357])).
fof(f4323,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword8array_0') | sP5(X3,X4,X5,sK32,X6) | sP4(X5,sK32,X6) | sP3(X5,sK32,X6) | sP0(sK32,X3,X4,X5,X6) | sP1(X3,X4,X5,sK32,X6) | sP11(X3,X4,X5,sK32,X6) | sP2(X4,X3,X5,sK32,X6) | sP9(sK32,X6) | sP8(sK32,X6) | sP7(sK32,X6) | sP6(sK32,X6) | ~sP12(X3,X4,X5,sK32,X6)) ) | ($spl18 | $spl87)),
  inference(subsumption_resolution,[],[f4311,f1478])).
fof(f4311,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword8array_0') | sP5(X3,X4,X5,sK32,X6) | sP4(X5,sK32,X6) | sP3(X5,sK32,X6) | sP0(sK32,X3,X4,X5,X6) | sP1(X3,X4,X5,sK32,X6) | sP11(X3,X4,X5,sK32,X6) | sP2(X4,X3,X5,sK32,X6) | sP10(sK32,X6) | sP9(sK32,X6) | sP8(sK32,X6) | sP7(sK32,X6) | sP6(sK32,X6) | ~sP12(X3,X4,X5,sK32,X6)) ) | $spl87),
  inference(superposition,[],[f2341,f842])).
fof(f4267,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword8array_0') | sP5(X5,X6,X7,'const.ast.Tword64_0',X8) | sP4(X7,'const.ast.Tword64_0',X8) | sP3(X7,'const.ast.Tword64_0',X8) | sP0('const.ast.Tword64_0',X5,X6,X7,X8) | sP1(X5,X6,X7,'const.ast.Tword64_0',X8) | sP11(X5,X6,X7,'const.ast.Tword64_0',X8) | sP2(X6,X5,X7,'const.ast.Tword64_0',X8) | sP10('const.ast.Tword64_0',X8) | sP8('const.ast.Tword64_0',X8) | sP6('const.ast.Tword64_0',X8) | ~sP12(X5,X6,X7,'const.ast.Tword64_0',X8)) ) | ($spl21 | $spl169 | $spl184)),
  inference(subsumption_resolution,[],[f4266,f3017])).
fof(f4266,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword8array_0') | sP5(X5,X6,X7,'const.ast.Tword64_0',X8) | sP4(X7,'const.ast.Tword64_0',X8) | sP3(X7,'const.ast.Tword64_0',X8) | sP0('const.ast.Tword64_0',X5,X6,X7,X8) | sP1(X5,X6,X7,'const.ast.Tword64_0',X8) | sP11(X5,X6,X7,'const.ast.Tword64_0',X8) | sP2(X6,X5,X7,'const.ast.Tword64_0',X8) | sP10('const.ast.Tword64_0',X8) | sP8('const.ast.Tword64_0',X8) | sP7('const.ast.Tword64_0',X8) | sP6('const.ast.Tword64_0',X8) | ~sP12(X5,X6,X7,'const.ast.Tword64_0',X8)) ) | ($spl169 | $spl184)),
  inference(subsumption_resolution,[],[f4254,f3877])).
fof(f4254,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword8array_0') | sP5(X5,X6,X7,'const.ast.Tword64_0',X8) | sP4(X7,'const.ast.Tword64_0',X8) | sP3(X7,'const.ast.Tword64_0',X8) | sP0('const.ast.Tword64_0',X5,X6,X7,X8) | sP1(X5,X6,X7,'const.ast.Tword64_0',X8) | sP11(X5,X6,X7,'const.ast.Tword64_0',X8) | sP2(X6,X5,X7,'const.ast.Tword64_0',X8) | sP10('const.ast.Tword64_0',X8) | sP9('const.ast.Tword64_0',X8) | sP8('const.ast.Tword64_0',X8) | sP7('const.ast.Tword64_0',X8) | sP6('const.ast.Tword64_0',X8) | ~sP12(X5,X6,X7,'const.ast.Tword64_0',X8)) ) | $spl169),
  inference(superposition,[],[f3863,f842])).
fof(f3923,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,'const.ast.Tword64_0',X7) | sP4(X6,'const.ast.Tword64_0',X7) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP3(X6,'const.ast.Tword64_0',X7) | sP0('const.ast.Tword64_0',X4,X5,X6,X7) | sP1(X4,X5,X6,'const.ast.Tword64_0',X7) | sP11(X4,X5,X6,'const.ast.Tword64_0',X7) | sP2(X5,X4,X6,'const.ast.Tword64_0',X7) | sP10('const.ast.Tword64_0',X7) | sP8('const.ast.Tword64_0',X7) | sP6('const.ast.Tword64_0',X7) | ~sP12(X4,X5,X6,'const.ast.Tword64_0',X7)) ) | ($spl21 | $spl184)),
  inference(subsumption_resolution,[],[f3920,f3017])).
fof(f3920,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,'const.ast.Tword64_0',X7) | sP4(X6,'const.ast.Tword64_0',X7) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP3(X6,'const.ast.Tword64_0',X7) | sP0('const.ast.Tword64_0',X4,X5,X6,X7) | sP1(X4,X5,X6,'const.ast.Tword64_0',X7) | sP11(X4,X5,X6,'const.ast.Tword64_0',X7) | sP2(X5,X4,X6,'const.ast.Tword64_0',X7) | sP10('const.ast.Tword64_0',X7) | sP8('const.ast.Tword64_0',X7) | sP7('const.ast.Tword64_0',X7) | sP6('const.ast.Tword64_0',X7) | ~sP12(X4,X5,X6,'const.ast.Tword64_0',X7)) ) | $spl184),
  inference(resolution,[],[f3877,f842])).
fof(f3913,plain,(
  ( ! [X536,X538,X537,X535] : (~sP9(sK48(X535,X536,X537),X538) | ~sP3(X537,X536,X535)) ) | $spl236),
  inference(cnf_transformation,[],[f3913_D])).
fof(f3913_D,plain,(
  ( ! [X536,X538,X537,X535] : (~sP9(sK48(X535,X536,X537),X538) | ~sP3(X537,X536,X535)) ) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f3883,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) | $spl192),
  inference(cnf_transformation,[],[f3883_D])).
fof(f3883_D,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f3759,plain,(
  ( ! [X536,X538,X537,X535] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) | ~sP3(X537,X536,X535) | ~sP9(sK48(X535,X536,X537),X538)) )),
  inference(superposition,[],[f893,f866])).
fof(f893,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK48(X2,X1,X0))))) | ~sP3(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f642])).
fof(f3912,plain,(
  ( ! [X528,X530,X529,X527] : (~sP9(sK46(X527,X528,X529),X530) | ~sP4(X529,X528,X527)) ) | $spl234),
  inference(cnf_transformation,[],[f3912_D])).
fof(f3912_D,plain,(
  ( ! [X528,X530,X529,X527] : (~sP9(sK46(X527,X528,X529),X530) | ~sP4(X529,X528,X527)) ) <=> ~$spl234),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl234])])).
fof(f3757,plain,(
  ( ! [X528,X530,X529,X527] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) | ~sP4(X529,X528,X527) | ~sP9(sK46(X527,X528,X529),X530)) )),
  inference(superposition,[],[f888,f866])).
fof(f888,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK46(X2,X1,X0))))) | ~sP4(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f639])).
fof(f3911,plain,(
  ( ! [X511,X516,X512,X514,X513,X515] : (~sP5(X515,X514,X513,X512,X511) | ~sP9(sK44(X511,X512,X513,X514,X515),X516)) ) | $spl232),
  inference(cnf_transformation,[],[f3911_D])).
fof(f3911_D,plain,(
  ( ! [X511,X516,X512,X514,X513,X515] : (~sP5(X515,X514,X513,X512,X511) | ~sP9(sK44(X511,X512,X513,X514,X515),X516)) ) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f3754,plain,(
  ( ! [X511,X516,X512,X514,X513,X515] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) | ~sP5(X515,X514,X513,X512,X511) | ~sP9(sK44(X511,X512,X513,X514,X515),X516)) )),
  inference(superposition,[],[f883,f866])).
fof(f3751,plain,(
  ( ! [X503] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword64_0') | ~sP9(sK32,X503)) ) | $spl85),
  inference(superposition,[],[f2339,f866])).
fof(f3877,plain,(
  ( ! [X88] : (~sP9('const.ast.Tword64_0',X88)) ) | $spl184),
  inference(cnf_transformation,[],[f3877_D])).
fof(f3877_D,plain,(
  ( ! [X88] : (~sP9('const.ast.Tword64_0',X88)) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f3878,plain,(
  ( ! [X87,X89] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X87) | ~sP10(X87,X89)) ) | $spl186),
  inference(cnf_transformation,[],[f3878_D])).
fof(f3878_D,plain,(
  ( ! [X87,X89] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X87) | ~sP10(X87,X89)) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f3749,plain,(
  ( ! [X499,X500,X501] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X499) | ~sP10(X499,X500) | ~sP9('const.ast.Tword64_0',X501)) )),
  inference(superposition,[],[f862,f866])).
fof(f3875,plain,(
  ( ! [X76] : (~sP9('const.ast.Tword8array_0',X76)) ) | $spl180),
  inference(cnf_transformation,[],[f3875_D])).
fof(f3875_D,plain,(
  ( ! [X76] : (~sP9('const.ast.Tword8array_0',X76)) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f3910,plain,(
  ( ! [X476,X478,X474,X475,X477,X479] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X474) | s('type.semanticPrimitives.v',X478) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X479))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X477),s('type.num.num',X479))) | sP12(X475,X476,X477,X474,X478)) ) | $spl230),
  inference(cnf_transformation,[],[f3910_D])).
fof(f3910_D,plain,(
  ( ! [X476,X478,X474,X475,X477,X479] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X474) | s('type.semanticPrimitives.v',X478) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X479))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X477),s('type.num.num',X479))) | sP12(X475,X476,X477,X474,X478)) ) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f3746,plain,(
  ( ! [X476,X478,X474,X480,X475,X477,X479] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',X474) | sP12(X475,X476,X477,X474,X478) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X477),s('type.num.num',X479))) | s('type.semanticPrimitives.v',X478) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X479))) | ~sP9('const.ast.Tword8array_0',X480)) )),
  inference(superposition,[],[f854,f866])).
fof(f3876,plain,(
  ( ! [X80,X78,X79,X77,X75] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X75) | ~sP12(X77,X78,X79,X75,X80) | sP6(X75,X80) | sP7(X75,X80) | sP8(X75,X80) | sP10(X75,X80) | sP2(X78,X77,X79,X75,X80) | sP11(X77,X78,X79,X75,X80) | sP1(X77,X78,X79,X75,X80) | sP0(X75,X77,X78,X79,X80) | sP3(X79,X75,X80) | sP4(X79,X75,X80) | sP5(X77,X78,X79,X75,X80)) ) | $spl182),
  inference(cnf_transformation,[],[f3876_D])).
fof(f3876_D,plain,(
  ( ! [X80,X78,X79,X77,X75] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X75) | ~sP12(X77,X78,X79,X75,X80) | sP6(X75,X80) | sP7(X75,X80) | sP8(X75,X80) | sP10(X75,X80) | sP2(X78,X77,X79,X75,X80) | sP11(X77,X78,X79,X75,X80) | sP1(X77,X78,X79,X75,X80) | sP0(X75,X77,X78,X79,X80) | sP3(X79,X75,X80) | sP4(X79,X75,X80) | sP5(X77,X78,X79,X75,X80)) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f3909,plain,(
  ( ! [X472,X469,X471,X473,X468,X470] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X468) | sP5(X469,X470,X471,X468,X472) | sP4(X471,X468,X472) | sP3(X471,X468,X472) | sP0(X468,X469,X470,X471,X472) | sP1(X469,X470,X471,X468,X472) | sP11(X469,X470,X471,X468,X472) | sP2(X470,X469,X471,X468,X472) | sP10(X468,X472) | sP8(X468,X472) | sP7(X468,X472) | sP6(X468,X472) | ~sP12(X469,X470,X471,X468,X472) | ~sP9('const.ast.Tword8array_0',X473)) )),
  inference(subsumption_resolution,[],[f3745,f866])).
fof(f3745,plain,(
  ( ! [X472,X469,X471,X473,X468,X470] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X468) | sP5(X469,X470,X471,X468,X472) | sP4(X471,X468,X472) | sP3(X471,X468,X472) | sP0(X468,X469,X470,X471,X472) | sP1(X469,X470,X471,X468,X472) | sP11(X469,X470,X471,X468,X472) | sP2(X470,X469,X471,X468,X472) | sP10(X468,X472) | sP9(X468,X472) | sP8(X468,X472) | sP7(X468,X472) | sP6(X468,X472) | ~sP12(X469,X470,X471,X468,X472) | ~sP9('const.ast.Tword8array_0',X473)) )),
  inference(superposition,[],[f842,f866])).
fof(f3908,plain,(
  ( ! [X436,X437] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X436),s('type.ast.tctor',X437))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X436)) ) | $spl228),
  inference(cnf_transformation,[],[f3908_D])).
fof(f3908_D,plain,(
  ( ! [X436,X437] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X436),s('type.ast.tctor',X437))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X436)) ) <=> ~$spl228),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl228])])).
fof(f3737,plain,(
  ( ! [X436,X438,X437,X435] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X436),s('type.ast.tctor',X437))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X436) | ~sP9('const.ast.Tword_1'(s('type.ast.word_size',X435)),X438)) )),
  inference(superposition,[],[f1000,f866])).
fof(f3872,plain,(
  s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | $spl178),
  inference(cnf_transformation,[],[f3872_D])).
fof(f3872_D,plain,(
  s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f3722,plain,(
  ( ! [X368,X367,X369] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X368) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X367) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X367),s('type.ast.tctor',X368)),X369)) )),
  inference(superposition,[],[f1008,f866])).
fof(f3721,plain,(
  ( ! [X364,X366,X365] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X365) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X364),s('type.ast.tctor',X365)),X366)) )),
  inference(superposition,[],[f1007,f866])).
fof(f3720,plain,(
  ( ! [X362,X361,X363] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X361) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X361),s('type.ast.tctor',X362)),X363)) )),
  inference(superposition,[],[f1006,f866])).
fof(f3867,plain,(
  ( ! [X28,X29,X27] : (~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X27),s('type.ast.tctor',X28)),X29) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X27) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X28)) ) | $spl172),
  inference(cnf_transformation,[],[f3867_D])).
fof(f3867_D,plain,(
  ( ! [X28,X29,X27] : (~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X27),s('type.ast.tctor',X28)),X29) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X27) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X28)) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f3869,plain,(
  s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | $spl174),
  inference(cnf_transformation,[],[f3869_D])).
fof(f3869_D,plain,(
  s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f3719,plain,(
  ( ! [X358,X360,X359] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X359) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X358) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X358),s('type.ast.tctor',X359)),X360)) )),
  inference(superposition,[],[f1005,f866])).
fof(f3718,plain,(
  ( ! [X356,X357,X355] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X356) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X355),s('type.ast.tctor',X356)),X357)) )),
  inference(superposition,[],[f1004,f866])).
fof(f3717,plain,(
  ( ! [X352,X354,X353] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X352) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X352),s('type.ast.tctor',X353)),X354)) )),
  inference(superposition,[],[f1003,f866])).
fof(f3714,plain,(
  ( ! [X341,X343,X340,X342] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X342))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X340) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X340),s('type.ast.tctor',X341)),X343)) )),
  inference(superposition,[],[f1000,f866])).
fof(f3899,plain,(
  ( ! [X111,X116,X114,X112,X115,X113] : (sP3(X112,X113,X114) | ~sP9(X111,X116) | s('type.semanticPrimitives.v',X114) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X115))) | s('type.ast.t',X113) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X111))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X111))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X112),s('type.num.num',X115)))) ) | $spl216),
  inference(cnf_transformation,[],[f3899_D])).
fof(f3899_D,plain,(
  ( ! [X111,X116,X114,X112,X115,X113] : (sP3(X112,X113,X114) | ~sP9(X111,X116) | s('type.semanticPrimitives.v',X114) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X115))) | s('type.ast.t',X113) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X111))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X111))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X112),s('type.num.num',X115)))) ) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f3686,plain,(
  ( ! [X111,X116,X114,X112,X115,X113] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) | sP3(X112,X113,X114) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X111))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X112),s('type.num.num',X115))) | s('type.ast.t',X113) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X111))) | s('type.semanticPrimitives.v',X114) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X115))) | ~sP9(X111,X116)) )),
  inference(superposition,[],[f895,f866])).
fof(f3898,plain,(
  ( ! [X103,X101,X99,X102,X100,X104] : (sP4(X100,X101,X102) | ~sP9(X99,X104) | s('type.semanticPrimitives.v',X102) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X103))) | s('type.ast.t',X101) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X99),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X99))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X100),s('type.num.num',X103)))) ) | $spl214),
  inference(cnf_transformation,[],[f3898_D])).
fof(f3898_D,plain,(
  ( ! [X103,X101,X99,X102,X100,X104] : (sP4(X100,X101,X102) | ~sP9(X99,X104) | s('type.semanticPrimitives.v',X102) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X103))) | s('type.ast.t',X101) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X99),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X99))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X100),s('type.num.num',X103)))) ) <=> ~$spl214),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl214])])).
fof(f3684,plain,(
  ( ! [X103,X101,X99,X102,X100,X104] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) | sP4(X100,X101,X102) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X99))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X100),s('type.num.num',X103))) | s('type.ast.t',X101) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X99),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.semanticPrimitives.v',X102) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X103))) | ~sP9(X99,X104)) )),
  inference(superposition,[],[f890,f866])).
fof(f3897,plain,(
  ( ! [X80,X78,X76,X74,X79,X77,X75,X73] : (sP5(X74,X75,X76,X77,X78) | ~sP9(X73,X80) | s('type.semanticPrimitives.v',X78) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X79))) | s('type.ast.t',X77) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X73),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X74),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X75),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X76))),s('type.ast.t',X73))),s('type.list.list'('type.semanticPrimitives.v'),X79))))) ) | $spl212),
  inference(cnf_transformation,[],[f3897_D])).
fof(f3897_D,plain,(
  ( ! [X80,X78,X76,X74,X79,X77,X75,X73] : (sP5(X74,X75,X76,X77,X78) | ~sP9(X73,X80) | s('type.semanticPrimitives.v',X78) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X79))) | s('type.ast.t',X77) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X73),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X74),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X75),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X76))),s('type.ast.t',X73))),s('type.list.list'('type.semanticPrimitives.v'),X79))))) ) <=> ~$spl212),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl212])])).
fof(f3680,plain,(
  ( ! [X80,X78,X76,X74,X79,X77,X75,X73] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) | sP5(X74,X75,X76,X77,X78) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X74),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X75),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X76))),s('type.ast.t',X73))),s('type.list.list'('type.semanticPrimitives.v'),X79)))) | s('type.ast.t',X77) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X73),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | s('type.semanticPrimitives.v',X78) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X79))) | ~sP9(X73,X80)) )),
  inference(superposition,[],[f885,f866])).
fof(f3862,plain,(
  ( ! [X2,X3,X1] : (~sP10(X1,X3) | ~sP9(X1,X2)) ) | $spl166),
  inference(cnf_transformation,[],[f3862_D])).
fof(f3862_D,plain,(
  ( ! [X2,X3,X1] : (~sP10(X1,X3) | ~sP9(X1,X2)) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f3674,plain,(
  ( ! [X39,X41,X40] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP10(X39,X40) | ~sP9(X39,X41)) )),
  inference(superposition,[],[f862,f866])).
fof(f3895,plain,(
  ( ! [X30,X28,X26,X24,X29,X27,X25] : (sP12(X25,X26,X27,X24,X28) | ~sP9(X24,X30) | s('type.semanticPrimitives.v',X28) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X29))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X27),s('type.num.num',X29)))) ) | $spl210),
  inference(cnf_transformation,[],[f3895_D])).
fof(f3895_D,plain,(
  ( ! [X30,X28,X26,X24,X29,X27,X25] : (sP12(X25,X26,X27,X24,X28) | ~sP9(X24,X30) | s('type.semanticPrimitives.v',X28) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X29))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X27),s('type.num.num',X29)))) ) <=> ~$spl210),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl210])])).
fof(f3672,plain,(
  ( ! [X30,X28,X26,X24,X29,X27,X25] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t','const.ast.Tword8array_0') | sP12(X25,X26,X27,X24,X28) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X27),s('type.num.num',X29))) | s('type.semanticPrimitives.v',X28) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X29))) | ~sP9(X24,X30)) )),
  inference(superposition,[],[f854,f866])).
fof(f3866,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (~sP9(X7,X8) | ~sP12(X9,X10,X11,X7,X12) | sP6(X7,X12) | sP7(X7,X12) | sP8(X7,X12) | sP9(X7,X12) | sP10(X7,X12) | sP2(X10,X9,X11,X7,X12) | sP11(X9,X10,X11,X7,X12) | sP1(X9,X10,X11,X7,X12) | sP0(X7,X9,X10,X11,X12) | sP3(X11,X7,X12) | sP4(X11,X7,X12) | sP5(X9,X10,X11,X7,X12)) ) | $spl170),
  inference(cnf_transformation,[],[f3866_D])).
fof(f3866_D,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (~sP9(X7,X8) | ~sP12(X9,X10,X11,X7,X12) | sP6(X7,X12) | sP7(X7,X12) | sP8(X7,X12) | sP9(X7,X12) | sP10(X7,X12) | sP2(X10,X9,X11,X7,X12) | sP11(X9,X10,X11,X7,X12) | sP1(X9,X10,X11,X7,X12) | sP0(X7,X9,X10,X11,X12) | sP3(X11,X7,X12) | sP4(X11,X7,X12) | sP5(X9,X10,X11,X7,X12)) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f2334,plain,(
  s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword8array_0') | $spl78),
  inference(cnf_transformation,[],[f2334_D])).
fof(f2334_D,plain,(
  s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword8array_0') <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f3671,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X19,X20,X21,X18,X22) | sP4(X21,X18,X22) | sP3(X21,X18,X22) | sP0(X18,X19,X20,X21,X22) | sP1(X19,X20,X21,X18,X22) | sP11(X19,X20,X21,X18,X22) | sP2(X20,X19,X21,X18,X22) | sP10(X18,X22) | sP9(X18,X22) | sP8(X18,X22) | sP7(X18,X22) | sP6(X18,X22) | ~sP12(X19,X20,X21,X18,X22) | ~sP9(X18,X23)) )),
  inference(superposition,[],[f842,f866])).
fof(f3892,plain,(
  ( ! [X88,X87,X85,X89,X86,X84] : (s('type.ast.t',X85) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X84))) | ~sP9(X84,X89) | s('type.semanticPrimitives.v',X87) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X88))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tword8_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X86),s('type.num.num',X88))) | sP3(X86,X85,X87)) ) | $spl208),
  inference(cnf_transformation,[],[f3892_D])).
fof(f3892_D,plain,(
  ( ! [X88,X87,X85,X89,X86,X84] : (s('type.ast.t',X85) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X84))) | ~sP9(X84,X89) | s('type.semanticPrimitives.v',X87) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X88))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tword8_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X86),s('type.num.num',X88))) | sP3(X86,X85,X87)) ) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f3580,plain,(
  ( ! [X88,X87,X85,X89,X86,X84] : (s('type.ast.t',X85) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X84))) | sP3(X86,X85,X87) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tword8_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X86),s('type.num.num',X88))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) | s('type.semanticPrimitives.v',X87) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X88))) | ~sP9(X84,X89)) )),
  inference(superposition,[],[f895,f866])).
fof(f3891,plain,(
  ( ! [X80,X81,X79,X82] : (sP3(X79,X80,X81) | s('type.semanticPrimitives.v',X81) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X82))) | s('type.ast.t',X80) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t','const.ast.Tword8_0'))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tword8_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X79),s('type.num.num',X82)))) ) | $spl206),
  inference(cnf_transformation,[],[f3891_D])).
fof(f3891_D,plain,(
  ( ! [X80,X81,X79,X82] : (sP3(X79,X80,X81) | s('type.semanticPrimitives.v',X81) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X82))) | s('type.ast.t',X80) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t','const.ast.Tword8_0'))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tword8_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X79),s('type.num.num',X82)))) ) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f3888,plain,(
  ( ! [X57,X50] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X50)))) | ~sP9(X50,X57)) ) | $spl200),
  inference(cnf_transformation,[],[f3888_D])).
fof(f3888_D,plain,(
  ( ! [X57,X50] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X50)))) | ~sP9(X50,X57)) ) <=> ~$spl200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl200])])).
fof(f3579,plain,(
  ( ! [X80,X78,X83,X81,X79,X82] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X78)))) | sP3(X79,X80,X81) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tword8_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X79),s('type.num.num',X82))) | s('type.ast.t',X80) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t','const.ast.Tword8_0'))) | s('type.semanticPrimitives.v',X81) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X82))) | ~sP9(X78,X83)) )),
  inference(superposition,[],[f895,f866])).
fof(f3890,plain,(
  ( ! [X70,X72,X71,X73] : (sP4(X70,X71,X72) | s('type.semanticPrimitives.v',X72) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X73))) | s('type.ast.t',X71) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tword8_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X70),s('type.num.num',X73)))) ) | $spl204),
  inference(cnf_transformation,[],[f3890_D])).
fof(f3890_D,plain,(
  ( ! [X70,X72,X71,X73] : (sP4(X70,X71,X72) | s('type.semanticPrimitives.v',X72) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X73))) | s('type.ast.t',X71) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tword8_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X70),s('type.num.num',X73)))) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f3578,plain,(
  ( ! [X70,X74,X72,X71,X69,X73] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X69)))) | sP4(X70,X71,X72) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tword8_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X70),s('type.num.num',X73))) | s('type.ast.t',X71) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.semanticPrimitives.v',X72) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X73))) | ~sP9(X69,X74)) )),
  inference(superposition,[],[f890,f866])).
fof(f3889,plain,(
  ( ! [X61,X66,X64,X62,X65,X63] : (s('type.ast.t',X62) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X61),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | ~sP9(X61,X66) | s('type.semanticPrimitives.v',X64) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X65))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tword8_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X63),s('type.num.num',X65))) | sP4(X63,X62,X64)) ) | $spl202),
  inference(cnf_transformation,[],[f3889_D])).
fof(f3889_D,plain,(
  ( ! [X61,X66,X64,X62,X65,X63] : (s('type.ast.t',X62) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X61),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | ~sP9(X61,X66) | s('type.semanticPrimitives.v',X64) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X65))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tword8_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X63),s('type.num.num',X65))) | sP4(X63,X62,X64)) ) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f3577,plain,(
  ( ! [X61,X66,X64,X62,X65,X63] : (s('type.ast.t',X62) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X61),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | sP4(X63,X62,X64) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tword8_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X63),s('type.num.num',X65))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) | s('type.semanticPrimitives.v',X64) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X65))) | ~sP9(X61,X66)) )),
  inference(superposition,[],[f890,f866])).
fof(f3887,plain,(
  ( ! [X54,X52,X56,X55,X53,X51] : (sP5(X51,X52,X53,X54,X55) | s('type.semanticPrimitives.v',X55) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X56))) | s('type.ast.t',X54) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X51),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X52),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X53))),s('type.ast.t','const.ast.Tword8_0'))),s('type.list.list'('type.semanticPrimitives.v'),X56))))) ) | $spl198),
  inference(cnf_transformation,[],[f3887_D])).
fof(f3887_D,plain,(
  ( ! [X54,X52,X56,X55,X53,X51] : (sP5(X51,X52,X53,X54,X55) | s('type.semanticPrimitives.v',X55) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X56))) | s('type.ast.t',X54) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X51),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X52),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X53))),s('type.ast.t','const.ast.Tword8_0'))),s('type.list.list'('type.semanticPrimitives.v'),X56))))) ) <=> ~$spl198),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl198])])).
fof(f3576,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X50)))) | sP5(X51,X52,X53,X54,X55) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X51),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X52),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X53))),s('type.ast.t','const.ast.Tword8_0'))),s('type.list.list'('type.semanticPrimitives.v'),X56)))) | s('type.ast.t',X54) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | s('type.semanticPrimitives.v',X55) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X56))) | ~sP9(X50,X57)) )),
  inference(superposition,[],[f885,f866])).
fof(f3886,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42,X40] : (s('type.ast.t',X41) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X40),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~sP9(X40,X47) | s('type.semanticPrimitives.v',X45) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X46))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X42),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X43),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X44))),s('type.ast.t','const.ast.Tword8_0'))),s('type.list.list'('type.semanticPrimitives.v'),X46)))) | sP5(X42,X43,X44,X41,X45)) ) | $spl196),
  inference(cnf_transformation,[],[f3886_D])).
fof(f3886_D,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42,X40] : (s('type.ast.t',X41) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X40),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | ~sP9(X40,X47) | s('type.semanticPrimitives.v',X45) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X46))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X42),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X43),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X44))),s('type.ast.t','const.ast.Tword8_0'))),s('type.list.list'('type.semanticPrimitives.v'),X46)))) | sP5(X42,X43,X44,X41,X45)) ) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f3575,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42,X40] : (s('type.ast.t',X41) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X40),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | sP5(X42,X43,X44,X41,X45) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X42),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X43),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X44))),s('type.ast.t','const.ast.Tword8_0'))),s('type.list.list'('type.semanticPrimitives.v'),X46)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) | s('type.semanticPrimitives.v',X45) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X46))) | ~sP9(X40,X47)) )),
  inference(superposition,[],[f885,f866])).
fof(f3885,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X32] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X34),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X35))),s('type.ast.t',X32))),s('type.list.list'('type.semanticPrimitives.v'),X36)))) | ~sP9(X32,X39) | s('type.semanticPrimitives.v',X38) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X36))) | s('type.ast.t',X37) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | sP5(X33,X34,X35,X37,X38)) ) | $spl194),
  inference(cnf_transformation,[],[f3885_D])).
fof(f3885_D,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X32] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X34),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X35))),s('type.ast.t',X32))),s('type.list.list'('type.semanticPrimitives.v'),X36)))) | ~sP9(X32,X39) | s('type.semanticPrimitives.v',X38) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X36))) | s('type.ast.t',X37) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | sP5(X33,X34,X35,X37,X38)) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f3574,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X32] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X34),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X35))),s('type.ast.t',X32))),s('type.list.list'('type.semanticPrimitives.v'),X36)))) | sP5(X33,X34,X35,X37,X38) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword8_0')))) | s('type.ast.t',X37) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | s('type.semanticPrimitives.v',X38) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X36))) | ~sP9(X32,X39)) )),
  inference(superposition,[],[f885,f866])).
fof(f3882,plain,(
  ( ! [X30,X28,X31,X29] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X28) | s('type.semanticPrimitives.v',X29) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X30))))) | ~sP9(X28,X31)) ) | $spl17),
  inference(subsumption_resolution,[],[f3881,f2328])).
fof(f2328,plain,(
  ( ! [X2] : (~sP7('const.ast.Tword8_0',X2)) ) | $spl17),
  inference(trivial_inequality_removal,[],[f2316])).
fof(f2316,plain,(
  ( ! [X2] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tchar_0') | ~sP7('const.ast.Tword8_0',X2)) ) | $spl17),
  inference(superposition,[],[f1476,f874])).
fof(f3879,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X15))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tword8_0',X16,X17,X18,X15)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X18)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X18),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X16),s('type.semanticPrimitives.v',X15),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))) ) | $spl188),
  inference(cnf_transformation,[],[f3879_D])).
fof(f3879_D,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X15))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tword8_0',X16,X17,X18,X15)))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X18)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X18),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X16),s('type.semanticPrimitives.v',X15),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))))) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f3571,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X14) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X15))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tword8_0',X16,X17,X18,X15)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X18),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X16),s('type.semanticPrimitives.v',X15),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword8_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X18)))) | ~sP9(X14,X19)) )),
  inference(superposition,[],[f840,f866])).
fof(f3554,plain,(
  ( ! [X88,X87,X89] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X87) | ~sP9('const.ast.Tword64_0',X88) | ~sP10(X87,X89)) )),
  inference(superposition,[],[f866,f862])).
fof(f3874,plain,(
  ( ! [X80,X78,X76,X79,X77,X75] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X75) | ~sP9('const.ast.Tword8array_0',X76) | sP5(X77,X78,X79,X75,X80) | sP4(X79,X75,X80) | sP3(X79,X75,X80) | sP0(X75,X77,X78,X79,X80) | sP1(X77,X78,X79,X75,X80) | sP11(X77,X78,X79,X75,X80) | sP2(X78,X77,X79,X75,X80) | sP10(X75,X80) | sP8(X75,X80) | sP7(X75,X80) | sP6(X75,X80) | ~sP12(X77,X78,X79,X75,X80)) )),
  inference(subsumption_resolution,[],[f3552,f866])).
fof(f3552,plain,(
  ( ! [X80,X78,X76,X79,X77,X75] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t',X75) | ~sP9('const.ast.Tword8array_0',X76) | sP5(X77,X78,X79,X75,X80) | sP4(X79,X75,X80) | sP3(X79,X75,X80) | sP0(X75,X77,X78,X79,X80) | sP1(X77,X78,X79,X75,X80) | sP11(X77,X78,X79,X75,X80) | sP2(X78,X77,X79,X75,X80) | sP10(X75,X80) | sP9(X75,X80) | sP8(X75,X80) | sP7(X75,X80) | sP6(X75,X80) | ~sP12(X77,X78,X79,X75,X80)) )),
  inference(superposition,[],[f866,f842])).
fof(f3541,plain,(
  ( ! [X30,X31,X32] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X30),s('type.ast.tctor',X31)),X32) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X31) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X30)) )),
  inference(superposition,[],[f866,f1008])).
fof(f3540,plain,(
  ( ! [X28,X29,X27] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | ~sP9('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X27),s('type.ast.tctor',X28)),X29) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X28) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X27)) )),
  inference(superposition,[],[f866,f1005])).
fof(f3536,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword8array_0') | ~sP9(X7,X8) | sP5(X9,X10,X11,X7,X12) | sP4(X11,X7,X12) | sP3(X11,X7,X12) | sP0(X7,X9,X10,X11,X12) | sP1(X9,X10,X11,X7,X12) | sP11(X9,X10,X11,X7,X12) | sP2(X10,X9,X11,X7,X12) | sP10(X7,X12) | sP9(X7,X12) | sP8(X7,X12) | sP7(X7,X12) | sP6(X7,X12) | ~sP12(X9,X10,X11,X7,X12)) )),
  inference(superposition,[],[f866,f842])).
fof(f3534,plain,(
  ( ! [X2,X3,X1] : (s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP9(X1,X2) | ~sP10(X1,X3)) )),
  inference(superposition,[],[f866,f862])).
fof(f3517,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword64_0') | sP5(X2,X3,X4,sK32,X5) | sP4(X4,sK32,X5) | sP3(X4,sK32,X5) | sP0(sK32,X2,X3,X4,X5) | sP1(X2,X3,X4,sK32,X5) | sP11(X2,X3,X4,sK32,X5) | sP2(X3,X2,X4,sK32,X5) | sP9(sK32,X5) | sP8(sK32,X5) | sP6(sK32,X5) | ~sP12(X2,X3,X4,sK32,X5)) ) | ($spl5 | $spl18 | $spl85)),
  inference(subsumption_resolution,[],[f3516,f2357])).
fof(f3516,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword64_0') | sP5(X2,X3,X4,sK32,X5) | sP4(X4,sK32,X5) | sP3(X4,sK32,X5) | sP0(sK32,X2,X3,X4,X5) | sP1(X2,X3,X4,sK32,X5) | sP11(X2,X3,X4,sK32,X5) | sP2(X3,X2,X4,sK32,X5) | sP9(sK32,X5) | sP8(sK32,X5) | sP7(sK32,X5) | sP6(sK32,X5) | ~sP12(X2,X3,X4,sK32,X5)) ) | ($spl18 | $spl85)),
  inference(subsumption_resolution,[],[f3504,f1478])).
fof(f3504,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword64_0') | sP5(X2,X3,X4,sK32,X5) | sP4(X4,sK32,X5) | sP3(X4,sK32,X5) | sP0(sK32,X2,X3,X4,X5) | sP1(X2,X3,X4,sK32,X5) | sP11(X2,X3,X4,sK32,X5) | sP2(X3,X2,X4,sK32,X5) | sP10(sK32,X5) | sP9(sK32,X5) | sP8(sK32,X5) | sP7(sK32,X5) | sP6(sK32,X5) | ~sP12(X2,X3,X4,sK32,X5)) ) | $spl85),
  inference(superposition,[],[f2339,f842])).
fof(f3468,plain,(
  ( ! [X516,X514,X513,X515] : (~sP10(sK48(X513,X514,X515),X516) | ~sP3(X515,X514,X513)) ) | $spl164),
  inference(cnf_transformation,[],[f3468_D])).
fof(f3468_D,plain,(
  ( ! [X516,X514,X513,X515] : (~sP10(sK48(X513,X514,X515),X516) | ~sP3(X515,X514,X513)) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f3320,plain,(
  ( ! [X516,X514,X513,X515] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | ~sP3(X515,X514,X513) | ~sP10(sK48(X513,X514,X515),X516)) )),
  inference(superposition,[],[f893,f862])).
fof(f3467,plain,(
  ( ! [X505,X507,X508,X506] : (~sP10(sK46(X505,X506,X507),X508) | ~sP4(X507,X506,X505)) ) | $spl162),
  inference(cnf_transformation,[],[f3467_D])).
fof(f3467_D,plain,(
  ( ! [X505,X507,X508,X506] : (~sP10(sK46(X505,X506,X507),X508) | ~sP4(X507,X506,X505)) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f3318,plain,(
  ( ! [X505,X507,X508,X506] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | ~sP4(X507,X506,X505) | ~sP10(sK46(X505,X506,X507),X508)) )),
  inference(superposition,[],[f888,f862])).
fof(f3315,plain,(
  ( ! [X492,X494,X490,X493,X489,X491] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | ~sP5(X493,X492,X491,X490,X489) | ~sP10(sK44(X489,X490,X491,X492,X493),X494)) )),
  inference(superposition,[],[f883,f862])).
fof(f3464,plain,(
  ( ! [X434,X431] : (~sP10('const.ast.Tword_1'(s('type.ast.word_size',X431)),X434)) ) | $spl156),
  inference(cnf_transformation,[],[f3464_D])).
fof(f3464_D,plain,(
  ( ! [X434,X431] : (~sP10('const.ast.Tword_1'(s('type.ast.word_size',X431)),X434)) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f3465,plain,(
  ( ! [X432,X433] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X432),s('type.ast.tctor',X433))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X432)) ) | $spl158),
  inference(cnf_transformation,[],[f3465_D])).
fof(f3465_D,plain,(
  ( ! [X432,X433] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X432),s('type.ast.tctor',X433))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X432)) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f3303,plain,(
  ( ! [X432,X434,X431,X433] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X432),s('type.ast.tctor',X433))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X432) | ~sP10('const.ast.Tword_1'(s('type.ast.word_size',X431)),X434)) )),
  inference(superposition,[],[f1000,f862])).
fof(f3430,plain,(
  ( ! [X28,X29,X27] : (~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X27),s('type.ast.tctor',X28)),X29) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X27) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X28)) ) | $spl112),
  inference(cnf_transformation,[],[f3430_D])).
fof(f3430_D,plain,(
  ( ! [X28,X29,X27] : (~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X27),s('type.ast.tctor',X28)),X29) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X27) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X28)) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f3289,plain,(
  ( ! [X364,X366,X365] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X365) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X364) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X364),s('type.ast.tctor',X365)),X366)) )),
  inference(superposition,[],[f1008,f862])).
fof(f3462,plain,(
  ( ! [X362,X361,X363] : (s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X362) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X361),s('type.ast.tctor',X362)),X363)) ) | $spl154),
  inference(cnf_transformation,[],[f3462_D])).
fof(f3462_D,plain,(
  ( ! [X362,X361,X363] : (s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X362) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X361),s('type.ast.tctor',X362)),X363)) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f3288,plain,(
  ( ! [X362,X361,X363] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | s('type.ast.tctor','const.ast.TC_word64_0') = s('type.ast.tctor',X362) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X361),s('type.ast.tctor',X362)),X363)) )),
  inference(superposition,[],[f1007,f862])).
fof(f3287,plain,(
  ( ! [X358,X360,X359] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X358) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X358),s('type.ast.tctor',X359)),X360)) )),
  inference(superposition,[],[f1006,f862])).
fof(f3286,plain,(
  ( ! [X356,X357,X355] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X356) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X355) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X355),s('type.ast.tctor',X356)),X357)) )),
  inference(superposition,[],[f1005,f862])).
fof(f3285,plain,(
  ( ! [X352,X354,X353] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.ast.tctor','const.ast.TC_word8_0') = s('type.ast.tctor',X353) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X352),s('type.ast.tctor',X353)),X354)) )),
  inference(superposition,[],[f1004,f862])).
fof(f3284,plain,(
  ( ! [X350,X349,X351] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X349) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X349),s('type.ast.tctor',X350)),X351)) )),
  inference(superposition,[],[f1003,f862])).
fof(f3281,plain,(
  ( ! [X337,X339,X340,X338] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size',X339))) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') = s('type.list.list'('type.ast.t'),X337) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X337),s('type.ast.tctor',X338)),X340)) )),
  inference(superposition,[],[f1000,f862])).
fof(f3253,plain,(
  ( ! [X111,X109,X112,X110,X108,X113] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | sP3(X109,X110,X111) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t',X108))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X109),s('type.num.num',X112))) | s('type.ast.t',X110) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X108))) | s('type.semanticPrimitives.v',X111) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X112))) | ~sP10(X108,X113)) )),
  inference(superposition,[],[f895,f862])).
fof(f3251,plain,(
  ( ! [X101,X99,X97,X100,X98,X96] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | sP4(X97,X98,X99) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t',X96))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X97),s('type.num.num',X100))) | s('type.ast.t',X98) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X96),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.semanticPrimitives.v',X99) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X100))) | ~sP10(X96,X101)) )),
  inference(superposition,[],[f890,f862])).
fof(f3247,plain,(
  ( ! [X70,X76,X74,X72,X71,X77,X75,X73] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | sP5(X71,X72,X73,X74,X75) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X71),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X72),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X73))),s('type.ast.t',X70))),s('type.list.list'('type.semanticPrimitives.v'),X76)))) | s('type.ast.t',X74) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X70),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | s('type.semanticPrimitives.v',X75) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X76))) | ~sP10(X70,X77)) )),
  inference(superposition,[],[f885,f862])).
fof(f3240,plain,(
  ( ! [X30,X28,X26,X24,X29,X27,X25] : (s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t','const.ast.Tword64_0') | sP12(X25,X26,X27,X24,X28) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X27),s('type.num.num',X29))) | s('type.semanticPrimitives.v',X28) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X29))) | ~sP10(X24,X30)) )),
  inference(superposition,[],[f854,f862])).
fof(f3426,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (~sP10(X4,X5) | ~sP12(X6,X7,X8,X4,X9) | sP6(X4,X9) | sP7(X4,X9) | sP8(X4,X9) | sP9(X4,X9) | sP10(X4,X9) | sP2(X7,X6,X8,X4,X9) | sP11(X6,X7,X8,X4,X9) | sP1(X6,X7,X8,X4,X9) | sP0(X4,X6,X7,X8,X9) | sP3(X8,X4,X9) | sP4(X8,X4,X9) | sP5(X6,X7,X8,X4,X9)) ) | $spl106),
  inference(cnf_transformation,[],[f3426_D])).
fof(f3426_D,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (~sP10(X4,X5) | ~sP12(X6,X7,X8,X4,X9) | sP6(X4,X9) | sP7(X4,X9) | sP8(X4,X9) | sP9(X4,X9) | sP10(X4,X9) | sP2(X7,X6,X8,X4,X9) | sP11(X6,X7,X8,X4,X9) | sP1(X6,X7,X8,X4,X9) | sP0(X4,X6,X7,X8,X9) | sP3(X8,X4,X9) | sP4(X8,X4,X9) | sP5(X6,X7,X8,X4,X9)) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f3239,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP5(X19,X20,X21,X18,X22) | sP4(X21,X18,X22) | sP3(X21,X18,X22) | sP0(X18,X19,X20,X21,X22) | sP1(X19,X20,X21,X18,X22) | sP11(X19,X20,X21,X18,X22) | sP2(X20,X19,X21,X18,X22) | sP10(X18,X22) | sP9(X18,X22) | sP8(X18,X22) | sP7(X18,X22) | sP6(X18,X22) | ~sP12(X19,X20,X21,X18,X22) | ~sP10(X18,X23)) )),
  inference(superposition,[],[f842,f862])).
fof(f3148,plain,(
  ( ! [X94,X99,X97,X95,X98,X96] : (s('type.ast.t',X95) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t',X94))) | sP3(X96,X95,X97) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tword64_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X96),s('type.num.num',X98))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | s('type.semanticPrimitives.v',X97) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X98))) | ~sP10(X94,X99)) )),
  inference(superposition,[],[f895,f862])).
fof(f3147,plain,(
  ( ! [X92,X90,X88,X93,X91,X89] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X88)))) | sP3(X89,X90,X91) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Ref_t_1'(s('type.ast.t','const.ast.Tword64_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X89),s('type.num.num',X92))) | s('type.ast.t',X90) != s('type.ast.t','const.ast.Tref_1'(s('type.ast.t','const.ast.Tword64_0'))) | s('type.semanticPrimitives.v',X91) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X92))) | ~sP10(X88,X93)) )),
  inference(superposition,[],[f895,f862])).
fof(f3146,plain,(
  ( ! [X80,X83,X81,X79,X84,X82] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X79)))) | sP4(X80,X81,X82) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tword64_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X80),s('type.num.num',X83))) | s('type.ast.t',X81) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | s('type.semanticPrimitives.v',X82) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X83))) | ~sP10(X79,X84)) )),
  inference(superposition,[],[f890,f862])).
fof(f3145,plain,(
  ( ! [X76,X74,X72,X71,X75,X73] : (s('type.ast.t',X72) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X71),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_array_0'))) | sP4(X73,X72,X74) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.Varray_t_1'(s('type.ast.t','const.ast.Tword64_0'))))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X73),s('type.num.num',X75))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | s('type.semanticPrimitives.v',X74) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X75))) | ~sP10(X71,X76)) )),
  inference(superposition,[],[f890,f862])).
fof(f3144,plain,(
  ( ! [X61,X66,X64,X62,X60,X67,X65,X63] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X60)))) | sP5(X61,X62,X63,X64,X65) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X61),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X62),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X63))),s('type.ast.t','const.ast.Tword64_0'))),s('type.list.list'('type.semanticPrimitives.v'),X66)))) | s('type.ast.t',X64) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | s('type.semanticPrimitives.v',X65) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X66))) | ~sP10(X60,X67)) )),
  inference(superposition,[],[f885,f862])).
fof(f3143,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51] : (s('type.ast.t',X51) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t',X50),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | sP5(X52,X53,X54,X51,X55) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X52),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X53),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X54))),s('type.ast.t','const.ast.Tword64_0'))),s('type.list.list'('type.semanticPrimitives.v'),X56)))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | s('type.semanticPrimitives.v',X55) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X56))) | ~sP10(X50,X57)) )),
  inference(superposition,[],[f885,f862])).
fof(f3142,plain,(
  ( ! [X47,X45,X43,X48,X46,X44,X42,X49] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.semanticPrimitives.v',bool),'_dst_x1x0_2'(s(fun('type.semanticPrimitives.v',fun('type.ast.t',bool)),'const.typeSoundInvariants.type_v_3'(s('type.num.num',X43),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X44),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X45))),s('type.ast.t',X42))),s('type.list.list'('type.semanticPrimitives.v'),X46)))) | sP5(X43,X44,X45,X47,X48) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t','const.ast.Tword64_0')))) | s('type.ast.t',X47) != s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_vector_0'))) | s('type.semanticPrimitives.v',X48) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X46))) | ~sP10(X42,X49)) )),
  inference(superposition,[],[f885,f862])).
fof(f3439,plain,(
  ( ! [X39,X41,X38,X40] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X38) | s('type.semanticPrimitives.v',X39) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X40))))) | ~sP10(X38,X41)) ) | $spl21),
  inference(subsumption_resolution,[],[f3438,f3017])).
fof(f3438,plain,(
  ( ! [X39,X41,X38,X40] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X38) | sP7('const.ast.Tword64_0',X39) | s('type.semanticPrimitives.v',X39) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X40))))) | ~sP10(X38,X41)) )),
  inference(subsumption_resolution,[],[f3141,f1336])).
fof(f3141,plain,(
  ( ! [X39,X41,X38,X40] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X38) | sP7('const.ast.Tword64_0',X39) | ~p(s(bool,'T_0')) | s('type.semanticPrimitives.v',X39) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X40))))) | ~sP10(X38,X41)) )),
  inference(superposition,[],[f876,f862])).
fof(f2918,plain,(
  ( ! [X19,X17,X20,X18,X16] : (sP12(X16,X17,X18,'const.ast.Tword64_0',X19) | s('type.semanticPrimitives.v',X19) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X20))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18),s('type.num.num',X20)))) ) | $spl92),
  inference(cnf_transformation,[],[f2918_D])).
fof(f2918_D,plain,(
  ( ! [X19,X17,X20,X18,X16] : (sP12(X16,X17,X18,'const.ast.Tword64_0',X19) | s('type.semanticPrimitives.v',X19) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X20))) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18),s('type.num.num',X20)))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f3437,plain,(
  ( ! [X26,X32] : (~sP10(X26,X32) | s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t',X26)) ) | $spl120),
  inference(cnf_transformation,[],[f3437_D])).
fof(f3437_D,plain,(
  ( ! [X26,X32] : (~sP10(X26,X32) | s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t',X26)) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f3139,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X32] : (s('type.ast.t','const.ast.Tword8array_0') != s('type.ast.t',X26) | sP12(X27,X28,X29,'const.ast.Tword64_0',X30) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X29),s('type.num.num',X31))) | s('type.semanticPrimitives.v',X30) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X31))) | ~sP10(X26,X32)) )),
  inference(superposition,[],[f854,f862])).
fof(f3024,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword64_0',X9) | ~sP12(X6,X7,X8,'const.ast.Tword64_0',X9) | sP6('const.ast.Tword64_0',X9) | sP8('const.ast.Tword64_0',X9) | sP9('const.ast.Tword64_0',X9) | sP10('const.ast.Tword64_0',X9) | sP2(X7,X6,X8,'const.ast.Tword64_0',X9) | sP11(X6,X7,X8,'const.ast.Tword64_0',X9) | sP1(X6,X7,X8,'const.ast.Tword64_0',X9) | sP0('const.ast.Tword64_0',X6,X7,X8,X9) | sP3(X8,'const.ast.Tword64_0',X9) | sP4(X8,'const.ast.Tword64_0',X9)) ) | $spl98),
  inference(cnf_transformation,[],[f3024_D])).
fof(f3024_D,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword64_0',X9) | ~sP12(X6,X7,X8,'const.ast.Tword64_0',X9) | sP6('const.ast.Tword64_0',X9) | sP8('const.ast.Tword64_0',X9) | sP9('const.ast.Tword64_0',X9) | sP10('const.ast.Tword64_0',X9) | sP2(X7,X6,X8,'const.ast.Tword64_0',X9) | sP11(X6,X7,X8,'const.ast.Tword64_0',X9) | sP1(X6,X7,X8,'const.ast.Tword64_0',X9) | sP0('const.ast.Tword64_0',X6,X7,X8,X9) | sP3(X8,'const.ast.Tword64_0',X9) | sP4(X8,'const.ast.Tword64_0',X9)) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f3424,plain,(
  ( ! [X10,X11] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X10) | ~sP10(X10,X11)) ) | $spl104),
  inference(cnf_transformation,[],[f3424_D])).
fof(f3424_D,plain,(
  ( ! [X10,X11] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X10) | ~sP10(X10,X11)) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f3436,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X20) | sP5(X21,X22,X23,'const.ast.Tword64_0',X24) | sP4(X23,'const.ast.Tword64_0',X24) | sP3(X23,'const.ast.Tword64_0',X24) | sP0('const.ast.Tword64_0',X21,X22,X23,X24) | sP1(X21,X22,X23,'const.ast.Tword64_0',X24) | sP11(X21,X22,X23,'const.ast.Tword64_0',X24) | sP2(X22,X21,X23,'const.ast.Tword64_0',X24) | sP10('const.ast.Tword64_0',X24) | sP9('const.ast.Tword64_0',X24) | sP8('const.ast.Tword64_0',X24) | sP6('const.ast.Tword64_0',X24) | ~sP12(X21,X22,X23,'const.ast.Tword64_0',X24) | ~sP10(X20,X25)) ) | $spl21),
  inference(subsumption_resolution,[],[f3138,f3017])).
fof(f3138,plain,(
  ( ! [X24,X23,X21,X25,X22,X20] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X20) | sP5(X21,X22,X23,'const.ast.Tword64_0',X24) | sP4(X23,'const.ast.Tword64_0',X24) | sP3(X23,'const.ast.Tword64_0',X24) | sP0('const.ast.Tword64_0',X21,X22,X23,X24) | sP1(X21,X22,X23,'const.ast.Tword64_0',X24) | sP11(X21,X22,X23,'const.ast.Tword64_0',X24) | sP2(X22,X21,X23,'const.ast.Tword64_0',X24) | sP10('const.ast.Tword64_0',X24) | sP9('const.ast.Tword64_0',X24) | sP8('const.ast.Tword64_0',X24) | sP7('const.ast.Tword64_0',X24) | sP6('const.ast.Tword64_0',X24) | ~sP12(X21,X22,X23,'const.ast.Tword64_0',X24) | ~sP10(X20,X25)) )),
  inference(superposition,[],[f842,f862])).
fof(f3137,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t',X14) | s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',X15))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK34('const.ast.Tword64_0',X16,X17,X18,X15)))) | ~p(s(bool,'const.typeSoundInvariants.type_v_5'(s('type.num.num',X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X18),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X16),s('type.semanticPrimitives.v',X15),s('type.ast.t','const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),'const.list.CONS_2'(s('type.ast.t','const.ast.Tword64_0'),s('type.list.list'('type.ast.t'),'const.list.NIL_0'))),s('type.ast.tctor','const.ast.TC_name_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))))))))))) | ~p(s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),X18)))) | ~sP10(X14,X19)) )),
  inference(superposition,[],[f840,f862])).
fof(f3109,plain,(
  ( ! [X28,X29,X27] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W64_0'))) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X27),s('type.ast.tctor',X28)),X29) | s('type.ast.tctor','const.ast.TC_word64_0') != s('type.ast.tctor',X28) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X27)) )),
  inference(superposition,[],[f862,f1008])).
fof(f3108,plain,(
  ( ! [X26,X24,X25] : (s('type.ast.t','const.ast.Tword64_0') = s('type.ast.t','const.ast.Tword_1'(s('type.ast.word_size','const.ast.W8_0'))) | ~sP10('const.ast.Tapp_2'(s('type.list.list'('type.ast.t'),X24),s('type.ast.tctor',X25)),X26) | s('type.ast.tctor','const.ast.TC_word8_0') != s('type.ast.tctor',X25) | s('type.list.list'('type.ast.t'),'const.list.NIL_0') != s('type.list.list'('type.ast.t'),X24)) )),
  inference(superposition,[],[f862,f1005])).
fof(f3104,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP10(X4,X5) | sP5(X6,X7,X8,X4,X9) | sP4(X8,X4,X9) | sP3(X8,X4,X9) | sP0(X4,X6,X7,X8,X9) | sP1(X6,X7,X8,X4,X9) | sP11(X6,X7,X8,X4,X9) | sP2(X7,X6,X8,X4,X9) | sP10(X4,X9) | sP9(X4,X9) | sP8(X4,X9) | sP7(X4,X9) | sP6(X4,X9) | ~sP12(X6,X7,X8,X4,X9)) )),
  inference(superposition,[],[f862,f842])).
fof(f3423,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X10) | ~sP10(X10,X11) | sP5(X12,X13,X14,'const.ast.Tword64_0',X15) | sP4(X14,'const.ast.Tword64_0',X15) | sP3(X14,'const.ast.Tword64_0',X15) | sP0('const.ast.Tword64_0',X12,X13,X14,X15) | sP1(X12,X13,X14,'const.ast.Tword64_0',X15) | sP11(X12,X13,X14,'const.ast.Tword64_0',X15) | sP2(X13,X12,X14,'const.ast.Tword64_0',X15) | sP10('const.ast.Tword64_0',X15) | sP9('const.ast.Tword64_0',X15) | sP8('const.ast.Tword64_0',X15) | sP6('const.ast.Tword64_0',X15) | ~sP12(X12,X13,X14,'const.ast.Tword64_0',X15)) ) | $spl21),
  inference(subsumption_resolution,[],[f3092,f3017])).
fof(f3092,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',X10) | ~sP10(X10,X11) | sP5(X12,X13,X14,'const.ast.Tword64_0',X15) | sP4(X14,'const.ast.Tword64_0',X15) | sP3(X14,'const.ast.Tword64_0',X15) | sP0('const.ast.Tword64_0',X12,X13,X14,X15) | sP1(X12,X13,X14,'const.ast.Tword64_0',X15) | sP11(X12,X13,X14,'const.ast.Tword64_0',X15) | sP2(X13,X12,X14,'const.ast.Tword64_0',X15) | sP10('const.ast.Tword64_0',X15) | sP9('const.ast.Tword64_0',X15) | sP8('const.ast.Tword64_0',X15) | sP7('const.ast.Tword64_0',X15) | sP6('const.ast.Tword64_0',X15) | ~sP12(X12,X13,X14,'const.ast.Tword64_0',X15)) )),
  inference(superposition,[],[f862,f842])).
fof(f2335,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword8_0',X9) | ~sP12(X6,X7,X8,'const.ast.Tword8_0',X9) | sP6('const.ast.Tword8_0',X9) | sP8('const.ast.Tword8_0',X9) | sP9('const.ast.Tword8_0',X9) | sP10('const.ast.Tword8_0',X9) | sP2(X7,X6,X8,'const.ast.Tword8_0',X9) | sP11(X6,X7,X8,'const.ast.Tword8_0',X9) | sP1(X6,X7,X8,'const.ast.Tword8_0',X9) | sP0('const.ast.Tword8_0',X6,X7,X8,X9) | sP3(X8,'const.ast.Tword8_0',X9) | sP4(X8,'const.ast.Tword8_0',X9)) ) | $spl80),
  inference(cnf_transformation,[],[f2335_D])).
fof(f2335_D,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword8_0',X9) | ~sP12(X6,X7,X8,'const.ast.Tword8_0',X9) | sP6('const.ast.Tword8_0',X9) | sP8('const.ast.Tword8_0',X9) | sP9('const.ast.Tword8_0',X9) | sP10('const.ast.Tword8_0',X9) | sP2(X7,X6,X8,'const.ast.Tword8_0',X9) | sP11(X6,X7,X8,'const.ast.Tword8_0',X9) | sP1(X6,X7,X8,'const.ast.Tword8_0',X9) | sP0('const.ast.Tword8_0',X6,X7,X8,X9) | sP3(X8,'const.ast.Tword8_0',X9) | sP4(X8,'const.ast.Tword8_0',X9)) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f3070,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword8_0',X9) | sP4(X8,'const.ast.Tword8_0',X9) | s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword8array_0') | sP3(X8,'const.ast.Tword8_0',X9) | sP0('const.ast.Tword8_0',X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword8_0',X9) | sP11(X6,X7,X8,'const.ast.Tword8_0',X9) | sP2(X7,X6,X8,'const.ast.Tword8_0',X9) | sP10('const.ast.Tword8_0',X9) | sP9('const.ast.Tword8_0',X9) | sP8('const.ast.Tword8_0',X9) | sP6('const.ast.Tword8_0',X9) | ~sP12(X6,X7,X8,'const.ast.Tword8_0',X9)) ) | $spl17),
  inference(resolution,[],[f2328,f842])).
fof(f3065,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP9(sK32,X9) | sP8(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl5 | $spl18)),
  inference(subsumption_resolution,[],[f3060,f1478])).
fof(f3001,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,sK32,X7) | sP4(X6,sK32,X7) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP1(X4,X5,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP9(sK32,X7) | sP8(sK32,X7) | sP7(sK32,X7) | sP6(sK32,X7) | ~sP12(X4,X5,X6,sK32,X7)) ) | $spl18),
  inference(resolution,[],[f1478,f842])).
fof(f3056,plain,(
  $false | ($spl4 | $spl16 | $spl87)),
  inference(subsumption_resolution,[],[f3055,f1477])).
fof(f3055,plain,(
  s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | ($spl4 | $spl87)),
  inference(forward_demodulation,[],[f2341,f1343])).
fof(f3020,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword64_0',X9) | sP4(X8,'const.ast.Tword64_0',X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t','const.ast.Tword64_0') | sP3(X8,'const.ast.Tword64_0',X9) | sP0('const.ast.Tword64_0',X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword64_0',X9) | sP11(X6,X7,X8,'const.ast.Tword64_0',X9) | sP2(X7,X6,X8,'const.ast.Tword64_0',X9) | sP10('const.ast.Tword64_0',X9) | sP9('const.ast.Tword64_0',X9) | sP8('const.ast.Tword64_0',X9) | sP6('const.ast.Tword64_0',X9) | ~sP12(X6,X7,X8,'const.ast.Tword64_0',X9)) ) | $spl21),
  inference(resolution,[],[f3017,f842])).
fof(f2905,plain,(
  ( ! [X2,X0,X3,X1] : (sP5(X0,X1,X2,'const.ast.Tword64_0',X3) | ~sP12(X0,X1,X2,'const.ast.Tword64_0',X3) | sP6('const.ast.Tword64_0',X3) | sP7('const.ast.Tword64_0',X3) | sP8('const.ast.Tword64_0',X3) | sP9('const.ast.Tword64_0',X3) | sP10('const.ast.Tword64_0',X3) | sP2(X1,X0,X2,'const.ast.Tword64_0',X3) | sP11(X0,X1,X2,'const.ast.Tword64_0',X3) | sP1(X0,X1,X2,'const.ast.Tword64_0',X3) | sP0('const.ast.Tword64_0',X0,X1,X2,X3) | sP3(X2,'const.ast.Tword64_0',X3) | sP4(X2,'const.ast.Tword64_0',X3)) ) | $spl90),
  inference(cnf_transformation,[],[f2905_D])).
fof(f2905_D,plain,(
  ( ! [X2,X0,X3,X1] : (sP5(X0,X1,X2,'const.ast.Tword64_0',X3) | ~sP12(X0,X1,X2,'const.ast.Tword64_0',X3) | sP6('const.ast.Tword64_0',X3) | sP7('const.ast.Tword64_0',X3) | sP8('const.ast.Tword64_0',X3) | sP9('const.ast.Tword64_0',X3) | sP10('const.ast.Tword64_0',X3) | sP2(X1,X0,X2,'const.ast.Tword64_0',X3) | sP11(X0,X1,X2,'const.ast.Tword64_0',X3) | sP1(X0,X1,X2,'const.ast.Tword64_0',X3) | sP0('const.ast.Tword64_0',X0,X1,X2,X3) | sP3(X2,'const.ast.Tword64_0',X3) | sP4(X2,'const.ast.Tword64_0',X3)) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f1482,plain,(
  s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8array_0') | $spl25),
  inference(cnf_transformation,[],[f1482_D])).
fof(f1482_D,plain,(
  s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8array_0') <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f3006,plain,(
  ( ! [X4,X2,X3,X1] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8array_0') | sP5(X1,X2,X3,'const.ast.Tword64_0',X4) | sP4(X3,'const.ast.Tword64_0',X4) | sP3(X3,'const.ast.Tword64_0',X4) | sP0('const.ast.Tword64_0',X1,X2,X3,X4) | sP1(X1,X2,X3,'const.ast.Tword64_0',X4) | sP11(X1,X2,X3,'const.ast.Tword64_0',X4) | sP2(X2,X1,X3,'const.ast.Tword64_0',X4) | sP10('const.ast.Tword64_0',X4) | sP9('const.ast.Tword64_0',X4) | sP8('const.ast.Tword64_0',X4) | sP7('const.ast.Tword64_0',X4) | sP6('const.ast.Tword64_0',X4) | ~sP12(X1,X2,X3,'const.ast.Tword64_0',X4)) ) | $spl21),
  inference(superposition,[],[f1479,f842])).
fof(f1483,plain,(
  s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | $spl24),
  inference(cnf_transformation,[],[f1483_D])).
fof(f1483_D,plain,(
  s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f3003,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X4,X5,X6,sK32,X7) | sP4(X6,sK32,X7) | sP3(X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP1(X4,X5,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP9(sK32,X7) | sP8(sK32,X7) | sP7(sK32,X7) | sP6(sK32,X7) | ~sP12(X4,X5,X6,sK32,X7)) ) | ($spl4 | $spl18)),
  inference(forward_demodulation,[],[f3001,f1343])).
fof(f2806,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8array_0') | sP12(X16,X17,X18,'const.ast.Tword64_0',X19) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18),s('type.num.num',X20))) | s('type.semanticPrimitives.v',X19) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X20)))) ) | $spl20),
  inference(superposition,[],[f854,f1480])).
fof(f2805,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X12,X13,X14,'const.ast.Tword64_0',X15) | sP4(X14,'const.ast.Tword64_0',X15) | sP3(X14,'const.ast.Tword64_0',X15) | sP0('const.ast.Tword64_0',X12,X13,X14,X15) | sP1(X12,X13,X14,'const.ast.Tword64_0',X15) | sP11(X12,X13,X14,'const.ast.Tword64_0',X15) | sP2(X13,X12,X14,'const.ast.Tword64_0',X15) | sP10('const.ast.Tword64_0',X15) | sP9('const.ast.Tword64_0',X15) | sP8('const.ast.Tword64_0',X15) | sP7('const.ast.Tword64_0',X15) | sP6('const.ast.Tword64_0',X15) | ~sP12(X12,X13,X14,'const.ast.Tword64_0',X15)) ) | $spl20),
  inference(superposition,[],[f842,f1480])).
fof(f2791,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X0,X1,X2,'const.ast.Tword64_0',X3) | sP4(X2,'const.ast.Tword64_0',X3) | sP3(X2,'const.ast.Tword64_0',X3) | sP0('const.ast.Tword64_0',X0,X1,X2,X3) | sP1(X0,X1,X2,'const.ast.Tword64_0',X3) | sP11(X0,X1,X2,'const.ast.Tword64_0',X3) | sP2(X1,X0,X2,'const.ast.Tword64_0',X3) | sP10('const.ast.Tword64_0',X3) | sP9('const.ast.Tword64_0',X3) | sP8('const.ast.Tword64_0',X3) | sP7('const.ast.Tword64_0',X3) | sP6('const.ast.Tword64_0',X3) | ~sP12(X0,X1,X2,'const.ast.Tword64_0',X3)) ) | $spl20),
  inference(superposition,[],[f1480,f842])).
fof(f1500,plain,(
  ( ! [X26,X27] : (sP9(sK32,X26) | s('type.semanticPrimitives.v',X26) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X27)))))) ) | $spl30),
  inference(cnf_transformation,[],[f1500_D])).
fof(f1500_D,plain,(
  ( ! [X26,X27] : (sP9(sK32,X26) | s('type.semanticPrimitives.v',X26) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X27)))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f2490,plain,(
  ( ! [X26,X27] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | sP9(sK32,X26) | s('type.semanticPrimitives.v',X26) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X27)))))) ) | $spl4),
  inference(subsumption_resolution,[],[f2379,f1336])).
fof(f2379,plain,(
  ( ! [X26,X27] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | sP9(sK32,X26) | ~p(s(bool,'T_0')) | s('type.semanticPrimitives.v',X26) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X27)))))) ) | $spl4),
  inference(superposition,[],[f868,f1343])).
fof(f2378,plain,(
  ( ! [X25] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | ~sP9(sK32,X25)) ) | $spl4),
  inference(superposition,[],[f866,f1343])).
fof(f1498,plain,(
  ( ! [X24,X23] : (sP10(sK32,X23) | s('type.semanticPrimitives.v',X23) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X24)))))) ) | $spl28),
  inference(cnf_transformation,[],[f1498_D])).
fof(f1498_D,plain,(
  ( ! [X24,X23] : (sP10(sK32,X23) | s('type.semanticPrimitives.v',X23) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X24)))))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f1479,plain,(
  s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword64_0') | $spl21),
  inference(cnf_transformation,[],[f1479_D])).
fof(f1479_D,plain,(
  s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword64_0') <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f2489,plain,(
  ( ! [X24,X23] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword64_0') | sP10(sK32,X23) | s('type.semanticPrimitives.v',X23) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X24)))))) ) | $spl4),
  inference(subsumption_resolution,[],[f2377,f1336])).
fof(f2377,plain,(
  ( ! [X24,X23] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword64_0') | sP10(sK32,X23) | ~p(s(bool,'T_0')) | s('type.semanticPrimitives.v',X23) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X24)))))) ) | $spl4),
  inference(superposition,[],[f864,f1343])).
fof(f1480,plain,(
  s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword64_0') | $spl20),
  inference(cnf_transformation,[],[f1480_D])).
fof(f1480_D,plain,(
  s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword64_0') <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f2376,plain,(
  ( ! [X22] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP10(sK32,X22)) ) | $spl4),
  inference(superposition,[],[f862,f1343])).
fof(f2375,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8array_0') | sP12(X16,X17,X18,sK32,X19) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18),s('type.num.num',X20))) | s('type.semanticPrimitives.v',X19) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X20)))) ) | $spl4),
  inference(superposition,[],[f854,f1343])).
fof(f1481,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,sK32,X7) | ~sP12(X4,X5,X6,sK32,X7) | sP6(sK32,X7) | sP7(sK32,X7) | sP8(sK32,X7) | sP9(sK32,X7) | sP10(sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP1(X4,X5,X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP3(X6,sK32,X7) | sP4(X6,sK32,X7)) ) | $spl22),
  inference(cnf_transformation,[],[f1481_D])).
fof(f1481_D,plain,(
  ( ! [X6,X4,X7,X5] : (sP5(X4,X5,X6,sK32,X7) | ~sP12(X4,X5,X6,sK32,X7) | sP6(sK32,X7) | sP7(sK32,X7) | sP8(sK32,X7) | sP9(sK32,X7) | sP10(sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP1(X4,X5,X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP3(X6,sK32,X7) | sP4(X6,sK32,X7)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f2374,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X12,X13,X14,sK32,X15) | sP4(X14,sK32,X15) | sP3(X14,sK32,X15) | sP0(sK32,X12,X13,X14,X15) | sP1(X12,X13,X14,sK32,X15) | sP11(X12,X13,X14,sK32,X15) | sP2(X13,X12,X14,sK32,X15) | sP10(sK32,X15) | sP9(sK32,X15) | sP8(sK32,X15) | sP7(sK32,X15) | sP6(sK32,X15) | ~sP12(X12,X13,X14,sK32,X15)) ) | $spl4),
  inference(superposition,[],[f842,f1343])).
fof(f2360,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X2,X3,X4,sK32,X5) | sP4(X4,sK32,X5) | sP3(X4,sK32,X5) | sP0(sK32,X2,X3,X4,X5) | sP1(X2,X3,X4,sK32,X5) | sP11(X2,X3,X4,sK32,X5) | sP2(X3,X2,X4,sK32,X5) | sP10(sK32,X5) | sP9(sK32,X5) | sP8(sK32,X5) | sP7(sK32,X5) | sP6(sK32,X5) | ~sP12(X2,X3,X4,sK32,X5)) ) | $spl4),
  inference(superposition,[],[f1343,f842])).
fof(f2359,plain,(
  ( ! [X1] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP10(sK32,X1)) ) | $spl4),
  inference(superposition,[],[f1343,f862])).
fof(f2358,plain,(
  ( ! [X0] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | ~sP9(sK32,X0)) ) | $spl4),
  inference(superposition,[],[f1343,f866])).
fof(f2346,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8array_0') | sP5(X3,X4,X5,sK32,X6) | sP4(X5,sK32,X6) | sP3(X5,sK32,X6) | sP0(sK32,X3,X4,X5,X6) | sP1(X3,X4,X5,sK32,X6) | sP11(X3,X4,X5,sK32,X6) | sP2(X4,X3,X5,sK32,X6) | sP10(sK32,X6) | sP9(sK32,X6) | sP8(sK32,X6) | sP7(sK32,X6) | sP6(sK32,X6) | ~sP12(X3,X4,X5,sK32,X6)) ) | $spl5),
  inference(superposition,[],[f1342,f842])).
fof(f2345,plain,(
  ( ! [X2] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword64_0') | ~sP10(sK32,X2)) ) | $spl5),
  inference(superposition,[],[f1342,f862])).
fof(f2344,plain,(
  ( ! [X1] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | ~sP9(sK32,X1)) ) | $spl5),
  inference(superposition,[],[f1342,f866])).
fof(f2342,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | ~sP12(X6,X7,X8,sK32,X9) | sP6(sK32,X9) | sP7(sK32,X9) | sP8(sK32,X9) | sP10(sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP1(X6,X7,X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP3(X8,sK32,X9) | sP4(X8,sK32,X9)) ) | $spl88),
  inference(cnf_transformation,[],[f2342_D])).
fof(f2342_D,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | ~sP12(X6,X7,X8,sK32,X9) | sP6(sK32,X9) | sP7(sK32,X9) | sP8(sK32,X9) | sP10(sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP1(X6,X7,X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP3(X8,sK32,X9) | sP4(X8,sK32,X9)) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f1767,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP10(sK32,X9) | sP8(sK32,X9) | sP7(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | $spl14),
  inference(resolution,[],[f1475,f842])).
fof(f2341,plain,(
  s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',sK32) | $spl87),
  inference(cnf_transformation,[],[f2341_D])).
fof(f2341_D,plain,(
  s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',sK32) <=> ~$spl87),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl87])])).
fof(f1769,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',sK32) | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1)))))) ) | $spl14),
  inference(subsumption_resolution,[],[f1765,f1336])).
fof(f1765,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.ast.t','const.ast.Tword8_0') != s('type.ast.t',sK32) | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1)))))) ) | $spl14),
  inference(resolution,[],[f1475,f868])).
fof(f1784,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',sK32) | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))))) ) | $spl18),
  inference(subsumption_resolution,[],[f1780,f1336])).
fof(f1780,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.ast.t','const.ast.Tword64_0') != s('type.ast.t',sK32) | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))))) ) | $spl18),
  inference(resolution,[],[f1478,f864])).
fof(f2100,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | ~sP12(X6,X7,X8,sK32,X9) | sP6(sK32,X9) | sP7(sK32,X9) | sP8(sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP1(X6,X7,X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP3(X8,sK32,X9) | sP4(X8,sK32,X9)) ) | $spl76),
  inference(cnf_transformation,[],[f2100_D])).
fof(f2100_D,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | ~sP12(X6,X7,X8,sK32,X9) | sP6(sK32,X9) | sP7(sK32,X9) | sP8(sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP1(X6,X7,X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP3(X8,sK32,X9) | sP4(X8,sK32,X9)) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f1790,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP8(sK32,X9) | sP7(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl14 | $spl18)),
  inference(subsumption_resolution,[],[f1782,f1475])).
fof(f1782,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP9(sK32,X9) | sP8(sK32,X9) | sP7(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | $spl18),
  inference(resolution,[],[f1478,f842])).
fof(f2102,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP8(sK32,X9) | sP7(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl14 | $spl18)),
  inference(subsumption_resolution,[],[f1767,f1478])).
fof(f2331,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tword8_0',X9) | sP4(X8,'const.ast.Tword8_0',X9) | s('type.ast.t','const.ast.Tword8_0') = s('type.ast.t','const.ast.Tword8array_0') | sP3(X8,'const.ast.Tword8_0',X9) | sP0('const.ast.Tword8_0',X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tword8_0',X9) | sP11(X6,X7,X8,'const.ast.Tword8_0',X9) | sP2(X7,X6,X8,'const.ast.Tword8_0',X9) | sP10('const.ast.Tword8_0',X9) | sP9('const.ast.Tword8_0',X9) | sP8('const.ast.Tword8_0',X9) | sP6('const.ast.Tword8_0',X9) | ~sP12(X6,X7,X8,'const.ast.Tword8_0',X9)) ) | $spl17),
  inference(resolution,[],[f2328,f842])).
fof(f2103,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP8(sK32,X9) | sP7(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl4 | $spl14 | $spl18)),
  inference(forward_demodulation,[],[f2102,f1343])).
fof(f2099,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP8(sK32,X9) | sP7(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl4 | $spl14 | $spl18)),
  inference(forward_demodulation,[],[f1790,f1343])).
fof(f2097,plain,(
  s('type.ast.t','const.ast.Tstring_0') = s('type.ast.t','const.ast.Tword8array_0') | $spl72),
  inference(cnf_transformation,[],[f2097_D])).
fof(f2097_D,plain,(
  s('type.ast.t','const.ast.Tstring_0') = s('type.ast.t','const.ast.Tword8array_0') <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f2098,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tstring_0',X9) | ~sP12(X6,X7,X8,'const.ast.Tstring_0',X9) | sP6('const.ast.Tstring_0',X9) | sP8('const.ast.Tstring_0',X9) | sP9('const.ast.Tstring_0',X9) | sP10('const.ast.Tstring_0',X9) | sP2(X7,X6,X8,'const.ast.Tstring_0',X9) | sP11(X6,X7,X8,'const.ast.Tstring_0',X9) | sP1(X6,X7,X8,'const.ast.Tstring_0',X9) | sP0('const.ast.Tstring_0',X6,X7,X8,X9) | sP3(X8,'const.ast.Tstring_0',X9) | sP4(X8,'const.ast.Tstring_0',X9)) ) | $spl74),
  inference(cnf_transformation,[],[f2098_D])).
fof(f2098_D,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tstring_0',X9) | ~sP12(X6,X7,X8,'const.ast.Tstring_0',X9) | sP6('const.ast.Tstring_0',X9) | sP8('const.ast.Tstring_0',X9) | sP9('const.ast.Tstring_0',X9) | sP10('const.ast.Tstring_0',X9) | sP2(X7,X6,X8,'const.ast.Tstring_0',X9) | sP11(X6,X7,X8,'const.ast.Tstring_0',X9) | sP1(X6,X7,X8,'const.ast.Tstring_0',X9) | sP0('const.ast.Tstring_0',X6,X7,X8,X9) | sP3(X8,'const.ast.Tstring_0',X9) | sP4(X8,'const.ast.Tstring_0',X9)) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f2094,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tstring_0',X9) | sP4(X8,'const.ast.Tstring_0',X9) | s('type.ast.t','const.ast.Tstring_0') = s('type.ast.t','const.ast.Tword8array_0') | sP3(X8,'const.ast.Tstring_0',X9) | sP0('const.ast.Tstring_0',X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tstring_0',X9) | sP11(X6,X7,X8,'const.ast.Tstring_0',X9) | sP2(X7,X6,X8,'const.ast.Tstring_0',X9) | sP10('const.ast.Tstring_0',X9) | sP9('const.ast.Tstring_0',X9) | sP8('const.ast.Tstring_0',X9) | sP6('const.ast.Tstring_0',X9) | ~sP12(X6,X7,X8,'const.ast.Tstring_0',X9)) ) | $spl13),
  inference(resolution,[],[f2091,f842])).
fof(f2091,plain,(
  ( ! [X2] : (~sP7('const.ast.Tstring_0',X2)) ) | $spl13),
  inference(trivial_inequality_removal,[],[f2079])).
fof(f2079,plain,(
  ( ! [X2] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tchar_0') | ~sP7('const.ast.Tstring_0',X2)) ) | $spl13),
  inference(superposition,[],[f1473,f874])).
fof(f1861,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | ~sP12(X6,X7,X8,sK32,X9) | sP6(sK32,X9) | sP7(sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP1(X6,X7,X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP3(X8,sK32,X9) | sP4(X8,sK32,X9)) ) | $spl70),
  inference(cnf_transformation,[],[f1861_D])).
fof(f1861_D,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | ~sP12(X6,X7,X8,sK32,X9) | sP6(sK32,X9) | sP7(sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP1(X6,X7,X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP3(X8,sK32,X9) | sP4(X8,sK32,X9)) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f1870,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP7(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl4 | $spl10 | $spl14 | $spl18)),
  inference(forward_demodulation,[],[f1869,f1343])).
fof(f1869,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP7(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl10 | $spl14 | $spl18)),
  inference(subsumption_resolution,[],[f1868,f1475])).
fof(f1868,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP9(sK32,X9) | sP7(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl10 | $spl18)),
  inference(subsumption_resolution,[],[f1755,f1478])).
fof(f1755,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP10(sK32,X9) | sP9(sK32,X9) | sP7(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | $spl10),
  inference(resolution,[],[f1472,f842])).
fof(f1864,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP7(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl4 | $spl10 | $spl14 | $spl18)),
  inference(forward_demodulation,[],[f1863,f1343])).
fof(f1863,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP7(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl10 | $spl14 | $spl18)),
  inference(subsumption_resolution,[],[f1774,f1478])).
fof(f1774,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP10(sK32,X9) | sP7(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl10 | $spl14)),
  inference(subsumption_resolution,[],[f1767,f1472])).
fof(f1860,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP7(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl4 | $spl10 | $spl14 | $spl18)),
  inference(forward_demodulation,[],[f1791,f1343])).
fof(f1791,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP7(sK32,X9) | sP6(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl10 | $spl14 | $spl18)),
  inference(subsumption_resolution,[],[f1790,f1472])).
fof(f1858,plain,(
  s('type.ast.t','const.ast.Tint_0') = s('type.ast.t','const.ast.Tword8array_0') | $spl66),
  inference(cnf_transformation,[],[f1858_D])).
fof(f1858_D,plain,(
  s('type.ast.t','const.ast.Tint_0') = s('type.ast.t','const.ast.Tword8array_0') <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f1859,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tint_0',X9) | ~sP12(X6,X7,X8,'const.ast.Tint_0',X9) | sP6('const.ast.Tint_0',X9) | sP8('const.ast.Tint_0',X9) | sP9('const.ast.Tint_0',X9) | sP10('const.ast.Tint_0',X9) | sP2(X7,X6,X8,'const.ast.Tint_0',X9) | sP11(X6,X7,X8,'const.ast.Tint_0',X9) | sP1(X6,X7,X8,'const.ast.Tint_0',X9) | sP0('const.ast.Tint_0',X6,X7,X8,X9) | sP3(X8,'const.ast.Tint_0',X9) | sP4(X8,'const.ast.Tint_0',X9)) ) | $spl68),
  inference(cnf_transformation,[],[f1859_D])).
fof(f1859_D,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tint_0',X9) | ~sP12(X6,X7,X8,'const.ast.Tint_0',X9) | sP6('const.ast.Tint_0',X9) | sP8('const.ast.Tint_0',X9) | sP9('const.ast.Tint_0',X9) | sP10('const.ast.Tint_0',X9) | sP2(X7,X6,X8,'const.ast.Tint_0',X9) | sP11(X6,X7,X8,'const.ast.Tint_0',X9) | sP1(X6,X7,X8,'const.ast.Tint_0',X9) | sP0('const.ast.Tint_0',X6,X7,X8,X9) | sP3(X8,'const.ast.Tint_0',X9) | sP4(X8,'const.ast.Tint_0',X9)) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f1855,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,'const.ast.Tint_0',X9) | sP4(X8,'const.ast.Tint_0',X9) | s('type.ast.t','const.ast.Tint_0') = s('type.ast.t','const.ast.Tword8array_0') | sP3(X8,'const.ast.Tint_0',X9) | sP0('const.ast.Tint_0',X6,X7,X8,X9) | sP1(X6,X7,X8,'const.ast.Tint_0',X9) | sP11(X6,X7,X8,'const.ast.Tint_0',X9) | sP2(X7,X6,X8,'const.ast.Tint_0',X9) | sP10('const.ast.Tint_0',X9) | sP9('const.ast.Tint_0',X9) | sP8('const.ast.Tint_0',X9) | sP6('const.ast.Tint_0',X9) | ~sP12(X6,X7,X8,'const.ast.Tint_0',X9)) ) | $spl9),
  inference(resolution,[],[f1811,f842])).
fof(f1811,plain,(
  ( ! [X3] : (~sP7('const.ast.Tint_0',X3)) ) | $spl9),
  inference(trivial_inequality_removal,[],[f1800])).
fof(f1800,plain,(
  ( ! [X3] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tchar_0') | ~sP7('const.ast.Tint_0',X3)) ) | $spl9),
  inference(superposition,[],[f1470,f874])).
fof(f1794,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | ~sP12(X6,X7,X8,sK32,X9) | sP7(sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP1(X6,X7,X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP3(X8,sK32,X9) | sP4(X8,sK32,X9)) ) | $spl64),
  inference(cnf_transformation,[],[f1794_D])).
fof(f1794_D,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | ~sP12(X6,X7,X8,sK32,X9) | sP7(sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP1(X6,X7,X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP3(X8,sK32,X9) | sP4(X8,sK32,X9)) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f1793,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP7(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl4 | $spl6 | $spl10 | $spl14 | $spl18)),
  inference(forward_demodulation,[],[f1792,f1343])).
fof(f1792,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP7(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl6 | $spl10 | $spl14 | $spl18)),
  inference(subsumption_resolution,[],[f1791,f1469])).
fof(f1785,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword64_0') | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))))) ) | ($spl4 | $spl18)),
  inference(forward_demodulation,[],[f1784,f1343])).
fof(f1777,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | ~sP12(X6,X7,X8,sK32,X9) | sP7(sK32,X9) | sP10(sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP1(X6,X7,X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP3(X8,sK32,X9) | sP4(X8,sK32,X9)) ) | $spl60),
  inference(cnf_transformation,[],[f1777_D])).
fof(f1777_D,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | ~sP12(X6,X7,X8,sK32,X9) | sP7(sK32,X9) | sP10(sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP1(X6,X7,X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP3(X8,sK32,X9) | sP4(X8,sK32,X9)) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f1776,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP10(sK32,X9) | sP7(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl4 | $spl6 | $spl10 | $spl14)),
  inference(forward_demodulation,[],[f1775,f1343])).
fof(f1775,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP10(sK32,X9) | sP7(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl6 | $spl10 | $spl14)),
  inference(subsumption_resolution,[],[f1774,f1469])).
fof(f1770,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X1)))))) ) | ($spl4 | $spl14)),
  inference(forward_demodulation,[],[f1769,f1343])).
fof(f1763,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | ~sP12(X6,X7,X8,sK32,X9) | sP7(sK32,X9) | sP9(sK32,X9) | sP10(sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP1(X6,X7,X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP3(X8,sK32,X9) | sP4(X8,sK32,X9)) ) | $spl56),
  inference(cnf_transformation,[],[f1763_D])).
fof(f1763_D,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | ~sP12(X6,X7,X8,sK32,X9) | sP7(sK32,X9) | sP9(sK32,X9) | sP10(sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP1(X6,X7,X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP3(X8,sK32,X9) | sP4(X8,sK32,X9)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f1762,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP10(sK32,X9) | sP9(sK32,X9) | sP7(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl4 | $spl6 | $spl10)),
  inference(forward_demodulation,[],[f1761,f1343])).
fof(f1761,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP10(sK32,X9) | sP9(sK32,X9) | sP7(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f1755,f1469])).
fof(f1759,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X1)))))) ) | $spl54),
  inference(cnf_transformation,[],[f1759_D])).
fof(f1759_D,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X1)))))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f1473,plain,(
  s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tstring_0') | $spl13),
  inference(cnf_transformation,[],[f1473_D])).
fof(f1473_D,plain,(
  s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tstring_0') <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f1758,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tstring_0') | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X1)))))) ) | ($spl4 | $spl10)),
  inference(forward_demodulation,[],[f1757,f1343])).
fof(f1757,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tstring_0') != s('type.ast.t',sK32) | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X1)))))) ) | $spl10),
  inference(subsumption_resolution,[],[f1753,f1336])).
fof(f1753,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.ast.t','const.ast.Tstring_0') != s('type.ast.t',sK32) | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X1)))))) ) | $spl10),
  inference(resolution,[],[f1472,f872])).
fof(f872,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1) | ~p(s(bool,'T_0')) | s('type.ast.t','const.ast.Tstring_0') != s('type.ast.t',X0) | s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X2)))))) )),
  inference(cnf_transformation,[],[f627])).
fof(f627,plain,(
  ! [X0,X1] : ((~sP8(X0,X1) | (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK40(X1,X0)))))) & s('type.ast.t','const.ast.Tstring_0') = s('type.ast.t',X0) & p(s(bool,'T_0')))) & (! [X2] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X2))))) | s('type.ast.t','const.ast.Tstring_0') != s('type.ast.t',X0) | ~p(s(bool,'T_0'))) | sP8(X0,X1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK40])],[f626])).
fof(f626,plain,(
  ! [X0,X1] : ((~sP8(X0,X1) | ? [X3] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X3))))) & s('type.ast.t','const.ast.Tstring_0') = s('type.ast.t',X0) & p(s(bool,'T_0')))) & (! [X2] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X2))))) | s('type.ast.t','const.ast.Tstring_0') != s('type.ast.t',X0) | ~p(s(bool,'T_0'))) | sP8(X0,X1)))),
  inference(rectify,[],[f625])).
fof(f625,plain,(
  ! [X4,X3] : ((~sP8(X4,X3) | ? [X33] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X33))))) & s('type.ast.t','const.ast.Tstring_0') = s('type.ast.t',X4) & p(s(bool,'T_0')))) & (! [X33] : (s('type.semanticPrimitives.v',X3) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X33))))) | s('type.ast.t','const.ast.Tstring_0') != s('type.ast.t',X4) | ~p(s(bool,'T_0'))) | sP8(X4,X3)))),
  inference(nnf_transformation,[],[f580])).
fof(f580,plain,(
  ! [X4,X3] : (sP8(X4,X3) <=> ? [X33] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X33))))) & s('type.ast.t','const.ast.Tstring_0') = s('type.ast.t',X4) & p(s(bool,'T_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f1752,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | ~sP12(X6,X7,X8,sK32,X9) | sP7(sK32,X9) | sP8(sK32,X9) | sP9(sK32,X9) | sP10(sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP1(X6,X7,X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP3(X8,sK32,X9) | sP4(X8,sK32,X9)) ) | $spl52),
  inference(cnf_transformation,[],[f1752_D])).
fof(f1752_D,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | ~sP12(X6,X7,X8,sK32,X9) | sP7(sK32,X9) | sP8(sK32,X9) | sP9(sK32,X9) | sP10(sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP1(X6,X7,X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP3(X8,sK32,X9) | sP4(X8,sK32,X9)) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f1751,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP10(sK32,X9) | sP9(sK32,X9) | sP8(sK32,X9) | sP7(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f1746,f1343])).
fof(f1746,plain,(
  ( ! [X6,X8,X7,X9] : (sP5(X6,X7,X8,sK32,X9) | sP4(X8,sK32,X9) | s('type.ast.t','const.ast.Tword8array_0') = s('type.ast.t',sK32) | sP3(X8,sK32,X9) | sP0(sK32,X6,X7,X8,X9) | sP1(X6,X7,X8,sK32,X9) | sP11(X6,X7,X8,sK32,X9) | sP2(X7,X6,X8,sK32,X9) | sP10(sK32,X9) | sP9(sK32,X9) | sP8(sK32,X9) | sP7(sK32,X9) | ~sP12(X6,X7,X8,sK32,X9)) ) | $spl6),
  inference(resolution,[],[f1469,f842])).
fof(f1750,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X1)))))) ) | $spl50),
  inference(cnf_transformation,[],[f1750_D])).
fof(f1750_D,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X1)))))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f1470,plain,(
  s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tint_0') | $spl9),
  inference(cnf_transformation,[],[f1470_D])).
fof(f1470_D,plain,(
  s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tint_0') <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f1749,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tint_0') | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X1)))))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f1748,f1343])).
fof(f1748,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tint_0') != s('type.ast.t',sK32) | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X1)))))) ) | $spl6),
  inference(subsumption_resolution,[],[f1744,f1336])).
fof(f1744,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s('type.ast.t','const.ast.Tint_0') != s('type.ast.t',sK32) | s('type.semanticPrimitives.v',X0) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X1)))))) ) | $spl6),
  inference(resolution,[],[f1469,f880])).
fof(f880,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1) | ~p(s(bool,'T_0')) | s('type.ast.t','const.ast.Tint_0') != s('type.ast.t',X0) | s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X2)))))) )),
  inference(cnf_transformation,[],[f633])).
fof(f633,plain,(
  ! [X0,X1] : ((~sP6(X0,X1) | (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK42(X1,X0)))))) & s('type.ast.t','const.ast.Tint_0') = s('type.ast.t',X0) & p(s(bool,'T_0')))) & (! [X2] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X2))))) | s('type.ast.t','const.ast.Tint_0') != s('type.ast.t',X0) | ~p(s(bool,'T_0'))) | sP6(X0,X1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK42])],[f632])).
fof(f632,plain,(
  ! [X0,X1] : ((~sP6(X0,X1) | ? [X3] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X3))))) & s('type.ast.t','const.ast.Tint_0') = s('type.ast.t',X0) & p(s(bool,'T_0')))) & (! [X2] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X2))))) | s('type.ast.t','const.ast.Tint_0') != s('type.ast.t',X0) | ~p(s(bool,'T_0'))) | sP6(X0,X1)))),
  inference(rectify,[],[f631])).
fof(f631,plain,(
  ! [X4,X3] : ((~sP6(X4,X3) | ? [X35] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X35))))) & s('type.ast.t','const.ast.Tint_0') = s('type.ast.t',X4) & p(s(bool,'T_0')))) & (! [X35] : (s('type.semanticPrimitives.v',X3) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X35))))) | s('type.ast.t','const.ast.Tint_0') != s('type.ast.t',X4) | ~p(s(bool,'T_0'))) | sP6(X4,X3)))),
  inference(nnf_transformation,[],[f578])).
fof(f578,plain,(
  ! [X4,X3] : (sP6(X4,X3) <=> ? [X35] : (s('type.semanticPrimitives.v',X3) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X35))))) & s('type.ast.t','const.ast.Tint_0') = s('type.ast.t',X4) & p(s(bool,'T_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f1731,plain,(
  ( ! [X9] : (p(s(bool,X9)) | s(bool,X9) != s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28)))) ) | $spl36),
  inference(cnf_transformation,[],[f1731_D])).
fof(f1731_D,plain,(
  ( ! [X9] : (p(s(bool,X9)) | s(bool,X9) != s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28)))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f1692,plain,(
  ( ! [X196,X197] : (p(s(bool,X196)) | p(s(bool,X197)) | s(bool,X197) != s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28)))) )),
  inference(resolution,[],[f835,f1331])).
fof(f1593,plain,(
  ( ! [X30,X31,X29] : (p(s(bool,X29)) | ~p(s(bool,X30)) | s(bool,X29) != s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28))) | s(bool,X30) != s(bool,X31)) )),
  inference(resolution,[],[f835,f933])).
fof(f1733,plain,(
  ( ! [X13] : (s(bool,X13) != s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28)))) ) | $spl40),
  inference(cnf_transformation,[],[f1733_D])).
fof(f1733_D,plain,(
  ( ! [X13] : (s(bool,X13) != s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28)))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f1592,plain,(
  ( ! [X28,X26,X27] : (p(s(bool,X26)) | ~p(s(bool,X27)) | s(bool,X26) != s(bool,X27) | s(bool,X28) != s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28)))) )),
  inference(resolution,[],[f835,f933])).
fof(f1590,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,X20)) | ~p(s(bool,X21)) | p(s(bool,X22)) | s(bool,X22) != s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28)))) )),
  inference(resolution,[],[f835,f932])).
fof(f1589,plain,(
  ( ! [X19,X17,X18] : (p(s(bool,X17)) | p(s(bool,X18)) | s(bool,X17) != s(bool,X19) | s(bool,X18) != s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28)))) )),
  inference(resolution,[],[f835,f931])).
fof(f1588,plain,(
  ( ! [X14,X15,X16] : (p(s(bool,X14)) | ~p(s(bool,X15)) | s(bool,X14) != s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28))) | s(bool,X15) != s(bool,X16)) )),
  inference(resolution,[],[f835,f929])).
fof(f1587,plain,(
  ( ! [X12,X13,X11] : (p(s(bool,X11)) | ~p(s(bool,X12)) | s(bool,X11) != s(bool,X12) | s(bool,X13) != s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28)))) )),
  inference(resolution,[],[f835,f929])).
fof(f1586,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,X8)) | p(s(bool,X9)) | s(bool,X8) != s(bool,X10) | s(bool,X9) != s(bool,'const.typeSoundInvariants.ctMap_has_lists_1'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),sK28)))) )),
  inference(resolution,[],[f835,f927])).
fof(f1505,plain,(
  ( ! [X35,X34] : (sP6(sK32,X34) | s('type.semanticPrimitives.v',X34) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X35)))))) ) | $spl34),
  inference(cnf_transformation,[],[f1505_D])).
fof(f1505_D,plain,(
  ( ! [X35,X34] : (sP6(sK32,X34) | s('type.semanticPrimitives.v',X34) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X35)))))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f1504,plain,(
  ( ! [X35,X34] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tint_0') | sP6(sK32,X34) | s('type.semanticPrimitives.v',X34) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X35)))))) ) | $spl4),
  inference(subsumption_resolution,[],[f1372,f1336])).
fof(f1372,plain,(
  ( ! [X35,X34] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tint_0') | sP6(sK32,X34) | ~p(s(bool,'T_0')) | s('type.semanticPrimitives.v',X34) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X35)))))) ) | $spl4),
  inference(superposition,[],[f880,f1343])).
fof(f1469,plain,(
  ( ! [X0] : (~sP6(sK32,X0)) ) | $spl6),
  inference(cnf_transformation,[],[f1469_D])).
fof(f1469_D,plain,(
  ( ! [X0] : (~sP6(sK32,X0)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f1471,plain,(
  s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tint_0') | $spl8),
  inference(cnf_transformation,[],[f1471_D])).
fof(f1471_D,plain,(
  s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tint_0') <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f1371,plain,(
  ( ! [X33] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tint_0') | ~sP6(sK32,X33)) ) | $spl4),
  inference(superposition,[],[f878,f1343])).
fof(f878,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tint_0') = s('type.ast.t',X0) | ~sP6(X0,X1)) )),
  inference(cnf_transformation,[],[f633])).
fof(f1502,plain,(
  ( ! [X30,X29] : (sP8(sK32,X29) | s('type.semanticPrimitives.v',X29) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X30)))))) ) | $spl32),
  inference(cnf_transformation,[],[f1502_D])).
fof(f1502_D,plain,(
  ( ! [X30,X29] : (sP8(sK32,X29) | s('type.semanticPrimitives.v',X29) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X30)))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f1501,plain,(
  ( ! [X30,X29] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tstring_0') | sP8(sK32,X29) | s('type.semanticPrimitives.v',X29) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X30)))))) ) | $spl4),
  inference(subsumption_resolution,[],[f1369,f1336])).
fof(f1369,plain,(
  ( ! [X30,X29] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tstring_0') | sP8(sK32,X29) | ~p(s(bool,'T_0')) | s('type.semanticPrimitives.v',X29) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X30)))))) ) | $spl4),
  inference(superposition,[],[f872,f1343])).
fof(f1472,plain,(
  ( ! [X1] : (~sP8(sK32,X1)) ) | $spl10),
  inference(cnf_transformation,[],[f1472_D])).
fof(f1472_D,plain,(
  ( ! [X1] : (~sP8(sK32,X1)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f1474,plain,(
  s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tstring_0') | $spl12),
  inference(cnf_transformation,[],[f1474_D])).
fof(f1474_D,plain,(
  s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tstring_0') <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f1368,plain,(
  ( ! [X28] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tstring_0') | ~sP8(sK32,X28)) ) | $spl4),
  inference(superposition,[],[f870,f1343])).
fof(f870,plain,(
  ( ! [X0,X1] : (s('type.ast.t','const.ast.Tstring_0') = s('type.ast.t',X0) | ~sP8(X0,X1)) )),
  inference(cnf_transformation,[],[f627])).
fof(f1499,plain,(
  ( ! [X26,X27] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | sP9(sK32,X26) | s('type.semanticPrimitives.v',X26) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X27)))))) ) | $spl4),
  inference(subsumption_resolution,[],[f1367,f1336])).
fof(f1367,plain,(
  ( ! [X26,X27] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8_0') | sP9(sK32,X26) | ~p(s(bool,'T_0')) | s('type.semanticPrimitives.v',X26) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X27)))))) ) | $spl4),
  inference(superposition,[],[f868,f1343])).
fof(f1366,plain,(
  ( ! [X25] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | ~sP9(sK32,X25)) ) | $spl4),
  inference(superposition,[],[f866,f1343])).
fof(f1497,plain,(
  ( ! [X24,X23] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword64_0') | sP10(sK32,X23) | s('type.semanticPrimitives.v',X23) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X24)))))) ) | $spl4),
  inference(subsumption_resolution,[],[f1365,f1336])).
fof(f1365,plain,(
  ( ! [X24,X23] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword64_0') | sP10(sK32,X23) | ~p(s(bool,'T_0')) | s('type.semanticPrimitives.v',X23) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X24)))))) ) | $spl4),
  inference(superposition,[],[f864,f1343])).
fof(f1364,plain,(
  ( ! [X22] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP10(sK32,X22)) ) | $spl4),
  inference(superposition,[],[f862,f1343])).
fof(f1363,plain,(
  ( ! [X19,X17,X20,X18,X16] : (s('type.ast.t','const.ast.Tchar_0') != s('type.ast.t','const.ast.Tword8array_0') | sP12(X16,X17,X18,sK32,X19) | s('type.option.option'('type.typeSoundInvariants.store_t'),'const.option.SOME_1'(s('type.typeSoundInvariants.store_t','const.typeSoundInvariants.W8array_t_0'))) != s('type.option.option'('type.typeSoundInvariants.store_t'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),X18),s('type.num.num',X20))) | s('type.semanticPrimitives.v',X19) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X20)))) ) | $spl4),
  inference(superposition,[],[f854,f1343])).
fof(f1362,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X12,X13,X14,sK32,X15) | sP4(X14,sK32,X15) | sP3(X14,sK32,X15) | sP0(sK32,X12,X13,X14,X15) | sP1(X12,X13,X14,sK32,X15) | sP11(X12,X13,X14,sK32,X15) | sP2(X13,X12,X14,sK32,X15) | sP10(sK32,X15) | sP9(sK32,X15) | sP8(sK32,X15) | sP7(sK32,X15) | sP6(sK32,X15) | ~sP12(X12,X13,X14,sK32,X15)) ) | $spl4),
  inference(superposition,[],[f842,f1343])).
fof(f1348,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8array_0') | sP5(X4,X5,X6,sK32,X7) | sP4(X6,sK32,X7) | sP3(X6,sK32,X7) | sP0(sK32,X4,X5,X6,X7) | sP1(X4,X5,X6,sK32,X7) | sP11(X4,X5,X6,sK32,X7) | sP2(X5,X4,X6,sK32,X7) | sP10(sK32,X7) | sP9(sK32,X7) | sP8(sK32,X7) | sP7(sK32,X7) | sP6(sK32,X7) | ~sP12(X4,X5,X6,sK32,X7)) ) | $spl4),
  inference(superposition,[],[f1343,f842])).
fof(f1347,plain,(
  ( ! [X3] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword64_0') | ~sP10(sK32,X3)) ) | $spl4),
  inference(superposition,[],[f1343,f862])).
fof(f1346,plain,(
  ( ! [X2] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tword8_0') | ~sP9(sK32,X2)) ) | $spl4),
  inference(superposition,[],[f1343,f866])).
fof(f1345,plain,(
  ( ! [X1] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tstring_0') | ~sP8(sK32,X1)) ) | $spl4),
  inference(superposition,[],[f1343,f870])).
fof(f1344,plain,(
  ( ! [X0] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t','const.ast.Tint_0') | ~sP6(sK32,X0)) ) | $spl4),
  inference(superposition,[],[f1343,f878])).
fof(f1340,plain,(
  ( ! [X6] : (s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',sK31))) != s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),X6)))) ) | $spl0),
  inference(cnf_transformation,[],[f1340_D])).
fof(f1340_D,plain,(
  ( ! [X6] : (s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',sK31))) != s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),X6)))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f1343,plain,(
  s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',sK32) | $spl4),
  inference(cnf_transformation,[],[f1343_D])).
fof(f1343_D,plain,(
  s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',sK32) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f837,plain,(
  ( ! [X6] : (s('type.ast.t','const.ast.Tchar_0') = s('type.ast.t',sK32) | s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',sK31))) != s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),X6)))) )),
  inference(cnf_transformation,[],[f610])).
fof(f1341,plain,(
  ( ! [X5] : (s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',sK31))) != s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X5)))) ) | $spl2),
  inference(cnf_transformation,[],[f1341_D])).
fof(f1341_D,plain,(
  ( ! [X5] : (s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',sK31))) != s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X5)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f838,plain,(
  ( ! [X6,X5] : (s('type.option.option'('type.list.list'('type.string.char')),'const.semanticPrimitives.v_to_char_list_1'(s('type.semanticPrimitives.v',sK31))) != s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X5))) | s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.semanticPrimitives.v_to_list_1'(s('type.semanticPrimitives.v',sK31))) != s('type.option.option'('type.list.list'('type.semanticPrimitives.v')),'const.option.SOME_1'(s('type.list.list'('type.semanticPrimitives.v'),X6)))) )),
  inference(cnf_transformation,[],[f610])).
% SZS output end Proof for thm.typeSound
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 553
% Passive clauses: 5953
% Generated clauses: 15642
% Final active clauses: 457
% Final passive clauses: 5175
% Input formulas: 310
% Initial clauses: 496
% 
% Selected by SInE selection: 155
% SInE iterations: 1
% 
% Duplicate literals: 34
% Trivial inequalities: 247
% Fw subsumption resolutions: 705
% Fw demodulations: 1872
% Bw demodulations: 47
% 
% Simple tautologies: 141
% Equational tautologies: 3
% Forward subsumptions: 4206
% 
% Binary resolution: 791
% Forward superposition: 5334
% Backward superposition: 5258
% Self superposition: 27
% Equality resolution: 9
% 
% Split clauses: 617
% Split components: 1249
% SAT solver clauses: 634
% SAT solver unit clauses: 10
% SAT solver binary clauses: 453
% 
% Sat splits: 617
% Sat splitting refutations: 16
% 
% Memory used [KB]: 17142
% Time elapsed: 1.005 s
% ------------------------------
% ------------------------------
% Success in time 13.03 s
