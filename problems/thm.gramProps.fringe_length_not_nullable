include('incl/logic.ax').
include('incl/bool.ax').
include('incl/marker.ax').
include('incl/num.ax').
include('incl/combin.ax').
include('incl/normalForms.ax').
include('incl/sat.ax').
include('incl/relation.ax').
include('incl/pair.ax').
include('incl/prim_rec.ax').
include('incl/arithmetic.ax').
include('incl/numeral.ax').
include('incl/ConseqConv.ax').
include('incl/sum.ax').
include('incl/one.ax').
include('incl/option.ax').
include('incl/while.ax').
include('incl/operator.ax').
include('incl/basicSize.ax').
include('incl/numpair.ax').
include('incl/pred_set.ax').
include('incl/ind_type.ax').
include('incl/list.ax').
include('incl/rich_list.ax').
include('incl/quantHeuristics.ax').
include('incl/fcp.ax').
include('incl/logroot.ax').
include('incl/bit.ax').
include('incl/string.ax').
include('incl/numposrep.ax').
include('incl/ASCIInumbers.ax').
include('incl/numeral_bit.ax').
include('incl/sum_num.ax').
include('incl/words.ax').
include('incl/alignment.ax').
include('incl/sorting.ax').
include('incl/finite_map.ax').
include('incl/alist.ax').
include('incl/sptree.ax').
include('incl/indexedLists.ax').
include('incl/res_quan.ax').
include('incl/quotient.ax').
include('incl/quotient_list.ax').
include('incl/set_sep.ax').
include('incl/set_relation.ax').
include('incl/wot.ax').
include('incl/toto.ax').
include('incl/comparison.ax').
include('incl/llist.ax').
include('incl/misc.ax').
include('incl/quotient_pair.ax').
include('incl/quotient_sum.ax').
include('incl/divides.ax').
include('incl/gcd.ax').
include('incl/quotient_option.ax').
include('incl/integer.ax').
include('incl/Omega.ax').
include('incl/int_arith.ax').
include('incl/integer_word.ax').
include('incl/lib.ax').
include('incl/ffi.ax').
include('incl/grammar.ax').
include('incl/peg.ax').
include('incl/pegexec.ax').
include('incl/state_transformer.ax').
include('incl/lprefix_lub.ax').
include('incl/tokens.ax').
include('incl/gram.ax').
include('incl/ast.ax').
include('incl/asm.ax').
include('incl/semanticPrimitives.ax').
include('incl/reg_alloc.ax').
include('incl/typeSystem.ax').
include('incl/funBigStep.ax').
include('incl/termination.ax').
include('incl/labLang.ax').
include('incl/lab_filter.ax').
include('incl/lab_to_target.ax').
include('incl/closLang.ax').
include('incl/bvl.ax').
include('incl/bvp.ax').
include('incl/bvp_live.ax').
include('incl/smallStep.ax').
include('incl/bigStep.ax').
include('incl/db_vars.ax').
include('incl/clos_free.ax').
include('incl/clos_annotate.ax').
include('incl/clos_number.ax').
include('incl/tokenUtils.ax').
include('incl/cmlPtreeConversion.ax').
include('incl/lexer_fun.ax').
include('incl/NTproperties.ax').
include('incl/initialProgram.ax').
include('incl/bvp_simp.ax').
include('incl/bvi.ax').
include('incl/bvp_space.ax').
include('incl/bvi_to_bvp.ax').
include('incl/evalProps.ax').
include('incl/determ.ax').
include('incl/bigClock.ax').
include('incl/interp.ax').
include('incl/funBigStepEquiv.ax').
include('incl/conLang.ax').
include('incl/exhLang.ax').
include('incl/dec_to_exh.ax').
include('incl/patLang.ax').
include('incl/pat_to_clos.ax').
include('incl/bvl_jump.ax').
include('incl/clos_call.ax').
include('incl/clos_remove.ax').
include('incl/clos_mti.ax').
include('incl/clos_to_bvl.ax').
include('incl/bvl_inline.ax').
include('incl/asmSem.ax').
include('incl/asmProps.ax').
include('incl/targetSem.ax').
include('incl/typeSoundInvariants.ax').
include('incl/typeSysProps.ax').
include('incl/bvl_handle.ax').
include('incl/bvl_const.ax').
include('incl/bvl_to_bvi.ax').
include('incl/modLang.ax').
include('incl/mod_to_con.ax').
include('incl/bigSmallInvariants.ax').
include('incl/con_to_dec.ax').
include('incl/targetProps.ax').
include('incl/weakening.ax').
include('incl/bigSmallEquiv.ax').
include('incl/untypedSafety.ax').
include('incl/funBigStepProps.ax').
include('incl/source_to_mod.ax').
include('incl/semantics.ax').
include('incl/initSemEnv.ax').
include('incl/typeSound.ax').
include('incl/wordLang.ax').
include('incl/exh_to_pat.ax').
include('incl/wordSem.ax').
include('incl/labSem.ax').
include('incl/semanticsProps.ax').
include('incl/labProps.ax').
include('incl/closSem.ax').
include('incl/closProps.ax').
include('incl/patSem.ax').
include('incl/modSem.ax').
include('incl/bvlSem.ax').
include('incl/bviSem.ax').
include('incl/bvlProps.ax').
include('incl/bvpSem.ax').
include('incl/exhSem.ax').
include('incl/conSem.ax').
include('incl/decSem.ax').
include('incl/conProps.ax').
include('incl/decProps.ax').
include('incl/exhProps.ax').
include('incl/modProps.ax').
include('incl/patProps.ax').
include('incl/reg_allocProof.ax').
include('incl/bviProps.ax').
include('incl/bvpProps.ax').
include('incl/bvp_simpProof.ax').
include('incl/bvp_spaceProof.ax').
include('incl/bvl_jumpProof.ax').
include('incl/wellorder.ax').
include('incl/cardinal.ax').
include('incl/hrat.ax').
include('incl/hreal.ax').
include('incl/realax.ax').
include('incl/real.ax').
include('incl/topology.ax').
include('incl/nets.ax').
include('incl/seq.ax').
include('incl/lim.ax').
include('incl/powser.ax').
include('incl/transc.ax').
include('incl/intreal.ax').
include('incl/binary_ieee.ax').
include('incl/tailrec.ax').
include('incl/prog.ax').
include('incl/temporal.ax').
include('incl/address.ax').
include('incl/state.ax').
include('incl/temporal_state.ax').
include('incl/machine_ieee.ax').
include('incl/bitstring.ax').
include('incl/arm.ax').
include('incl/blast.ax').
include('incl/update.ax').
include('incl/arm_step.ax').
include('incl/arm6_target.ax').
include('incl/arm6_eval_encode.ax').
include('incl/mlstring.ax').
include('incl/patternMatches.ax').
include('incl/ml_translator.ax').
include('incl/ml_optimise.ax').
include('incl/ml_pmatch.ax').
include('incl/mini_prelude.ax').
include('incl/bag.ax').
include('incl/benchmark.ax').
include('incl/arm8.ax').
include('incl/arm8_step.ax').
include('incl/clos_relation.ax').
include('incl/clos_relationProps.ax').
include('incl/clos_removeProof.ax').
include('incl/simpleSexp.ax').
include('incl/fromSexp.ax').
include('incl/word_inst.ax').
include('incl/word_alloc.ax').
include('incl/word_remove.ax').
include('incl/word_to_word.ax').
include('incl/stackLang.ax').
include('incl/bvp_to_word.ax').
include('incl/stack_alloc.ax').
include('incl/riscv.ax').
include('incl/riscv_step.ax').
include('incl/std_prelude.ax').
include('incl/holSyntaxLib.ax').
include('incl/holSyntax.ax').
include('incl/holSyntaxExtra.ax').
include('incl/ml_module_demo.ax').
include('incl/bvp_liveProof.ax').
include('incl/PhysicistsQueue.ax').
include('incl/holBoolSyntax.ax').
include('incl/holAxiomsSyntax.ax').
include('incl/setSpec.ax').
include('incl/holSemantics.ax').
include('incl/holSemanticsExtra.ax').
include('incl/holBool.ax').
include('incl/commonUnif.ax').
include('incl/term.ax').
include('incl/subst.ax').
include('incl/walk.ax').
include('incl/walkstar.ax').
include('incl/unifDef.ax').
include('incl/unifProps.ax').
include('incl/redUnif.ax').
include('incl/parmove.ax').
include('incl/word_to_stack.ax').
include('incl/bvl_inlineProof.ax').
include('incl/clos_known.ax').
include('incl/clos_knownProof.ax').
include('incl/okasaki_misc.ax').
include('incl/UnbalancedSet.ax').
include('incl/mips.ax').
include('incl/mips_step.ax').
include('incl/mips_target.ax').
include('incl/mips_target_correct.ax').
include('incl/bvl_constProof.ax').
include('incl/int_bitwise.ax').
include('incl/copying_gc.ax').
include('incl/bvp_to_wordProps.ax').
include('incl/jrhSet.ax').
include('incl/BankersQueue.ax').
include('incl/cmlPEG.ax').
include('incl/clos_numberProof.ax').
include('incl/cmlParse.ax').
include('incl/holKernel.ax').
include('incl/reader.ax').
include('incl/x64.ax').
include('incl/source_to_modProof.ax').
include('incl/collapse.ax').
include('incl/infer_t.ax').
include('incl/unify.ax').
include('incl/infer.ax').
include('incl/inferProps.ax').
include('incl/infer_eComplete.ax').
include('incl/bvl_handleProof.ax').
include('incl/dec_to_exhProof.ax').
include('incl/regexpMatch.ax').
include('incl/ninetyOne.ax').
include('incl/example_91.ax').
include('incl/arm8_target.ax').
include('incl/BatchedQueue.ax').
include('incl/stack_remove.ax').
include('incl/stack_names.ax').
include('incl/stack_to_lab.ax').
include('incl/backend.ax').
include('incl/compiler.ax').
include('incl/ImplicitQueue.ax').
include('incl/stackSem.ax').
fof('thm.gramProps.NT_rank_def', axiom, ![V_27A_27]: ![V_27N_27]: s('type.num.num','const.gramProps.NT_rank_1'(s('type.sum.sum'('type.gram.MMLnonT',V_27A_27),V_27N_27))) = s('type.num.num','const.sum.sum_CASE_3'(s('type.sum.sum'('type.gram.MMLnonT',V_27A_27),V_27N_27),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nElist|49|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nEseq_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nElist2_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nE_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nE|39|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nEhandle_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nElogicOR_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nElogicAND_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nEtyped_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nEbefore_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nEcomp_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nErel_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nElistop_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nEadd_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nEmult_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nEapp_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nFQV_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nV_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nDtypeCons_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nDconstructor_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nTypeList2_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nType_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nPType_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nDType_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nTbase_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nTyOp_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nTypeName_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nDecls_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nStructure_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nDecl_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nTypeDec_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nSpecLine_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nPtuple_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nPbase_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nPapp_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nPatternList_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nPEs_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nPE_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nPE|39|_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nLetDecs_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nLetDec_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nFDecl_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x1_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nTyVarList_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('fun'('type.gram.MMLnonT','type.num.num'),'_dst_x0x1x0x0_4'(s('fun'('bool','fun'('type.num.num','fun'('type.num.num','type.num.num'))),'const.bool.COND_0'),s('fun'('type.gram.MMLnonT','bool'),'_dst_x1x0_2'(s('fun'('type.gram.MMLnonT','fun'('type.gram.MMLnonT','bool')),'=_0'),s('type.gram.MMLnonT','const.gram.nTyvarN_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.num.|48|_0'))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))),s('fun'(V_27A_27,'type.num.num'),'_dst_x0_1'(s('type.num.num','const.num.|48|_0')))))).
fof('thm.gramProps.cmlG_applied|split|0', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nV_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x1_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.AlphaT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.EMPTY_0'))))))))))))))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isUpper_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))))))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x1_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.SymbolT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.EMPTY_0')))))))))))))))))))))))))))))))))))).
fof('thm.gramProps.cmlG_applied|split|1', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x0_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.AlphaT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('bool','T_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x0_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.SymbolT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('bool','T_0')))))))).
fof('thm.gramProps.cmlG_applied|split|2', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x1_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.AlphaT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isUpper_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','happ'(s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.AlphaT_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','happ'(s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.AlphaT_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','happ'(s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.AlphaT_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','happ'(s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.AlphaT_0'),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|3', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x0_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.TyvarT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('bool','T_0')))))).
fof('thm.gramProps.cmlG_applied|split|4', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.LparT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.RparT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x0_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.TyvarT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('bool','T_0')))))))))).
fof('thm.gramProps.cmlG_applied|split|5', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.CommaT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))).
fof('thm.gramProps.cmlG_applied|split|6', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.CommaT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|7', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.DatatypeT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecls_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))).
fof('thm.gramProps.cmlG_applied|split|8', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.TypeT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))).
fof('thm.gramProps.cmlG_applied|split|9', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.ArrowT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|10', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.CommaT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|11', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.pair.UNCURRY_1'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'_dst_x00x11x00_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x11x00_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x00x11_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.tokens.token')),'_dst_x01x10_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.tokens.token')),'const.tokens.LongidT_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('bool','T_0')))))))))).
fof('thm.gramProps.cmlG_applied|split|12', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))))))).
fof('thm.gramProps.cmlG_applied|split|13', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|14', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x0_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.TyvarT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('bool','T_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.LparT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.RparT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.LparT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.RparT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|15', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.StructureT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructName_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptionalSignatureAscription_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.StructT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.EndT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))).
fof('thm.gramProps.cmlG_applied|split|16', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructName_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x1_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.AlphaT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0')))))))))).
fof('thm.gramProps.cmlG_applied|split|17', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))))).
fof('thm.gramProps.cmlG_applied|split|18', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.ValT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nV_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.ColonT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.TypeT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.ExceptionT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))))))).
fof('thm.gramProps.cmlG_applied|split|19', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSignatureValue_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.SigT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.EndT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))).
fof('thm.gramProps.cmlG_applied|split|20', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x1_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.SymbolT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.EMPTY_0'))))))))))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.EqualsT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|21', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.LparT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.LparT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|22', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|23', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nV_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.integer.int','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x0_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.integer.int','type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.integer.int','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.integer.int','type.tokens.token'),'const.tokens.IntT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('bool','T_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x0_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.StringT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('bool','T_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.string.char','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x0_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.string.char','type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.string.char','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.string.char','type.tokens.token'),'const.tokens.CharT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('bool','T_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.UnderbarT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.LbrackT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.RbrackT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.LbrackT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.RbrackT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))))))).
fof('thm.gramProps.cmlG_applied|split|24', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.CommaT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|25', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|26', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|27', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.StarT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|28', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.BarT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|29', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.DarrowT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))).
fof('thm.gramProps.cmlG_applied|split|30', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.DarrowT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))).
fof('thm.gramProps.cmlG_applied|split|31', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptionalSignatureAscription_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.SealT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSignatureValue_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|32', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|33', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.pair.UNCURRY_1'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'_dst_x00x11x01_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x11x00_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x00x11_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.tokens.token')),'const.tokens.LongidT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x1_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.AlphaT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x1_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.SymbolT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.StarT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|34', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))))).
fof('thm.gramProps.cmlG_applied|split|35', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.StarT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))))))).
fof('thm.gramProps.cmlG_applied|split|36', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|37', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))))).
fof('thm.gramProps.cmlG_applied|split|38', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.ValT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nV_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.FunT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|39', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nV_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.pair.UNCURRY_1'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'_dst_x00x11x01_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x11x00_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x00x11_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.tokens.token')),'const.tokens.LongidT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isAlpha_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isUpper_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.EMPTY_0')))))))))))))))))))))))))).
fof('thm.gramProps.cmlG_applied|split|40', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nV_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))).
fof('thm.gramProps.cmlG_applied|split|41', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.ColonT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|42', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtuple_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.LparT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.RparT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))).
fof('thm.gramProps.cmlG_applied|split|43', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|44', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|45', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|46', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.OrelseT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|47', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.AndalsoT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|48', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|49', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.CommaT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))).
fof('thm.gramProps.cmlG_applied|split|50', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.CommaT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|51', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.HandleT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|52', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|53', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|54', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.LparT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.RparT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtuple_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.LparT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.RparT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.UNION_2'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.integer.int','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x0_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.integer.int','type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.integer.int','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.integer.int','type.tokens.token'),'const.tokens.IntT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('bool','T_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.string.char','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x0_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.string.char','type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.string.char','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.string.char','type.tokens.token'),'const.tokens.CharT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('bool','T_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'_dst_x0x1x0_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x0x1x0_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'_dst_x0x1_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'type.tokens.token'),'const.tokens.StringT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('bool','T_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.LetT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.InT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.EndT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.LbrackT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.RbrackT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.LbrackT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.RbrackT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'happ'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.tokens.token','const.tokens.OpT_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))))))))))))).
fof('thm.gramProps.cmlG_applied|split|55', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|56', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|57', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.IfT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.ThenT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.ElseT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.RaiseT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))))).
fof('thm.gramProps.cmlG_applied|split|58', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.IfT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.ThenT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.ElseT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.CaseT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.OfT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.FnT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.DarrowT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.RaiseT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))))))))).
fof('thm.gramProps.cmlG_applied|split|59', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecls_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecls_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.AndT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|60', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeCons_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))).
fof('thm.gramProps.cmlG_applied|split|61', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeCons_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeCons_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.BarT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|62', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.SemicolonT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))))).
fof('thm.gramProps.cmlG_applied|split|63', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.ValT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.EqualsT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.FunT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.ExceptionT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))))))))).
fof('thm.gramProps.cmlG_applied|split|64', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.OfT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|65', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|66', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'happ'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'happ'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.GSPEC_1'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.pair.UNCURRY_1'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'_dst_x00x11x01_3'(s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'fun'('bool','type.pair.prod'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'_dst_x00x11x00_3'(s('fun'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')))),'const.list.CONS_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'))),'_dst_x00x11_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'type.tokens.token')),'const.tokens.LongidT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|bslash||slash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('bool','bool'),'~_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isAlpha_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x0x1_2'(s('fun'('type.string.char','bool'),'const.string.isUpper_0'),s('fun'('type.list.list'('type.string.char'),'type.string.char'),'const.list.HD_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.string.char'),'fun'('fun'('type.list.list'('type.string.char'),'bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'happ'(s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'happ'(s('fun'('type.string.char','fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char'))),'const.list.CONS_0'),s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.EMPTY_0')))))))))))))))))))))).
fof('thm.gramProps.cmlG_applied|split|67', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.AlphaT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|68', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.AndT_0'))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_applied|split|69', axiom, s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.finite_map.FAPPLY_2'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))),s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0'))))) = s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.INSERT_2'(s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.TOK_1'(s('type.tokens.token','const.tokens.SymbolT_1'(s('type.list.list'('type.string.char'),'const.list.CONS_2'(s('type.string.char','const.string.CHR_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.list.list'('type.string.char'),'const.list.NIL_0'))))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))),s('fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool'),'const.pred_set.EMPTY_0')))))).
fof('thm.gramProps.cmlG_FDOM', axiom, s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'fun'('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'bool')),'const.grammar.grammar_rules_1'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'))))) = s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptionalSignatureAscription_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSignatureValue_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLineList_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOptTypEqn_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructName_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecls_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtuple_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nV_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecls_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeCons_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))),s('fun'('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'bool'),'const.pred_set.EMPTY_0')))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
fof('thm.gramProps.gramProps_5_prove_ltb', axiom, ![V_27A_27]: ![V_27c_27, V_27b_27, V_27a_27]: s('fun'(V_27A_27,'bool'),'const.pred_set.INTER_2'(s('fun'(V_27A_27,'bool'),'const.pred_set.UNION_2'(s('fun'(V_27A_27,'bool'),V_27a_27),s('fun'(V_27A_27,'bool'),V_27b_27))),s('fun'(V_27A_27,'bool'),V_27c_27))) = s('fun'(V_27A_27,'bool'),'const.pred_set.UNION_2'(s('fun'(V_27A_27,'bool'),'const.pred_set.INTER_2'(s('fun'(V_27A_27,'bool'),V_27a_27),s('fun'(V_27A_27,'bool'),V_27c_27))),s('fun'(V_27A_27,'bool'),'const.pred_set.INTER_2'(s('fun'(V_27A_27,'bool'),V_27b_27),s('fun'(V_27A_27,'bool'),V_27c_27)))))).
fof('thm.gramProps.gramProps_6_prove_ltb', axiom, ![V_27A_27,V_27B_27]: ![V_27x_27, V_27f_27]: s('bool','happ'(s('fun'(V_27B_27,'bool'),'const.pred_set.GSPEC_1'(s('fun'(V_27A_27,'type.pair.prod'(V_27B_27,'bool')),V_27f_27))),s(V_27B_27,V_27x_27))) = s('bool','const.bool.IN_2'(s(V_27B_27,V_27x_27),s('fun'(V_27B_27,'bool'),'const.pred_set.GSPEC_1'(s('fun'(V_27A_27,'type.pair.prod'(V_27B_27,'bool')),V_27f_27)))))).
fof('thm.gramProps.gramProps_7_prove_ltb', axiom, ![V_27A_27,V_27B_27]: ![V_27sn_27, V_27rest_27, V_27N_27, V_27G_27]: s('bool','const.NTproperties.nullableML_3'(s('type.grammar.grammar'(V_27A_27,V_27B_27),V_27G_27),s('fun'('type.sum.sum'(V_27B_27,'type.num.num'),'bool'),'const.pred_set.INSERT_2'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27N_27),s('fun'('type.sum.sum'(V_27B_27,'type.num.num'),'bool'),V_27sn_27))),s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.symbol'(V_27A_27,V_27B_27),'const.grammar.NT_1'(s('type.sum.sum'(V_27B_27,'type.num.num'),V_27N_27))),s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),V_27rest_27))))) = s('bool','F_0')).
fof('thm.gramProps.gramProps_8_prove_ltb', axiom, ![V_27A_27,V_27B_27]: ![V_27z_27, V_27y_27, V_27x_27, V_27sn_27, V_27G_27]: (p(s('bool','const.NTproperties.nullableML_3'(s('type.grammar.grammar'(V_27A_27,V_27B_27),V_27G_27),s('fun'('type.sum.sum'(V_27B_27,'type.num.num'),'bool'),V_27sn_27),s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.symbol'(V_27A_27,V_27B_27),V_27x_27),s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.symbol'(V_27A_27,V_27B_27),V_27y_27),s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),V_27z_27)))))))) <=> (p(s('bool','const.NTproperties.nullableML_3'(s('type.grammar.grammar'(V_27A_27,V_27B_27),V_27G_27),s('fun'('type.sum.sum'(V_27B_27,'type.num.num'),'bool'),V_27sn_27),s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.symbol'(V_27A_27,V_27B_27),V_27x_27),s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'const.list.NIL_0')))))) & (p(s('bool','const.NTproperties.nullableML_3'(s('type.grammar.grammar'(V_27A_27,V_27B_27),V_27G_27),s('fun'('type.sum.sum'(V_27B_27,'type.num.num'),'bool'),V_27sn_27),s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.symbol'(V_27A_27,V_27B_27),V_27y_27),s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'const.list.NIL_0')))))) & p(s('bool','const.NTproperties.nullableML_3'(s('type.grammar.grammar'(V_27A_27,V_27B_27),V_27G_27),s('fun'('type.sum.sum'(V_27B_27,'type.num.num'),'bool'),V_27sn_27),s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),V_27z_27)))))))).
fof('thm.gramProps.nullable_TopLevelDecs', axiom, p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDecs_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))).
fof('thm.gramProps.nullable_TopLevelDec', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTopLevelDec_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Structure', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nStructure_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_NonETopLevelDecs', axiom, p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nNonETopLevelDecs_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0'))))))).
fof('thm.gramProps.nullable_Eseq', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_PbaseList|49|', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_PatternList', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_FDecl', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Dconstructor', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_AddOps', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAddOps_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_MultOps', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nMultOps_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_RelOps', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nRelOps_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Pattern', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Papp', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPapp_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_ListOps', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nListOps_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_CompOps', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nCompOps_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Elist|49|', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_E|39|', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE|39|_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Decl', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_TypeAbbrevDec', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_DtypeDecl', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_TyVarList', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_LetDec', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Pbase', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbase_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Ptuple', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPtuple_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_SpecLine', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nSpecLine_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_TypeDec', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_TyvarN', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Type', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_PType', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_DType', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDType_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Tbase', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTbase_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_TyOp', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_UQTyOp', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_E', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Ehandle', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEhandle_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_ElogicOR', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_ElogicAND', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Etyped', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtyped_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Ebefore', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbefore_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Ecomp', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEcomp_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Erel', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nErel_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Elistop', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElistop_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Eadd', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEadd_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Emult', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEmult_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Eapp', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEapp_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Ebase', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEbase_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_FQV', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_V', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nV_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_Etuple', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEtuple_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_ConstructorName', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.nullable_UQConstructorName', axiom, ~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.CONS_2'(s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))))),s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.NIL_0')))))))).
fof('thm.gramProps.fringe_lengths_def', axiom, ![V_27A_27,V_27B_27]: ![V_27G_27, V_27sf_27]: s('fun'('type.num.num','bool'),'const.gramProps.fringe_lengths_2'(s('type.grammar.grammar'(V_27A_27,V_27B_27),V_27G_27),s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),V_27sf_27))) = s('fun'('type.num.num','bool'),'const.pred_set.GSPEC_1'(s('fun'('type.list.list'(V_27A_27),'type.pair.prod'('type.num.num','bool')),'_dst_x0x1x1_3'(s('fun'('type.num.num','fun'('bool','type.pair.prod'('type.num.num','bool'))),'const.pair.,_0'),s('fun'('type.list.list'(V_27A_27),'type.num.num'),'const.list.LENGTH_0'),s('fun'('type.list.list'(V_27A_27),'bool'),'_dst_x0x1_2'(s('fun'('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'bool'),'const.relation.RTC_2'(s('fun'('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'fun'('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'bool')),'const.grammar.derive_1'(s('type.grammar.grammar'(V_27A_27,V_27B_27),V_27G_27))),s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),V_27sf_27))),s('fun'('type.list.list'(V_27A_27),'type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27))),'const.list.MAP_1'(s('fun'(V_27A_27,'type.grammar.symbol'(V_27A_27,V_27B_27)),'const.grammar.TOK_0')))))))))).
fof('thm.gramProps.fringe_length_ptree', axiom, ![V_27A_27,V_27B_27]: ![V_27G_27, V_27i_27, V_27pt_27]: ((s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27pt_27))) = s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'const.list.MAP_2'(s('fun'(V_27A_27,'type.grammar.symbol'(V_27A_27,V_27B_27)),'const.grammar.TOK_0'),s('type.list.list'(V_27A_27),V_27i_27))) & p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'(V_27A_27,V_27B_27),V_27G_27),s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27pt_27))))) => p(s('bool','const.bool.IN_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(V_27A_27),V_27i_27))),s('fun'('type.num.num','bool'),'const.gramProps.fringe_lengths_2'(s('type.grammar.grammar'(V_27A_27,V_27B_27),V_27G_27),s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.symbol'(V_27A_27,V_27B_27),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27pt_27))),s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'const.list.NIL_0')))))))))).
fof('thm.gramProps.fringe_length_not_nullable', conjecture, ![V_27A_27,V_27B_27]: ![V_27G_27, V_27s_27]: (~ (p(s('bool','const.NTproperties.nullable_2'(s('type.grammar.grammar'(V_27A_27,V_27B_27),V_27G_27),s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'const.list.CONS_2'(s('type.grammar.symbol'(V_27A_27,V_27B_27),V_27s_27),s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'const.list.NIL_0'))))))) => ![V_27pt_27]: (s('type.grammar.symbol'(V_27A_27,V_27B_27),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27pt_27))) = s('type.grammar.symbol'(V_27A_27,V_27B_27),V_27s_27) => (p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'(V_27A_27,V_27B_27),V_27G_27),s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27pt_27)))) => p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.grammar.symbol'(V_27A_27,V_27B_27)),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27pt_27)))))))))))).
