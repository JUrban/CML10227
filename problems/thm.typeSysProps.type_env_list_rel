include('incl/logic.ax').
include('incl/bool.ax').
include('incl/marker.ax').
include('incl/num.ax').
include('incl/combin.ax').
include('incl/normalForms.ax').
include('incl/sat.ax').
include('incl/relation.ax').
include('incl/pair.ax').
include('incl/prim_rec.ax').
include('incl/arithmetic.ax').
include('incl/numeral.ax').
include('incl/ConseqConv.ax').
include('incl/sum.ax').
include('incl/one.ax').
include('incl/option.ax').
include('incl/while.ax').
include('incl/operator.ax').
include('incl/basicSize.ax').
include('incl/numpair.ax').
include('incl/pred_set.ax').
include('incl/ind_type.ax').
include('incl/list.ax').
include('incl/rich_list.ax').
include('incl/quantHeuristics.ax').
include('incl/fcp.ax').
include('incl/logroot.ax').
include('incl/bit.ax').
include('incl/string.ax').
include('incl/numposrep.ax').
include('incl/ASCIInumbers.ax').
include('incl/numeral_bit.ax').
include('incl/sum_num.ax').
include('incl/words.ax').
include('incl/alignment.ax').
include('incl/sorting.ax').
include('incl/finite_map.ax').
include('incl/alist.ax').
include('incl/sptree.ax').
include('incl/indexedLists.ax').
include('incl/res_quan.ax').
include('incl/quotient.ax').
include('incl/quotient_list.ax').
include('incl/set_sep.ax').
include('incl/set_relation.ax').
include('incl/wot.ax').
include('incl/toto.ax').
include('incl/comparison.ax').
include('incl/llist.ax').
include('incl/misc.ax').
include('incl/quotient_pair.ax').
include('incl/quotient_sum.ax').
include('incl/divides.ax').
include('incl/gcd.ax').
include('incl/quotient_option.ax').
include('incl/integer.ax').
include('incl/Omega.ax').
include('incl/int_arith.ax').
include('incl/integer_word.ax').
include('incl/lib.ax').
include('incl/ffi.ax').
include('incl/grammar.ax').
include('incl/peg.ax').
include('incl/pegexec.ax').
include('incl/state_transformer.ax').
include('incl/lprefix_lub.ax').
include('incl/tokens.ax').
include('incl/gram.ax').
include('incl/ast.ax').
include('incl/asm.ax').
include('incl/semanticPrimitives.ax').
include('incl/reg_alloc.ax').
include('incl/typeSystem.ax').
include('incl/funBigStep.ax').
include('incl/termination.ax').
include('incl/labLang.ax').
include('incl/lab_filter.ax').
include('incl/lab_to_target.ax').
include('incl/closLang.ax').
include('incl/bvl.ax').
include('incl/bvp.ax').
include('incl/bvp_live.ax').
include('incl/smallStep.ax').
include('incl/bigStep.ax').
include('incl/db_vars.ax').
include('incl/clos_free.ax').
include('incl/clos_annotate.ax').
include('incl/clos_number.ax').
include('incl/tokenUtils.ax').
include('incl/cmlPtreeConversion.ax').
include('incl/lexer_fun.ax').
include('incl/NTproperties.ax').
include('incl/initialProgram.ax').
include('incl/bvp_simp.ax').
include('incl/bvi.ax').
include('incl/bvp_space.ax').
include('incl/bvi_to_bvp.ax').
include('incl/evalProps.ax').
include('incl/determ.ax').
include('incl/bigClock.ax').
include('incl/interp.ax').
include('incl/funBigStepEquiv.ax').
include('incl/conLang.ax').
include('incl/exhLang.ax').
include('incl/dec_to_exh.ax').
include('incl/patLang.ax').
include('incl/pat_to_clos.ax').
include('incl/bvl_jump.ax').
include('incl/clos_call.ax').
include('incl/clos_remove.ax').
include('incl/clos_mti.ax').
include('incl/clos_to_bvl.ax').
include('incl/bvl_inline.ax').
include('incl/asmSem.ax').
include('incl/asmProps.ax').
include('incl/targetSem.ax').
include('incl/typeSoundInvariants.ax').
fof('thm.typeSysProps.type_env_list_rel', conjecture, ![V_27ctMap_27, V_27tenvS_27, V_27env_27, V_27tenv_27]: s('bool','const.typeSoundInvariants.type_env_4'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),V_27ctMap_27),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),V_27tenvS_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),V_27env_27),s('type.typeSystem.tenv_val','const.typeSystem.bind_var_list2_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),V_27tenv_27),s('type.typeSystem.tenv_val','const.typeSystem.Empty_0'))))) = s('bool','const.list.LIST_REL_3'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')),'bool')),'happ'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.semanticPrimitives.v','fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')),'bool'))),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')),'bool'))),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.semanticPrimitives.v','fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')),'bool'))),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.num.num','type.ast.t'),'bool')),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t')),'bool')),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.semanticPrimitives.v','fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.num.num','type.ast.t'),'bool')))),'_dst_x000x111_2'(s('fun'('fun'('type.num.num','fun'('type.ast.t','bool')),'fun'('type.pair.prod'('type.num.num','type.ast.t'),'bool')),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.semanticPrimitives.v','fun'('type.list.list'('type.string.char'),'fun'('type.num.num','fun'('type.ast.t','bool'))))),'_dst_x00000x10100x01011_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.string.char'),'fun'('type.list.list'('type.string.char'),'bool')),'=_0'),s('fun'('type.semanticPrimitives.v','fun'('type.num.num','fun'('type.ast.t','bool'))),'_dst_x01x00x00x10_4'(s('fun'('type.num.num','fun'('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'fun'('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),'fun'('type.semanticPrimitives.v','fun'('type.ast.t','bool'))))),'const.typeSoundInvariants.type_v_0'),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),V_27ctMap_27),s('type.finite_map.fmap'('type.num.num','type.typeSoundInvariants.store_t'),V_27tenvS_27),s('fun'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'_i_0_0'))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),V_27env_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.ast.t'))),V_27tenv_27)))).
