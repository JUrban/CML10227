include('incl/logic.ax').
include('incl/bool.ax').
include('incl/marker.ax').
include('incl/num.ax').
include('incl/combin.ax').
include('incl/normalForms.ax').
include('incl/sat.ax').
include('incl/relation.ax').
include('incl/pair.ax').
include('incl/prim_rec.ax').
include('incl/arithmetic.ax').
include('incl/numeral.ax').
include('incl/ConseqConv.ax').
include('incl/sum.ax').
include('incl/one.ax').
include('incl/option.ax').
include('incl/while.ax').
include('incl/operator.ax').
include('incl/basicSize.ax').
include('incl/numpair.ax').
include('incl/pred_set.ax').
include('incl/ind_type.ax').
include('incl/list.ax').
include('incl/rich_list.ax').
include('incl/quantHeuristics.ax').
include('incl/fcp.ax').
include('incl/logroot.ax').
include('incl/bit.ax').
include('incl/string.ax').
include('incl/numposrep.ax').
include('incl/ASCIInumbers.ax').
include('incl/numeral_bit.ax').
include('incl/sum_num.ax').
include('incl/words.ax').
include('incl/alignment.ax').
include('incl/sorting.ax').
include('incl/finite_map.ax').
include('incl/alist.ax').
include('incl/sptree.ax').
include('incl/indexedLists.ax').
include('incl/res_quan.ax').
include('incl/quotient.ax').
include('incl/quotient_list.ax').
include('incl/set_sep.ax').
include('incl/set_relation.ax').
include('incl/wot.ax').
include('incl/toto.ax').
include('incl/comparison.ax').
include('incl/llist.ax').
include('incl/misc.ax').
include('incl/quotient_pair.ax').
include('incl/quotient_sum.ax').
include('incl/divides.ax').
include('incl/gcd.ax').
include('incl/quotient_option.ax').
include('incl/integer.ax').
include('incl/Omega.ax').
include('incl/int_arith.ax').
include('incl/integer_word.ax').
include('incl/lib.ax').
include('incl/ffi.ax').
include('incl/grammar.ax').
include('incl/peg.ax').
include('incl/pegexec.ax').
include('incl/state_transformer.ax').
include('incl/lprefix_lub.ax').
include('incl/tokens.ax').
include('incl/gram.ax').
include('incl/ast.ax').
include('incl/asm.ax').
include('incl/semanticPrimitives.ax').
include('incl/reg_alloc.ax').
include('incl/typeSystem.ax').
include('incl/funBigStep.ax').
include('incl/termination.ax').
include('incl/labLang.ax').
include('incl/lab_filter.ax').
include('incl/lab_to_target.ax').
include('incl/closLang.ax').
include('incl/bvl.ax').
include('incl/bvp.ax').
include('incl/bvp_live.ax').
include('incl/smallStep.ax').
include('incl/bigStep.ax').
include('incl/db_vars.ax').
include('incl/clos_free.ax').
include('incl/clos_annotate.ax').
include('incl/clos_number.ax').
include('incl/tokenUtils.ax').
include('incl/cmlPtreeConversion.ax').
include('incl/lexer_fun.ax').
include('incl/NTproperties.ax').
include('incl/initialProgram.ax').
include('incl/bvp_simp.ax').
include('incl/bvi.ax').
include('incl/bvp_space.ax').
include('incl/bvi_to_bvp.ax').
include('incl/evalProps.ax').
include('incl/determ.ax').
include('incl/bigClock.ax').
include('incl/interp.ax').
include('incl/funBigStepEquiv.ax').
include('incl/conLang.ax').
include('incl/exhLang.ax').
include('incl/dec_to_exh.ax').
include('incl/patLang.ax').
include('incl/pat_to_clos.ax').
include('incl/bvl_jump.ax').
include('incl/clos_call.ax').
include('incl/clos_remove.ax').
include('incl/clos_mti.ax').
include('incl/clos_to_bvl.ax').
include('incl/bvl_inline.ax').
include('incl/asmSem.ax').
include('incl/asmProps.ax').
include('incl/targetSem.ax').
include('incl/typeSoundInvariants.ax').
include('incl/typeSysProps.ax').
include('incl/bvl_handle.ax').
include('incl/bvl_const.ax').
include('incl/bvl_to_bvi.ax').
include('incl/modLang.ax').
include('incl/mod_to_con.ax').
include('incl/bigSmallInvariants.ax').
include('incl/con_to_dec.ax').
include('incl/targetProps.ax').
include('incl/weakening.ax').
include('incl/bigSmallEquiv.ax').
include('incl/untypedSafety.ax').
include('incl/funBigStepProps.ax').
include('incl/source_to_mod.ax').
include('incl/semantics.ax').
include('incl/initSemEnv.ax').
include('incl/typeSound.ax').
include('incl/wordLang.ax').
include('incl/exh_to_pat.ax').
include('incl/wordSem.ax').
include('incl/labSem.ax').
include('incl/semanticsProps.ax').
include('incl/labProps.ax').
include('incl/closSem.ax').
include('incl/closProps.ax').
include('incl/patSem.ax').
include('incl/modSem.ax').
include('incl/bvlSem.ax').
include('incl/bviSem.ax').
include('incl/bvlProps.ax').
include('incl/bvpSem.ax').
include('incl/exhSem.ax').
include('incl/conSem.ax').
include('incl/decSem.ax').
include('incl/conProps.ax').
include('incl/decProps.ax').
fof('thm.exhProps.build_rec_env_merge', axiom, ![V_27funs_27, V_27env_27, V_27cle_27]: s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.exhSem.build_rec_env_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),V_27funs_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27cle_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.MAP_2'(s('fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp')),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.pair.UNCURRY_1'(s('fun'('type.list.list'('type.string.char'),'fun'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'_dst_x00x10x10_3'(s('fun'('type.list.list'('type.string.char'),'fun'('type.exhSem.v','type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.pair.,_0'),s('fun'('type.list.list'('type.string.char'),'type.list.list'('type.string.char')),'_i_0_0'),s('fun'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.exhSem.Recclosure_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27cle_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),V_27funs_27))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),V_27funs_27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27)))).
fof('thm.exhProps.Boolv_disjoint', axiom, (s('type.exhSem.v','const.exhSem.Boolv_1'(s('bool','T_0'))) = s('type.exhSem.v','const.exhSem.Boolv_1'(s('bool','F_0'))) <=> p(s('bool','F_0')))).
fof('thm.exhProps.pmatch_any_match|split|0', axiom, ![V_27s_27, V_27p_27, V_27v_27, V_27env_27, V_27env_7c39_7c_27]: (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.exhLang.pat',V_27p_27),s('type.exhSem.v',V_27v_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_7c39_7c_27))) => ![V_27env_7c48_7c_27]: ?[V_27env_7c39_7c_7c48_7c_27]: s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.exhLang.pat',V_27p_27),s('type.exhSem.v',V_27v_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_7c48_7c_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_7c39_7c_7c48_7c_27))))).
fof('thm.exhProps.pmatch_any_match|split|1', axiom, ![V_27s_27, V_27ps_27, V_27vs_27, V_27env_27, V_27env_7c39_7c_27]: (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.list.list'('type.exhLang.pat'),V_27ps_27),s('type.list.list'('type.exhSem.v'),V_27vs_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_7c39_7c_27))) => ![V_27env_7c48_7c_27]: ?[V_27env_7c39_7c_7c48_7c_27]: s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.list.list'('type.exhLang.pat'),V_27ps_27),s('type.list.list'('type.exhSem.v'),V_27vs_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_7c48_7c_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_7c39_7c_7c48_7c_27))))).
fof('thm.exhProps.pmatch_any_no_match|split|0', axiom, ![V_27s_27, V_27p_27, V_27v_27, V_27env_27]: (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.exhLang.pat',V_27p_27),s('type.exhSem.v',V_27v_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') => ![V_27env_7c48_7c_27]: s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.exhLang.pat',V_27p_27),s('type.exhSem.v',V_27v_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_7c48_7c_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0'))).
fof('thm.exhProps.pmatch_any_no_match|split|1', axiom, ![V_27s_27, V_27ps_27, V_27vs_27, V_27env_27]: (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.list.list'('type.exhLang.pat'),V_27ps_27),s('type.list.list'('type.exhSem.v'),V_27vs_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0') => ![V_27env_7c48_7c_27]: s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.list.list'('type.exhLang.pat'),V_27ps_27),s('type.list.list'('type.exhSem.v'),V_27vs_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_7c48_7c_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0'))).
fof('thm.exhProps.pmatch_any_match_error|split|0', axiom, ![V_27s_27, V_27p_27, V_27v_27, V_27env_27]: (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.exhLang.pat',V_27p_27),s('type.exhSem.v',V_27v_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') => ![V_27env_7c48_7c_27]: s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.exhLang.pat',V_27p_27),s('type.exhSem.v',V_27v_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_7c48_7c_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0'))).
fof('thm.exhProps.pmatch_any_match_error|split|1', axiom, ![V_27s_27, V_27ps_27, V_27vs_27, V_27env_27]: (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.list.list'('type.exhLang.pat'),V_27ps_27),s('type.list.list'('type.exhSem.v'),V_27vs_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0') => ![V_27env_7c48_7c_27]: s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.list.list'('type.exhLang.pat'),V_27ps_27),s('type.list.list'('type.exhSem.v'),V_27vs_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_7c48_7c_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0'))).
fof('ARITY_1_4_const.exhSem.pmatch', axiom, ![VV0, VV1, VV2, VV3]: s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'happ'(s('fun'('type.exhSem.v','fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))))),'happ'(s('fun'('type.exhLang.pat','fun'('type.exhSem.v','fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))),'const.exhSem.pmatch_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),VV0))),s('type.exhLang.pat',VV1))),s('type.exhSem.v',VV2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),VV3))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),VV0),s('type.exhLang.pat',VV1),s('type.exhSem.v',VV2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),VV3)))).
fof('thm.exhProps.pmatch_list_pairwise', axiom, ![V_27ps_27, V_27vs_27, V_27s_27, V_27env_27, V_27env_7c39_7c_27]: (s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.list.list'('type.exhLang.pat'),V_27ps_27),s('type.list.list'('type.exhSem.v'),V_27vs_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.semanticPrimitives.Match_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_7c39_7c_27))) => p(s('bool','const.list.LIST_REL_3'(s('fun'('type.exhLang.pat','fun'('type.exhSem.v','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'bool'),'bool'),'!_0'),s('fun'('type.exhLang.pat','fun'('type.exhSem.v','fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'bool'),'bool'),'?_0'),s('fun'('type.exhLang.pat','fun'('type.exhSem.v','fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'bool')))),'_dst_x0000x1110x0001_3'(s('fun'('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'fun'('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'bool')),'=_0'),s('fun'('type.exhLang.pat','fun'('type.exhSem.v','fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))))),'const.exhSem.pmatch_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27))),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.semanticPrimitives.Match_0'))))))),s('type.list.list'('type.exhLang.pat'),V_27ps_27),s('type.list.list'('type.exhSem.v'),V_27vs_27)))))).
fof('thm.exhProps.pmatch_list_snoc_nil|split|0', axiom, ![V_27v_27, V_27vs_27, V_27s_27, V_27env_27]: s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.list.list'('type.exhLang.pat'),'const.list.NIL_0'),s('type.list.list'('type.exhSem.v'),'const.list.SNOC_2'(s('type.exhSem.v',V_27v_27),s('type.list.list'('type.exhSem.v'),V_27vs_27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0')).
fof('thm.exhProps.pmatch_list_snoc_nil|split|1', axiom, ![V_27p_27, V_27ps_27, V_27s_27, V_27env_27]: s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.list.list'('type.exhLang.pat'),'const.list.SNOC_2'(s('type.exhLang.pat',V_27p_27),s('type.list.list'('type.exhLang.pat'),V_27ps_27))),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0')).
fof('ARITY_3_4_const.exhSem.pmatch', axiom, ![VV0, VV1, VV2, VV3]: s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.exhSem.pmatch_3'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),VV0),s('type.exhLang.pat',VV1),s('type.exhSem.v',VV2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),VV3))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),VV0),s('type.exhLang.pat',VV1),s('type.exhSem.v',VV2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),VV3)))).
fof('thm.exhProps.pmatch_list_snoc', axiom, ![V_27ps_27, V_27vs_27, V_27p_27, V_27v_27, V_27s_27, V_27env_27]: (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhLang.pat'),V_27ps_27))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),V_27vs_27))) => s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.list.list'('type.exhLang.pat'),'const.list.SNOC_2'(s('type.exhLang.pat',V_27p_27),s('type.list.list'('type.exhLang.pat'),V_27ps_27))),s('type.list.list'('type.exhSem.v'),'const.list.SNOC_2'(s('type.exhSem.v',V_27v_27),s('type.list.list'('type.exhSem.v'),V_27vs_27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.match_result_CASE_4'(s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.list.list'('type.exhLang.pat'),V_27ps_27),s('type.list.list'('type.exhSem.v'),V_27vs_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.No_match_0'),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.semanticPrimitives.Match_type_error_0'),s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.exhSem.pmatch_3'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.exhLang.pat',V_27p_27),s('type.exhSem.v',V_27v_27))))))).
fof('thm.exhProps.pmatch_append|split|0', axiom, ![V_27s_27, V_27p_27, V_27v_27, V_27env_27, V_27n_27]: s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.exhLang.pat',V_27p_27),s('type.exhSem.v',V_27v_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.evalProps.map_match_2'(s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.combin.C_2'(s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.list.APPEND_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.DROP_2'(s('type.num.num',V_27n_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.exhLang.pat',V_27p_27),s('type.exhSem.v',V_27v_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.TAKE_2'(s('type.num.num',V_27n_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27)))))))).
fof('thm.exhProps.pmatch_append|split|1', conjecture, ![V_27s_27, V_27ps_27, V_27vs_27, V_27env_27, V_27n_27]: s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.list.list'('type.exhLang.pat'),V_27ps_27),s('type.list.list'('type.exhSem.v'),V_27vs_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))) = s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.evalProps.map_match_2'(s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.combin.C_2'(s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')))),'const.list.APPEND_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.DROP_2'(s('type.num.num',V_27n_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27))))),s('type.semanticPrimitives.match_result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'))),'const.exhSem.pmatch_list_4'(s('type.list.list'('type.semanticPrimitives.store_v'('type.exhSem.v')),V_27s_27),s('type.list.list'('type.exhLang.pat'),V_27ps_27),s('type.list.list'('type.exhSem.v'),V_27vs_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.TAKE_2'(s('type.num.num',V_27n_27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),V_27env_27)))))))).
