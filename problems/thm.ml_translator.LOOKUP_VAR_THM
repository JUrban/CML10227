include('incl/logic.ax').
include('incl/bool.ax').
include('incl/marker.ax').
include('incl/num.ax').
include('incl/combin.ax').
include('incl/normalForms.ax').
include('incl/sat.ax').
include('incl/relation.ax').
include('incl/pair.ax').
include('incl/prim_rec.ax').
include('incl/arithmetic.ax').
include('incl/numeral.ax').
include('incl/ConseqConv.ax').
include('incl/sum.ax').
include('incl/one.ax').
include('incl/option.ax').
include('incl/while.ax').
include('incl/operator.ax').
include('incl/basicSize.ax').
include('incl/numpair.ax').
include('incl/pred_set.ax').
include('incl/ind_type.ax').
include('incl/list.ax').
include('incl/rich_list.ax').
include('incl/quantHeuristics.ax').
include('incl/fcp.ax').
include('incl/logroot.ax').
include('incl/bit.ax').
include('incl/string.ax').
include('incl/numposrep.ax').
include('incl/ASCIInumbers.ax').
include('incl/numeral_bit.ax').
include('incl/sum_num.ax').
include('incl/words.ax').
include('incl/alignment.ax').
include('incl/sorting.ax').
include('incl/finite_map.ax').
include('incl/alist.ax').
include('incl/sptree.ax').
include('incl/indexedLists.ax').
include('incl/res_quan.ax').
include('incl/quotient.ax').
include('incl/quotient_list.ax').
include('incl/set_sep.ax').
include('incl/set_relation.ax').
include('incl/wot.ax').
include('incl/toto.ax').
include('incl/comparison.ax').
include('incl/llist.ax').
include('incl/misc.ax').
include('incl/quotient_pair.ax').
include('incl/quotient_sum.ax').
include('incl/divides.ax').
include('incl/gcd.ax').
include('incl/quotient_option.ax').
include('incl/integer.ax').
include('incl/Omega.ax').
include('incl/int_arith.ax').
include('incl/integer_word.ax').
include('incl/lib.ax').
include('incl/ffi.ax').
include('incl/grammar.ax').
include('incl/peg.ax').
include('incl/pegexec.ax').
include('incl/state_transformer.ax').
include('incl/lprefix_lub.ax').
include('incl/tokens.ax').
include('incl/gram.ax').
include('incl/ast.ax').
include('incl/asm.ax').
include('incl/semanticPrimitives.ax').
include('incl/reg_alloc.ax').
include('incl/typeSystem.ax').
include('incl/funBigStep.ax').
include('incl/termination.ax').
include('incl/labLang.ax').
include('incl/lab_filter.ax').
include('incl/lab_to_target.ax').
include('incl/closLang.ax').
include('incl/bvl.ax').
include('incl/bvp.ax').
include('incl/bvp_live.ax').
include('incl/smallStep.ax').
include('incl/bigStep.ax').
include('incl/db_vars.ax').
include('incl/clos_free.ax').
include('incl/clos_annotate.ax').
include('incl/clos_number.ax').
include('incl/tokenUtils.ax').
include('incl/cmlPtreeConversion.ax').
include('incl/lexer_fun.ax').
include('incl/NTproperties.ax').
include('incl/initialProgram.ax').
include('incl/bvp_simp.ax').
include('incl/bvi.ax').
include('incl/bvp_space.ax').
include('incl/bvi_to_bvp.ax').
include('incl/evalProps.ax').
include('incl/determ.ax').
include('incl/bigClock.ax').
include('incl/interp.ax').
include('incl/funBigStepEquiv.ax').
include('incl/conLang.ax').
include('incl/exhLang.ax').
include('incl/dec_to_exh.ax').
include('incl/patLang.ax').
include('incl/pat_to_clos.ax').
include('incl/bvl_jump.ax').
include('incl/clos_call.ax').
include('incl/clos_remove.ax').
include('incl/clos_mti.ax').
include('incl/clos_to_bvl.ax').
include('incl/bvl_inline.ax').
include('incl/asmSem.ax').
include('incl/asmProps.ax').
include('incl/targetSem.ax').
include('incl/typeSoundInvariants.ax').
include('incl/typeSysProps.ax').
include('incl/bvl_handle.ax').
include('incl/bvl_const.ax').
include('incl/bvl_to_bvi.ax').
include('incl/modLang.ax').
include('incl/mod_to_con.ax').
include('incl/bigSmallInvariants.ax').
include('incl/con_to_dec.ax').
include('incl/targetProps.ax').
include('incl/weakening.ax').
include('incl/bigSmallEquiv.ax').
include('incl/untypedSafety.ax').
include('incl/funBigStepProps.ax').
include('incl/source_to_mod.ax').
include('incl/semantics.ax').
include('incl/initSemEnv.ax').
include('incl/typeSound.ax').
include('incl/wordLang.ax').
include('incl/exh_to_pat.ax').
include('incl/wordSem.ax').
include('incl/labSem.ax').
include('incl/semanticsProps.ax').
include('incl/labProps.ax').
include('incl/closSem.ax').
include('incl/closProps.ax').
include('incl/patSem.ax').
include('incl/modSem.ax').
include('incl/bvlSem.ax').
include('incl/bviSem.ax').
include('incl/bvlProps.ax').
include('incl/bvpSem.ax').
include('incl/exhSem.ax').
include('incl/conSem.ax').
include('incl/decSem.ax').
include('incl/conProps.ax').
include('incl/decProps.ax').
include('incl/exhProps.ax').
include('incl/modProps.ax').
include('incl/patProps.ax').
include('incl/reg_allocProof.ax').
include('incl/bviProps.ax').
include('incl/bvpProps.ax').
include('incl/bvp_simpProof.ax').
include('incl/bvp_spaceProof.ax').
include('incl/bvl_jumpProof.ax').
include('incl/wellorder.ax').
include('incl/cardinal.ax').
include('incl/hrat.ax').
include('incl/hreal.ax').
include('incl/realax.ax').
include('incl/real.ax').
include('incl/topology.ax').
include('incl/nets.ax').
include('incl/seq.ax').
include('incl/lim.ax').
include('incl/powser.ax').
include('incl/transc.ax').
include('incl/intreal.ax').
include('incl/binary_ieee.ax').
include('incl/tailrec.ax').
include('incl/prog.ax').
include('incl/temporal.ax').
include('incl/address.ax').
include('incl/state.ax').
include('incl/temporal_state.ax').
include('incl/machine_ieee.ax').
include('incl/bitstring.ax').
include('incl/arm.ax').
include('incl/blast.ax').
include('incl/update.ax').
include('incl/arm_step.ax').
include('incl/arm6_target.ax').
include('incl/arm6_eval_encode.ax').
include('incl/mlstring.ax').
include('incl/patternMatches.ax').
fof('thm.ml_translator.empty_state_def', axiom, s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0') = s('type.semanticPrimitives.state'('type.one.one'),'const.semanticPrimitives.state_clock_fupd_2'(s('fun'('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.num.|48|_0'))),s('type.semanticPrimitives.state'('type.one.one'),'const.semanticPrimitives.state_refs_fupd_2'(s('fun'('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.semanticPrimitives.store_v'('type.semanticPrimitives.v')),'const.semanticPrimitives.empty_store_0'))),s('type.semanticPrimitives.state'('type.one.one'),'const.semanticPrimitives.state_ffi_fupd_2'(s('fun'('type.ffi.ffi_state'('type.one.one'),'type.ffi.ffi_state'('type.one.one')),'const.combin.K_1'(s('type.ffi.ffi_state'('type.one.one'),'const.ffi.initial_ffi_state_2'(s('fun'('type.num.num','fun'('type.one.one','fun'('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'type.ffi.oracle_result'('type.one.one')))),'const.bool.ARB_0'),s('type.one.one','const.one.one_0'))))),s('type.semanticPrimitives.state'('type.one.one'),'const.semanticPrimitives.state_defined_types_fupd_2'(s('fun'('fun'('type.semanticPrimitives.tid_or_exn','bool'),'fun'('type.semanticPrimitives.tid_or_exn','bool')),'const.combin.K_1'(s('fun'('type.semanticPrimitives.tid_or_exn','bool'),'const.pred_set.EMPTY_0'))),s('type.semanticPrimitives.state'('type.one.one'),'const.semanticPrimitives.state_defined_mods_fupd_2'(s('fun'('fun'('type.list.list'('type.string.char'),'bool'),'fun'('type.list.list'('type.string.char'),'bool')),'const.combin.K_1'(s('fun'('type.list.list'('type.string.char'),'bool'),'const.pred_set.EMPTY_0'))),s('type.semanticPrimitives.state'('type.one.one'),'const.bool.ARB_0')))))))))))).
fof('thm.ml_translator.Eval_def', axiom, ![V_27env_27, V_27exp_27, V_27P_27]: (p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.ast.exp',V_27exp_27),s('fun'('type.semanticPrimitives.v','bool'),V_27P_27)))) <=> ?[V_27res_27]: (p(s('bool','const.bigStep.evaluate_5'(s('bool','F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',V_27exp_27),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',V_27res_27)))))))) & p(s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),V_27P_27),s('type.semanticPrimitives.v',V_27res_27))))))).
fof('thm.ml_translator.evaluate_closure_def', axiom, ![V_27input_27, V_27cl_27, V_27output_27]: (p(s('bool','const.ml_translator.evaluate_closure_3'(s('type.semanticPrimitives.v',V_27input_27),s('type.semanticPrimitives.v',V_27cl_27),s('type.semanticPrimitives.v',V_27output_27)))) <=> ?[V_27env_27, V_27exp_27]: (s('type.option.option'('type.pair.prod'('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'type.ast.exp')),'const.semanticPrimitives.do_opapp_1'(s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',V_27cl_27),s('type.list.list'('type.semanticPrimitives.v'),'const.list.CONS_2'(s('type.semanticPrimitives.v',V_27input_27),s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0'))))))) = s('type.option.option'('type.pair.prod'('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'type.ast.exp'),'const.pair.,_2'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.ast.exp',V_27exp_27))))) & p(s('bool','const.bigStep.evaluate_5'(s('bool','F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.ast.exp',V_27exp_27),s('type.pair.prod'('type.semanticPrimitives.state'('type.one.one'),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'('type.one.one'),'const.ml_translator.empty_state_0'),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',V_27output_27))))))))))).
fof('thm.ml_translator.AppReturns_def', axiom, ![V_27P_27, V_27cl_27, V_27Q_27]: (p(s('bool','const.ml_translator.AppReturns_3'(s('fun'('type.semanticPrimitives.v','bool'),V_27P_27),s('type.semanticPrimitives.v',V_27cl_27),s('fun'('type.semanticPrimitives.v','bool'),V_27Q_27)))) <=> ![V_27v_27]: (p(s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),V_27P_27),s('type.semanticPrimitives.v',V_27v_27)))) => ?[V_27u_27]: (p(s('bool','const.ml_translator.evaluate_closure_3'(s('type.semanticPrimitives.v',V_27v_27),s('type.semanticPrimitives.v',V_27cl_27),s('type.semanticPrimitives.v',V_27u_27)))) & p(s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),V_27Q_27),s('type.semanticPrimitives.v',V_27u_27)))))))).
fof('ARITY_2_4_const.ml_translator.Arrow', axiom, ![V_27A_27,V_27B_27]: ![VV0, VV1, VV2, VV3]: s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.Arrow_2'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),VV0),s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),VV1))),s('fun'(V_27A_27,V_27B_27),VV2))),s('type.semanticPrimitives.v',VV3))) = s('bool','const.ml_translator.Arrow_4'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),VV0),s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),VV1),s('fun'(V_27A_27,V_27B_27),VV2),s('type.semanticPrimitives.v',VV3)))).
fof('thm.ml_translator.Arrow_def', axiom, ![V_27B_27,V_27A_27]: ![V_27a_27, V_27b_27, V_27f_27, Vx]: (p(s('bool','const.ml_translator.Arrow_4'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),V_27b_27),s('fun'(V_27A_27,V_27B_27),V_27f_27),s('type.semanticPrimitives.v',Vx)))) <=> ![V_27x_27]: p(s('bool','const.ml_translator.AppReturns_3'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s(V_27A_27,V_27x_27))),s('type.semanticPrimitives.v',Vx),s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),V_27b_27),s(V_27B_27,'happ'(s('fun'(V_27A_27,V_27B_27),V_27f_27),s(V_27A_27,V_27x_27)))))))))).
fof('ARITY_2_4_const.ml_translator.Eq', axiom, ![V_27A_27]: ![VV0, VV1, VV2, VV3]: s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.Eq_2'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),VV0),s(V_27A_27,VV1))),s(V_27A_27,VV2))),s('type.semanticPrimitives.v',VV3))) = s('bool','const.ml_translator.Eq_4'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),VV0),s(V_27A_27,VV1),s(V_27A_27,VV2),s('type.semanticPrimitives.v',VV3)))).
fof('thm.ml_translator.Eq_def', axiom, ![V_27A_27]: ![V_27abs_27, V_27x_27, Vx, Vx0]: (p(s('bool','const.ml_translator.Eq_4'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27abs_27),s(V_27A_27,V_27x_27),s(V_27A_27,Vx),s('type.semanticPrimitives.v',Vx0)))) <=> (s(V_27A_27,V_27x_27) = s(V_27A_27,Vx) & p(s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27abs_27),s(V_27A_27,Vx))),s('type.semanticPrimitives.v',Vx0))))))).
fof('ARITY_2_4_const.ml_translator.And', axiom, ![V_27A_27]: ![VV0, VV1, VV2, VV3]: s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.And_2'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),VV0),s('fun'(V_27A_27,'bool'),VV1))),s(V_27A_27,VV2))),s('type.semanticPrimitives.v',VV3))) = s('bool','const.ml_translator.And_4'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),VV0),s('fun'(V_27A_27,'bool'),VV1),s(V_27A_27,VV2),s('type.semanticPrimitives.v',VV3)))).
fof('thm.ml_translator.And_def', axiom, ![V_27A_27]: ![V_27a_27, V_27P_27, V_27x_27, V_27v_27]: (p(s('bool','const.ml_translator.And_4'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s('fun'(V_27A_27,'bool'),V_27P_27),s(V_27A_27,V_27x_27),s('type.semanticPrimitives.v',V_27v_27)))) <=> (p(s('bool','happ'(s('fun'(V_27A_27,'bool'),V_27P_27),s(V_27A_27,V_27x_27)))) & p(s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s(V_27A_27,V_27x_27))),s('type.semanticPrimitives.v',V_27v_27))))))).
fof('ARITY_0_2_const.ml_translator.UNIT_TYPE', axiom, ![VV0, VV1]: s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'('type.one.one','fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.UNIT_TYPE_0'),s('type.one.one',VV0))),s('type.semanticPrimitives.v',VV1))) = s('bool','const.ml_translator.UNIT_TYPE_2'(s('type.one.one',VV0),s('type.semanticPrimitives.v',VV1)))).
fof('thm.ml_translator.UNIT_TYPE_def', axiom, ![V_27u_27, V_27v_27]: (p(s('bool','const.ml_translator.UNIT_TYPE_2'(s('type.one.one',V_27u_27),s('type.semanticPrimitives.v',V_27v_27)))) <=> s('type.semanticPrimitives.v',V_27v_27) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.semanticPrimitives.v'),'const.list.NIL_0'))))).
fof('ARITY_0_2_const.ml_translator.INT', axiom, ![VV0, VV1]: s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'('type.integer.int','fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.INT_0'),s('type.integer.int',VV0))),s('type.semanticPrimitives.v',VV1))) = s('bool','const.ml_translator.INT_2'(s('type.integer.int',VV0),s('type.semanticPrimitives.v',VV1)))).
fof('thm.ml_translator.INT_def', axiom, ![V_27i_27, Vx]: (p(s('bool','const.ml_translator.INT_2'(s('type.integer.int',V_27i_27),s('type.semanticPrimitives.v',Vx)))) <=> s('type.semanticPrimitives.v',Vx) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',V_27i_27))))))).
fof('ARITY_0_1_const.ml_translator.NUM', axiom, ![VV0]: s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'('type.num.num','fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.NUM_0'),s('type.num.num',VV0))) = s('fun'('type.semanticPrimitives.v','bool'),'const.ml_translator.NUM_1'(s('type.num.num',VV0)))).
fof('ARITY_0_1_const.ml_translator.INT', axiom, ![VV0]: s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'('type.integer.int','fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.INT_0'),s('type.integer.int',VV0))) = s('fun'('type.semanticPrimitives.v','bool'),'const.ml_translator.INT_1'(s('type.integer.int',VV0)))).
fof('thm.ml_translator.NUM_def', axiom, ![V_27n_27]: s('fun'('type.semanticPrimitives.v','bool'),'const.ml_translator.NUM_1'(s('type.num.num',V_27n_27))) = s('fun'('type.semanticPrimitives.v','bool'),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',V_27n_27)))))).
fof('ARITY_0_2_const.ml_translator.BOOL', axiom, ![VV0, VV1]: s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'('bool','fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.BOOL_0'),s('bool',VV0))),s('type.semanticPrimitives.v',VV1))) = s('bool','const.ml_translator.BOOL_2'(s('bool',VV0),s('type.semanticPrimitives.v',VV1)))).
fof('thm.ml_translator.BOOL_def', axiom, ![V_27b_27, Vx]: (p(s('bool','const.ml_translator.BOOL_2'(s('bool',V_27b_27),s('type.semanticPrimitives.v',Vx)))) <=> s('type.semanticPrimitives.v',Vx) = s('type.semanticPrimitives.v','const.semanticPrimitives.Boolv_1'(s('bool',V_27b_27))))).
fof('ARITY_0_2_const.ml_translator.WORD', axiom, ![V_27A_27]: ![VV0, VV1]: s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'('type.fcp.cart'('bool',V_27A_27),'fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.WORD_0'),s('type.fcp.cart'('bool',V_27A_27),VV0))),s('type.semanticPrimitives.v',VV1))) = s('bool','const.ml_translator.WORD_2'(s('type.fcp.cart'('bool',V_27A_27),VV0),s('type.semanticPrimitives.v',VV1)))).
fof('thm.ml_translator.WORD_def', axiom, ![V_27A_27]: ![V_27w_27, Vx]: (p(s('bool','const.ml_translator.WORD_2'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27),s('type.semanticPrimitives.v',Vx)))) <=> (p(s('bool','const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))) & s('type.semanticPrimitives.v',Vx) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.bool.COND_3'(s('bool','const.arithmetic.<=_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.words.word_lsl_2'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),'const.words.w2w_1'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0'))))))))),s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'const.words.word_lsl_2'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),'const.words.w2w_1'(s('type.fcp.cart'('bool',V_27A_27),V_27w_27))),s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))),s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(V_27A_27),'const.bool.the_value_0')))))))))))))))).
fof('ARITY_0_2_const.ml_translator.CHAR', axiom, ![VV0, VV1]: s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'('type.string.char','fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.CHAR_0'),s('type.string.char',VV0))),s('type.semanticPrimitives.v',VV1))) = s('bool','const.ml_translator.CHAR_2'(s('type.string.char',VV0),s('type.semanticPrimitives.v',VV1)))).
fof('thm.ml_translator.CHAR_def', axiom, ![V_27c_27, Vx]: (p(s('bool','const.ml_translator.CHAR_2'(s('type.string.char',V_27c_27),s('type.semanticPrimitives.v',Vx)))) <=> s('type.semanticPrimitives.v',Vx) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',V_27c_27))))))).
fof('ARITY_0_2_const.ml_translator.STRING_TYPE', axiom, ![VV0, VV1]: s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'('type.mlstring.mlstring','fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.STRING_TYPE_0'),s('type.mlstring.mlstring',VV0))),s('type.semanticPrimitives.v',VV1))) = s('bool','const.ml_translator.STRING_TYPE_2'(s('type.mlstring.mlstring',VV0),s('type.semanticPrimitives.v',VV1)))).
fof('thm.ml_translator.STRING_TYPE_def', axiom, ![V_27s_27, Vx]: (p(s('bool','const.ml_translator.STRING_TYPE_2'(s('type.mlstring.mlstring',V_27s_27),s('type.semanticPrimitives.v',Vx)))) <=> s('type.semanticPrimitives.v',Vx) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),'const.mlstring.explode_1'(s('type.mlstring.mlstring',V_27s_27))))))))).
fof('thm.ml_translator.CONTAINER_def', axiom, ![V_27A_27]: ![V_27x_27]: s(V_27A_27,'const.ml_translator.CONTAINER_1'(s(V_27A_27,V_27x_27))) = s(V_27A_27,V_27x_27)).
fof('thm.ml_translator.TAG_def', axiom, ![V_27B_27,V_27A_27]: ![V_27n_27, V_27x_27]: s(V_27A_27,'const.ml_translator.TAG_2'(s(V_27B_27,V_27n_27),s(V_27A_27,V_27x_27))) = s(V_27A_27,V_27x_27)).
fof('thm.ml_translator.PRECONDITION_def', axiom, ![V_27b_27]: s('bool','const.ml_translator.PRECONDITION_1'(s('bool',V_27b_27))) = s('bool',V_27b_27)).
fof('thm.ml_translator.PreImp_def', axiom, ![V_27b_7c49_7c_27, V_27b2_27]: (p(s('bool','const.ml_translator.PreImp_2'(s('bool',V_27b_7c49_7c_27),s('bool',V_27b2_27)))) <=> (p(s('bool','const.ml_translator.PRECONDITION_1'(s('bool',V_27b_7c49_7c_27)))) => p(s('bool',V_27b2_27))))).
fof('thm.ml_translator.evaluate_|49||49|_Rval', axiom, ![V_27A_27]: ![V_27s2_27, V_27s_7c49_7c_27, V_27s_27, V_27res2_27, V_27res_7c49_7c_27, V_27exp_27, V_27env_27, V_27b_27]: (p(s('bool','const.bigStep.evaluate_5'(s('bool',V_27b_27),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.semanticPrimitives.state'(V_27A_27),V_27s_27),s('type.ast.exp',V_27exp_27),s('type.pair.prod'('type.semanticPrimitives.state'(V_27A_27),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(V_27A_27),V_27s_7c49_7c_27),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',V_27res_7c49_7c_27)))))))) => (p(s('bool','const.bigStep.evaluate_5'(s('bool',V_27b_27),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.semanticPrimitives.state'(V_27A_27),V_27s_27),s('type.ast.exp',V_27exp_27),s('type.pair.prod'('type.semanticPrimitives.state'(V_27A_27),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(V_27A_27),V_27s2_27),s('type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.v',V_27res2_27)))))))) => s('type.semanticPrimitives.v',V_27res_7c49_7c_27) = s('type.semanticPrimitives.v',V_27res2_27)))).
fof('ARITY_2_3_const.ml_translator.Arrow', axiom, ![V_27A_27,V_27B_27]: ![VV0, VV1, VV2]: s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'('fun'(V_27A_27,V_27B_27),'fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.Arrow_2'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),VV0),s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),VV1))),s('fun'(V_27A_27,V_27B_27),VV2))) = s('fun'('type.semanticPrimitives.v','bool'),'const.ml_translator.Arrow_3'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),VV0),s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),VV1),s('fun'(V_27A_27,V_27B_27),VV2)))).
fof('thm.ml_translator.Eval_Arrow', axiom, ![V_27B_27,V_27A_27]: ![V_27x2_27, V_27x_7c49_7c_27, V_27x_27, V_27f_27, V_27env_27, V_27b_27, V_27a_27]: (p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.ast.exp',V_27x_7c49_7c_27),s('fun'('type.semanticPrimitives.v','bool'),'const.ml_translator.Arrow_3'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),V_27b_27),s('fun'(V_27A_27,V_27B_27),V_27f_27)))))) => (p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.ast.exp',V_27x2_27),s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s(V_27A_27,V_27x_27)))))) => p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opapp_0'),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',V_27x_7c49_7c_27),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',V_27x2_27),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),V_27b_27),s(V_27B_27,'happ'(s('fun'(V_27A_27,V_27B_27),V_27f_27),s(V_27A_27,V_27x_27))))))))))).
fof('thm.ml_translator.write_def', axiom, ![V_27A_27]: ![V_27name_27, V_27v_27, V_27env_27]: s('type.semanticPrimitives.environment'(V_27A_27),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),V_27name_27),s(V_27A_27,V_27v_27),s('type.semanticPrimitives.environment'(V_27A_27),V_27env_27))) = s('type.semanticPrimitives.environment'(V_27A_27),'const.semanticPrimitives.environment_v_fupd_2'(s('fun'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),V_27A_27)),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),V_27A_27))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),V_27A_27)),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),V_27A_27),'const.pair.,_2'(s('type.list.list'('type.string.char'),V_27name_27),s(V_27A_27,V_27v_27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),V_27A_27)),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'(V_27A_27),V_27env_27))))))),s('type.semanticPrimitives.environment'(V_27A_27),V_27env_27)))).
fof('thm.ml_translator.Eval_Fun', axiom, ![V_27A_27,V_27B_27]: ![V_27name_27, V_27f_27, V_27env_27, V_27body_27, V_27b_27, V_27a_27]: (![V_27v_27, V_27x_27]: (p(s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s(V_27A_27,V_27x_27))),s('type.semanticPrimitives.v',V_27v_27)))) => p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),V_27name_27),s('type.semanticPrimitives.v',V_27v_27),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27))),s('type.ast.exp',V_27body_27),s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),V_27b_27),s(V_27B_27,'happ'(s('fun'(V_27A_27,V_27B_27),V_27f_27),s(V_27A_27,V_27x_27))))))))) => p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),V_27name_27),s('type.ast.exp',V_27body_27))),s('fun'('type.semanticPrimitives.v','bool'),'const.ml_translator.Arrow_3'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),V_27b_27),s('fun'(V_27A_27,V_27B_27),V_27f_27)))))))).
fof('thm.ml_translator.Eval_Fun_Eq', axiom, ![V_27A_27,V_27B_27]: ![V_27x_27, V_27name_27, V_27f_27, V_27env_27, V_27body_27, V_27b_27, V_27a_27]: (![V_27v_27]: (p(s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s(V_27A_27,V_27x_27))),s('type.semanticPrimitives.v',V_27v_27)))) => p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),V_27name_27),s('type.semanticPrimitives.v',V_27v_27),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27))),s('type.ast.exp',V_27body_27),s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),V_27b_27),s(V_27B_27,'happ'(s('fun'(V_27A_27,V_27B_27),V_27f_27),s(V_27A_27,V_27x_27))))))))) => p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),V_27name_27),s('type.ast.exp',V_27body_27))),s('fun'('type.semanticPrimitives.v','bool'),'const.ml_translator.Arrow_3'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.Eq_2'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s(V_27A_27,V_27x_27))),s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),V_27b_27),s('fun'(V_27A_27,V_27B_27),V_27f_27)))))))).
fof('thm.ml_translator.And_IMP_Eq', axiom, ![V_27A_27,V_27B_27]: ![V_27x_27, V_27f_27, V_27exp_27, V_27env_27, V_27b_27, V_27a_27, V_27P_27]: (p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.ast.exp',V_27exp_27),s('fun'('type.semanticPrimitives.v','bool'),'const.ml_translator.Arrow_3'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.And_2'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s('fun'(V_27A_27,'bool'),V_27P_27))),s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),V_27b_27),s('fun'(V_27A_27,V_27B_27),V_27f_27)))))) => (p(s('bool','happ'(s('fun'(V_27A_27,'bool'),V_27P_27),s(V_27A_27,V_27x_27)))) => p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.ast.exp',V_27exp_27),s('fun'('type.semanticPrimitives.v','bool'),'const.ml_translator.Arrow_3'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.Eq_2'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s(V_27A_27,V_27x_27))),s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),V_27b_27),s('fun'(V_27A_27,V_27B_27),V_27f_27))))))))).
fof('thm.ml_translator.Eq_IMP_And', axiom, ![V_27A_27,V_27B_27]: ![V_27name_27, V_27f_27, V_27exp_27, V_27env_27, V_27b_27, V_27a_27, V_27P_27]: (![V_27x_27]: (p(s('bool','happ'(s('fun'(V_27A_27,'bool'),V_27P_27),s(V_27A_27,V_27x_27)))) => p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),V_27name_27),s('type.ast.exp',V_27exp_27))),s('fun'('type.semanticPrimitives.v','bool'),'const.ml_translator.Arrow_3'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.Eq_2'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s(V_27A_27,V_27x_27))),s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),V_27b_27),s('fun'(V_27A_27,V_27B_27),V_27f_27))))))) => p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),V_27name_27),s('type.ast.exp',V_27exp_27))),s('fun'('type.semanticPrimitives.v','bool'),'const.ml_translator.Arrow_3'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.And_2'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s('fun'(V_27A_27,'bool'),V_27P_27))),s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),V_27b_27),s('fun'(V_27A_27,V_27B_27),V_27f_27)))))))).
fof('thm.ml_translator.Eval_Fun_And', axiom, ![V_27A_27,V_27B_27]: ![V_27name_27, V_27f_27, V_27env_27, V_27body_27, V_27b_27, V_27a_27, V_27P_27]: (![V_27v_27, V_27x_27]: (p(s('bool','happ'(s('fun'(V_27A_27,'bool'),V_27P_27),s(V_27A_27,V_27x_27)))) => (p(s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s(V_27A_27,V_27x_27))),s('type.semanticPrimitives.v',V_27v_27)))) => p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),V_27name_27),s('type.semanticPrimitives.v',V_27v_27),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27))),s('type.ast.exp',V_27body_27),s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),V_27b_27),s(V_27B_27,'happ'(s('fun'(V_27A_27,V_27B_27),V_27f_27),s(V_27A_27,V_27x_27)))))))))) => p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),V_27name_27),s('type.ast.exp',V_27body_27))),s('fun'('type.semanticPrimitives.v','bool'),'const.ml_translator.Arrow_3'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),'const.ml_translator.And_2'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s('fun'(V_27A_27,'bool'),V_27P_27))),s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),V_27b_27),s('fun'(V_27A_27,V_27B_27),V_27f_27)))))))).
fof('thm.ml_translator.Eval_Let', axiom, ![V_27B_27,V_27A_27]: ![V_27res_27, V_27name_27, V_27f_27, V_27exp_27, V_27env_27, V_27body_27, V_27b_27, V_27a_27]: ((p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.ast.exp',V_27exp_27),s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s(V_27A_27,V_27res_27)))))) & ![V_27v_27]: (p(s('bool','happ'(s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27A_27,'fun'('type.semanticPrimitives.v','bool')),V_27a_27),s(V_27A_27,V_27res_27))),s('type.semanticPrimitives.v',V_27v_27)))) => p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),V_27name_27),s('type.semanticPrimitives.v',V_27v_27),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27))),s('type.ast.exp',V_27body_27),s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),V_27b_27),s(V_27B_27,'happ'(s('fun'(V_27A_27,V_27B_27),V_27f_27),s(V_27A_27,V_27res_27)))))))))) => p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),V_27name_27))),s('type.ast.exp',V_27exp_27),s('type.ast.exp',V_27body_27))),s('fun'('type.semanticPrimitives.v','bool'),'happ'(s('fun'(V_27B_27,'fun'('type.semanticPrimitives.v','bool')),V_27b_27),s(V_27B_27,'const.bool.LET_2'(s('fun'(V_27A_27,V_27B_27),V_27f_27),s(V_27A_27,V_27res_27)))))))))).
fof('thm.ml_translator.lookup_var_def', axiom, ![V_27A_27]: ![V_27name_27, V_27env_27]: s('type.option.option'(V_27A_27),'const.ml_translator.lookup_var_2'(s('type.list.list'('type.string.char'),V_27name_27),s('type.semanticPrimitives.environment'(V_27A_27),V_27env_27))) = s('type.option.option'(V_27A_27),'const.alist.ALOOKUP_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),V_27A_27)),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'(V_27A_27),V_27env_27))),s('type.list.list'('type.string.char'),V_27name_27)))).
fof('thm.ml_translator.lookup_cons_def', axiom, ![V_27name_27, V_27env_27]: s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.ml_translator.lookup_cons_2'(s('type.list.list'('type.string.char'),V_27name_27),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27))) = s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.semanticPrimitives.lookup_alist_mod_env_2'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),V_27name_27))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27)))))).
fof('thm.ml_translator.lookup_var_write', axiom, ![V_27A_27]: ![V_27x_27, V_27w_27, V_27v_27, V_27env_27]: ?[Vv]: ((p(s('bool',Vv)) <=> s('type.list.list'('type.string.char'),V_27v_27) = s('type.list.list'('type.string.char'),V_27w_27)) & s('type.option.option'(V_27A_27),'const.ml_translator.lookup_var_2'(s('type.list.list'('type.string.char'),V_27v_27),s('type.semanticPrimitives.environment'(V_27A_27),'const.ml_translator.write_3'(s('type.list.list'('type.string.char'),V_27w_27),s(V_27A_27,V_27x_27),s('type.semanticPrimitives.environment'(V_27A_27),V_27env_27))))) = s('type.option.option'(V_27A_27),'const.bool.COND_3'(s('bool',Vv),s('type.option.option'(V_27A_27),'const.option.SOME_1'(s(V_27A_27,V_27x_27))),s('type.option.option'(V_27A_27),'const.ml_translator.lookup_var_2'(s('type.list.list'('type.string.char'),V_27v_27),s('type.semanticPrimitives.environment'(V_27A_27),V_27env_27))))))).
fof('thm.ml_translator.Eval_Var_SWAP_ENV', axiom, ![V_27name_27, V_27env_27, V_27P_27, V_27env_7c49_7c_27]: ((p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_7c49_7c_27),s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),V_27name_27))))),s('fun'('type.semanticPrimitives.v','bool'),V_27P_27)))) & s('type.option.option'('type.semanticPrimitives.v'),'const.ml_translator.lookup_var_2'(s('type.list.list'('type.string.char'),V_27name_27),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27))) = s('type.option.option'('type.semanticPrimitives.v'),'const.ml_translator.lookup_var_2'(s('type.list.list'('type.string.char'),V_27name_27),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_7c49_7c_27)))) => p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),V_27name_27))))),s('fun'('type.semanticPrimitives.v','bool'),V_27P_27)))))).
fof('thm.ml_translator.LOOKUP_VAR_def', axiom, ![V_27A_27]: ![V_27name_27, V_27env_27, V_27x_27]: (p(s('bool','const.ml_translator.LOOKUP_VAR_3'(s('type.list.list'('type.string.char'),V_27name_27),s('type.semanticPrimitives.environment'(V_27A_27),V_27env_27),s(V_27A_27,V_27x_27)))) <=> s('type.option.option'(V_27A_27),'const.ml_translator.lookup_var_2'(s('type.list.list'('type.string.char'),V_27name_27),s('type.semanticPrimitives.environment'(V_27A_27),V_27env_27))) = s('type.option.option'(V_27A_27),'const.option.SOME_1'(s(V_27A_27,V_27x_27))))).
fof('thm.ml_translator.LOOKUP_VAR_THM', conjecture, ![V_27x_27, V_27name_27, V_27env_27]: (p(s('bool','const.ml_translator.LOOKUP_VAR_3'(s('type.list.list'('type.string.char'),V_27name_27),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.semanticPrimitives.v',V_27x_27)))) => p(s('bool','const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),V_27env_27),s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),'const.ast.Short_1'(s('type.list.list'('type.string.char'),V_27name_27))))),s('fun'('type.semanticPrimitives.v','bool'),'|dollar|equals_1'(s('type.semanticPrimitives.v',V_27x_27)))))))).
