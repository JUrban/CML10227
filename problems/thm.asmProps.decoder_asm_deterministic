include('incl/logic.ax').
include('incl/bool.ax').
include('incl/marker.ax').
include('incl/num.ax').
include('incl/combin.ax').
include('incl/normalForms.ax').
include('incl/sat.ax').
include('incl/relation.ax').
include('incl/pair.ax').
include('incl/prim_rec.ax').
include('incl/arithmetic.ax').
include('incl/numeral.ax').
include('incl/ConseqConv.ax').
include('incl/sum.ax').
include('incl/one.ax').
include('incl/option.ax').
include('incl/while.ax').
include('incl/operator.ax').
include('incl/basicSize.ax').
include('incl/numpair.ax').
include('incl/pred_set.ax').
include('incl/ind_type.ax').
include('incl/list.ax').
include('incl/rich_list.ax').
include('incl/quantHeuristics.ax').
include('incl/fcp.ax').
include('incl/logroot.ax').
include('incl/bit.ax').
include('incl/string.ax').
include('incl/numposrep.ax').
include('incl/ASCIInumbers.ax').
include('incl/numeral_bit.ax').
include('incl/sum_num.ax').
include('incl/words.ax').
include('incl/alignment.ax').
include('incl/sorting.ax').
include('incl/finite_map.ax').
include('incl/alist.ax').
include('incl/sptree.ax').
include('incl/indexedLists.ax').
include('incl/res_quan.ax').
include('incl/quotient.ax').
include('incl/quotient_list.ax').
include('incl/set_sep.ax').
include('incl/set_relation.ax').
include('incl/wot.ax').
include('incl/toto.ax').
include('incl/comparison.ax').
include('incl/llist.ax').
include('incl/misc.ax').
include('incl/quotient_pair.ax').
include('incl/quotient_sum.ax').
include('incl/divides.ax').
include('incl/gcd.ax').
include('incl/quotient_option.ax').
include('incl/integer.ax').
include('incl/Omega.ax').
include('incl/int_arith.ax').
include('incl/integer_word.ax').
include('incl/lib.ax').
include('incl/ffi.ax').
include('incl/grammar.ax').
include('incl/peg.ax').
include('incl/pegexec.ax').
include('incl/state_transformer.ax').
include('incl/lprefix_lub.ax').
include('incl/tokens.ax').
include('incl/gram.ax').
include('incl/ast.ax').
include('incl/asm.ax').
include('incl/semanticPrimitives.ax').
include('incl/reg_alloc.ax').
include('incl/typeSystem.ax').
include('incl/funBigStep.ax').
include('incl/termination.ax').
include('incl/labLang.ax').
include('incl/lab_filter.ax').
include('incl/lab_to_target.ax').
include('incl/closLang.ax').
include('incl/bvl.ax').
include('incl/bvp.ax').
include('incl/bvp_live.ax').
include('incl/smallStep.ax').
include('incl/bigStep.ax').
include('incl/db_vars.ax').
include('incl/clos_free.ax').
include('incl/clos_annotate.ax').
include('incl/clos_number.ax').
include('incl/tokenUtils.ax').
include('incl/cmlPtreeConversion.ax').
include('incl/lexer_fun.ax').
include('incl/NTproperties.ax').
include('incl/initialProgram.ax').
include('incl/bvp_simp.ax').
include('incl/bvi.ax').
include('incl/bvp_space.ax').
include('incl/bvi_to_bvp.ax').
include('incl/evalProps.ax').
include('incl/determ.ax').
include('incl/bigClock.ax').
include('incl/interp.ax').
include('incl/funBigStepEquiv.ax').
include('incl/conLang.ax').
include('incl/exhLang.ax').
include('incl/dec_to_exh.ax').
include('incl/patLang.ax').
include('incl/pat_to_clos.ax').
include('incl/bvl_jump.ax').
include('incl/clos_call.ax').
include('incl/clos_remove.ax').
include('incl/clos_mti.ax').
include('incl/clos_to_bvl.ax').
include('incl/bvl_inline.ax').
include('incl/asmSem.ax').
fof('thm.asmProps.asm_deterministic_def', axiom, ![V_27A_27]: ![V_27enc_27, V_27c_27]: (p(s('bool','const.asmProps.asm_deterministic_2'(s('fun'('type.asm.asm'(V_27A_27),'type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),V_27enc_27),s('type.asm.asm_config'(V_27A_27),V_27c_27)))) <=> ![V_27i_27, V_27s_7c49_7c_27, V_27s2_27, V_27s3_27]: ((p(s('bool','const.asmSem.asm_step_5'(s('fun'('type.asm.asm'(V_27A_27),'type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),V_27enc_27),s('type.asm.asm_config'(V_27A_27),V_27c_27),s('type.asmSem.asm_state'(V_27A_27),V_27s_7c49_7c_27),s('type.asm.asm'(V_27A_27),V_27i_27),s('type.asmSem.asm_state'(V_27A_27),V_27s2_27)))) & p(s('bool','const.asmSem.asm_step_5'(s('fun'('type.asm.asm'(V_27A_27),'type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),V_27enc_27),s('type.asm.asm_config'(V_27A_27),V_27c_27),s('type.asmSem.asm_state'(V_27A_27),V_27s_7c49_7c_27),s('type.asm.asm'(V_27A_27),V_27i_27),s('type.asmSem.asm_state'(V_27A_27),V_27s3_27))))) => s('type.asmSem.asm_state'(V_27A_27),V_27s2_27) = s('type.asmSem.asm_state'(V_27A_27),V_27s3_27)))).
fof('thm.asmProps.asmProps_|49|_prove_ltb', axiom, ![V_27A_27]: ![V_27xs_27, V_27ys_27, V_27a_27, V_27m_27, V_27dm_27]: ((p(s('bool','const.asmSem.bytes_in_memory_4'(s('type.fcp.cart'('bool',V_27A_27),V_27a_27),s('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),V_27xs_27),s('fun'('type.fcp.cart'('bool',V_27A_27),'type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),V_27m_27),s('fun'('type.fcp.cart'('bool',V_27A_27),'bool'),V_27dm_27)))) & p(s('bool','const.asmSem.bytes_in_memory_4'(s('type.fcp.cart'('bool',V_27A_27),V_27a_27),s('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),V_27ys_27),s('fun'('type.fcp.cart'('bool',V_27A_27),'type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),V_27m_27),s('fun'('type.fcp.cart'('bool',V_27A_27),'bool'),V_27dm_27))))) => (p(s('bool','const.list.isPREFIX_2'(s('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),V_27xs_27),s('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),V_27ys_27)))) | p(s('bool','const.list.isPREFIX_2'(s('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),V_27ys_27),s('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),V_27xs_27))))))).
fof('thm.asmProps.decoder_asm_deterministic', conjecture, ![V_27A_27]: ![V_27enc_27, V_27c_27]: (?[V_27dec_27]: ![V_27i_27, V_27x_27]: (p(s('bool','const.asm.asm_ok_2'(s('type.asm.asm'(V_27A_27),V_27i_27),s('type.asm.asm_config'(V_27A_27),V_27c_27)))) => s('type.asm.asm'(V_27A_27),'happ'(s('fun'('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'type.asm.asm'(V_27A_27)),V_27dec_27),s('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'const.list.APPEND_2'(s('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'happ'(s('fun'('type.asm.asm'(V_27A_27),'type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),V_27enc_27),s('type.asm.asm'(V_27A_27),V_27i_27))),s('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),V_27x_27))))) = s('type.asm.asm'(V_27A_27),V_27i_27)) => p(s('bool','const.asmProps.asm_deterministic_2'(s('fun'('type.asm.asm'(V_27A_27),'type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))))),V_27enc_27),s('type.asm.asm_config'(V_27A_27),V_27c_27)))))).
