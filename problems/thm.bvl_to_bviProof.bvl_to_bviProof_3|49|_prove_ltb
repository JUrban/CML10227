include('incl/logic.ax').
include('incl/bool.ax').
include('incl/marker.ax').
include('incl/num.ax').
include('incl/combin.ax').
include('incl/normalForms.ax').
include('incl/sat.ax').
include('incl/relation.ax').
include('incl/pair.ax').
include('incl/prim_rec.ax').
include('incl/arithmetic.ax').
include('incl/numeral.ax').
include('incl/ConseqConv.ax').
include('incl/sum.ax').
include('incl/one.ax').
include('incl/option.ax').
include('incl/while.ax').
include('incl/operator.ax').
include('incl/basicSize.ax').
include('incl/numpair.ax').
include('incl/pred_set.ax').
include('incl/ind_type.ax').
include('incl/list.ax').
include('incl/rich_list.ax').
include('incl/quantHeuristics.ax').
include('incl/fcp.ax').
include('incl/logroot.ax').
include('incl/bit.ax').
include('incl/string.ax').
include('incl/numposrep.ax').
include('incl/ASCIInumbers.ax').
include('incl/numeral_bit.ax').
include('incl/sum_num.ax').
include('incl/words.ax').
include('incl/alignment.ax').
include('incl/sorting.ax').
include('incl/finite_map.ax').
include('incl/alist.ax').
include('incl/sptree.ax').
include('incl/indexedLists.ax').
include('incl/res_quan.ax').
include('incl/quotient.ax').
include('incl/quotient_list.ax').
include('incl/set_sep.ax').
include('incl/set_relation.ax').
include('incl/wot.ax').
include('incl/toto.ax').
include('incl/comparison.ax').
include('incl/llist.ax').
include('incl/misc.ax').
include('incl/quotient_pair.ax').
include('incl/quotient_sum.ax').
include('incl/divides.ax').
include('incl/gcd.ax').
include('incl/quotient_option.ax').
include('incl/integer.ax').
include('incl/Omega.ax').
include('incl/int_arith.ax').
include('incl/integer_word.ax').
include('incl/lib.ax').
include('incl/ffi.ax').
include('incl/grammar.ax').
include('incl/peg.ax').
include('incl/pegexec.ax').
include('incl/state_transformer.ax').
include('incl/lprefix_lub.ax').
include('incl/tokens.ax').
include('incl/gram.ax').
include('incl/ast.ax').
include('incl/asm.ax').
include('incl/semanticPrimitives.ax').
include('incl/reg_alloc.ax').
include('incl/typeSystem.ax').
include('incl/funBigStep.ax').
include('incl/termination.ax').
include('incl/labLang.ax').
include('incl/lab_filter.ax').
include('incl/lab_to_target.ax').
include('incl/closLang.ax').
include('incl/bvl.ax').
include('incl/bvp.ax').
include('incl/bvp_live.ax').
include('incl/smallStep.ax').
include('incl/bigStep.ax').
include('incl/db_vars.ax').
include('incl/clos_free.ax').
include('incl/clos_annotate.ax').
include('incl/clos_number.ax').
include('incl/tokenUtils.ax').
include('incl/cmlPtreeConversion.ax').
include('incl/lexer_fun.ax').
include('incl/NTproperties.ax').
include('incl/initialProgram.ax').
include('incl/bvp_simp.ax').
include('incl/bvi.ax').
include('incl/bvp_space.ax').
include('incl/bvi_to_bvp.ax').
include('incl/evalProps.ax').
include('incl/determ.ax').
include('incl/bigClock.ax').
include('incl/interp.ax').
include('incl/funBigStepEquiv.ax').
include('incl/conLang.ax').
include('incl/exhLang.ax').
include('incl/dec_to_exh.ax').
include('incl/patLang.ax').
include('incl/pat_to_clos.ax').
include('incl/bvl_jump.ax').
include('incl/clos_call.ax').
include('incl/clos_remove.ax').
include('incl/clos_mti.ax').
include('incl/clos_to_bvl.ax').
include('incl/bvl_inline.ax').
include('incl/asmSem.ax').
include('incl/asmProps.ax').
include('incl/targetSem.ax').
include('incl/typeSoundInvariants.ax').
include('incl/typeSysProps.ax').
include('incl/bvl_handle.ax').
include('incl/bvl_const.ax').
include('incl/bvl_to_bvi.ax').
include('incl/modLang.ax').
include('incl/mod_to_con.ax').
include('incl/bigSmallInvariants.ax').
include('incl/con_to_dec.ax').
include('incl/targetProps.ax').
include('incl/weakening.ax').
include('incl/bigSmallEquiv.ax').
include('incl/untypedSafety.ax').
include('incl/funBigStepProps.ax').
include('incl/source_to_mod.ax').
include('incl/semantics.ax').
include('incl/initSemEnv.ax').
include('incl/typeSound.ax').
include('incl/wordLang.ax').
include('incl/exh_to_pat.ax').
include('incl/wordSem.ax').
include('incl/labSem.ax').
include('incl/semanticsProps.ax').
include('incl/labProps.ax').
include('incl/closSem.ax').
include('incl/closProps.ax').
include('incl/patSem.ax').
include('incl/modSem.ax').
include('incl/bvlSem.ax').
include('incl/bviSem.ax').
include('incl/bvlProps.ax').
include('incl/bvpSem.ax').
include('incl/exhSem.ax').
include('incl/conSem.ax').
include('incl/decSem.ax').
include('incl/conProps.ax').
include('incl/decProps.ax').
include('incl/exhProps.ax').
include('incl/modProps.ax').
include('incl/patProps.ax').
include('incl/reg_allocProof.ax').
include('incl/bviProps.ax').
include('incl/bvpProps.ax').
include('incl/bvp_simpProof.ax').
include('incl/bvp_spaceProof.ax').
include('incl/bvl_jumpProof.ax').
include('incl/wellorder.ax').
include('incl/cardinal.ax').
include('incl/hrat.ax').
include('incl/hreal.ax').
include('incl/realax.ax').
include('incl/real.ax').
include('incl/topology.ax').
include('incl/nets.ax').
include('incl/seq.ax').
include('incl/lim.ax').
include('incl/powser.ax').
include('incl/transc.ax').
include('incl/intreal.ax').
include('incl/binary_ieee.ax').
include('incl/tailrec.ax').
include('incl/prog.ax').
include('incl/temporal.ax').
include('incl/address.ax').
include('incl/state.ax').
include('incl/temporal_state.ax').
include('incl/machine_ieee.ax').
include('incl/bitstring.ax').
include('incl/arm.ax').
include('incl/blast.ax').
include('incl/update.ax').
include('incl/arm_step.ax').
include('incl/arm6_target.ax').
include('incl/arm6_eval_encode.ax').
include('incl/mlstring.ax').
include('incl/patternMatches.ax').
include('incl/ml_translator.ax').
include('incl/ml_optimise.ax').
include('incl/ml_pmatch.ax').
include('incl/mini_prelude.ax').
include('incl/bag.ax').
include('incl/benchmark.ax').
include('incl/arm8.ax').
include('incl/arm8_step.ax').
include('incl/clos_relation.ax').
include('incl/clos_relationProps.ax').
include('incl/clos_removeProof.ax').
include('incl/simpleSexp.ax').
include('incl/fromSexp.ax').
include('incl/word_inst.ax').
include('incl/word_alloc.ax').
include('incl/word_remove.ax').
include('incl/word_to_word.ax').
include('incl/stackLang.ax').
include('incl/bvp_to_word.ax').
include('incl/stack_alloc.ax').
include('incl/riscv.ax').
include('incl/riscv_step.ax').
include('incl/std_prelude.ax').
include('incl/holSyntaxLib.ax').
include('incl/holSyntax.ax').
include('incl/holSyntaxExtra.ax').
include('incl/ml_module_demo.ax').
include('incl/bvp_liveProof.ax').
include('incl/PhysicistsQueue.ax').
include('incl/holBoolSyntax.ax').
include('incl/holAxiomsSyntax.ax').
include('incl/setSpec.ax').
include('incl/holSemantics.ax').
include('incl/holSemanticsExtra.ax').
include('incl/holBool.ax').
include('incl/commonUnif.ax').
include('incl/term.ax').
include('incl/subst.ax').
include('incl/walk.ax').
include('incl/walkstar.ax').
include('incl/unifDef.ax').
include('incl/unifProps.ax').
include('incl/redUnif.ax').
include('incl/parmove.ax').
include('incl/word_to_stack.ax').
include('incl/bvl_inlineProof.ax').
include('incl/clos_known.ax').
include('incl/clos_knownProof.ax').
include('incl/okasaki_misc.ax').
include('incl/UnbalancedSet.ax').
include('incl/mips.ax').
include('incl/mips_step.ax').
include('incl/mips_target.ax').
include('incl/mips_target_correct.ax').
include('incl/bvl_constProof.ax').
include('incl/int_bitwise.ax').
include('incl/copying_gc.ax').
include('incl/bvp_to_wordProps.ax').
include('incl/jrhSet.ax').
include('incl/BankersQueue.ax').
include('incl/cmlPEG.ax').
include('incl/clos_numberProof.ax').
include('incl/cmlParse.ax').
include('incl/holKernel.ax').
include('incl/reader.ax').
include('incl/x64.ax').
include('incl/source_to_modProof.ax').
include('incl/collapse.ax').
include('incl/infer_t.ax').
include('incl/unify.ax').
include('incl/infer.ax').
include('incl/inferProps.ax').
include('incl/infer_eComplete.ax').
include('incl/bvl_handleProof.ax').
include('incl/dec_to_exhProof.ax').
include('incl/regexpMatch.ax').
include('incl/ninetyOne.ax').
include('incl/example_91.ax').
include('incl/arm8_target.ax').
include('incl/BatchedQueue.ax').
include('incl/stack_remove.ax').
include('incl/stack_names.ax').
include('incl/stack_to_lab.ax').
include('incl/backend.ax').
include('incl/compiler.ax').
include('incl/ImplicitQueue.ax').
include('incl/stackSem.ax').
include('incl/gramProps.ax').
include('incl/pegSound.ax').
include('incl/holKernelProof.ax').
include('incl/pegComplete.ax').
include('incl/cmlPtreeConversionProps.ax').
include('incl/simpleIO.ax').
include('incl/LazyPairingHeap.ax').
include('incl/stackProps.ax').
include('incl/stack_removeProof.ax').
include('incl/holSoundness.ax').
include('incl/holExtension.ax').
include('incl/lexer_impl.ax').
include('incl/SplayHeap.ax').
include('incl/infer_eSound.ax').
include('incl/wordProps.ax').
include('incl/type_eDeterm.ax').
include('incl/inferComplete.ax').
include('incl/BinaryRandomAccessLists.ax').
include('incl/BinomialHeap.ax').
include('incl/ml_pmatch_demo.ax').
include('incl/holKernelPmatch.ax').
include('incl/ml_monad.ax').
include('incl/ml_hol_kernel.ax').
include('incl/slr_parser_gen.ax').
include('incl/word_instProof.ax').
include('incl/bvi_to_bvpProof.ax').
include('incl/setModel.ax').
include('incl/BottomUpMergeSort.ax').
include('incl/clos_freeProof.ax').
include('incl/example_qsort.ax').
include('incl/PairingHeap.ax').
include('incl/arm6_target_correct.ax').
include('incl/ml_hol_init.ax').
include('incl/x64_step.ax').
include('incl/x64_target.ax').
include('incl/x64_eval_encode.ax').
include('incl/arm8_target_correct.ax').
include('incl/clos_mtiProof.ax').
include('incl/LeftistHeap.ax').
include('incl/word_removeProof.ax').
include('incl/riscv_target.ax').
include('incl/riscv_target_correct.ax').
include('incl/RedBlackSet.ax').
include('incl/stack_namesProof.ax').
include('incl/exh_to_patProof.ax').
include('incl/print.ax').
include('incl/x64_target_correct.ax').
include('incl/HoodMelvilleQueue.ax').
include('incl/lab_filterProof.ax').
include('incl/ml_translator_test.ax').
include('incl/con_to_decProof.ax').
include('incl/pat_to_closProof.ax').
include('incl/clos_annotateProof.ax').
include('incl/holConservative.ax').
fof('thm.bvl_to_bviProof.SNOC_REPLICATE', axiom, ![V_27A_27]: ![V_27n_27, V_27x_27]: s('type.list.list'(V_27A_27),'const.list.SNOC_2'(s(V_27A_27,V_27x_27),s('type.list.list'(V_27A_27),'const.rich_list.REPLICATE_2'(s('type.num.num',V_27n_27),s(V_27A_27,V_27x_27))))) = s('type.list.list'(V_27A_27),'const.rich_list.REPLICATE_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num',V_27n_27))),s(V_27A_27,V_27x_27)))).
fof('thm.bvl_to_bviProof.REVERSE_REPLICATE', axiom, ![V_27A_27]: ![V_27n_27, V_27x_27]: s('type.list.list'(V_27A_27),'const.list.REVERSE_1'(s('type.list.list'(V_27A_27),'const.rich_list.REPLICATE_2'(s('type.num.num',V_27n_27),s(V_27A_27,V_27x_27))))) = s('type.list.list'(V_27A_27),'const.rich_list.REPLICATE_2'(s('type.num.num',V_27n_27),s(V_27A_27,V_27x_27)))).
fof('thm.bvl_to_bviProof.bvl_to_bviProof_3_prove_ltb', axiom, ![V_27a_27]: ((?[V_27b_27, V_27i_27]: s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',V_27i_27))))) | (?[V_27b_27, V_27w_27]: s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27w_27))))) | (?[V_27b_27, V_27tag_27, V_27vs_27]: s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',V_27tag_27),s('type.list.list'('type.bvlSem.v'),V_27vs_27))))) | (?[V_27b_27, V_27c_27]: s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',V_27c_27))))) | ?[V_27b_27, V_27r_27]: s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',V_27r_27))))))))) => (?[V_27b_27, V_27i_27]: s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',V_27i_27))))) | (?[V_27b_27, V_27w_27]: s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27w_27))))) | (?[V_27b_27, V_27r_27]: s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',V_27r_27))))) | (?[V_27b_27, V_27c_27]: s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',V_27c_27))))) | ?[V_27b_27, V_27tag_27, V_27vs_27]: s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('fun'('type.num.num','type.num.num'),'type.bvlSem.v'),'const.pair.,_2'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',V_27tag_27),s('type.list.list'('type.bvlSem.v'),V_27vs_27))))))))))).
fof('thm.bvl_to_bviProof.adjust_bv_ind', axiom, ![V_27P_27]: ((![V_27b_27, V_27i_27]: p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'happ'(s('fun'('fun'('type.num.num','type.num.num'),'fun'('type.bvlSem.v','bool')),V_27P_27),s('fun'('type.num.num','type.num.num'),V_27b_27))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',V_27i_27)))))) & (![V_27b_27, V_27w_27]: p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'happ'(s('fun'('fun'('type.num.num','type.num.num'),'fun'('type.bvlSem.v','bool')),V_27P_27),s('fun'('type.num.num','type.num.num'),V_27b_27))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27w_27)))))) & (![V_27b_27, V_27r_27]: p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'happ'(s('fun'('fun'('type.num.num','type.num.num'),'fun'('type.bvlSem.v','bool')),V_27P_27),s('fun'('type.num.num','type.num.num'),V_27b_27))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',V_27r_27)))))) & (![V_27b_27, V_27c_27]: p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'happ'(s('fun'('fun'('type.num.num','type.num.num'),'fun'('type.bvlSem.v','bool')),V_27P_27),s('fun'('type.num.num','type.num.num'),V_27b_27))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',V_27c_27)))))) & ![V_27b_27, V_27tag_27, V_27vs_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.bvlSem.v',V_27a_27),s('fun'('type.bvlSem.v','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),V_27vs_27)))))) => p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'happ'(s('fun'('fun'('type.num.num','type.num.num'),'fun'('type.bvlSem.v','bool')),V_27P_27),s('fun'('type.num.num','type.num.num'),V_27b_27))),s('type.bvlSem.v',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'happ'(s('fun'('fun'('type.num.num','type.num.num'),'fun'('type.bvlSem.v','bool')),V_27P_27),s('fun'('type.num.num','type.num.num'),V_27b_27))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',V_27tag_27),s('type.list.list'('type.bvlSem.v'),V_27vs_27))))))))))) => ![V_27v_27, V_27v_7c49_7c_27]: p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'happ'(s('fun'('fun'('type.num.num','type.num.num'),'fun'('type.bvlSem.v','bool')),V_27P_27),s('fun'('type.num.num','type.num.num'),V_27v_27))),s('type.bvlSem.v',V_27v_7c49_7c_27)))))).
fof('ARITY_1_2_const.bvl_to_bviProof.adjust_bv', axiom, ![VV0, VV1]: s('type.bvlSem.v','happ'(s('fun'('type.bvlSem.v','type.bvlSem.v'),'const.bvl_to_bviProof.adjust_bv_1'(s('fun'('type.num.num','type.num.num'),VV0))),s('type.bvlSem.v',VV1))) = s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s('fun'('type.num.num','type.num.num'),VV0),s('type.bvlSem.v',VV1)))).
fof('thm.bvl_to_bviProof.adjust_bv_def|split|0', axiom, ![V_27i_27, V_27b_27]: s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',V_27i_27))))) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',V_27i_27)))).
fof('thm.bvl_to_bviProof.adjust_bv_def|split|1', axiom, ![V_27w_27, V_27b_27]: s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27w_27))))) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27w_27)))).
fof('thm.bvl_to_bviProof.adjust_bv_def|split|2', axiom, ![V_27r_27, V_27b_27]: s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',V_27r_27))))) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.num.num',V_27r_27)))))).
fof('thm.bvl_to_bviProof.adjust_bv_def|split|3', axiom, ![V_27c_27, V_27b_27]: s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',V_27c_27))))) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvl_to_bvi.num_stubs_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',V_27c_27)))))))).
fof('thm.bvl_to_bviProof.adjust_bv_def|split|4', axiom, ![V_27vs_27, V_27tag_27, V_27b_27]: s('type.bvlSem.v','happ'(s('fun'('type.bvlSem.v','type.bvlSem.v'),'const.bvl_to_bviProof.adjust_bv_1'(s('fun'('type.num.num','type.num.num'),V_27b_27))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',V_27tag_27),s('type.list.list'('type.bvlSem.v'),V_27vs_27))))) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',V_27tag_27),s('type.list.list'('type.bvlSem.v'),'const.list.MAP_2'(s('fun'('type.bvlSem.v','type.bvlSem.v'),'const.bvl_to_bviProof.adjust_bv_1'(s('fun'('type.num.num','type.num.num'),V_27b_27))),s('type.list.list'('type.bvlSem.v'),V_27vs_27)))))).
fof('thm.bvl_to_bviProof.adjust_bv_Unit', axiom, ![V_27x_27]: s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s('fun'('type.num.num','type.num.num'),V_27x_27),s('type.bvlSem.v','const.bvlSem.Unit_0'))) = s('type.bvlSem.v','const.bvlSem.Unit_0')).
fof('thm.bvl_to_bviProof.adjust_bv_Boolv', axiom, ![V_27x_27, V_27b_27]: s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s('fun'('type.num.num','type.num.num'),V_27x_27),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s('bool',V_27b_27))))) = s('type.bvlSem.v','const.bvlSem.Boolv_1'(s('bool',V_27b_27)))).
fof('thm.bvl_to_bviProof.bvl_to_bviProof_|49||48|_prove_ltb', axiom, ![V_27A_27,V_27B_27]: ![V_27a_27]: ((?[V_27t_27]: s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27))),V_27a_27) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'const.list.NIL_0'),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),V_27t_27))) | ?[V_27name_27, V_27arg__count_27, V_27body_27, V_27rest_27, V_27t_27]: s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27))),V_27a_27) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27)),'const.pair.,_2'(s('type.num.num',V_27name_27),s('type.pair.prod'(V_27A_27,V_27B_27),'const.pair.,_2'(s(V_27A_27,V_27arg__count_27),s(V_27B_27,V_27body_27))))),s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),V_27rest_27))),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),V_27t_27)))) => (?[V_27t_27]: s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27))),V_27a_27) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'const.list.NIL_0'),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),V_27t_27))) | ?[V_27name_27, V_27arg__count_27, V_27body_27, V_27rest_27, V_27t_27]: s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27))),V_27a_27) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27)),'const.pair.,_2'(s('type.num.num',V_27name_27),s('type.pair.prod'(V_27A_27,V_27B_27),'const.pair.,_2'(s(V_27A_27,V_27arg__count_27),s(V_27B_27,V_27body_27))))),s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),V_27rest_27))),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),V_27t_27)))))).
fof('thm.bvl_to_bviProof.aux_code_installed_ind', axiom, ![V_27A_27,V_27B_27]: ![V_27P_27]: ((![V_27t_27]: p(s('bool','happ'(s('fun'('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),'bool'),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'fun'('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),'bool')),V_27P_27),s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'const.list.NIL_0'))),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),V_27t_27)))) & ![V_27name_27, V_27arg__count_27, V_27body_27, V_27rest_27, V_27t_27]: (p(s('bool','happ'(s('fun'('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),'bool'),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'fun'('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),'bool')),V_27P_27),s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),V_27rest_27))),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),V_27t_27)))) => p(s('bool','happ'(s('fun'('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),'bool'),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'fun'('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),'bool')),V_27P_27),s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27)),'const.pair.,_2'(s('type.num.num',V_27name_27),s('type.pair.prod'(V_27A_27,V_27B_27),'const.pair.,_2'(s(V_27A_27,V_27arg__count_27),s(V_27B_27,V_27body_27))))),s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),V_27rest_27))))),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),V_27t_27)))))) => ![V_27v_27, V_27v_7c49_7c_27]: p(s('bool','happ'(s('fun'('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),'bool'),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'fun'('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),'bool')),V_27P_27),s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),V_27v_27))),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),V_27v_7c49_7c_27)))))).
fof('thm.bvl_to_bviProof.aux_code_installed_def|split|0', axiom, ![V_27A_27,V_27B_27]: ![V_27t_27]: s('bool','const.bvl_to_bviProof.aux_code_installed_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'const.list.NIL_0'),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),V_27t_27))) = s('bool','T_0')).
fof('thm.bvl_to_bviProof.aux_code_installed_def|split|1', axiom, ![V_27A_27,V_27B_27]: ![V_27t_27, V_27rest_27, V_27name_27, V_27body_27, V_27arg__count_27]: (p(s('bool','const.bvl_to_bviProof.aux_code_installed_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'const.list.CONS_2'(s('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27)),'const.pair.,_2'(s('type.num.num',V_27name_27),s('type.pair.prod'(V_27A_27,V_27B_27),'const.pair.,_2'(s(V_27A_27,V_27arg__count_27),s(V_27B_27,V_27body_27))))),s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),V_27rest_27))),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),V_27t_27)))) <=> (s('type.option.option'('type.pair.prod'(V_27A_27,V_27B_27)),'const.sptree.lookup_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvl_to_bvi.num_stubs_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',V_27name_27))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),V_27t_27))) = s('type.option.option'('type.pair.prod'(V_27A_27,V_27B_27)),'const.option.SOME_1'(s('type.pair.prod'(V_27A_27,V_27B_27),'const.pair.,_2'(s(V_27A_27,V_27arg__count_27),s(V_27B_27,V_27body_27))))) & p(s('bool','const.bvl_to_bviProof.aux_code_installed_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),V_27rest_27),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),V_27t_27))))))).
fof('thm.bvl_to_bviProof.bvl_to_bviProof_|49|4_prove_ltb', axiom, ![V_27A_27,V_27B_27]: ![V_27code_27, V_27xs_27, V_27ys_27]: (p(s('bool','const.bvl_to_bviProof.aux_code_installed_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),V_27xs_27),s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),V_27ys_27))),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),V_27code_27)))) => (p(s('bool','const.bvl_to_bviProof.aux_code_installed_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),V_27xs_27),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),V_27code_27)))) & p(s('bool','const.bvl_to_bviProof.aux_code_installed_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),V_27ys_27),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),V_27code_27))))))).
fof('ARITY_0_2_const.bvl_to_bviProof.aux_code_installed', axiom, ![V_27A_27,V_27B_27]: ![VV0, VV1]: s('bool','happ'(s('fun'('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),'bool'),'happ'(s('fun'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),'fun'('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),'bool')),'const.bvl_to_bviProof.aux_code_installed_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),VV0))),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),VV1))) = s('bool','const.bvl_to_bviProof.aux_code_installed_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'(V_27A_27,V_27B_27))),VV0),s('type.sptree.spt'('type.pair.prod'(V_27A_27,V_27B_27)),VV1)))).
fof('thm.bvl_to_bviProof.state_rel_def', axiom, ![V_27FFI_27]: ![V_27b_27, V_27s_27, V_27t_27]: (p(s('bool','const.bvl_to_bviProof.state_rel_3'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.bvlSem.state'(V_27FFI_27),V_27s_27),s('type.bviSem.state'(V_27FFI_27),V_27t_27)))) <=> (p(s('bool','const.pred_set.INJ_3'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('fun'('type.num.num','bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s_27))))),s('fun'('type.num.num','bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bviSem.state_refs_1'(s('type.bviSem.state'(V_27FFI_27),V_27t_27)))))))) & (![V_27k_27]: p(s('bool','const.option.option_CASE_3'(s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s_27))),s('type.num.num',V_27k_27))),s('bool','T_0'),s('fun'('type.closSem.ref'('type.bvlSem.v'),'bool'),'_dst_x1x0x0_3'(s('fun'('type.closSem.ref'('type.bvlSem.v'),'fun'('fun'('type.list.list'('type.bvlSem.v'),'bool'),'fun'('fun'('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'bool'),'bool'))),'const.closSem.ref_CASE_0'),s('fun'('type.list.list'('type.bvlSem.v'),'bool'),'_dst_x0x1_2'(s('fun'('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'bool'),'=_1'(s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bviSem.state_refs_1'(s('type.bviSem.state'(V_27FFI_27),V_27t_27))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.num.num',V_27k_27))))))),s('fun'('type.list.list'('type.bvlSem.v'),'type.option.option'('type.closSem.ref'('type.bvlSem.v'))),'_dst_x0x1_2'(s('fun'('type.closSem.ref'('type.bvlSem.v'),'type.option.option'('type.closSem.ref'('type.bvlSem.v'))),'const.option.SOME_0'),s('fun'('type.list.list'('type.bvlSem.v'),'type.closSem.ref'('type.bvlSem.v')),'_dst_x0x1_2'(s('fun'('type.list.list'('type.bvlSem.v'),'type.closSem.ref'('type.bvlSem.v')),'const.closSem.ValueArray_0'),s('fun'('type.list.list'('type.bvlSem.v'),'type.list.list'('type.bvlSem.v')),'const.list.MAP_1'(s('fun'('type.bvlSem.v','type.bvlSem.v'),'const.bvl_to_bviProof.adjust_bv_1'(s('fun'('type.num.num','type.num.num'),V_27b_27))))))))))),s('fun'('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'bool'),'_dst_x0x1_2'(s('fun'('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'bool'),'=_1'(s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bviSem.state_refs_1'(s('type.bviSem.state'(V_27FFI_27),V_27t_27))),s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('type.num.num',V_27k_27))))))),s('fun'('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'type.option.option'('type.closSem.ref'('type.bvlSem.v'))),'_dst_x0x1_2'(s('fun'('type.closSem.ref'('type.bvlSem.v'),'type.option.option'('type.closSem.ref'('type.bvlSem.v'))),'const.option.SOME_0'),s('fun'('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'type.closSem.ref'('type.bvlSem.v')),'const.closSem.ByteArray_0')))))))))) & (s('type.ffi.ffi_state'(V_27FFI_27),'const.bvlSem.state_ffi_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s_27))) = s('type.ffi.ffi_state'(V_27FFI_27),'const.bviSem.state_ffi_1'(s('type.bviSem.state'(V_27FFI_27),V_27t_27))) & (![V_27p_27]: (s('type.option.option'('type.num.num'),'const.bviSem.state_global_1'(s('type.bviSem.state'(V_27FFI_27),V_27t_27))) = s('type.option.option'('type.num.num'),'happ'(s('fun'('type.num.num','type.option.option'('type.num.num')),'const.option.SOME_0'),s('type.num.num',V_27p_27))) => (~ (p(s('bool','const.bool.IN_2'(s('type.num.num',V_27p_27),s('fun'('type.num.num','bool'),'const.pred_set.IMAGE_2'(s('fun'('type.num.num','type.num.num'),V_27b_27),s('fun'('type.num.num','bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s_27))))))))))) & ?[V_27z_27]: (s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bviSem.state_refs_1'(s('type.bviSem.state'(V_27FFI_27),V_27t_27))),s('type.num.num',V_27p_27))) = s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'happ'(s('fun'('type.closSem.ref'('type.bvlSem.v'),'type.option.option'('type.closSem.ref'('type.bvlSem.v'))),'const.option.SOME_0'),s('type.closSem.ref'('type.bvlSem.v'),'happ'(s('fun'('type.list.list'('type.bvlSem.v'),'type.closSem.ref'('type.bvlSem.v')),'const.closSem.ValueArray_0'),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s_27))))))))))),s('type.list.list'('type.bvlSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.bvlSem.v'),'happ'(s('fun'('type.list.list'('type.option.option'('type.bvlSem.v')),'type.list.list'('type.bvlSem.v')),'const.list.MAP_1'(s('fun'('type.option.option'('type.bvlSem.v'),'type.bvlSem.v'),'const.combin.o_2'(s('fun'('type.option.option'('type.bvlSem.v'),'type.bvlSem.v'),'const.lib.the_1'(s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))),s('fun'('type.option.option'('type.bvlSem.v'),'type.option.option'('type.bvlSem.v')),'const.option.OPTION_MAP_1'(s('fun'('type.bvlSem.v','type.bvlSem.v'),'const.bvl_to_bviProof.adjust_bv_1'(s('fun'('type.num.num','type.num.num'),V_27b_27))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s_27))))),s('type.list.list'('type.bvlSem.v'),'const.rich_list.REPLICATE_2'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num',V_27z_27),s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s_27))))))))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.num.|48|_0'))))))))))))))) & p(s('bool','const.arithmetic.<=_2'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s_27))))))),s('type.num.num',V_27z_27))))))) & (s('type.num.num','const.bvlSem.state_clock_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s_27))) = s('type.num.num','const.bviSem.state_clock_1'(s('type.bviSem.state'(V_27FFI_27),V_27t_27))) & (s('type.option.option'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.sptree.lookup_2'(s('type.num.num','const.bvl_to_bvi.AllocGlobal_location_0'),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(V_27FFI_27),V_27t_27))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.bvi.exp')),'happ'(s('fun'('type.pair.prod'('type.num.num','type.bvi.exp'),'type.option.option'('type.pair.prod'('type.num.num','type.bvi.exp'))),'const.option.SOME_0'),s('type.pair.prod'('type.num.num','type.bvi.exp'),'const.bvl_to_bvi.AllocGlobal_code_0'))) & (s('type.option.option'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.sptree.lookup_2'(s('type.num.num','const.bvl_to_bvi.CopyGlobals_location_0'),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(V_27FFI_27),V_27t_27))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.bvi.exp')),'happ'(s('fun'('type.pair.prod'('type.num.num','type.bvi.exp'),'type.option.option'('type.pair.prod'('type.num.num','type.bvi.exp'))),'const.option.SOME_0'),s('type.pair.prod'('type.num.num','type.bvi.exp'),'const.bvl_to_bvi.CopyGlobals_code_0'))) & ![V_27name_27, V_27arity_27, V_27exp_27]: (s('type.option.option'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.sptree.lookup_2'(s('type.num.num',V_27name_27),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvl.exp')),'const.bvlSem.state_code_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s_27))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.bvl.exp')),'happ'(s('fun'('type.pair.prod'('type.num.num','type.bvl.exp'),'type.option.option'('type.pair.prod'('type.num.num','type.bvl.exp'))),'const.option.SOME_0'),s('type.pair.prod'('type.num.num','type.bvl.exp'),'happ'(s('fun'('type.bvl.exp','type.pair.prod'('type.num.num','type.bvl.exp')),'const.pair.,_1'(s('type.num.num',V_27arity_27))),s('type.bvl.exp',V_27exp_27))))) => ?[V_27n_27]: p(s('bool','const.bool.LET_2'(s('fun'('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.bvi.exp'))),'type.num.num')),'bool'),'happ'(s('fun'('fun'('type.list.list'('type.bvi.exp'),'fun'('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.bvi.exp'))),'type.num.num'),'bool')),'fun'('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.bvi.exp'))),'type.num.num')),'bool')),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.bvi.exp'),'fun'('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.bvi.exp'))),'type.num.num'),'bool')),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.bvi.exp'))),'fun'('type.num.num','bool')),'fun'('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.bvi.exp'))),'type.num.num'),'bool')),'const.pair.UNCURRY_0'),s('fun'('type.list.list'('type.bvi.exp'),'fun'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.bvi.exp'))),'fun'('type.num.num','bool'))),'_dst_x000x100x010_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.bvi.exp'),'bool'),'_dst_x0x1_2'(s('fun'('type.option.option'('type.pair.prod'('type.num.num','type.bvi.exp')),'bool'),'=_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.sptree.lookup_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.bvl_to_bvi.num_stubs_0'),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',V_27name_27))))),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(V_27FFI_27),V_27t_27))))))),s('fun'('type.list.list'('type.bvi.exp'),'type.option.option'('type.pair.prod'('type.num.num','type.bvi.exp'))),'_dst_x0x1_2'(s('fun'('type.pair.prod'('type.num.num','type.bvi.exp'),'type.option.option'('type.pair.prod'('type.num.num','type.bvi.exp'))),'const.option.SOME_0'),s('fun'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.num.num','type.bvi.exp')),'_dst_x0x1_2'(s('fun'('type.bvi.exp','type.pair.prod'('type.num.num','type.bvi.exp')),'const.pair.,_1'(s('type.num.num',V_27arity_27))),s('fun'('type.list.list'('type.bvi.exp'),'type.bvi.exp'),'const.list.HD_0'))))))),s('fun'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.bvi.exp'))),'bool'),'_dst_x0x1x0_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.bvi.exp'))),'bool'),'_dst_x1x0_2'(s('fun'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.bvi.exp'))),'fun'('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'bool')),'const.bvl_to_bviProof.aux_code_installed_0'),s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvi.exp')),'const.bviSem.state_code_1'(s('type.bviSem.state'(V_27FFI_27),V_27t_27))))),s('bool','const.bvlProps.bEvery_2'(s('fun'('type.bvl.exp','bool'),'const.bvlProps.GoodHandleLet_0'),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',V_27exp_27),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))))))))),s('type.pair.prod'('type.list.list'('type.bvi.exp'),'type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.bvi.exp'))),'type.num.num')),'const.bvl_to_bvi.compile_exps_2'(s('type.num.num',V_27n_27),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',V_27exp_27),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))))))))))))).
fof('thm.bvl_to_bviProof.bvl_to_bviProof_|49|7_prove_ltb', axiom, ![V_27A_27]: ![V_27a_27]: ((?[V_27refs_27, V_27v2_27]: s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',V_27v2_27))))) | (?[V_27refs_27, V_27v3_27]: s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27v3_27))))) | (?[V_27refs_27, V_27tag_27, V_27vs_27]: s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',V_27tag_27),s('type.list.list'('type.bvlSem.v'),V_27vs_27))))) | (?[V_27refs_27, V_27v6_27]: s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',V_27v6_27))))) | ?[V_27refs_27, V_27r_27]: s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',V_27r_27))))))))) => (?[V_27refs_27, V_27r_27]: s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',V_27r_27))))) | (?[V_27refs_27, V_27tag_27, V_27vs_27]: s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',V_27tag_27),s('type.list.list'('type.bvlSem.v'),V_27vs_27))))) | (?[V_27refs_27, V_27v2_27]: s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',V_27v2_27))))) | (?[V_27refs_27, V_27v3_27]: s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27v3_27))))) | ?[V_27refs_27, V_27v6_27]: s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),V_27a_27) = s('type.pair.prod'('type.finite_map.fmap'('type.num.num',V_27A_27),'type.bvlSem.v'),'const.pair.,_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',V_27v6_27))))))))))).
fof('thm.bvl_to_bviProof.bv_ok_ind', axiom, ![V_27A_27]: ![V_27P_27]: ((![V_27refs_27, V_27r_27]: p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'happ'(s('fun'('type.finite_map.fmap'('type.num.num',V_27A_27),'fun'('type.bvlSem.v','bool')),V_27P_27),s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27))),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',V_27r_27)))))) & (![V_27refs_27, V_27tag_27, V_27vs_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.bvlSem.v',V_27a_27),s('fun'('type.bvlSem.v','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.bvlSem.v'),V_27vs_27)))))) => p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'happ'(s('fun'('type.finite_map.fmap'('type.num.num',V_27A_27),'fun'('type.bvlSem.v','bool')),V_27P_27),s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27))),s('type.bvlSem.v',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'happ'(s('fun'('type.finite_map.fmap'('type.num.num',V_27A_27),'fun'('type.bvlSem.v','bool')),V_27P_27),s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',V_27tag_27),s('type.list.list'('type.bvlSem.v'),V_27vs_27))))))) & (![V_27refs_27, V_27v2_27]: p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'happ'(s('fun'('type.finite_map.fmap'('type.num.num',V_27A_27),'fun'('type.bvlSem.v','bool')),V_27P_27),s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27))),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',V_27v2_27)))))) & (![V_27refs_27, V_27v3_27]: p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'happ'(s('fun'('type.finite_map.fmap'('type.num.num',V_27A_27),'fun'('type.bvlSem.v','bool')),V_27P_27),s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27))),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27v3_27)))))) & ![V_27refs_27, V_27v6_27]: p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'happ'(s('fun'('type.finite_map.fmap'('type.num.num',V_27A_27),'fun'('type.bvlSem.v','bool')),V_27P_27),s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27))),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',V_27v6_27)))))))))) => ![V_27v_27, V_27v_7c49_7c_27]: p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'happ'(s('fun'('type.finite_map.fmap'('type.num.num',V_27A_27),'fun'('type.bvlSem.v','bool')),V_27P_27),s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27v_27))),s('type.bvlSem.v',V_27v_7c49_7c_27)))))).
fof('ARITY_1_2_const.bvl_to_bviProof.bv_ok', axiom, ![V_27A_27]: ![VV0, VV1]: s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',V_27A_27),VV0))),s('type.bvlSem.v',VV1))) = s('bool','const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),VV0),s('type.bvlSem.v',VV1)))).
fof('thm.bvl_to_bviProof.bv_ok_def|split|0', axiom, ![V_27A_27]: ![V_27refs_27, V_27r_27]: s('bool','const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',V_27r_27))))) = s('bool','const.bool.IN_2'(s('type.num.num',V_27r_27),s('fun'('type.num.num','bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27)))))).
fof('thm.bvl_to_bviProof.bv_ok_def|split|1', axiom, ![V_27A_27]: ![V_27vs_27, V_27tag_27, V_27refs_27]: s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27))),s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',V_27tag_27),s('type.list.list'('type.bvlSem.v'),V_27vs_27))))) = s('bool','const.list.EVERY_2'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27))),s('type.list.list'('type.bvlSem.v'),V_27vs_27)))).
fof('thm.bvl_to_bviProof.bv_ok_def|split|2', axiom, ![V_27A_27]: ![V_27v2_27, V_27refs_27]: s('bool','const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',V_27v2_27))))) = s('bool','T_0')).
fof('thm.bvl_to_bviProof.bv_ok_def|split|3', axiom, ![V_27A_27]: ![V_27v3_27, V_27refs_27]: s('bool','const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),V_27v3_27))))) = s('bool','T_0')).
fof('thm.bvl_to_bviProof.bv_ok_def|split|4', axiom, ![V_27A_27]: ![V_27v6_27, V_27refs_27]: s('bool','const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',V_27v6_27))))) = s('bool','T_0')).
fof('thm.bvl_to_bviProof.bvl_to_bviProof_2|49|_prove_ltb', axiom, ![V_27A_27,V_27B_27]: ![V_27refs_27, V_27x_27, V_27refs2_27]: ((p(s('bool','const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v',V_27x_27)))) & p(s('bool','const.pred_set.SUBSET_2'(s('fun'('type.num.num','bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27))),s('fun'('type.num.num','bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num',V_27B_27),V_27refs2_27))))))) => p(s('bool','const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',V_27B_27),V_27refs2_27),s('type.bvlSem.v',V_27x_27)))))).
fof('thm.bvl_to_bviProof.bv_ok_Unit', axiom, ![V_27A_27]: ![V_27refs_27]: p(s('bool','const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v','const.bvlSem.Unit_0'))))).
fof('thm.bvl_to_bviProof.bv_ok_Boolv', axiom, ![V_27A_27]: ![V_27refs_27, V_27b_27]: p(s('bool','const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27),s('type.bvlSem.v','const.bvlSem.Boolv_1'(s('bool',V_27b_27))))))).
fof('thm.bvl_to_bviProof.bvl_to_bviProof_24_prove_ltb', axiom, ![V_27FFI_27]: ![V_27s5_27, V_27b2_27, V_27a_7c49_7c_27, V_27b3_27]: ((p(s('bool','const.bvl_to_bviProof.bv_ok_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s5_27))),s('type.bvlSem.v',V_27a_7c49_7c_27)))) & ![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.num.num',V_27a_27),s('fun'('type.num.num','bool'),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s5_27)))))))) => s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27b2_27),s('type.num.num',V_27a_27))) = s('type.num.num','happ'(s('fun'('type.num.num','type.num.num'),V_27b3_27),s('type.num.num',V_27a_27))))) => s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s('fun'('type.num.num','type.num.num'),V_27b2_27),s('type.bvlSem.v',V_27a_7c49_7c_27))) = s('type.bvlSem.v','const.bvl_to_bviProof.adjust_bv_2'(s('fun'('type.num.num','type.num.num'),V_27b3_27),s('type.bvlSem.v',V_27a_7c49_7c_27))))).
fof('thm.bvl_to_bviProof.state_ok_def', axiom, ![V_27FFI_27]: ![V_27s_27]: (p(s('bool','const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s_27)))) <=> (p(s('bool','happ'(s('fun'('type.list.list'('type.option.option'('type.bvlSem.v')),'bool'),'const.list.EVERY_1'(s('fun'('type.option.option'('type.bvlSem.v'),'bool'),'_dst_x1x0x0_3'(s('fun'('type.option.option'('type.bvlSem.v'),'fun'('bool','fun'('fun'('type.bvlSem.v','bool'),'bool'))),'const.option.option_CASE_0'),s('bool','T_0'),s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s_27))))))))),s('type.list.list'('type.option.option'('type.bvlSem.v')),'const.bvlSem.state_globals_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s_27)))))) & ![V_27k_27]: p(s('bool','happ'(s('fun'('fun'('type.closSem.ref'('type.bvlSem.v'),'bool'),'bool'),'happ'(s('fun'('bool','fun'('fun'('type.closSem.ref'('type.bvlSem.v'),'bool'),'bool')),'happ'(s('fun'('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'fun'('bool','fun'('fun'('type.closSem.ref'('type.bvlSem.v'),'bool'),'bool'))),'const.option.option_CASE_0'),s('type.option.option'('type.closSem.ref'('type.bvlSem.v')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s_27))),s('type.num.num',V_27k_27))))),s('bool','T_0'))),s('fun'('type.closSem.ref'('type.bvlSem.v'),'bool'),'_dst_x1x0x0_3'(s('fun'('type.closSem.ref'('type.bvlSem.v'),'fun'('fun'('type.list.list'('type.bvlSem.v'),'bool'),'fun'('fun'('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'bool'),'bool'))),'const.closSem.ref_CASE_0'),s('fun'('type.list.list'('type.bvlSem.v'),'bool'),'const.list.EVERY_1'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27FFI_27),V_27s_27))))))),s('fun'('type.list.list'('type.fcp.cart'('bool','type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),'bool'),'_dst_x0_1'(s('bool','T_0'))))))))))).
fof('thm.bvl_to_bviProof.bvl_to_bviProof_26_prove_ltb|split|0', axiom, ![V_27A_27]: ![V_27s_27, V_27n_27]: s('bool','const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(V_27A_27),'const.bvlSem.dec_clock_2'(s('type.num.num',V_27n_27),s('type.bvlSem.state'(V_27A_27),V_27s_27))))) = s('bool','const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(V_27A_27),V_27s_27)))).
fof('thm.bvl_to_bviProof.bvl_to_bviProof_26_prove_ltb|split|1', axiom, ![V_27A_27]: ![V_27s_27, V_27n_27]: s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27A_27),'const.bvlSem.dec_clock_2'(s('type.num.num',V_27n_27),s('type.bvlSem.state'(V_27A_27),V_27s_27))))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27A_27),V_27s_27)))).
fof('thm.bvl_to_bviProof.bvl_to_bviProof_27_prove_ltb', axiom, ![V_27A_27]: ![V_27xs_27, V_27t_27, V_27s_27, V_27res_27, V_27env_27, V_27as_27, V_27a_7c49_7c_27]: (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(V_27A_27)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(V_27A_27))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),V_27xs_27),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(V_27A_27)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),V_27env_27),s('type.bvlSem.state'(V_27A_27),V_27s_27))))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(V_27A_27)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),V_27res_27),s('type.bvlSem.state'(V_27A_27),V_27t_27))) => ((p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27A_27),V_27s_27))))),s('type.bvlSem.v',V_27a_7c49_7c_27)))) => p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27A_27),V_27t_27))))),s('type.bvlSem.v',V_27a_7c49_7c_27))))) & (p(s('bool','const.list.EVERY_2'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27A_27),V_27s_27))))),s('type.list.list'('type.bvlSem.v'),V_27as_27)))) => p(s('bool','const.list.EVERY_2'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27A_27),V_27t_27))))),s('type.list.list'('type.bvlSem.v'),V_27as_27)))))))).
fof('thm.bvl_to_bviProof.bvl_to_bviProof_28_prove_ltb', axiom, ![V_27A_27]: ![V_27refs_27, V_27v_27, V_27x_27]: ((s('type.option.option'('type.list.list'('type.bvlSem.v')),'const.bvlSem.v_to_list_1'(s('type.bvlSem.v',V_27v_27))) = s('type.option.option'('type.list.list'('type.bvlSem.v')),'const.option.SOME_1'(s('type.list.list'('type.bvlSem.v'),V_27x_27))) & p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27))),s('type.bvlSem.v',V_27v_27))))) => p(s('bool','const.list.EVERY_2'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num',V_27A_27),V_27refs_27))),s('type.list.list'('type.bvlSem.v'),V_27x_27)))))).
fof('thm.bvl_to_bviProof.bvl_to_bviProof_29_prove_ltb', axiom, ![V_27A_27]: ![V_27t_27, V_27r_27, V_27q_27, V_27op_27, V_27a_27]: ((p(s('bool','const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(V_27A_27),V_27r_27)))) & (p(s('bool','const.list.EVERY_2'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27A_27),V_27r_27))))),s('type.list.list'('type.bvlSem.v'),V_27a_27)))) & s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bvlSem.state'(V_27A_27)),'type.bvlSem.v'),'const.bvlSem.do_app_3'(s('type.closLang.op',V_27op_27),s('type.list.list'('type.bvlSem.v'),V_27a_27),s('type.bvlSem.state'(V_27A_27),V_27r_27))) = s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bvlSem.state'(V_27A_27)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bvlSem.state'(V_27A_27)),'const.pair.,_2'(s('type.bvlSem.v',V_27q_27),s('type.bvlSem.state'(V_27A_27),V_27t_27))))))) => (p(s('bool','const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(V_27A_27),V_27t_27)))) & p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27A_27),V_27t_27))))),s('type.bvlSem.v',V_27q_27))))))).
fof('thm.bvl_to_bviProof.bvl_to_bviProof_3|48|_prove_ltb', axiom, ![V_27A_27]: ![V_27t_27, V_27r_27, V_27q_27, V_27op_27, V_27env_27, V_27a_27]: ((p(s('bool','const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(V_27A_27),V_27r_27)))) & (p(s('bool','const.list.EVERY_2'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27A_27),V_27r_27))))),s('type.list.list'('type.bvlSem.v'),V_27a_27)))) & s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bvlSem.state'(V_27A_27)),'type.bvlSem.v'),'const.bvlSem.do_app_3'(s('type.closLang.op',V_27op_27),s('type.list.list'('type.bvlSem.v'),V_27a_27),s('type.bvlSem.state'(V_27A_27),V_27r_27))) = s('type.semanticPrimitives.result'('type.pair.prod'('type.bvlSem.v','type.bvlSem.state'(V_27A_27)),'type.bvlSem.v'),'const.semanticPrimitives.Rval_1'(s('type.pair.prod'('type.bvlSem.v','type.bvlSem.state'(V_27A_27)),'const.pair.,_2'(s('type.bvlSem.v',V_27q_27),s('type.bvlSem.state'(V_27A_27),V_27t_27))))))) => (p(s('bool','const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(V_27A_27),V_27t_27)))) & (p(s('bool','happ'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27A_27),V_27t_27))))),s('type.bvlSem.v',V_27q_27)))) & (p(s('bool','const.list.EVERY_2'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27A_27),V_27r_27))))),s('type.list.list'('type.bvlSem.v'),V_27env_27)))) => p(s('bool','const.list.EVERY_2'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27A_27),V_27t_27))))),s('type.list.list'('type.bvlSem.v'),V_27env_27))))))))).
fof('thm.bvl_to_bviProof.bvl_to_bviProof_3|49|_prove_ltb', conjecture, ![V_27A_27]: ![V_27xs_27, V_27env_27, V_27s_27, V_27res_27, V_27t_27]: ((s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(V_27A_27)),'const.bvlSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.bvl.exp'),'type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(V_27A_27))),'const.pair.,_2'(s('type.list.list'('type.bvl.exp'),V_27xs_27),s('type.pair.prod'('type.list.list'('type.bvlSem.v'),'type.bvlSem.state'(V_27A_27)),'const.pair.,_2'(s('type.list.list'('type.bvlSem.v'),V_27env_27),s('type.bvlSem.state'(V_27A_27),V_27s_27))))))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),'type.bvlSem.state'(V_27A_27)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),V_27res_27),s('type.bvlSem.state'(V_27A_27),V_27t_27))) & (p(s('bool','const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(V_27A_27),V_27s_27)))) & p(s('bool','happ'(s('fun'('type.list.list'('type.bvlSem.v'),'bool'),'const.list.EVERY_1'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27A_27),V_27s_27))))))),s('type.list.list'('type.bvlSem.v'),V_27env_27)))))) => (p(s('bool','const.bvl_to_bviProof.state_ok_1'(s('type.bvlSem.state'(V_27A_27),V_27t_27)))) & (p(s('bool','const.semanticPrimitives.result_CASE_3'(s('type.semanticPrimitives.result'('type.list.list'('type.bvlSem.v'),'type.bvlSem.v'),V_27res_27),s('fun'('type.list.list'('type.bvlSem.v'),'bool'),'const.list.EVERY_1'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27A_27),V_27t_27))))))),s('fun'('type.semanticPrimitives.error_result'('type.bvlSem.v'),'bool'),'_dst_x1x0x0_3'(s('fun'('type.semanticPrimitives.error_result'('type.bvlSem.v'),'fun'('fun'('type.bvlSem.v','bool'),'fun'('fun'('type.semanticPrimitives.abort','bool'),'bool'))),'const.semanticPrimitives.error_result_CASE_0'),s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27A_27),V_27t_27))))),s('fun'('type.semanticPrimitives.abort','bool'),'_dst_x0_1'(s('bool','T_0')))))))) & p(s('bool','happ'(s('fun'('type.list.list'('type.bvlSem.v'),'bool'),'const.list.EVERY_1'(s('fun'('type.bvlSem.v','bool'),'const.bvl_to_bviProof.bv_ok_1'(s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvlSem.state_refs_1'(s('type.bvlSem.state'(V_27A_27),V_27t_27))))))),s('type.list.list'('type.bvlSem.v'),V_27env_27)))))))).
