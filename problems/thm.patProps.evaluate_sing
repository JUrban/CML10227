include('incl/logic.ax').
include('incl/bool.ax').
include('incl/marker.ax').
include('incl/num.ax').
include('incl/combin.ax').
include('incl/normalForms.ax').
include('incl/sat.ax').
include('incl/relation.ax').
include('incl/pair.ax').
include('incl/prim_rec.ax').
include('incl/arithmetic.ax').
include('incl/numeral.ax').
include('incl/ConseqConv.ax').
include('incl/sum.ax').
include('incl/one.ax').
include('incl/option.ax').
include('incl/while.ax').
include('incl/operator.ax').
include('incl/basicSize.ax').
include('incl/numpair.ax').
include('incl/pred_set.ax').
include('incl/ind_type.ax').
include('incl/list.ax').
include('incl/rich_list.ax').
include('incl/quantHeuristics.ax').
include('incl/fcp.ax').
include('incl/logroot.ax').
include('incl/bit.ax').
include('incl/string.ax').
include('incl/numposrep.ax').
include('incl/ASCIInumbers.ax').
include('incl/numeral_bit.ax').
include('incl/sum_num.ax').
include('incl/words.ax').
include('incl/alignment.ax').
include('incl/sorting.ax').
include('incl/finite_map.ax').
include('incl/alist.ax').
include('incl/sptree.ax').
include('incl/indexedLists.ax').
include('incl/res_quan.ax').
include('incl/quotient.ax').
include('incl/quotient_list.ax').
include('incl/set_sep.ax').
include('incl/set_relation.ax').
include('incl/wot.ax').
include('incl/toto.ax').
include('incl/comparison.ax').
include('incl/llist.ax').
include('incl/misc.ax').
include('incl/quotient_pair.ax').
include('incl/quotient_sum.ax').
include('incl/divides.ax').
include('incl/gcd.ax').
include('incl/quotient_option.ax').
include('incl/integer.ax').
include('incl/Omega.ax').
include('incl/int_arith.ax').
include('incl/integer_word.ax').
include('incl/lib.ax').
include('incl/ffi.ax').
include('incl/grammar.ax').
include('incl/peg.ax').
include('incl/pegexec.ax').
include('incl/state_transformer.ax').
include('incl/lprefix_lub.ax').
include('incl/tokens.ax').
include('incl/gram.ax').
include('incl/ast.ax').
include('incl/asm.ax').
include('incl/semanticPrimitives.ax').
include('incl/reg_alloc.ax').
include('incl/typeSystem.ax').
include('incl/funBigStep.ax').
include('incl/termination.ax').
include('incl/labLang.ax').
include('incl/lab_filter.ax').
include('incl/lab_to_target.ax').
include('incl/closLang.ax').
include('incl/bvl.ax').
include('incl/bvp.ax').
include('incl/bvp_live.ax').
include('incl/smallStep.ax').
include('incl/bigStep.ax').
include('incl/db_vars.ax').
include('incl/clos_free.ax').
include('incl/clos_annotate.ax').
include('incl/clos_number.ax').
include('incl/tokenUtils.ax').
include('incl/cmlPtreeConversion.ax').
include('incl/lexer_fun.ax').
include('incl/NTproperties.ax').
include('incl/initialProgram.ax').
include('incl/bvp_simp.ax').
include('incl/bvi.ax').
include('incl/bvp_space.ax').
include('incl/bvi_to_bvp.ax').
include('incl/evalProps.ax').
include('incl/determ.ax').
include('incl/bigClock.ax').
include('incl/interp.ax').
include('incl/funBigStepEquiv.ax').
include('incl/conLang.ax').
include('incl/exhLang.ax').
include('incl/dec_to_exh.ax').
include('incl/patLang.ax').
include('incl/pat_to_clos.ax').
include('incl/bvl_jump.ax').
include('incl/clos_call.ax').
include('incl/clos_remove.ax').
include('incl/clos_mti.ax').
include('incl/clos_to_bvl.ax').
include('incl/bvl_inline.ax').
include('incl/asmSem.ax').
include('incl/asmProps.ax').
include('incl/targetSem.ax').
include('incl/typeSoundInvariants.ax').
include('incl/typeSysProps.ax').
include('incl/bvl_handle.ax').
include('incl/bvl_const.ax').
include('incl/bvl_to_bvi.ax').
include('incl/modLang.ax').
include('incl/mod_to_con.ax').
include('incl/bigSmallInvariants.ax').
include('incl/con_to_dec.ax').
include('incl/targetProps.ax').
include('incl/weakening.ax').
include('incl/bigSmallEquiv.ax').
include('incl/untypedSafety.ax').
include('incl/funBigStepProps.ax').
include('incl/source_to_mod.ax').
include('incl/semantics.ax').
include('incl/initSemEnv.ax').
include('incl/typeSound.ax').
include('incl/wordLang.ax').
include('incl/exh_to_pat.ax').
include('incl/wordSem.ax').
include('incl/labSem.ax').
include('incl/semanticsProps.ax').
include('incl/labProps.ax').
include('incl/closSem.ax').
include('incl/closProps.ax').
include('incl/patSem.ax').
include('incl/modSem.ax').
include('incl/bvlSem.ax').
include('incl/bviSem.ax').
include('incl/bvlProps.ax').
include('incl/bvpSem.ax').
include('incl/exhSem.ax').
include('incl/conSem.ax').
include('incl/decSem.ax').
include('incl/conProps.ax').
include('incl/decProps.ax').
include('incl/exhProps.ax').
include('incl/modProps.ax').
fof('thm.patProps.evaluate_lit', axiom, ![V_27A_27]: ![V_27s_27, V_27l_27, V_27env_27]: s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27A_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Lit_1'(s('type.ast.lit',V_27l_27))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(V_27A_27),V_27s_27),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',V_27l_27))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))))).
fof('thm.patProps.Boolv_|49||49|', axiom, ![V_27b2_27, V_27b_7c49_7c_27]: (s('type.patSem.v','const.patSem.Boolv_1'(s('bool',V_27b_7c49_7c_27))) = s('type.patSem.v','const.patSem.Boolv_1'(s('bool',V_27b2_27))) <=> s('bool',V_27b_7c49_7c_27) = s('bool',V_27b2_27))).
fof('thm.patProps.Boolv_disjoint', axiom, (s('type.patSem.v','const.patSem.Boolv_1'(s('bool','T_0'))) = s('type.patSem.v','const.patSem.Boolv_1'(s('bool','F_0'))) <=> p(s('bool','F_0')))).
fof('thm.patProps.evaluate_Con_nil', axiom, ![V_27A_27]: ![V_27x_27, V_27s_27, V_27env_27]: s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27A_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Con_2'(s('type.num.num',V_27x_27),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(V_27A_27),V_27s_27),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',V_27x_27),s('type.list.list'('type.patSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.patSem.v'),'const.list.NIL_0')))))))).
fof('ARITY_0_1_const.patProps.no_closures', axiom, ![VV0]: s('bool','happ'(s('fun'('type.patSem.v','bool'),'const.patProps.no_closures_0'),s('type.patSem.v',VV0))) = s('bool','const.patProps.no_closures_1'(s('type.patSem.v',VV0)))).
fof('_dst_x01x00x10x00x00x00x10_ax', axiom, ![VA2,VA,VA3,VA4,VA5,VA6,VA7,VA8,VA1]: ![V__x, V__0, V__1, V__2, V__3, V__4, V__5, V__z]: s('fun'(VA2,VA),'happ'(s('fun'(VA1,'fun'(VA2,VA)),'_dst_x01x00x10x00x00x00x10_7'(s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,'fun'(VA8,VA))))))),V__x),s(VA3,V__0),s('fun'(VA1,VA4),V__1),s(VA5,V__2),s(VA6,V__3),s(VA7,V__4),s('fun'(VA1,VA8),V__5))),s(VA1,V__z))) = s('fun'(VA2,VA),'_dst_x1x0x0x0x0x0x0_7'(s('fun'(VA2,'fun'(VA3,'fun'(VA4,'fun'(VA5,'fun'(VA6,'fun'(VA7,'fun'(VA8,VA))))))),V__x),s(VA3,V__0),s(VA4,'happ'(s('fun'(VA1,VA4),V__1),s(VA1,V__z))),s(VA5,V__2),s(VA6,V__3),s(VA7,V__4),s(VA8,'happ'(s('fun'(VA1,VA8),V__5),s(VA1,V__z)))))).
fof('thm.patProps.no_closures_primitive_def', axiom, s('fun'('type.patSem.v','bool'),'const.patProps.no_closures_0') = s('fun'('type.patSem.v','bool'),'const.relation.WFREC_2'(s('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'const.min.@_1'(s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'bool'),'const.relation.WF_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'bool'),'_dst_x0x1x1_3'(s('fun'('bool','fun'('bool','bool')),'|slash||bslash|_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.num.num','bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.num.num','bool')),'_dst_x00x11_2'(s('fun'('fun'('type.list.list'('type.patSem.v'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patSem.v'),'bool'))),'_dst_x000x111_2'(s('fun'('fun'('type.patSem.v','bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')))),'_dst_x0000x0011x1111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')),'_dst_x01x10_2'(s('fun'('type.patSem.v','fun'('fun'('type.patSem.v','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.num.num','fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')))),'_dst_x1001x0110_2'(s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.patSem.v','fun'('type.patSem.v','bool'))),'_i_0_0'),s('fun'('type.num.num','fun'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.Conv_0'))))))))))),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'bool'),'_dst_x0x1_2'(s('fun'('fun'('type.list.list'('type.patSem.v'),'bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.list.list'('type.patSem.v'),'bool')),'_dst_x00x11_2'(s('fun'('fun'('type.patSem.v','bool'),'bool'),'!_0'),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool'))),'_dst_x000x011x111_3'(s('fun'('bool','fun'('bool','bool')),'==>_0'),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')),'_dst_x01x10_2'(s('fun'('type.patSem.v','fun'('fun'('type.patSem.v','bool'),'bool')),'const.bool.IN_0'),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool')),'const.list.LIST_TO_SET_0'))),s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.v','bool'))),'_dst_x101x010_2'(s('fun'('fun'('type.patSem.v','fun'('type.patSem.v','bool')),'fun'('type.patSem.v','fun'('type.patSem.v','bool'))),'_i_0_0'),s('fun'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.patSem.Vectorv_0'))))))))))))))),s('fun'('fun'('type.patSem.v','bool'),'fun'('type.patSem.v','bool')),'_dst_x01x00x10x00x00x00x10_7'(s('fun'('type.patSem.v','fun'('fun'('type.ast.lit','bool'),'fun'('fun'('type.num.num','fun'('type.list.list'('type.patSem.v'),'bool')),'fun'('fun'('type.list.list'('type.patSem.v'),'fun'('type.patLang.exp','bool')),'fun'('fun'('type.list.list'('type.patSem.v'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','bool'))),'fun'('fun'('type.num.num','bool'),'fun'('fun'('type.list.list'('type.patSem.v'),'bool'),'bool'))))))),'const.patSem.v_CASE_0'),s('fun'('type.ast.lit','bool'),'_dst_x0_1'(s('bool','happ'(s('fun'('bool','bool'),'const.combin.I_0'),s('bool','T_0'))))),s('fun'('fun'('type.patSem.v','bool'),'fun'('type.num.num','fun'('type.list.list'('type.patSem.v'),'bool'))),'_dst_x000x101_2'(s('fun'('bool','bool'),'const.combin.I_0'),s('fun'('fun'('type.patSem.v','bool'),'fun'('type.list.list'('type.patSem.v'),'bool')),'_dst_x0x1_2'(s('fun'('fun'('type.patSem.v','bool'),'fun'('type.list.list'('type.patSem.v'),'bool')),'const.list.EVERY_0'),s('fun'('fun'('type.patSem.v','bool'),'fun'('type.patSem.v','bool')),'_i_0_0'))))),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patLang.exp','bool')),'_dst_x0_1'(s('fun'('type.patLang.exp','bool'),'_dst_x0_1'(s('bool','happ'(s('fun'('bool','bool'),'const.combin.I_0'),s('bool','F_0'))))))),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','bool'))),'_dst_x0_1'(s('fun'('type.list.list'('type.patLang.exp'),'fun'('type.num.num','bool')),'_dst_x0_1'(s('fun'('type.num.num','bool'),'_dst_x0_1'(s('bool','happ'(s('fun'('bool','bool'),'const.combin.I_0'),s('bool','F_0'))))))))),s('fun'('type.num.num','bool'),'_dst_x0_1'(s('bool','happ'(s('fun'('bool','bool'),'const.combin.I_0'),s('bool','T_0'))))),s('fun'('fun'('type.patSem.v','bool'),'fun'('type.list.list'('type.patSem.v'),'bool')),'_dst_x00x11_2'(s('fun'('bool','bool'),'const.combin.I_0'),s('fun'('fun'('type.patSem.v','bool'),'fun'('type.list.list'('type.patSem.v'),'bool')),'_dst_x0x1_2'(s('fun'('fun'('type.patSem.v','bool'),'fun'('type.list.list'('type.patSem.v'),'bool')),'const.list.EVERY_0'),s('fun'('fun'('type.patSem.v','bool'),'fun'('type.patSem.v','bool')),'_i_0_0')))))))))).
fof('thm.patProps.patProps_5_prove_ltb', axiom, ![V_27a_27]: ((?[V_27v_7c48_7c_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',V_27v_7c48_7c_27))) | (?[V_27v_7c49_7c_27, V_27vs_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',V_27v_7c49_7c_27),s('type.list.list'('type.patSem.v'),V_27vs_27))) | (?[V_27v2_27, V_27v3_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),V_27v2_27),s('type.patLang.exp',V_27v3_27))) | (?[V_27v4_27, V_27v5_27, V_27v6_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),V_27v4_27),s('type.list.list'('type.patLang.exp'),V_27v5_27),s('type.num.num',V_27v6_27))) | (?[V_27v7_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',V_27v7_27))) | ?[V_27vs_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),V_27vs_27)))))))) => (?[V_27v_7c48_7c_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',V_27v_7c48_7c_27))) | (?[V_27v_7c49_7c_27, V_27vs_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',V_27v_7c49_7c_27),s('type.list.list'('type.patSem.v'),V_27vs_27))) | (?[V_27v2_27, V_27v3_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),V_27v2_27),s('type.patLang.exp',V_27v3_27))) | (?[V_27v4_27, V_27v5_27, V_27v6_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),V_27v4_27),s('type.list.list'('type.patLang.exp'),V_27v5_27),s('type.num.num',V_27v6_27))) | (?[V_27v7_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',V_27v7_27))) | ?[V_27vs_27]: s('type.patSem.v',V_27a_27) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),V_27vs_27)))))))))).
fof('thm.patProps.no_closures_ind', axiom, ![V_27P_27]: ((![V_27v_7c48_7c_27]: p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',V_27v_7c48_7c_27)))))) & (![V_27v_7c49_7c_27, V_27vs_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patSem.v',V_27a_27),s('fun'('type.patSem.v','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patSem.v'),V_27vs_27)))))) => p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',V_27v_7c49_7c_27),s('type.list.list'('type.patSem.v'),V_27vs_27))))))) & (![V_27v2_27, V_27v3_27]: p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),V_27v2_27),s('type.patLang.exp',V_27v3_27)))))) & (![V_27v4_27, V_27v5_27, V_27v6_27]: p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),V_27v4_27),s('type.list.list'('type.patLang.exp'),V_27v5_27),s('type.num.num',V_27v6_27)))))) & (![V_27v7_27]: p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',V_27v7_27)))))) & ![V_27vs_27]: (![V_27a_27]: (p(s('bool','const.bool.IN_2'(s('type.patSem.v',V_27a_27),s('fun'('type.patSem.v','bool'),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.patSem.v'),V_27vs_27)))))) => p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v',V_27a_27))))) => p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),V_27vs_27)))))))))))) => ![V_27v_27]: p(s('bool','happ'(s('fun'('type.patSem.v','bool'),V_27P_27),s('type.patSem.v',V_27v_27)))))).
fof('thm.patProps.no_closures_def|split|0', axiom, ![V_27v_7c48_7c_27]: s('bool','const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit',V_27v_7c48_7c_27))))) = s('bool','T_0')).
fof('thm.patProps.no_closures_def|split|1', axiom, ![V_27vs_27, V_27v_7c49_7c_27]: s('bool','happ'(s('fun'('type.patSem.v','bool'),'const.patProps.no_closures_0'),s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',V_27v_7c49_7c_27),s('type.list.list'('type.patSem.v'),V_27vs_27))))) = s('bool','const.list.EVERY_2'(s('fun'('type.patSem.v','bool'),'const.patProps.no_closures_0'),s('type.list.list'('type.patSem.v'),V_27vs_27)))).
fof('thm.patProps.no_closures_def|split|2', axiom, ![V_27v3_27, V_27v2_27]: s('bool','const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),V_27v2_27),s('type.patLang.exp',V_27v3_27))))) = s('bool','F_0')).
fof('thm.patProps.no_closures_def|split|3', axiom, ![V_27v6_27, V_27v5_27, V_27v4_27]: s('bool','const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),V_27v4_27),s('type.list.list'('type.patLang.exp'),V_27v5_27),s('type.num.num',V_27v6_27))))) = s('bool','F_0')).
fof('thm.patProps.no_closures_def|split|4', axiom, ![V_27v7_27]: s('bool','const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',V_27v7_27))))) = s('bool','T_0')).
fof('thm.patProps.no_closures_def|split|5', axiom, ![V_27vs_27]: s('bool','happ'(s('fun'('type.patSem.v','bool'),'const.patProps.no_closures_0'),s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),V_27vs_27))))) = s('bool','const.list.EVERY_2'(s('fun'('type.patSem.v','bool'),'const.patProps.no_closures_0'),s('type.list.list'('type.patSem.v'),V_27vs_27)))).
fof('thm.patProps.no_closures_Boolv', axiom, ![V_27b_27]: p(s('bool','const.patProps.no_closures_1'(s('type.patSem.v','const.patSem.Boolv_1'(s('bool',V_27b_27))))))).
fof('thm.patProps.evaluate_raise_rval', axiom, ![V_27A_27]: ![V_27env_27, V_27s_27, V_27e_27, V_27s_7c39_7c_27, V_27v_27]: ~ (s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27A_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Raise_1'(s('type.patLang.exp',V_27e_27))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(V_27A_27),V_27s_7c39_7c_27),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),V_27v_27))))))).
fof('thm.patProps.evaluate_length', axiom, ![V_27A_27]: ![V_27env_27, V_27s_27, V_27ls_27, V_27s_7c39_7c_27, V_27vs_27]: (s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27A_27),V_27s_27),s('type.list.list'('type.patLang.exp'),V_27ls_27))) = s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(V_27A_27),V_27s_7c39_7c_27),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),V_27vs_27))))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patSem.v'),V_27vs_27))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.patLang.exp'),V_27ls_27))))).
fof('thm.patProps.evaluate_cons', axiom, ![V_27A_27]: ![V_27s_27, V_27es_27, V_27env_27, V_27e_27]: s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'happ'(s('fun'('type.list.list'('type.patLang.exp'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'))),'happ'(s('fun'('type.patSem.state'(V_27A_27),'fun'('type.list.list'('type.patLang.exp'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')))),'const.patSem.evaluate_1'(s('type.list.list'('type.patSem.v'),V_27env_27))),s('type.patSem.state'(V_27A_27),V_27s_27))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',V_27e_27),s('type.list.list'('type.patLang.exp'),V_27es_27))))) = s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'happ'(s('fun'('fun'('type.patSem.state'(V_27A_27),'fun'('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')))),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'))),'happ'(s('fun'('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'fun'('fun'('type.patSem.state'(V_27A_27),'fun'('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')))),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')))),'const.pair.pair_CASE_0'),s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'happ'(s('fun'('type.list.list'('type.patLang.exp'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'))),'happ'(s('fun'('type.patSem.state'(V_27A_27),'fun'('type.list.list'('type.patLang.exp'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')))),'const.patSem.evaluate_1'(s('type.list.list'('type.patSem.v'),V_27env_27))),s('type.patSem.state'(V_27A_27),V_27s_27))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',V_27e_27),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),s('fun'('type.patSem.state'(V_27A_27),'fun'('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')))),'_dst_x01x10x10_3'(s('fun'('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'fun'('fun'('type.list.list'('type.patSem.v'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'))),'fun'('fun'('type.semanticPrimitives.error_result'('type.patSem.v'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'))),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'))))),'const.semanticPrimitives.result_CASE_0'),s('fun'('type.patSem.state'(V_27A_27),'fun'('type.list.list'('type.patSem.v'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')))),'_dst_x00x10x01_3'(s('fun'('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'fun'('fun'('type.patSem.state'(V_27A_27),'fun'('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')))),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')))),'const.pair.pair_CASE_0'),s('fun'('type.patSem.state'(V_27A_27),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'))),'_dst_x1x0_2'(s('fun'('type.patSem.state'(V_27A_27),'fun'('type.list.list'('type.patLang.exp'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')))),'const.patSem.evaluate_1'(s('type.list.list'('type.patSem.v'),V_27env_27))),s('type.list.list'('type.patLang.exp'),V_27es_27))),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.state'(V_27A_27),'fun'('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'))))),'_dst_x001x110x010_3'(s('fun'('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'fun'('fun'('type.list.list'('type.patSem.v'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'))),'fun'('fun'('type.semanticPrimitives.error_result'('type.patSem.v'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'))),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'))))),'const.semanticPrimitives.result_CASE_0'),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.patSem.state'(V_27A_27),'fun'('type.list.list'('type.patSem.v'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'))))),'_dst_x000x010x101_3'(s('fun'('type.patSem.state'(V_27A_27),'fun'('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')))),'const.pair.,_0'),s('fun'('type.patSem.state'(V_27A_27),'type.patSem.state'(V_27A_27)),'_i_0_0'),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.list.list'('type.patSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'))),'_dst_x00x11_2'(s('fun'('type.list.list'('type.patSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.semanticPrimitives.Rval_0'),s('fun'('type.list.list'('type.patSem.v'),'fun'('type.list.list'('type.patSem.v'),'type.list.list'('type.patSem.v'))),'const.list.APPEND_0'))))),s('fun'('type.patSem.state'(V_27A_27),'fun'('type.semanticPrimitives.error_result'('type.patSem.v'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')))),'_dst_x00x10x01_3'(s('fun'('type.patSem.state'(V_27A_27),'fun'('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')))),'const.pair.,_0'),s('fun'('type.patSem.state'(V_27A_27),'type.patSem.state'(V_27A_27)),'_i_0_0'),s('fun'('type.semanticPrimitives.error_result'('type.patSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.semanticPrimitives.Rerr_0'))))))),s('fun'('type.patSem.state'(V_27A_27),'fun'('type.semanticPrimitives.error_result'('type.patSem.v'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')))),'_dst_x00x10x01_3'(s('fun'('type.patSem.state'(V_27A_27),'fun'('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')))),'const.pair.,_0'),s('fun'('type.patSem.state'(V_27A_27),'type.patSem.state'(V_27A_27)),'_i_0_0'),s('fun'('type.semanticPrimitives.error_result'('type.patSem.v'),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.semanticPrimitives.Rerr_0')))))))).
fof('thm.patProps.evaluate_sing', conjecture, ![V_27A_27]: ![V_27vs_27, V_27s_7c39_7c_27, V_27s_27, V_27env_27, V_27e_27]: (s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),V_27env_27),s('type.patSem.state'(V_27A_27),V_27s_27),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp',V_27e_27),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(V_27A_27),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(V_27A_27),V_27s_7c39_7c_27),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.patSem.v'),V_27vs_27))))) => ?[V_27y_27]: s('type.list.list'('type.patSem.v'),V_27vs_27) = s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',V_27y_27),s('type.list.list'('type.patSem.v'),'const.list.NIL_0'))))).
