include('incl/logic.ax').
include('incl/bool.ax').
include('incl/marker.ax').
include('incl/num.ax').
include('incl/combin.ax').
include('incl/normalForms.ax').
include('incl/sat.ax').
include('incl/relation.ax').
include('incl/pair.ax').
include('incl/prim_rec.ax').
include('incl/arithmetic.ax').
include('incl/numeral.ax').
include('incl/ConseqConv.ax').
include('incl/sum.ax').
include('incl/one.ax').
include('incl/option.ax').
include('incl/while.ax').
include('incl/operator.ax').
include('incl/basicSize.ax').
include('incl/numpair.ax').
include('incl/pred_set.ax').
include('incl/ind_type.ax').
include('incl/list.ax').
include('incl/rich_list.ax').
include('incl/quantHeuristics.ax').
include('incl/fcp.ax').
include('incl/logroot.ax').
include('incl/bit.ax').
include('incl/string.ax').
include('incl/numposrep.ax').
include('incl/ASCIInumbers.ax').
include('incl/numeral_bit.ax').
include('incl/sum_num.ax').
include('incl/words.ax').
include('incl/alignment.ax').
include('incl/sorting.ax').
include('incl/finite_map.ax').
include('incl/alist.ax').
include('incl/sptree.ax').
include('incl/indexedLists.ax').
include('incl/res_quan.ax').
include('incl/quotient.ax').
include('incl/quotient_list.ax').
include('incl/set_sep.ax').
include('incl/set_relation.ax').
include('incl/wot.ax').
include('incl/toto.ax').
include('incl/comparison.ax').
include('incl/llist.ax').
include('incl/misc.ax').
include('incl/quotient_pair.ax').
include('incl/quotient_sum.ax').
include('incl/divides.ax').
include('incl/gcd.ax').
include('incl/quotient_option.ax').
include('incl/integer.ax').
include('incl/Omega.ax').
include('incl/int_arith.ax').
include('incl/integer_word.ax').
include('incl/lib.ax').
include('incl/ffi.ax').
include('incl/grammar.ax').
include('incl/peg.ax').
include('incl/pegexec.ax').
include('incl/state_transformer.ax').
include('incl/lprefix_lub.ax').
include('incl/tokens.ax').
include('incl/gram.ax').
include('incl/ast.ax').
include('incl/asm.ax').
include('incl/semanticPrimitives.ax').
include('incl/reg_alloc.ax').
include('incl/typeSystem.ax').
include('incl/funBigStep.ax').
include('incl/termination.ax').
include('incl/labLang.ax').
include('incl/lab_filter.ax').
include('incl/lab_to_target.ax').
include('incl/closLang.ax').
include('incl/bvl.ax').
include('incl/bvp.ax').
include('incl/bvp_live.ax').
include('incl/smallStep.ax').
include('incl/bigStep.ax').
include('incl/db_vars.ax').
include('incl/clos_free.ax').
include('incl/clos_annotate.ax').
include('incl/clos_number.ax').
include('incl/tokenUtils.ax').
include('incl/cmlPtreeConversion.ax').
include('incl/lexer_fun.ax').
include('incl/NTproperties.ax').
include('incl/initialProgram.ax').
include('incl/bvp_simp.ax').
include('incl/bvi.ax').
include('incl/bvp_space.ax').
include('incl/bvi_to_bvp.ax').
include('incl/evalProps.ax').
include('incl/determ.ax').
include('incl/bigClock.ax').
include('incl/interp.ax').
include('incl/funBigStepEquiv.ax').
include('incl/conLang.ax').
include('incl/exhLang.ax').
include('incl/dec_to_exh.ax').
include('incl/patLang.ax').
include('incl/pat_to_clos.ax').
include('incl/bvl_jump.ax').
include('incl/clos_call.ax').
include('incl/clos_remove.ax').
include('incl/clos_mti.ax').
include('incl/clos_to_bvl.ax').
include('incl/bvl_inline.ax').
include('incl/asmSem.ax').
include('incl/asmProps.ax').
include('incl/targetSem.ax').
include('incl/typeSoundInvariants.ax').
include('incl/typeSysProps.ax').
include('incl/bvl_handle.ax').
include('incl/bvl_const.ax').
include('incl/bvl_to_bvi.ax').
include('incl/modLang.ax').
include('incl/mod_to_con.ax').
include('incl/bigSmallInvariants.ax').
include('incl/con_to_dec.ax').
include('incl/targetProps.ax').
include('incl/weakening.ax').
include('incl/bigSmallEquiv.ax').
include('incl/untypedSafety.ax').
include('incl/funBigStepProps.ax').
include('incl/source_to_mod.ax').
include('incl/semantics.ax').
include('incl/initSemEnv.ax').
include('incl/typeSound.ax').
include('incl/wordLang.ax').
include('incl/exh_to_pat.ax').
include('incl/wordSem.ax').
include('incl/labSem.ax').
include('incl/semanticsProps.ax').
include('incl/labProps.ax').
include('incl/closSem.ax').
include('incl/closProps.ax').
include('incl/patSem.ax').
include('incl/modSem.ax').
include('incl/bvlSem.ax').
include('incl/bviSem.ax').
include('incl/bvlProps.ax').
include('incl/bvpSem.ax').
include('incl/exhSem.ax').
include('incl/conSem.ax').
include('incl/decSem.ax').
include('incl/conProps.ax').
include('incl/decProps.ax').
include('incl/exhProps.ax').
include('incl/modProps.ax').
include('incl/patProps.ax').
include('incl/reg_allocProof.ax').
include('incl/bviProps.ax').
include('incl/bvpProps.ax').
include('incl/bvp_simpProof.ax').
include('incl/bvp_spaceProof.ax').
include('incl/bvl_jumpProof.ax').
include('incl/wellorder.ax').
include('incl/cardinal.ax').
include('incl/hrat.ax').
include('incl/hreal.ax').
include('incl/realax.ax').
include('incl/real.ax').
include('incl/topology.ax').
include('incl/nets.ax').
include('incl/seq.ax').
include('incl/lim.ax').
include('incl/powser.ax').
include('incl/transc.ax').
include('incl/intreal.ax').
include('incl/binary_ieee.ax').
include('incl/tailrec.ax').
include('incl/prog.ax').
include('incl/temporal.ax').
include('incl/address.ax').
include('incl/state.ax').
include('incl/temporal_state.ax').
include('incl/machine_ieee.ax').
include('incl/bitstring.ax').
include('incl/arm.ax').
include('incl/blast.ax').
include('incl/update.ax').
include('incl/arm_step.ax').
include('incl/arm6_target.ax').
include('incl/arm6_eval_encode.ax').
include('incl/mlstring.ax').
include('incl/patternMatches.ax').
include('incl/ml_translator.ax').
include('incl/ml_optimise.ax').
include('incl/ml_pmatch.ax').
include('incl/mini_prelude.ax').
include('incl/bag.ax').
include('incl/benchmark.ax').
include('incl/arm8.ax').
include('incl/arm8_step.ax').
include('incl/clos_relation.ax').
include('incl/clos_relationProps.ax').
include('incl/clos_removeProof.ax').
include('incl/simpleSexp.ax').
include('incl/fromSexp.ax').
include('incl/word_inst.ax').
include('incl/word_alloc.ax').
include('incl/word_remove.ax').
include('incl/word_to_word.ax').
include('incl/stackLang.ax').
include('incl/bvp_to_word.ax').
include('incl/stack_alloc.ax').
include('incl/riscv.ax').
include('incl/riscv_step.ax').
include('incl/std_prelude.ax').
include('incl/holSyntaxLib.ax').
include('incl/holSyntax.ax').
include('incl/holSyntaxExtra.ax').
include('incl/ml_module_demo.ax').
include('incl/bvp_liveProof.ax').
include('incl/PhysicistsQueue.ax').
include('incl/holBoolSyntax.ax').
include('incl/holAxiomsSyntax.ax').
include('incl/setSpec.ax').
include('incl/holSemantics.ax').
include('incl/holSemanticsExtra.ax').
include('incl/holBool.ax').
include('incl/commonUnif.ax').
include('incl/term.ax').
include('incl/subst.ax').
include('incl/walk.ax').
include('incl/walkstar.ax').
include('incl/unifDef.ax').
include('incl/unifProps.ax').
include('incl/redUnif.ax').
include('incl/parmove.ax').
include('incl/word_to_stack.ax').
include('incl/bvl_inlineProof.ax').
include('incl/clos_known.ax').
include('incl/clos_knownProof.ax').
include('incl/okasaki_misc.ax').
include('incl/UnbalancedSet.ax').
include('incl/mips.ax').
include('incl/mips_step.ax').
include('incl/mips_target.ax').
include('incl/mips_target_correct.ax').
include('incl/bvl_constProof.ax').
include('incl/int_bitwise.ax').
include('incl/copying_gc.ax').
include('incl/bvp_to_wordProps.ax').
include('incl/jrhSet.ax').
include('incl/BankersQueue.ax').
include('incl/cmlPEG.ax').
include('incl/clos_numberProof.ax').
include('incl/cmlParse.ax').
include('incl/holKernel.ax').
include('incl/reader.ax').
include('incl/x64.ax').
include('incl/source_to_modProof.ax').
include('incl/collapse.ax').
include('incl/infer_t.ax').
include('incl/unify.ax').
include('incl/infer.ax').
include('incl/inferProps.ax').
include('incl/infer_eComplete.ax').
include('incl/bvl_handleProof.ax').
include('incl/dec_to_exhProof.ax').
include('incl/regexpMatch.ax').
include('incl/ninetyOne.ax').
include('incl/example_91.ax').
include('incl/arm8_target.ax').
include('incl/BatchedQueue.ax').
include('incl/stack_remove.ax').
include('incl/stack_names.ax').
include('incl/stack_to_lab.ax').
include('incl/backend.ax').
include('incl/compiler.ax').
include('incl/ImplicitQueue.ax').
include('incl/stackSem.ax').
include('incl/gramProps.ax').
include('incl/pegSound.ax').
include('incl/holKernelProof.ax').
include('incl/pegComplete.ax').
fof('thm.cmlPtreeConversionProps.ptree_head_TOK|split|0', axiom, ![V_27B_27,V_27A_27]: ![V_27sym_27, V_27pt_27]: (s('type.grammar.symbol'(V_27A_27,V_27B_27),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27pt_27))) = s('type.grammar.symbol'(V_27A_27,V_27B_27),'const.grammar.TOK_1'(s(V_27A_27,V_27sym_27))) <=> s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27pt_27) = s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.grammar.Lf_1'(s('type.grammar.symbol'(V_27A_27,V_27B_27),'const.grammar.TOK_1'(s(V_27A_27,V_27sym_27))))))).
fof('thm.cmlPtreeConversionProps.ptree_head_TOK|split|1', axiom, ![V_27B_27,V_27A_27]: ![V_27sym_27, V_27pt_27]: (s('type.grammar.symbol'(V_27A_27,V_27B_27),'const.grammar.TOK_1'(s(V_27A_27,V_27sym_27))) = s('type.grammar.symbol'(V_27A_27,V_27B_27),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27pt_27))) <=> s('type.grammar.parsetree'(V_27A_27,V_27B_27),V_27pt_27) = s('type.grammar.parsetree'(V_27A_27,V_27B_27),'const.grammar.Lf_1'(s('type.grammar.symbol'(V_27A_27,V_27B_27),'const.grammar.TOK_1'(s(V_27A_27,V_27sym_27))))))).
fof('thm.cmlPtreeConversionProps.UQTyOp_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQTyOp_0'))))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))))) => ?[V_27utyop_27]: s('type.option.option'('type.list.list'('type.string.char')),'const.cmlPtreeConversion.ptree_UQTyop_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),V_27utyop_27))))).
fof('thm.cmlPtreeConversionProps.TyOp_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyOp_0'))))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))))) => ?[V_27tyop_27]: s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.cmlPtreeConversion.ptree_Tyop_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.ast.id'('type.list.list'('type.string.char')),V_27tyop_27))))).
fof('thm.cmlPtreeConversionProps.TyvarN_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyvarN_0'))))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))))) => ?[V_27tyvn_27]: s('type.option.option'('type.list.list'('type.string.char')),'const.cmlPtreeConversion.ptree_TyvarN_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),V_27tyvn_27))))).
fof('ARITY_3_4_const.cmlPtreeConversion.ptree_linfix', axiom, ![V_27A_27]: ![VV0, VV1, VV2, VV3]: s('type.option.option'('type.list.list'(V_27A_27)),'happ'(s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.option.option'('type.list.list'(V_27A_27))),'const.cmlPtreeConversion.ptree_linfix_3'(s('type.gram.MMLnonT',VV0),s('type.tokens.token',VV1),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.option.option'(V_27A_27)),VV2))),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),VV3))) = s('type.option.option'('type.list.list'(V_27A_27)),'const.cmlPtreeConversion.ptree_linfix_4'(s('type.gram.MMLnonT',VV0),s('type.tokens.token',VV1),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.option.option'(V_27A_27)),VV2),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),VV3)))).
fof('thm.cmlPtreeConversionProps.TyVarList_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'))))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))))) => ?[V_27tyvnms_27]: s('type.option.option'('type.list.list'('type.list.list'('type.string.char'))),'const.cmlPtreeConversion.ptree_linfix_4'(s('type.gram.MMLnonT','const.gram.nTyVarList_0'),s('type.tokens.token','const.tokens.CommaT_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.option.option'('type.list.list'('type.string.char'))),'const.cmlPtreeConversion.ptree_TyvarN_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.list.list'('type.list.list'('type.string.char')),V_27tyvnms_27))))).
fof('thm.cmlPtreeConversionProps.TypeName_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeName_0'))))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))))) => ?[V_27tn_27]: s('type.option.option'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char'))),'const.cmlPtreeConversion.ptree_TypeName_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.string.char')),V_27tn_27))))).
fof('thm.cmlPtreeConversionProps.tuplify_OK', axiom, ![V_27tl_27]: (~ (s('type.list.list'('type.ast.t'),V_27tl_27) = s('type.list.list'('type.ast.t'),'const.list.NIL_0')) => ?[V_27t_27]: s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.tuplify_1'(s('type.list.list'('type.ast.t'),V_27tl_27))) = s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',V_27t_27))))).
fof('thm.cmlPtreeConversionProps.Type_OK|48|', axiom, ![V_27toks_27, V_27pt_27, V_27N_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) => (((p(s('bool','const.bool.IN_2'(s('type.gram.MMLnonT',V_27N_27),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nType_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nDType_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nTbase_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.EMPTY_0')))))))))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT',V_27N_27)))))) => ?[V_27t_27]: s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.ptree_Type_2'(s('type.gram.MMLnonT',V_27N_27),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',V_27t_27)))) & ((s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPType_0'))))) => ?[V_27tl_27]: (s('type.option.option'('type.list.list'('type.ast.t')),'const.cmlPtreeConversion.ptree_PType_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.ast.t')),'const.option.SOME_1'(s('type.list.list'('type.ast.t'),V_27tl_27))) & ~ (s('type.list.list'('type.ast.t'),V_27tl_27) = s('type.list.list'('type.ast.t'),'const.list.NIL_0')))) & ((s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList|49|_0'))))) => ?[V_27tl_27]: s('type.option.option'('type.list.list'('type.ast.t')),'const.cmlPtreeConversion.ptree_TypeList|49|_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.ast.t')),'const.option.SOME_1'(s('type.list.list'('type.ast.t'),V_27tl_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeList2_0'))))) => ?[V_27tl_27]: s('type.option.option'('type.list.list'('type.ast.t')),'const.cmlPtreeConversion.ptree_Typelist2_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.ast.t')),'const.option.SOME_1'(s('type.list.list'('type.ast.t'),V_27tl_27))))))))).
fof('thm.cmlPtreeConversionProps.Type_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nType_0'))))))) => ?[V_27t_27]: s('type.option.option'('type.ast.t'),'const.cmlPtreeConversion.ptree_Type_2'(s('type.gram.MMLnonT','const.gram.nType_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.ast.t'),'const.option.SOME_1'(s('type.ast.t',V_27t_27))))).
fof('thm.cmlPtreeConversionProps.V_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nV_0'))))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))))) => ?[V_27i_27]: s('type.option.option'('type.list.list'('type.string.char')),'const.cmlPtreeConversion.ptree_V_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),V_27i_27))))).
fof('thm.cmlPtreeConversionProps.FQV_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFQV_0'))))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))))) => ?[V_27i_27]: s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.cmlPtreeConversion.ptree_FQV_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.ast.id'('type.list.list'('type.string.char')),V_27i_27))))).
fof('thm.cmlPtreeConversionProps.UQConstructorName_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nUQConstructorName_0'))))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))))) => ?[V_27i_27]: s('type.option.option'('type.list.list'('type.string.char')),'const.cmlPtreeConversion.ptree_UQConstructorName_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),V_27i_27))))).
fof('thm.cmlPtreeConversionProps.ConstructorName_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nConstructorName_0'))))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))))) => ?[V_27i_27]: s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.cmlPtreeConversion.ptree_ConstructorName_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.ast.id'('type.list.list'('type.string.char')),V_27i_27))))).
fof('thm.cmlPtreeConversionProps.Ops_OK|48|', axiom, ![V_27toks_27, V_27pt_27, V_27N_27]: ((p(s('bool','const.bool.IN_2'(s('type.gram.MMLnonT',V_27N_27),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nMultOps_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nAddOps_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nListOps_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nRelOps_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nCompOps_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.EMPTY_0')))))))))))))) & (p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT',V_27N_27)))))))) => ?[V_27opv_27]: s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.cmlPtreeConversion.ptree_Op_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.ast.id'('type.list.list'('type.string.char')),V_27opv_27))))).
fof('thm.cmlPtreeConversionProps.cmlPtreeConversionProps_|49|4_prove_ltb', axiom, ![V_27l_7c49_7c_27, V_27l2_27]: (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27l_7c49_7c_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27l2_27))) <=> s('type.list.list'('type.tokens.token'),V_27l_7c49_7c_27) = s('type.list.list'('type.tokens.token'),V_27l2_27))).
fof('thm.cmlPtreeConversionProps.Pattern_OK|48|', axiom, ![V_27toks_27, V_27pt_27, V_27N_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) => (((p(s('bool','const.bool.IN_2'(s('type.gram.MMLnonT',V_27N_27),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nPattern_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nPtuple_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nPapp_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nPbase_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.EMPTY_0')))))))))))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT',V_27N_27)))))) => ?[V_27p_27]: s('type.option.option'('type.ast.pat'),'const.cmlPtreeConversion.ptree_Pattern_2'(s('type.gram.MMLnonT',V_27N_27),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.ast.pat'),'const.option.SOME_1'(s('type.ast.pat',V_27p_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPatternList_0'))))) => ?[V_27pl_27]: (s('type.option.option'('type.list.list'('type.ast.pat')),'const.cmlPtreeConversion.ptree_Plist_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.ast.pat')),'const.option.SOME_1'(s('type.list.list'('type.ast.pat'),V_27pl_27))) & ~ (s('type.list.list'('type.ast.pat'),V_27pl_27) = s('type.list.list'('type.ast.pat'),'const.list.NIL_0'))))))).
fof('thm.cmlPtreeConversionProps.Pattern_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPattern_0'))))))) => ?[V_27p_27]: s('type.option.option'('type.ast.pat'),'const.cmlPtreeConversion.ptree_Pattern_2'(s('type.gram.MMLnonT','const.gram.nPattern_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.ast.pat'),'const.option.SOME_1'(s('type.ast.pat',V_27p_27))))).
fof('thm.cmlPtreeConversionProps.Eseq_encode_OK', axiom, ![V_27l_27]: (~ (s('type.list.list'('type.ast.exp'),V_27l_27) = s('type.list.list'('type.ast.exp'),'const.list.NIL_0')) => ?[V_27e_27]: s('type.option.option'('type.ast.exp'),'const.cmlPtreeConversion.Eseq_encode_1'(s('type.list.list'('type.ast.exp'),V_27l_27))) = s('type.option.option'('type.ast.exp'),'const.option.SOME_1'(s('type.ast.exp',V_27e_27))))).
fof('thm.cmlPtreeConversionProps.OpID_OK', axiom, ![V_27toks_27, V_27pt_27]: ((s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nOpID_0'))))) & (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) & p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))))) => ?[V_27astv_27]: s('type.option.option'('type.ast.exp'),'const.cmlPtreeConversion.ptree_OpID_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.ast.exp'),'const.option.SOME_1'(s('type.ast.exp',V_27astv_27))))).
fof('thm.cmlPtreeConversionProps.PbaseList|49|_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPbaseList|49|_0'))))))) => ?[V_27pl_27]: (s('type.option.option'('type.list.list'('type.ast.pat')),'const.cmlPtreeConversion.ptree_PbaseList|49|_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.ast.pat')),'const.option.SOME_1'(s('type.list.list'('type.ast.pat'),V_27pl_27))) & p(s('bool','const.prim_rec.<_2'(s('type.num.num','const.num.|48|_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.ast.pat'),V_27pl_27))))))))).
fof('thm.cmlPtreeConversionProps.E_OK|48|', axiom, ![V_27toks_27, V_27pt_27, V_27N_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) => (((p(s('bool','const.bool.IN_2'(s('type.gram.MMLnonT',V_27N_27),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nE|39|_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEhandle_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicOR_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElogicAND_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtuple_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEmult_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEadd_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nElistop_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nErel_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEcomp_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbefore_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEtyped_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEapp_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.INSERT_2'(s('type.gram.MMLnonT','const.gram.nEbase_0'),s('fun'('type.gram.MMLnonT','bool'),'const.pred_set.EMPTY_0')))))))))))))))))))))))))))))))))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT',V_27N_27)))))) => ?[V_27t_27]: s('type.option.option'('type.ast.exp'),'const.cmlPtreeConversion.ptree_Expr_2'(s('type.gram.MMLnonT',V_27N_27),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.ast.exp'),'const.option.SOME_1'(s('type.ast.exp',V_27t_27)))) & ((s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nEseq_0'))))) => ?[V_27el_27]: (s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Eseq_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),V_27el_27))) & ~ (s('type.list.list'('type.ast.exp'),V_27el_27) = s('type.list.list'('type.ast.exp'),'const.list.NIL_0')))) & ((s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPEs_0'))))) => ?[V_27pes_27]: s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.cmlPtreeConversion.ptree_PEs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp'))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),V_27pes_27)))) & ((s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist2_0'))))) => ?[V_27el_27]: s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist2_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),V_27el_27)))) & ((s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'))))) => ?[V_27el_27]: s('type.option.option'('type.list.list'('type.ast.exp')),'const.cmlPtreeConversion.ptree_Exprlist_2'(s('type.gram.MMLnonT','const.gram.nElist|49|_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.ast.exp')),'const.option.SOME_1'(s('type.list.list'('type.ast.exp'),V_27el_27)))) & ((s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDecs_0'))))) => ?[V_27lds_27]: s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.cmlPtreeConversion.ptree_LetDecs_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))))),'const.option.SOME_1'(s('type.list.list'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),V_27lds_27)))) & ((s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE_0'))))) => ?[V_27pe_27]: s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),V_27pe_27)))) & ((s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nPE|39|_0'))))) => ?[V_27pe_27]: s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.cmlPtreeConversion.ptree_PE|39|_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.pair.prod'('type.ast.pat','type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.ast.pat','type.ast.exp'),V_27pe_27)))) & ((s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nLetDec_0'))))) => ?[V_27ld_27]: s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.cmlPtreeConversion.ptree_LetDec_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))))),'const.option.SOME_1'(s('type.sum.sum'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),V_27ld_27)))) & ((s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))) => ?[V_27fds_27]: s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),V_27fds_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nFDecl_0'))))) => ?[V_27fd_27]: s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.cmlPtreeConversion.ptree_FDecl_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),V_27fd_27)))))))))))))))).
fof('thm.cmlPtreeConversionProps.E_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nE_0'))))))) => ?[V_27t_27]: s('type.option.option'('type.ast.exp'),'const.cmlPtreeConversion.ptree_Expr_2'(s('type.gram.MMLnonT','const.gram.nE_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.ast.exp'),'const.option.SOME_1'(s('type.ast.exp',V_27t_27))))).
fof('thm.cmlPtreeConversionProps.AndFDecls_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) & s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nAndFDecls_0'))))))) => ?[V_27fds_27]: s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.cmlPtreeConversion.ptree_AndFDecls_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),V_27fds_27))))).
fof('thm.cmlPtreeConversionProps.Dconstructor_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDconstructor_0'))))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))))) => ?[V_27dc_27]: s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))),'const.cmlPtreeConversion.ptree_Dconstructor_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')),V_27dc_27))))).
fof('thm.cmlPtreeConversionProps.DtypeCons_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeCons_0'))))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))))) => ?[V_27dtc_27]: s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))),'const.cmlPtreeConversion.ptree_linfix_4'(s('type.gram.MMLnonT','const.gram.nDtypeCons_0'),s('type.tokens.token','const.tokens.BarT_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))),'const.cmlPtreeConversion.ptree_Dconstructor_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))),V_27dtc_27))))).
fof('thm.cmlPtreeConversionProps.DtypeDecl_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecl_0'))))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))))) => ?[V_27dtd_27]: s('type.option.option'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),'const.cmlPtreeConversion.ptree_DtypeDecl_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))))),V_27dtd_27))))).
fof('thm.cmlPtreeConversionProps.DtypeDecls_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDtypeDecls_0'))))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))))) => ?[V_27td_27]: s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))))))),'const.cmlPtreeConversion.ptree_linfix_4'(s('type.gram.MMLnonT','const.gram.nDtypeDecls_0'),s('type.tokens.token','const.tokens.AndT_0'),s('fun'('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),'type.option.option'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))))))),'const.cmlPtreeConversion.ptree_DtypeDecl_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))))))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),V_27td_27))))).
fof('thm.cmlPtreeConversionProps.TypeDec_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeDec_0'))))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))))) => ?[V_27td_27]: s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))))))),'const.cmlPtreeConversion.ptree_TypeDec_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))))))),'const.option.SOME_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),V_27td_27))))).
fof('thm.cmlPtreeConversionProps.TypeAbbrevDec_OK', axiom, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nTypeAbbrevDec_0'))))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))))) => ?[V_27td_27]: s('type.option.option'('type.ast.dec'),'const.cmlPtreeConversion.ptree_TypeAbbrevDec_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.ast.dec'),'const.option.SOME_1'(s('type.ast.dec',V_27td_27))))).
fof('thm.cmlPtreeConversionProps.Decl_OK', conjecture, ![V_27toks_27, V_27pt_27]: ((p(s('bool','const.grammar.valid_ptree_2'(s('type.grammar.grammar'('type.tokens.token','type.gram.MMLnonT'),'const.gram.cmlG_0'),s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27)))) & (s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.ptree_head_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT'),'const.grammar.NT_1'(s('type.sum.sum'('type.gram.MMLnonT','type.num.num'),'const.sum.INL_1'(s('type.gram.MMLnonT','const.gram.nDecl_0'))))) & s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.list.MAP_2'(s('fun'('type.tokens.token','type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.TOK_0'),s('type.list.list'('type.tokens.token'),V_27toks_27))) = s('type.list.list'('type.grammar.symbol'('type.tokens.token','type.gram.MMLnonT')),'const.grammar.ptree_fringe_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))))) => ?[V_27d_27]: s('type.option.option'('type.ast.dec'),'const.cmlPtreeConversion.ptree_Decl_1'(s('type.grammar.parsetree'('type.tokens.token','type.gram.MMLnonT'),V_27pt_27))) = s('type.option.option'('type.ast.dec'),'const.option.SOME_1'(s('type.ast.dec',V_27d_27))))).
